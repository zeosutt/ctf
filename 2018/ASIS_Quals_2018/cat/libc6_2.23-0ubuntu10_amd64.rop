0x977:	add    BYTE PTR [rax],al
0x975:	and    al,0x20; 	add    BYTE PTR [rax],al
0xc32:	add    BYTE PTR [rax],al
0x1002:	add    BYTE PTR [rax],al
0x1392:	add    BYTE PTR [rax],al
0x1390:	rol    BYTE PTR [rax+rax*1],0x0
0x1a8e:	add    BYTE PTR [rax],al
0x1b2d:	jns    0x1b36
0x1b2c:	push   rcx; 	jns    0x1b36
0x1b92:	pop    rdx
0x1b96:	pop    rdx
0x1b9a:	pop    rdx
0x1b9e:	pop    rdx
0x1cba:	je     0x1ce4
0x1cb9:	push   rbp; 	je     0x1ce4
0x2057:	sbb    BYTE PTR [rdx-0x1a],dl
0x20d3:	xchg   ebp,eax
0x22e3:	adc    dh,dl
0x2317:	stos   BYTE PTR es:[rdi],al
0x2315:	add    al,0xaa
0x2314:	stos   BYTE PTR es:[rdi],al; 	add    al,0xaa
0x260b:	icebp  
0x2b87:	adc    al,0xe7
0x2b86:	cmp    dl,BYTE PTR [rdi+riz*8]
0x2b85:	sar    BYTE PTR [rdx],cl; 	adc    al,0xe7
0x2bd4:	xabort 0xf3
0x2bd3:	ret    ; 	xabort 0xf3
0x3675:	xchg   ebp,eax
0x3838:	pop    rsp
0x3836:	cmp    DWORD PTR [rsi],ecx; 	pop    rsp
0x3aa4:	mov    dl,0x1e
0x3aa2:	in     eax,0x78; 	mov    dl,0x1e
0x3afd:	cwde   
0x3afb:	adc    bh,BYTE PTR [rax]; 	cwde   
0x3bae:	xchg   ebp,eax
0x3bac:	mov    cl,0x22; 	xchg   ebp,eax
0x404e:	add    BYTE PTR [rax],al
0x404c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x45d6:	add    BYTE PTR [rax],al
0x45d4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x4756:	add    BYTE PTR [rax],al
0x4754:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x57ee:	add    BYTE PTR [rax],al
0x57ec:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x5eae:	add    BYTE PTR [rax],al
0x5eac:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x63ce:	add    BYTE PTR [rax],al
0x63cc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x69a6:	add    BYTE PTR [rax],al
0x69a4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x80d8:	nop
0x8906:	add    BYTE PTR [rax],al
0x8904:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x8d37:	add    BYTE PTR [rax],dl
0x8fce:	add    BYTE PTR [rax],al
0x8fcc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x91be:	add    BYTE PTR [rax],al
0x91bc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x920e:	add    BYTE PTR [rax],al
0x920c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x953e:	add    BYTE PTR [rax],al
0x953c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xac8e:	add    BYTE PTR [rax],al
0xac8c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xbcf0:	nop
0xc42e:	add    BYTE PTR [rax],al
0xc42c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xd34e:	add    BYTE PTR [rax],al
0xd34c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xe61e:	add    BYTE PTR [rax],al
0xe61c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xf13f:	add    al,dh
0xf367:	add    BYTE PTR [rax],ah
0x102a6:	add    BYTE PTR [rax],al
0x102a4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x10af6:	add    BYTE PTR [rax],al
0x10af4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1824f:	add    BYTE PTR [rax],dl
0x1824d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dl
0x191c6:	add    BYTE PTR [rax],al
0x191c4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1bd47:	add    al,dh
0x1bd45:	add    BYTE PTR [rax],al; 	add    al,dh
0x1bdd7:	add    BYTE PTR [rax],ah
0x1bdd5:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],ah
0x1be1f:	add    BYTE PTR [rax],dh
0x1be1d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1f930:	pop    rbp
0x1f92f:	pop    rbx; 	pop    rbp
0x1f92e:	pop    rax; 	pop    rbx; 	pop    rbp
0x1f92d:	add    BYTE PTR [rax+0x5b],bl; 	pop    rbp
0x1f979:	jmp    0x1f940
0x1f977:	enter  0xebff,0xc5
0x1f9c3:	mov    DWORD PTR [rdi],ecx
0x1f9c2:	mov    QWORD PTR [rdi],rcx
0x1f9c1:	int3   ; 	mov    QWORD PTR [rdi],rcx
0x1fb13:	pop    rsp
0x1fb12:	pop    r12
0x1fb11:	pop    rbp; 	pop    r12
0x1fb10:	pop    rbx; 	pop    rbp; 	pop    r12
0x1fb79:	pop    rsp
0x1fb78:	pop    r12
0x1fb77:	pop    rbp; 	pop    r12
0x1fb76:	rcr    BYTE PTR [rbp+0x41],0x5c
0x1fb7b:	xor    eax,eax
0x1fb7a:	ret    ; 	xor    eax,eax
0x1fb79:	pop    rsp; 	ret    ; 	xor    eax,eax
0x1fc09:	pop    rsp
0x1fc08:	pop    r12
0x1fc07:	pop    rbp; 	pop    r12
0x1fc06:	pop    rbx; 	pop    rbp; 	pop    r12
0x20257:	pop    rbp
0x20256:	pop    rdi; 	pop    rbp
0x20255:	pop    r15; 	pop    rbp
0x20254:	pop    rsi; 	pop    r15; 	pop    rbp
0x202e8:	pop    rsi
0x202e7:	pop    r14
0x202e6:	pop    rbp; 	pop    r14
0x202e5:	pop    r13; 	pop    r14
0x203e6:	pop    rsi
0x203e5:	pop    r14
0x203e4:	pop    rbp; 	pop    r14
0x203e3:	pop    r13; 	pop    r14
0x20582:	add    bl,dh
0x20580:	or     DWORD PTR [rax],eax; 	add    bl,dh
0x206c5:	pop    rbp
0x206c4:	pop    r13
0x206c3:	pop    rsp; 	pop    r13
0x206c2:	pop    r12; 	pop    r13
0x209b3:	add    BYTE PTR [rax],al
0x20bee:	add    BYTE PTR [rax],al
0x20bec:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x20c2c:	add    BYTE PTR [rax-0x7d],cl
0x20d33:	add    BYTE PTR [rax-0x7d],cl
0x20e6a:	pop    rbp
0x20e69:	pop    rdi; 	pop    rbp
0x20e68:	pop    r15; 	pop    rbp
0x20e67:	pop    rsi; 	pop    r15; 	pop    rbp
0x20ea1:	pop    rbp
0x20ea0:	pop    rdi; 	pop    rbp
0x20e9f:	pop    r15; 	pop    rbp
0x20e9e:	pop    rsi; 	pop    r15; 	pop    rbp
0x21102:	pop    rdi
0x21101:	pop    r15
0x21100:	pop    rsi; 	pop    r15
0x210ff:	pop    r14; 	pop    r15
0x2111a:	pop    rdi
0x21119:	pop    r15
0x21118:	pop    rsi; 	pop    r15
0x21117:	pop    r14; 	pop    r15
0x21142:	pop    rdi
0x21141:	pop    r15
0x21140:	pop    rsi; 	pop    r15
0x2113f:	pop    r14; 	pop    r15
0x2116a:	pop    rdi
0x21169:	pop    r15
0x21168:	pop    rsi; 	pop    r15
0x21167:	pop    r14; 	pop    r15
0x21192:	pop    rdi
0x21191:	pop    r15
0x21190:	pop    rsi; 	pop    r15
0x2118f:	pop    r14; 	pop    r15
0x2121d:	neg    eax
0x2121c:	clc    ; 	neg    eax
0x2121b:	mov    eax,edi; 	neg    eax
0x2122f:	clc    
0x2122e:	mov    eax,edi
0x2122c:	add    BYTE PTR [rax],al; 	mov    eax,edi
0x213c1:	pop    rbp
0x213c0:	pop    rdi; 	pop    rbp
0x213bf:	pop    r15; 	pop    rbp
0x213be:	pop    rsi; 	pop    r15; 	pop    rbp
0x2189b:	pop    rdi
0x2189a:	pop    r15
0x21899:	pop    rsi; 	pop    r15
0x21898:	pop    r14; 	pop    r15
0x218a5:	mov    eax,edx
0x218a3:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x219db:	retf   0x8348
0x21a35:	pop    rbp
0x21a34:	pop    rbx; 	pop    rbp
0x21a33:	or     BYTE PTR [rbx+0x5d],bl
0x21a45:	cmp    al,BYTE PTR [rax]
0x21a55:	cmp    al,BYTE PTR [rax]
0x21aae:	pop    rbp
0x21aad:	pop    rbx; 	pop    rbp
0x21aac:	or     BYTE PTR [rbx+0x5d],bl
0x221f6:	add    DWORD PTR [rax-0x7d],ecx
0x2233e:	dec    DWORD PTR [rax-0x77]
0x22403:	pop    rbp
0x22402:	pop    rdi; 	pop    rbp
0x22401:	pop    r15; 	pop    rbp
0x22400:	pop    rsi; 	pop    r15; 	pop    rbp
0x2253d:	add    DWORD PTR [rax-0x7d],ecx
0x2268d:	pop    rbp
0x2268c:	pop    r13
0x2268b:	pop    rsp; 	pop    r13
0x2268a:	pop    r12; 	pop    r13
0x22706:	pop    rbp
0x22705:	pop    r13
0x22704:	pop    rsp; 	pop    r13
0x22703:	pop    r12; 	pop    r13
0x22848:	pop    rdi
0x22847:	pop    r15
0x22846:	pop    rsi; 	pop    r15
0x22845:	pop    r14; 	pop    r15
0x22996:	pop    rdi
0x22995:	pop    r15
0x22994:	pop    rsi; 	pop    r15
0x22993:	pop    r14; 	pop    r15
0x22b56:	pop    rbp
0x22b55:	pop    r13
0x22b54:	pop    rsp; 	pop    r13
0x22b53:	pop    r12; 	pop    r13
0x22b96:	and    BYTE PTR [rax-0x7d],cl
0x22bb5:	pop    rsi
0x22bb4:	pop    r14
0x22bb3:	pop    rbp; 	pop    r14
0x22bb2:	pop    r13; 	pop    r14
0x22c7f:	add    BYTE PTR [rax-0x7d],cl
0x22cd1:	pop    rbp
0x22cd0:	pop    rdi; 	pop    rbp
0x22ccf:	pop    r15; 	pop    rbp
0x22cce:	pop    rsi; 	pop    r15; 	pop    rbp
0x22d7e:	add    BYTE PTR [rcx-0x7d],cl
0x2304d:	pop    rbp
0x2304c:	pop    rdi; 	pop    rbp
0x2304b:	pop    r15; 	pop    rbp
0x2304a:	pop    rsi; 	pop    r15; 	pop    rbp
0x235e5:	add    BYTE PTR [rax-0x7d],cl
0x236d9:	pop    rbp
0x236d8:	pop    rdi; 	pop    rbp
0x236d7:	pop    r15; 	pop    rbp
0x236d6:	pop    rsi; 	pop    r15; 	pop    rbp
0x23ad1:	push   rsp
0x23ad0:	push   rax; 	push   rsp
0x23acf:	mov    DWORD PTR [rax+0x54],edx
0x23ace:	push   rax; 	mov    DWORD PTR [rax+0x54],edx
0x23b8c:	cmovs  eax,edx
0x23ba9:	retf   0x894d
0x23c1f:	pop    rdi
0x23c1e:	pop    r15
0x23c1d:	pop    rsi; 	pop    r15
0x23c1c:	pop    r14; 	pop    r15
0x23e0f:	pop    rdi
0x23e0e:	pop    r15
0x23e0d:	pop    rsi; 	pop    r15
0x23e0c:	pop    r14; 	pop    r15
0x23eb2:	pop    rdi
0x23eb1:	pop    r15
0x23eb0:	pop    rsi; 	pop    r15
0x23eaf:	pop    r14; 	pop    r15
0x23f0c:	pop    rdi
0x23f0b:	pop    r15
0x23f0a:	pop    rsi; 	pop    r15
0x23f09:	pop    r14; 	pop    r15
0x23f25:	pop    rdi
0x23f24:	pop    r15
0x23f23:	pop    rsi; 	pop    r15
0x23f22:	pop    r14; 	pop    r15
0x24049:	pop    rdi
0x24048:	pop    r15
0x24047:	pop    rsi; 	pop    r15
0x24046:	pop    r14; 	pop    r15
0x24089:	pop    rdi
0x24088:	pop    r15
0x24087:	pop    rsi; 	pop    r15
0x24086:	pop    r14; 	pop    r15
0x24208:	mov    BYTE PTR [rax+rcx*2],0x83
0x242c0:	mov    BYTE PTR [rax+rcx*2],0x83
0x24301:	adc    ecx,DWORD PTR [rax-0x7d]
0x24448:	mov    BYTE PTR [rax+rcx*2],0x83
0x245d4:	pop    rdi
0x245d3:	pop    r15
0x245d2:	pop    rsi; 	pop    r15
0x245d1:	pop    r14; 	pop    r15
0x247cd:	pop    rdi
0x247cc:	pop    r15
0x247cb:	pop    rsi; 	pop    r15
0x247ca:	pop    r14; 	pop    r15
0x2486a:	pop    rdi
0x24869:	pop    r15
0x24868:	pop    rsi; 	pop    r15
0x24867:	pop    r14; 	pop    r15
0x248d0:	pop    rdi
0x248cf:	pop    r15
0x248ce:	pop    rsi; 	pop    r15
0x248cd:	pop    r14; 	pop    r15
0x248ef:	pop    rdi
0x248ee:	pop    r15
0x248ed:	pop    rsi; 	pop    r15
0x248ec:	pop    r14; 	pop    r15
0x24a19:	pop    rdi
0x24a18:	pop    r15
0x24a17:	pop    rsi; 	pop    r15
0x24a16:	pop    r14; 	pop    r15
0x24a59:	pop    rdi
0x24a58:	pop    r15
0x24a57:	pop    rsi; 	pop    r15
0x24a56:	pop    r14; 	pop    r15
0x24bc0:	rol    BYTE PTR [rax+rcx*2],0x83
0x24c70:	rol    BYTE PTR [rax+rcx*2],0x83
0x24ca1:	cmp    ecx,DWORD PTR [rax-0x7d]
0x24de8:	rol    BYTE PTR [rax+rcx*2],0x83
0x24f7f:	pop    rdi
0x24f7e:	pop    r15
0x24f7d:	pop    rsi; 	pop    r15
0x24f7c:	pop    r14; 	pop    r15
0x24ffe:	ret    0x8949
0x24ffd:	rex.RB ret 0x8949
0x25041:	xor    ecx,DWORD PTR [rax-0x77]
0x25323:	pop    rdi
0x25322:	pop    r15
0x25321:	pop    rsi; 	pop    r15
0x25320:	pop    r14; 	pop    r15
0x256f7:	add    DWORD PTR [rax-0x7d],ecx
0x25b24:	pop    rdi
0x25b23:	pop    r15
0x25b22:	pop    rsi; 	pop    r15
0x25b21:	pop    r14; 	pop    r15
0x26556:	add    BYTE PTR [rcx-0xa],al
0x26835:	pop    rdi
0x26834:	pop    r15
0x26833:	pop    rsi; 	pop    r15
0x26832:	pop    r14; 	pop    r15
0x2687f:	pop    rdi
0x2687e:	pop    r15
0x2687d:	pop    rsi; 	pop    r15
0x2687c:	pop    r14; 	pop    r15
0x26af7:	add    DWORD PTR [rax+0x39],ecx
0x26af6:	rex.X add DWORD PTR [rax+0x39],ecx
0x26b13:	add    cl,BYTE PTR [rax+0x39]
0x26b12:	rex.X add cl,BYTE PTR [rax+0x39]
0x26b2f:	add    ecx,DWORD PTR [rax+0x39]
0x26b2e:	rex.X add ecx,DWORD PTR [rax+0x39]
0x26e57:	add    DWORD PTR [rax+0x39],ecx
0x26e56:	add    DWORD PTR [r8+0x39],r9d
0x26e74:	add    cl,BYTE PTR [rax+0x39]
0x26e73:	add    r9b,BYTE PTR [r8+0x39]
0x26e91:	add    ecx,DWORD PTR [rax+0x39]
0x26e90:	add    r9d,DWORD PTR [r8+0x39]
0x2799c:	pop    rdi
0x2799b:	pop    r15
0x2799a:	pop    rsi; 	pop    r15
0x27999:	pop    r14; 	pop    r15
0x279db:	pop    rdi
0x279da:	pop    r15
0x279d9:	pop    rsi; 	pop    r15
0x279d8:	pop    r14; 	pop    r15
0x2801b:	pop    rdi
0x2801a:	pop    r15
0x28019:	pop    rsi; 	pop    r15
0x28018:	pop    r14; 	pop    r15
0x2885c:	pop    rdi
0x2885b:	pop    r15
0x2885a:	pop    rsi; 	pop    r15
0x28859:	pop    r14; 	pop    r15
0x2889c:	pop    rdi
0x2889b:	pop    r15
0x2889a:	pop    rsi; 	pop    r15
0x28899:	pop    r14; 	pop    r15
0x28eeb:	pop    rdi
0x28eea:	pop    r15
0x28ee9:	pop    rsi; 	pop    r15
0x28ee8:	pop    r14; 	pop    r15
0x2975b:	rol    BYTE PTR [rcx+rcx*2],0x39
0x297ff:	rol    BYTE PTR [rcx+rcx*2],0x39
0x2981c:	and    BYTE PTR [rcx+0x39],cl
0x298d4:	pop    rdi
0x298d3:	pop    r15
0x298d2:	pop    rsi; 	pop    r15
0x298d1:	pop    r14; 	pop    r15
0x29ac3:	rol    BYTE PTR [rcx+rcx*2],0x39
0x29ae8:	shr    BYTE PTR [rcx],cl
0x29c73:	pop    rbp
0x29c72:	pop    rdi; 	pop    rbp
0x29c71:	pop    r15; 	pop    rbp
0x29c70:	pop    rsi; 	pop    r15; 	pop    rbp
0x29c8a:	pop    rbp
0x29c89:	pop    rdi; 	pop    rbp
0x29c88:	pop    r15; 	pop    rbp
0x29c87:	pop    rsi; 	pop    r15; 	pop    rbp
0x29c95:	cmp    DWORD PTR [rax],eax
0x29ce2:	dec    DWORD PTR [rax-0x77]
0x29db1:	pop    rbp
0x29db0:	pop    r13
0x29daf:	pop    rsp; 	pop    r13
0x29dae:	pop    r12; 	pop    r13
0x29dd5:	pop    rbp
0x29dd4:	pop    r13
0x29dd3:	pop    rsp; 	pop    r13
0x29dd2:	pop    r12; 	pop    r13
0x29e19:	pop    rbp
0x29e18:	pop    r13
0x29e17:	pop    rsp; 	pop    r13
0x29e16:	pop    r12; 	pop    r13
0x29ea0:	pop    rbp
0x29e9f:	pop    r13
0x29e9e:	pop    rsp; 	pop    r13
0x29e9d:	pop    r12; 	pop    r13
0x29fa4:	pop    rdi
0x29fa3:	pop    r15
0x29fa2:	pop    rsi; 	pop    r15
0x29fa1:	pop    r14; 	pop    r15
0x2a06d:	pop    rdi
0x2a06c:	pop    r15
0x2a06b:	pop    rsi; 	pop    r15
0x2a06a:	pop    r14; 	pop    r15
0x2a181:	pop    rdi
0x2a180:	pop    r15
0x2a17f:	pop    rsi; 	pop    r15
0x2a17e:	pop    r14; 	pop    r15
0x2a69a:	pop    rbx
0x2a698:	je     0x2a6a0; 	pop    rbx
0x2a697:	add    esi,DWORD PTR [rsi+rax*1+0x5b]
0x2a6d8:	pop    rbx
0x2a6d6:	add    BYTE PTR [rax],al; 	pop    rbx
0x2a6ea:	pop    rbx
0x2a6e7:	mov    DWORD PTR [rbx+0x8],eax; 	pop    rbx
0x2a83d:	pop    rbp
0x2a83c:	pop    r13
0x2a83b:	pop    rsp; 	pop    r13
0x2a83a:	pop    r12; 	pop    r13
0x2a863:	pop    rbp
0x2a862:	pop    r13
0x2a861:	pop    rsp; 	pop    r13
0x2a860:	pop    r12; 	pop    r13
0x2a8e5:	pop    rbp
0x2a8e4:	pop    r13
0x2a8e3:	pop    rsp; 	pop    r13
0x2a8e2:	pop    r12; 	pop    r13
0x2aa22:	pop    rdi
0x2aa21:	pop    r15
0x2aa20:	pop    rsi; 	pop    r15
0x2aa1f:	pop    r14; 	pop    r15
0x2ac8c:	pop    rdi
0x2ac8b:	pop    r15
0x2ac8a:	pop    rsi; 	pop    r15
0x2ac89:	pop    r14; 	pop    r15
0x2ad35:	add    BYTE PTR [rax-0x77],cl
0x2b5dc:	pop    rbp
0x2b5db:	pop    rdi; 	pop    rbp
0x2b5da:	pop    r15; 	pop    rbp
0x2b5d9:	pop    rsi; 	pop    r15; 	pop    rbp
0x2b614:	pop    rbp
0x2b613:	pop    rdi; 	pop    rbp
0x2b612:	pop    r15; 	pop    rbp
0x2b611:	pop    rsi; 	pop    r15; 	pop    rbp
0x2b76c:	inc    DWORD PTR [rcx-0x77]
0x2b76b:	clc    ; 	inc    DWORD PTR [rcx-0x77]
0x2b961:	add    BYTE PTR [rax-0x7d],cl
0x2bd57:	add    bl,dh
0x2bd55:	add    BYTE PTR [rax],al; 	add    bl,dh
0x2bec5:	pop    rdi
0x2bec4:	pop    r15
0x2bec3:	pop    rsi; 	pop    r15
0x2bec2:	pop    r14; 	pop    r15
0x2c022:	pop    rbp
0x2c021:	pop    rdi; 	pop    rbp
0x2c020:	pop    r15; 	pop    rbp
0x2c01f:	pop    rsi; 	pop    r15; 	pop    rbp
0x2c0f7:	pop    rbp
0x2c0f6:	pop    rdi; 	pop    rbp
0x2c0f5:	pop    r15; 	pop    rbp
0x2c0f4:	pop    rsi; 	pop    r15; 	pop    rbp
0x2c147:	pop    rbp
0x2c146:	pop    rdi; 	pop    rbp
0x2c145:	pop    r15; 	pop    rbp
0x2c144:	pop    rsi; 	pop    r15; 	pop    rbp
0x2c455:	pop    rbp
0x2c454:	pop    rdi; 	pop    rbp
0x2c453:	pop    r15; 	pop    rbp
0x2c452:	pop    rsi; 	pop    r15; 	pop    rbp
0x2c657:	add    DWORD PTR [rax-0x7d],ecx
0x2c6cf:	pop    rbp
0x2c6ce:	pop    rdi; 	pop    rbp
0x2c6cd:	pop    r15; 	pop    rbp
0x2c6cc:	pop    rsi; 	pop    r15; 	pop    rbp
0x2c8c4:	pop    rbp
0x2c8c3:	pop    rdi; 	pop    rbp
0x2c8c2:	pop    r15; 	pop    rbp
0x2c8c1:	pop    rsi; 	pop    r15; 	pop    rbp
0x2cad2:	retf   0xd88
0x2cad1:	rex.R retf 0xd88
0x2caec:	cmp    DWORD PTR [rax],eax
0x2cb2d:	mov    eax,DWORD PTR [rdx+rdi*8+0x40]
0x2cb3e:	add    bl,dh
0x2cb4e:	add    BYTE PTR [rax],al
0x2cb72:	add    BYTE PTR [rax],al
0x2cb70:	test   al,0x0; 	add    BYTE PTR [rax],al
0x2cc79:	pop    rbp
0x2cc78:	pop    rdi; 	pop    rbp
0x2cc77:	pop    r15; 	pop    rbp
0x2cc76:	pop    rsi; 	pop    r15; 	pop    rbp
0x2cdd4:	add    BYTE PTR [rax-0x77],cl
0x2d056:	pop    rbp
0x2d055:	pop    rdi; 	pop    rbp
0x2d054:	pop    r15; 	pop    rbp
0x2d053:	pop    rsi; 	pop    r15; 	pop    rbp
0x2d15f:	pop    rbp
0x2d15e:	pop    rdi; 	pop    rbp
0x2d15d:	pop    r15; 	pop    rbp
0x2d15c:	pop    rsi; 	pop    r15; 	pop    rbp
0x2d2c7:	add    cl,ch
0x2d2c5:	add    BYTE PTR [rax],al; 	add    cl,ch
0x2d50c:	mov    BYTE PTR [rcx],0x83
0x2d61e:	add    DWORD PTR [rax-0x7d],ecx
0x2d712:	add    DWORD PTR [rcx+rdi*1-0x7d],esi
0x2d780:	pop    rdi
0x2d77f:	pop    r15
0x2d77e:	pop    rsi; 	pop    r15
0x2d77d:	pop    r14; 	pop    r15
0x2d81f:	add    BYTE PTR [rax-0x7d],cl
0x2d8a8:	push   rbx
0x2d90b:	cmove  eax,edx
0x2d90a:	cmove  rax,rdx
0x2d9d3:	mov    DWORD PTR [rax],edx
0x2d9d2:	mov    QWORD PTR [rax],rdx
0x2da24:	add    BYTE PTR [rax],al
0x2da6a:	adc    bl,dh
0x2da7f:	or     bl,dh
0x2da7d:	add    al,0x72; 	or     bl,dh
0x2dab4:	add    al,0x10
0x2dab3:	mov    eax,DWORD PTR [rax+rdx*1]
0x2dab2:	mov    bh,0x8b; 	add    al,0x10
0x2db98:	dec    DWORD PTR [rax-0x77]
0x2db97:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x2dcc0:	add    BYTE PTR [rax-0x77],cl
0x2dd16:	mov    bh,0xc0
0x2dd15:	movzx  eax,ax
0x2dd14:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2dd37:	mov    bh,0xc0
0x2dd36:	movzx  eax,ax
0x2dd35:	add    al,0xf; 	mov    bh,0xc0
0x2dd56:	mov    bh,0xc0
0x2dd55:	movzx  eax,ax
0x2dd54:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x2dd77:	mov    bh,0xc0
0x2dd76:	movzx  eax,ax
0x2dd75:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2dd97:	mov    bh,0xc0
0x2dd96:	movzx  eax,ax
0x2dd95:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x2ddb7:	mov    bh,0xc0
0x2ddb6:	movzx  eax,ax
0x2ddd7:	mov    bh,0xc0
0x2ddd6:	movzx  eax,ax
0x2ddd5:	rex movzx eax,ax
0x2ddf6:	mov    bh,0xc0
0x2ddf5:	movzx  eax,ax
0x2ddf4:	add    al,0xf; 	mov    bh,0xc0
0x2de17:	mov    bh,0xc0
0x2de16:	movzx  eax,ax
0x2de15:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2de37:	mov    bh,0xc0
0x2de36:	movzx  eax,ax
0x2de35:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x2de57:	mov    bh,0xc0
0x2de56:	movzx  eax,ax
0x2de55:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2de89:	add    bl,dh
0x2de87:	add    al,BYTE PTR [rax]; 	add    bl,dh
0x2deb9:	add    bl,dh
0x2deb7:	add    al,BYTE PTR [rax]; 	add    bl,dh
0x2ded3:	loopne 0x2ded6
0x2ded2:	and    eax,0x1
0x2ded1:	js     0x2de56; 	loopne 0x2ded6
0x2defa:	add    BYTE PTR [rax],al
0x2def8:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x2df1a:	add    BYTE PTR [rax],al
0x2df18:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x2df23:	loopne 0x2dfa4
0x2df22:	and    eax,0x7f
0x2df21:	clc    ; 	and    eax,0x7f
0x2df35:	sete   al
0x2df4c:	loopne 0x2df4f
0x2df4b:	and    eax,0x1
0x2df4a:	js     0x2decf; 	loopne 0x2df4f
0x2df5f:	mov    bh,0xc0
0x2df5e:	movzx  eax,ax
0x2df5d:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2df80:	mov    bh,0xc0
0x2df7f:	movzx  eax,ax
0x2df7e:	add    al,0xf; 	mov    bh,0xc0
0x2df9f:	mov    bh,0xc0
0x2df9e:	movzx  eax,ax
0x2df9d:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x2dfc0:	mov    bh,0xc0
0x2dfbf:	movzx  eax,ax
0x2dfbe:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2dfe0:	mov    bh,0xc0
0x2dfdf:	movzx  eax,ax
0x2dfde:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x2e000:	mov    bh,0xc0
0x2dfff:	movzx  eax,ax
0x2e020:	mov    bh,0xc0
0x2e01f:	movzx  eax,ax
0x2e01e:	rex movzx eax,ax
0x2e03f:	mov    bh,0xc0
0x2e03e:	movzx  eax,ax
0x2e03d:	add    al,0xf; 	mov    bh,0xc0
0x2e060:	mov    bh,0xc0
0x2e05f:	movzx  eax,ax
0x2e05e:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2e080:	mov    bh,0xc0
0x2e07f:	movzx  eax,ax
0x2e07e:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x2e0a0:	mov    bh,0xc0
0x2e09f:	movzx  eax,ax
0x2e09e:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x2e0b8:	add    al,0xb8
0x2e0b7:	mov    eax,DWORD PTR [rax+rdi*4]
0x2e0c8:	add    al,0xb8
0x2e0c7:	mov    eax,DWORD PTR [rax+rdi*4]
0x2e0ed:	and    eax,esi
0x2e0eb:	add    BYTE PTR [rax],al; 	and    eax,esi
0x2e0fe:	add    BYTE PTR [rax],al
0x2e0fc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x2e11e:	add    BYTE PTR [rax],al
0x2e11c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x2e13e:	add    BYTE PTR [rax],al
0x2e13c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x2e19d:	mov    DWORD PTR [rdx],eax
0x2e19c:	mov    QWORD PTR [rdx],rax
0x2e19b:	mov    QWORD PTR fs:[rdx],rax
0x2e1cb:	pop    rdi
0x2e1ca:	pop    r15
0x2e1c9:	pop    rsi; 	pop    r15
0x2e1c8:	pop    r14; 	pop    r15
0x2e247:	out    0xe8,eax
0x2e42b:	pop    rdi
0x2e42a:	pop    r15
0x2e429:	pop    rsi; 	pop    r15
0x2e428:	pop    r14; 	pop    r15
0x2e514:	sbb    DWORD PTR [rax-0x77],ecx
0x2e6a7:	pop    rbp
0x2e6a6:	pop    rbx; 	pop    rbp
0x2e6a5:	or     BYTE PTR [rbx+0x5d],bl
0x2e7d2:	pop    rdi
0x2e7d1:	pop    r15
0x2e7d0:	pop    rsi; 	pop    r15
0x2e7cf:	pop    r14; 	pop    r15
0x2e836:	pop    rsp
0x2efc3:	pop    rbp
0x2efc2:	pop    rdi; 	pop    rbp
0x2efc1:	pop    r15; 	pop    rbp
0x2efc0:	pop    rsi; 	pop    r15; 	pop    rbp
0x2f268:	pop    rbp
0x2f267:	pop    rdi; 	pop    rbp
0x2f266:	pop    r15; 	pop    rbp
0x2f265:	pop    rsi; 	pop    r15; 	pop    rbp
0x2ffa1:	pop    rbp
0x2ffa0:	pop    rdi; 	pop    rbp
0x2ff9f:	pop    r15; 	pop    rbp
0x2ff9e:	pop    rsi; 	pop    r15; 	pop    rbp
0x30376:	dec    DWORD PTR [rax-0x77]
0x30420:	add    BYTE PTR [rax-0x77],cl
0x306c1:	xor    BYTE PTR [rax-0x77],cl
0x306f7:	pop    rdi
0x306f6:	pop    r15
0x306f5:	pop    rsi; 	pop    r15
0x306f4:	pop    r14; 	pop    r15
0x307a8:	pop    rdi
0x307a7:	pop    r15
0x307a6:	pop    rsi; 	pop    r15
0x307a5:	pop    r14; 	pop    r15
0x30a90:	pop    rbp
0x30a8f:	pop    rdi; 	pop    rbp
0x30a8e:	pop    r15; 	pop    rbp
0x30a8d:	pop    rsi; 	pop    r15; 	pop    rbp
0x310dc:	or     BYTE PTR [rax+0x1],cl
0x312f1:	dec    DWORD PTR [rax-0x7d]
0x313ba:	or     BYTE PTR [rax+0x1],cl
0x320a7:	add    BYTE PTR [rax-0x7d],cl
0x320c0:	fimul  DWORD PTR [rax-0x7d]
0x320df:	add    BYTE PTR [rax-0x7d],cl
0x3229b:	pop    rbp
0x3229a:	pop    rdi; 	pop    rbp
0x32299:	pop    r15; 	pop    rbp
0x32298:	pop    rsi; 	pop    r15; 	pop    rbp
0x32448:	pop    rbp
0x32447:	pop    rdi; 	pop    rbp
0x32446:	pop    r15; 	pop    rbp
0x32445:	pop    rsi; 	pop    r15; 	pop    rbp
0x325cd:	pop    rdi
0x325cc:	pop    r15
0x325cb:	pop    rsi; 	pop    r15
0x325ca:	pop    r14; 	pop    r15
0x3265f:	ret    0x8948
0x326ae:	pop    rbp
0x326ad:	pop    rbx; 	pop    rbp
0x326ac:	fcomp  DWORD PTR [rbx+0x5d]
0x326ab:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x32752:	ror    DWORD PTR [rax-0x7d],cl
0x32857:	add    BYTE PTR [rax+0x29],cl
0x3294b:	add    BYTE PTR [rax+0x29],cl
0x329db:	add    BYTE PTR [rax+0x29],cl
0x32a2f:	sub    BYTE PTR [rax-0x77],cl
0x32a43:	add    BYTE PTR [rax+0x29],cl
0x32bef:	pop    rdi
0x32bee:	pop    r15
0x32bed:	pop    rsi; 	pop    r15
0x32bec:	pop    r14; 	pop    r15
0x32c91:	pop    rdi
0x32c90:	pop    r15
0x32c8f:	pop    rsi; 	pop    r15
0x32c8e:	pop    r14; 	pop    r15
0x32dc9:	pop    rbp
0x32dc8:	pop    r13
0x32dc7:	pop    rsp; 	pop    r13
0x32dc6:	pop    r12; 	pop    r13
0x32e79:	add    BYTE PTR [rax-0x7d],cl
0x32fd0:	pop    rsi
0x32fcf:	pop    r14
0x32fce:	pop    rbp; 	pop    r14
0x32fcd:	pop    r13; 	pop    r14
0x330bf:	add    bl,dh
0x330be:	add    bl,sil
0x332f5:	xor    BYTE PTR [rax-0x7d],cl
0x33336:	pop    rdi
0x33335:	pop    r15
0x33334:	pop    rsi; 	pop    r15
0x33333:	pop    r14; 	pop    r15
0x33394:	dec    DWORD PTR [rax-0x7d]
0x33506:	xchg   esi,eax
0x33504:	cmp    al,ch; 	xchg   esi,eax
0x33544:	pop    rax
0x33542:	add    al,ch; 	pop    rax
0x33b93:	pop    rbp
0x33b92:	pop    r13
0x33b91:	pop    rsp; 	pop    r13
0x33b90:	pop    r12; 	pop    r13
0x33bd5:	fpatan 
0x33c42:	pop    rsi
0x33c41:	pop    r14
0x33c40:	pop    rbp; 	pop    r14
0x33c3f:	pop    r13; 	pop    r14
0x33c4a:	fisttp WORD PTR [rax-0x39]
0x33dc7:	add    BYTE PTR [rax-0x39],cl
0x33dc6:	add    BYTE PTR [rax-0x39],cl
0x33e90:	add    eax,DWORD PTR [rdi+0x20]
0x33e8f:	add    rax,QWORD PTR [rdi+0x20]
0x33ea7:	mov    eax,ecx
0x33ea6:	mov    rax,rcx
0x33eb1:	mov    eax,ecx
0x33eb0:	mov    rax,rcx
0x33ee8:	pop    rbx
0x33ee6:	xor    eax,eax; 	pop    rbx
0x33f13:	pop    rbx
0x340b0:	pop    rdi
0x340af:	pop    r15
0x340ae:	pop    rsi; 	pop    r15
0x340ad:	pop    r14; 	pop    r15
0x3424f:	add    BYTE PTR [rax-0x7d],cl
0x3440f:	add    BYTE PTR [rax-0x7d],cl
0x3448f:	add    BYTE PTR [rax-0x7d],cl
0x34792:	and    eax,edx
0x34790:	not    eax; 	and    eax,edx
0x347c0:	shr    eax,0x3f
0x347bf:	shr    rax,0x3f
0x347e6:	shr    eax,0x3f
0x347e5:	shr    rax,0x3f
0x34801:	orps   xmm0,xmm1
0x34800:	orpd   xmm0,xmm1
0x34856:	movd   mm0,eax
0x34855:	movq   mm0,rax
0x34890:	subps  xmm0,xmm1
0x3488f:	subsd  xmm0,xmm1
0x348c4:	adc    DWORD PTR [rdi],ecx
0x348c3:	movups XMMWORD PTR [rdi],xmm1
0x348c2:	movsd  QWORD PTR [rdi],xmm1
0x348fd:	push   rax
0x34931:	sub    cl,al
0x34930:	movaps xmm0,xmm1
0x3492f:	movapd xmm0,xmm1
0x34956:	sub    cl,al
0x34955:	movaps xmm0,xmm1
0x34954:	movapd xmm0,xmm1
0x34984:	sub    cl,al
0x34983:	movaps xmm0,xmm1
0x34982:	movapd xmm0,xmm1
0x34a69:	movd   mm0,eax
0x34a68:	movq   mm0,rax
0x34a72:	mov    DWORD PTR [rdi],ecx
0x34a71:	leave  ; 	mov    DWORD PTR [rdi],ecx
0x34a70:	xor    ecx,ecx; 	mov    DWORD PTR [rdi],ecx
0x34ad3:	add    esp,0x28
0x34ad2:	add    rsp,0x28
0x34b23:	add    esp,0x28
0x34b22:	add    rsp,0x28
0x34b35:	add    esp,0x28
0x34b34:	add    rsp,0x28
0x34b47:	add    BYTE PTR [rax],al
0x34b6e:	and    eax,edx
0x34b6c:	not    eax; 	and    eax,edx
0x34b91:	shr    eax,0x1f
0x34bae:	shr    eax,0x1f
0x34bc9:	push   rsp
0x34bc7:	add    BYTE PTR [rdi],cl; 	push   rsp
0x34bcf:	push   rsi
0x34bd0:	ret    
0x34bcf:	push   rsi; 	ret    
0x34bce:	orps   xmm0,xmm3
0x34c0d:	movd   mm0,eax
0x34c0c:	movd   xmm0,eax
0x34c25:	subps  xmm0,xmm1
0x34c24:	subss  xmm0,xmm1
0x34c3b:	adc    DWORD PTR [rdi],ecx
0x34c3a:	movups XMMWORD PTR [rdi],xmm1
0x34c39:	movss  DWORD PTR [rdi],xmm1
0x34c4f:	movd   mm0,eax
0x34c4e:	movd   xmm0,eax
0x34c5c:	add    BYTE PTR [rdx+rbp*8-0xd],dh
0x34c9b:	push   rax
0x34cbe:	sub    cl,al
0x34cbd:	movaps xmm0,xmm1
0x34cbc:	enter  0x280f,0xc1
0x34ce3:	sub    cl,al
0x34ce2:	movaps xmm0,xmm1
0x34ce1:	enter  0x280f,0xc1
0x34d10:	sub    cl,al
0x34d0f:	movaps xmm0,xmm1
0x34d0e:	enter  0x280f,0xc1
0x34e0e:	add    esp,0x28
0x34e0d:	add    rsp,0x28
0x34e56:	add    esp,0x28
0x34e55:	add    rsp,0x28
0x34e64:	add    esp,0x28
0x34e63:	add    rsp,0x28
0x34e75:	loopne 0x34e7f
0x34e74:	and    eax,0x8
0x34ec2:	and    eax,edx
0x34ec0:	not    eax; 	and    eax,edx
0x34f03:	sar    eax,0x10
0x34f1b:	shr    eax,0x1f
0x34f3b:	and    al,0x8
0x34f3a:	ins    BYTE PTR es:[rdi],dx; 	and    al,0x8
0x34f39:	fld    TBYTE PTR [rsp+0x8]
0x34fa2:	fsubrp st(1),st
0x34fa0:	fstp   TBYTE PTR [rdi]; 	fsubrp st(1),st
0x34fdc:	fsubrp st(1),st
0x34fda:	fstp   TBYTE PTR [rdi]; 	fsubrp st(1),st
0x35009:	and    al,0xe8
0x35008:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xe8
0x35007:	fld    TBYTE PTR [rsp-0x18]
0x3502d:	fstp   TBYTE PTR [rdi]
0x3502b:	and    al,0xe8; 	fstp   TBYTE PTR [rdi]
0x3505e:	fstp   st(1)
0x3505d:	std    ; 	fstp   st(1)
0x3505c:	fscale ; 	fstp   st(1)
0x350cd:	and    al,0xe8
0x350cc:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xe8
0x350cb:	fld    TBYTE PTR [rsp-0x18]
0x350d9:	fpatan 
0x350d7:	add    ch,bl; 	fpatan 
0x35133:	add    esp,0x8
0x35132:	add    rsp,0x8
0x3517b:	add    esp,0x8
0x3517a:	add    rsp,0x8
0x3518d:	add    BYTE PTR [rax],al
0x3518b:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x351ab:	and    al,0xfe
0x351aa:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xfe
0x351a9:	fldcw  WORD PTR [rsp-0x2]
0x35234:	pop    rbx
0x35232:	xor    eax,eax; 	pop    rbx
0x35231:	rex xor eax,eax; 	pop    rbx
0x353af:	add    BYTE PTR [rax],al
0x3542f:	and    bl,dh
0x3569e:	add    BYTE PTR [rax],al
0x3569c:	rol    BYTE PTR [rax],1; 	add    BYTE PTR [rax],al
0x356e6:	add    BYTE PTR [rax],al
0x356e4:	rol    BYTE PTR [rax],1; 	add    BYTE PTR [rax],al
0x356f7:	or     cl,ch
0x35737:	or     bl,dh
0x3576d:	jae    0x35770
0x3576c:	push   QWORD PTR [rbx+0x1]
0x3577d:	or     eax,0xffffffff
0x3577c:	or     rax,0xffffffffffffffff
0x357a3:	or     al,0xf3
0x357ec:	ja     0x357f0
0x357eb:	push   QWORD PTR [rdi+0x2]
0x35841:	pop    rbx
0x3583e:	add    esp,0x10; 	pop    rbx
0x358da:	pop    rbp
0x358d9:	pop    rbx; 	pop    rbp
0x358d8:	add    BYTE PTR [rbx+0x5d],bl
0x358d7:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x35974:	pop    rbp
0x35973:	pop    rbx; 	pop    rbp
0x35972:	fcomp  DWORD PTR [rbx+0x5d]
0x35971:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x359e1:	add    BYTE PTR [rax],al
0x359df:	or     BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x35a34:	add    BYTE PTR [rax],al
0x35a32:	or     BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x35a9a:	pop    rsp
0x35a99:	pop    r12
0x35a98:	pop    rbp; 	pop    r12
0x35a97:	pop    rbx; 	pop    rbp; 	pop    r12
0x35b23:	pop    rsp
0x35b22:	pop    r12
0x35b21:	pop    rbp; 	pop    r12
0x35b20:	pop    rbx; 	pop    rbp; 	pop    r12
0x35b9f:	pop    rbx
0x35b9d:	add    BYTE PTR [rax],al; 	pop    rbx
0x35bf1:	pop    rbx
0x35bef:	add    BYTE PTR [rax],al; 	pop    rbx
0x35c4c:	pop    rsp
0x35c4b:	pop    r12
0x35c4a:	pop    rbp; 	pop    r12
0x35c49:	pop    rbx; 	pop    rbp; 	pop    r12
0x35c9d:	pop    rsp
0x35c9c:	pop    r12
0x35c9b:	pop    rbp; 	pop    r12
0x35c9a:	pop    rbx; 	pop    rbp; 	pop    r12
0x35d91:	pop    rbx
0x35d8f:	add    BYTE PTR [rax],al; 	pop    rbx
0x35e0f:	pop    rbx
0x35e0e:	rex pop rbx
0x35e0c:	add    esp,0x40; 	pop    rbx
0x35e2d:	jae    0x35e30
0x35e2c:	push   QWORD PTR [rbx+0x1]
0x35e3d:	or     eax,0xffffffff
0x35e3c:	or     rax,0xffffffffffffffff
0x35ec6:	pop    rsp
0x35ec5:	pop    r12
0x35ec4:	pop    rbp; 	pop    r12
0x35ec3:	pop    rbx; 	pop    rbp; 	pop    r12
0x35f2a:	mov    dh,0xc0
0x35f29:	movzx  eax,al
0x35f46:	xor    eax,eax
0x35f44:	adc    al,0xc7; 	xor    eax,eax
0x35f69:	xor    eax,eax
0x35f68:	xlat   BYTE PTR ds:[rbx]; 	xor    eax,eax
0x35f67:	add    al,0xd7; 	xor    eax,eax
0x35f9c:	stos   DWORD PTR es:[rdi],eax
0x35f9b:	stos   QWORD PTR es:[rdi],rax
0x35f9a:	rep stos QWORD PTR es:[rdi],rax
0x35f99:	add    esi,ebx; 	stos   QWORD PTR es:[rdi],rax
0x36088:	xor    eax,eax
0x36086:	or     DWORD PTR [rdi],eax; 	xor    eax,eax
0x360ca:	xor    eax,eax
0x360c8:	and    DWORD PTR [rdi],eax; 	xor    eax,eax
0x3610c:	mov    dh,0xc0
0x3610b:	movzx  eax,al
0x361b5:	add    BYTE PTR [rax],al
0x3626c:	sete   al
0x36270:	xor    eax,eax
0x3626f:	ret    ; 	xor    eax,eax
0x36477:	pop    rbx
0x36475:	xor    eax,eax; 	pop    rbx
0x3655d:	xor    eax,eax
0x3655b:	mov    DWORD PTR [rdi],eax; 	xor    eax,eax
0x36767:	pop    rbx
0x36765:	xor    eax,eax; 	pop    rbx
0x3684d:	xor    eax,eax
0x3684b:	mov    DWORD PTR [rdi],eax; 	xor    eax,eax
0x36874:	cmp    BYTE PTR [rax],al
0x36884:	cmp    BYTE PTR [rax],al
0x36882:	add    bl,al; 	cmp    BYTE PTR [rax],al
0x368b0:	cmp    BYTE PTR [rax],al
0x368af:	xlat   BYTE PTR ds:[rbx]; 	cmp    BYTE PTR [rax],al
0x368c1:	mov    eax,edx
0x368bf:	cmp    BYTE PTR [rax],al; 	mov    eax,edx
0x368d0:	mov    eax,edx
0x368cf:	nop; 	mov    eax,edx
0x368ce:	xchg   ax,ax; 	mov    eax,edx
0x36958:	pop    rbp
0x36957:	pop    rbx; 	pop    rbp
0x36956:	add    BYTE PTR [rbx+0x5d],bl
0x36955:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x3696f:	pop    rbp
0x3696e:	pop    rbx; 	pop    rbp
0x3696d:	add    BYTE PTR [rbx+0x5d],bl
0x3696c:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x36aba:	pop    rbp
0x36ab9:	pop    rbx; 	pop    rbp
0x36ab8:	add    BYTE PTR [rbx+0x5d],bl
0x36ab7:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x36acf:	pop    rbp
0x36ace:	pop    rbx; 	pop    rbp
0x36acd:	add    BYTE PTR [rbx+0x5d],bl
0x36acc:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x36bf8:	pop    rbp
0x36bf7:	pop    r13
0x36bf6:	pop    rsp; 	pop    r13
0x36bf5:	pop    r12; 	pop    r13
0x36c1d:	pop    rbp
0x36c1c:	pop    r13
0x36c1b:	pop    rsp; 	pop    r13
0x36c1a:	pop    r12; 	pop    r13
0x36c63:	pop    rbp
0x36c62:	pop    rbx; 	pop    rbp
0x36c61:	add    BYTE PTR [rbx+0x5d],bl
0x36c60:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x36cb3:	pop    rbp
0x36cb2:	pop    rbx; 	pop    rbp
0x36cb1:	add    BYTE PTR [rbx+0x5d],bl
0x36cb0:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x36d01:	add    BYTE PTR [rax],al
0x36cff:	test   al,0x0; 	add    BYTE PTR [rax],al
0x36def:	pop    rsp
0x36dee:	pop    r12
0x36ded:	pop    rbp; 	pop    r12
0x36dec:	pop    rbx; 	pop    rbp; 	pop    r12
0x36e91:	add    esp,0x8
0x36e90:	add    rsp,0x8
0x37222:	pop    rdi
0x37221:	pop    r15
0x37220:	pop    rsi; 	pop    r15
0x3721f:	pop    r14; 	pop    r15
0x37238:	pop    rdi
0x37237:	pop    r15
0x37236:	pop    rsi; 	pop    r15
0x37235:	pop    r14; 	pop    r15
0x37300:	scas   eax,DWORD PTR es:[rdi]
0x37377:	adc    BYTE PTR [rax+0x39],cl
0x37376:	adc    BYTE PTR [r8+0x39],r9b
0x38f4d:	add    ecx,DWORD PTR [rax-0x7d]
0x3909a:	or     BYTE PTR [rcx-0x7d],cl
0x3918c:	add    ecx,DWORD PTR [rax-0x7d]
0x3920d:	add    ecx,DWORD PTR [rax-0x7d]
0x392b3:	adc    BYTE PTR [rax-0x77],cl
0x395ee:	pop    rbp
0x395ed:	pop    rdi; 	pop    rbp
0x395ec:	pop    r15; 	pop    rbp
0x395eb:	pop    rsi; 	pop    r15; 	pop    rbp
0x3964f:	pop    rbp
0x3964e:	pop    rdi; 	pop    rbp
0x3964d:	pop    r15; 	pop    rbp
0x3964c:	pop    rsi; 	pop    r15; 	pop    rbp
0x397e6:	pop    rdi
0x397e5:	pop    r15
0x397e4:	pop    rsi; 	pop    r15
0x397e3:	pop    r14; 	pop    r15
0x398c8:	pop    rbp
0x398c7:	pop    rsp; 	pop    rbp
0x398c6:	pop    r12; 	pop    rbp
0x398c5:	pop    rbx; 	pop    r12; 	pop    rbp
0x39905:	out    0x89,eax
0x3995a:	dec    DWORD PTR [rax-0x77]
0x39ac3:	pop    rbp
0x39ac2:	pop    rdi; 	pop    rbp
0x39ac1:	pop    r15; 	pop    rbp
0x39ac0:	pop    rsi; 	pop    r15; 	pop    rbp
0x39cf6:	pop    rsp
0x39cf5:	pop    r12
0x39cf4:	pop    rbp; 	pop    r12
0x39cf3:	pop    rbx; 	pop    rbp; 	pop    r12
0x39dfb:	pop    rbp
0x39dfa:	pop    r13
0x39df9:	pop    rsp; 	pop    r13
0x39df8:	pop    r12; 	pop    r13
0x39e3c:	pop    rbp
0x39e3b:	pop    r13
0x39e3a:	pop    rsp; 	pop    r13
0x39e39:	pop    r12; 	pop    r13
0x39ee7:	pop    rbx
0x39ee5:	xor    eax,eax; 	pop    rbx
0x39f08:	xor    eax,eax
0x39f06:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x3a093:	pop    rbp
0x3a092:	pop    rbx; 	pop    rbp
0x3a091:	or     BYTE PTR [rbx+0x5d],bl
0x3a1d7:	pop    rbp
0x3a1d6:	pop    rbx; 	pop    rbp
0x3a1d5:	lock pop rbx; 	pop    rbp
0x3a1d4:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x3a272:	pop    rsp
0x3a271:	pop    r12
0x3a270:	pop    rbp; 	pop    r12
0x3a26f:	pop    rbx; 	pop    rbp; 	pop    r12
0x3a2c6:	pop    rsp
0x3a2c5:	pop    r12
0x3a2c4:	pop    rbp; 	pop    r12
0x3a2c3:	pop    rbx; 	pop    rbp; 	pop    r12
0x3a4a6:	pop    rdi
0x3a4a5:	pop    r15
0x3a4a4:	pop    rsi; 	pop    r15
0x3a4a3:	pop    r14; 	pop    r15
0x3a51e:	adc    DWORD PTR [rax-0x77],ecx
0x3a58b:	pop    rbp
0x3a58a:	pop    r13
0x3a589:	pop    rsp; 	pop    r13
0x3a588:	pop    r12; 	pop    r13
0x3a623:	pop    rbp
0x3a622:	pop    rbx; 	pop    rbp
0x3a621:	or     BYTE PTR [rbx+0x5d],bl
0x3a639:	sub    eax,edx
0x3a637:	xor    eax,edx; 	sub    eax,edx
0x3a64e:	sub    eax,edx
0x3a64d:	sub    rax,rdx
0x3a66e:	sub    eax,edx
0x3a66d:	sub    rax,rdx
0x3a68f:	or     eax,edx
0x3a68e:	or     rax,rdx
0x3a68d:	enter  0x948,0xd0
0x3a6a6:	idiv   esi
0x3a6a5:	idiv   rsi
0x3a6a4:	cdq    ; 	idiv   rsi
0x3a6b6:	idiv   esi
0x3a6b5:	idiv   rsi
0x3a6b4:	cdq    ; 	idiv   rsi
0x3a6cd:	pop    rbx
0x3a6cb:	jne    0x3a6d0; 	pop    rbx
0x3a6ca:	add    BYTE PTR [rbp+0x3],dh; 	pop    rbx
0x3a6f9:	pop    rbx
0x3a6f6:	cmovs  eax,edx; 	pop    rbx
0x3a728:	pop    rax
0x3a727:	rex pop rax
0x3a726:	mov    eax,DWORD PTR [rax+0x58]
0x3a725:	pop    rbx; 	mov    eax,DWORD PTR [rax+0x58]
0x3a782:	add    esp,0x28
0x3a781:	add    rsp,0x28
0x3a7a8:	pop    rbx
0x3a7a6:	xor    eax,eax; 	pop    rbx
0x3a7c6:	pop    rbx
0x3a7c3:	cmovs  eax,edx; 	pop    rbx
0x3a7f8:	pop    rax
0x3a7f7:	rex pop rax
0x3a7f6:	mov    eax,DWORD PTR [rax+0x58]
0x3a7f5:	pop    rbx; 	mov    eax,DWORD PTR [rax+0x58]
0x3a802:	pop    rbx
0x3a800:	xor    eax,eax; 	pop    rbx
0x3a852:	add    esp,0x28
0x3a851:	add    rsp,0x28
0x3a872:	pop    rbx
0x3a8a1:	pop    rax
0x3a8a0:	rex pop rax
0x3a89f:	mov    eax,DWORD PTR [rax+0x58]
0x3a89e:	pop    rbx; 	mov    eax,DWORD PTR [rax+0x58]
0x3a95a:	add    esp,0x8
0x3a959:	add    rsp,0x8
0x3aa07:	pop    rbx
0x3aa06:	ret    ; 	pop    rbx
0x3aa05:	rex.RB ret ; 	pop    rbx
0x3aa04:	cmovne eax,ebx; 	pop    rbx
0x3aab1:	pop    rbx
0x3aaaf:	mov    eax,ebx; 	pop    rbx
0x3aaae:	mov    rax,rbx; 	pop    rbx
0x3ab50:	add    esp,0x18
0x3ab4f:	add    rsp,0x18
0x3ac07:	xor    eax,eax
0x3ac85:	mov    DWORD PTR [rdi+0x8],edx
0x3ac84:	mov    QWORD PTR [rdi+0x8],rdx
0x3ac9a:	xor    eax,eax
0x3ac98:	mov    DWORD PTR [rdi],eax; 	xor    eax,eax
0x3acb6:	mov    DWORD PTR [rsi],edx
0x3acb4:	mov    DWORD PTR [rax],edx; 	mov    DWORD PTR [rsi],edx
0x3adb4:	pop    rsp
0x3adb3:	pop    r12
0x3adb2:	pop    rbp; 	pop    r12
0x3adb1:	pop    rbx; 	pop    rbp; 	pop    r12
0x3ae4b:	pop    rbp
0x3ae4a:	pop    r13
0x3ae49:	pop    rsp; 	pop    r13
0x3ae48:	pop    r12; 	pop    r13
0x3aed3:	pop    rbp
0x3aed2:	pop    r13
0x3aed1:	pop    rsp; 	pop    r13
0x3aed0:	pop    r12; 	pop    r13
0x3af6a:	add    esp,0x8
0x3af69:	add    rsp,0x8
0x3afbe:	xor    eax,ecx
0x3afbc:	add    BYTE PTR [rax],al; 	xor    eax,ecx
0x3afef:	add    esp,0x18
0x3afee:	add    rsp,0x18
0x3b01c:	add    esp,0x18
0x3b01b:	add    rsp,0x18
0x3b03e:	add    esp,0x18
0x3b03d:	add    rsp,0x18
0x3b06b:	add    esp,0x18
0x3b06a:	add    rsp,0x18
0x3b08e:	add    esp,0x18
0x3b08d:	add    rsp,0x18
0x3b0bb:	add    esp,0x18
0x3b0ba:	add    rsp,0x18
0x3b0e8:	add    esp,0x8
0x3b0e7:	add    rsp,0x8
0x3b179:	pop    rbp
0x3b178:	pop    rbx; 	pop    rbp
0x3b177:	sbb    BYTE PTR [rbx+0x5d],bl
0x3b1e5:	pop    rbp
0x3b1e4:	pop    rbx; 	pop    rbp
0x3b1e3:	or     BYTE PTR [rbx+0x5d],bl
0x3b244:	pop    rbp
0x3b243:	pop    rbx; 	pop    rbp
0x3b242:	or     BYTE PTR [rbx+0x5d],bl
0x3b299:	xor    eax,eax
0x3b2e3:	xor    eax,eax
0x3b32a:	xor    eax,eax
0x3b373:	mov    DWORD PTR [rdi+0x2],edx
0x3b372:	mov    WORD PTR [rdi+0x2],dx
0x3b463:	and    BYTE PTR [rax-0x77],cl
0x3b47d:	and    BYTE PTR [rax-0x77],cl
0x3b52d:	pop    rdi
0x3b52c:	pop    r15
0x3b52b:	pop    rsi; 	pop    r15
0x3b52a:	pop    r14; 	pop    r15
0x3b589:	pop    rdi
0x3b588:	pop    r15
0x3b587:	pop    rsi; 	pop    r15
0x3b586:	pop    r14; 	pop    r15
0x3b933:	and    BYTE PTR [rax-0x77],cl
0x3b94d:	and    BYTE PTR [rax-0x77],cl
0x3b9fd:	pop    rdi
0x3b9fc:	pop    r15
0x3b9fb:	pop    rsi; 	pop    r15
0x3b9fa:	pop    r14; 	pop    r15
0x3ba59:	pop    rdi
0x3ba58:	pop    r15
0x3ba57:	pop    rsi; 	pop    r15
0x3ba56:	pop    r14; 	pop    r15
0x3bb7a:	pop    rdi
0x3bb79:	pop    r15
0x3bb78:	pop    rsi; 	pop    r15
0x3bb77:	pop    r14; 	pop    r15
0x3bf9d:	pop    rdi
0x3bf9c:	pop    r15
0x3bf9b:	pop    rsi; 	pop    r15
0x3bf9a:	pop    r14; 	pop    r15
0x3c036:	add    BYTE PTR [rax+0x1],cl
0x3c130:	pop    rsi
0x3c12f:	pop    r14
0x3c12e:	pop    rbp; 	pop    r14
0x3c12d:	pop    r13; 	pop    r14
0x3c17f:	pop    rsi
0x3c17e:	pop    r14
0x3c17d:	pop    rbp; 	pop    r14
0x3c17c:	pop    r13; 	pop    r14
0x3c1b7:	pop    rsi
0x3c1b6:	pop    r14
0x3c1b5:	pop    rbp; 	pop    r14
0x3c1b4:	pop    r13; 	pop    r14
0x3c257:	pop    rsi
0x3c256:	pop    r14
0x3c255:	pop    rbp; 	pop    r14
0x3c254:	pop    r13; 	pop    r14
0x3c2c9:	add    BYTE PTR [rax-0x39],cl
0x3c457:	add    BYTE PTR [rax-0x7d],cl
0x3c6ff:	pop    rdi
0x3c6fe:	pop    r15
0x3c6fd:	pop    rsi; 	pop    r15
0x3c6fc:	pop    r14; 	pop    r15
0x3ca26:	cmp    cl,ch
0x3d2fc:	outs   dx,DWORD PTR ds:[rsi]
0x3d2f9:	jmp    QWORD PTR [rsi+0xf]; 	outs   dx,DWORD PTR ds:[rsi]
0x3e147:	fisttp QWORD PTR [rax+0x29]
0x3ea22:	add    BYTE PTR [rax-0x77],cl
0x3ea90:	add    BYTE PTR [rax-0x77],cl
0x3eaa5:	add    BYTE PTR [rax-0x77],cl
0x3f25d:	pop    rdi
0x3f25c:	pop    r15
0x3f25b:	pop    rsi; 	pop    r15
0x3f25a:	pop    r14; 	pop    r15
0x3f2f6:	add    BYTE PTR [rax+0x1],cl
0x3f3f3:	pop    rsi
0x3f3f2:	pop    r14
0x3f3f1:	pop    rbp; 	pop    r14
0x3f3f0:	pop    r13; 	pop    r14
0x3f442:	pop    rsi
0x3f441:	pop    r14
0x3f440:	pop    rbp; 	pop    r14
0x3f43f:	pop    r13; 	pop    r14
0x3f477:	pop    rsi
0x3f476:	pop    r14
0x3f475:	pop    rbp; 	pop    r14
0x3f474:	pop    r13; 	pop    r14
0x3f517:	pop    rsi
0x3f516:	pop    r14
0x3f515:	pop    rbp; 	pop    r14
0x3f514:	pop    r13; 	pop    r14
0x3f589:	add    BYTE PTR [rax-0x39],cl
0x3f727:	add    BYTE PTR [rax-0x7d],cl
0x3f9df:	pop    rdi
0x3f9de:	pop    r15
0x3f9dd:	pop    rsi; 	pop    r15
0x3f9dc:	pop    r14; 	pop    r15
0x405f4:	outs   dx,DWORD PTR ds:[rsi]
0x405f1:	jmp    QWORD PTR [rsi+0xf]; 	outs   dx,DWORD PTR ds:[rsi]
0x413c6:	fisttp QWORD PTR [rax+0x29]
0x419cf:	add    BYTE PTR [rax-0x77],cl
0x41a5d:	add    BYTE PTR [rax-0x77],cl
0x421b5:	pop    rdi
0x421b4:	pop    r15
0x421b3:	pop    rsi; 	pop    r15
0x421b2:	pop    r14; 	pop    r15
0x42256:	add    BYTE PTR [rax+0x1],cl
0x42351:	leave  
0x42350:	fmulp  st(1),st
0x4234f:	pop    rsi; 	fmulp  st(1),st
0x4234e:	pop    r14; 	fmulp  st(1),st
0x423a0:	pop    rsi
0x4239f:	pop    r14
0x4239e:	pop    rbp; 	pop    r14
0x4239d:	pop    r13; 	pop    r14
0x423d2:	fmul   st,st(0)
0x423d1:	pop    rsi; 	fmul   st,st(0)
0x423d0:	pop    r14; 	fmul   st,st(0)
0x4246a:	fmul   st,st(0)
0x42469:	pop    rsi; 	fmul   st,st(0)
0x42468:	pop    r14; 	fmul   st,st(0)
0x424d7:	fmul   DWORD PTR [rax-0x39]
0x42c0d:	pop    rdi
0x42c0c:	pop    r15
0x42c0b:	pop    rsi; 	pop    r15
0x42c0a:	pop    r14; 	pop    r15
0x434cb:	outs   dx,DWORD PTR ds:[rsi]
0x434c8:	jmp    QWORD PTR [rsi+0xf]; 	outs   dx,DWORD PTR ds:[rsi]
0x43e35:	add    BYTE PTR [rbp+rcx*4+0x2d],cl
0x44ac0:	shr    cl,cl
0x44c99:	pop    rbp
0x44c98:	pop    rbx; 	pop    rbp
0x44c97:	sub    BYTE PTR [rbx+0x5d],bl
0x44d19:	pop    rbp
0x44d18:	pop    rbx; 	pop    rbp
0x44d17:	sub    BYTE PTR [rbx+0x5d],bl
0x44dc7:	pop    rbp
0x44dc6:	pop    rbx; 	pop    rbp
0x44dc5:	sub    BYTE PTR [rbx+0x5d],bl
0x4504c:	dec    DWORD PTR [rcx]
0x4509d:	pop    rsp
0x4509c:	pop    r12
0x4509b:	pop    rbp; 	pop    r12
0x4509a:	pop    rbx; 	pop    rbp; 	pop    r12
0x45389:	pop    rbx
0x45387:	add    BYTE PTR [rax],al; 	pop    rbx
0x453ba:	mov    dh,0xc0
0x453b9:	movzx  eax,al
0x453b8:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x4561b:	pop    rbp
0x4561a:	pop    rdi; 	pop    rbp
0x45619:	pop    r15; 	pop    rbp
0x45618:	pop    rsi; 	pop    r15; 	pop    rbp
0x45800:	pop    rbp
0x457ff:	pop    rdi; 	pop    rbp
0x457fe:	pop    r15; 	pop    rbp
0x457fd:	pop    rsi; 	pop    r15; 	pop    rbp
0x45854:	pop    rbp
0x45853:	pop    rdi; 	pop    rbp
0x45852:	pop    r15; 	pop    rbp
0x45851:	pop    rsi; 	pop    r15; 	pop    rbp
0x45a30:	xor    eax,eax
0x45a2e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x45a37:	add    bl,dh
0x45a3f:	add    bl,dh
0x45afc:	add    bl,dh
0x45afa:	add    al,0x10; 	add    bl,dh
0x45b62:	dec    DWORD PTR [rax-0x77]
0x45b6c:	add    BYTE PTR [rax+0x39],cl
0x45bd9:	dec    DWORD PTR [rax-0x77]
0x45be3:	add    BYTE PTR [rax+0x39],cl
0x45c4a:	pop    rbp
0x45c49:	pop    rbx; 	pop    rbp
0x45c48:	rcr    BYTE PTR [rbx+0x5d],1
0x45c47:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x45cf8:	add    BYTE PTR [rax],al
0x45cf6:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x460a3:	pop    rdi
0x460a2:	pop    r15
0x460a1:	pop    rsi; 	pop    r15
0x460a0:	pop    r14; 	pop    r15
0x46180:	ror    BYTE PTR [rax-0x7d],cl
0x46275:	add    DWORD PTR [rax-0x7d],ecx
0x46274:	rex.XB add DWORD PTR [r8-0x7d],ecx
0x46eb2:	add    BYTE PTR [rax],al
0x46eb0:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x46f15:	ror    BYTE PTR [rax+0xf],0x44
0x46f88:	pop    rdi
0x46f87:	pop    r15
0x46f86:	pop    rsi; 	pop    r15
0x46f85:	pop    r14; 	pop    r15
0x46fef:	pop    rdi
0x46fee:	pop    r15
0x46fed:	pop    rsi; 	pop    r15
0x46fec:	pop    r14; 	pop    r15
0x4705d:	pop    rbx
0x4705b:	mov    eax,ebx; 	pop    rbx
0x4705a:	mov    rax,rbx; 	pop    rbx
0x4706a:	pop    rbx
0x47068:	mov    eax,ebx; 	pop    rbx
0x47067:	mov    rax,rbx; 	pop    rbx
0x47077:	pop    rbx
0x47075:	mov    eax,ebx; 	pop    rbx
0x47074:	mov    rax,rbx; 	pop    rbx
0x47086:	add    BYTE PTR [rax+0x39],cl
0x470a1:	add    DWORD PTR [rax+0x39],ecx
0x470af:	add    BYTE PTR [rax-0x77],cl
0x47254:	and    cl,BYTE PTR [rax-0x7d]
0x47267:	add    BYTE PTR [rax-0x7d],cl
0x4727e:	xchg   esp,eax
0x4727c:	cmp    cl,BYTE PTR [rdi]; 	xchg   esp,eax
0x472cf:	pop    rdi
0x472ce:	pop    r15
0x472cd:	pop    rsi; 	pop    r15
0x472cc:	pop    r14; 	pop    r15
0x47780:	pop    rdi
0x4777f:	pop    r15
0x4777e:	pop    rsi; 	pop    r15
0x4777d:	pop    r14; 	pop    r15
0x47a16:	pop    rsp
0x47a15:	pop    r12
0x47a14:	pop    rbp; 	pop    r12
0x47a13:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x47b29:	xor    eax,eax
0x47b27:	jae    0x47b2c; 	xor    eax,eax
0x47b39:	or     eax,0xffffffff
0x47b38:	or     rax,0xffffffffffffffff
0x47bbd:	xor    eax,eax
0x47bbb:	jg     0x47c25; 	xor    eax,eax
0x47bcd:	or     eax,0xffffffff
0x47bcc:	or     rax,0xffffffffffffffff
0x47d84:	pop    rbx
0x47f4d:	xor    eax,eax
0x47f4b:	jbe    0x47fbd; 	xor    eax,eax
0x47f5d:	or     eax,0xffffffff
0x47f5c:	or     rax,0xffffffffffffffff
0x48039:	pop    rbx
0x48037:	xor    eax,eax; 	pop    rbx
0x48066:	add    BYTE PTR [rax],al
0x48064:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x48089:	xor    eax,eax
0x48088:	out    dx,eax; 	xor    eax,eax
0x48087:	jne    0x48078; 	xor    eax,eax
0x480df:	pop    rsp
0x480de:	pop    r12
0x480dd:	pop    rbp; 	pop    r12
0x480dc:	pop    rbx; 	pop    rbp; 	pop    r12
0x481d0:	pop    rbx
0x481ce:	xor    eax,eax; 	pop    rbx
0x481cd:	icebp  ; 	xor    eax,eax; 	pop    rbx
0x481fe:	add    BYTE PTR [rax],al
0x481fc:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x48221:	xor    eax,eax
0x48220:	out    dx,eax; 	xor    eax,eax
0x4821f:	jne    0x48210; 	xor    eax,eax
0x4827f:	pop    rsp
0x4827e:	pop    r12
0x4827d:	pop    rbp; 	pop    r12
0x4827c:	pop    rbx; 	pop    rbp; 	pop    r12
0x482f9:	adc    eax,eax
0x482f7:	mov    eax,ecx; 	adc    eax,eax
0x48400:	add    BYTE PTR [rax-0x7d],cl
0x48439:	pop    rbx
0x48438:	pop    rbp; 	pop    rbx
0x48437:	rcr    BYTE PTR [rbp+0x5b],1
0x48436:	adc    eax,edx; 	pop    rbp; 	pop    rbx
0x4846f:	sub    eax,0x1
0x48478:	xor    eax,eax
0x48476:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x4857c:	adc    BYTE PTR [rax+0x29],cl
0x486ca:	pop    rdi
0x486c9:	pop    r15
0x486c8:	pop    rsi; 	pop    r15
0x486c7:	pop    r14; 	pop    r15
0x486e3:	pop    rdi
0x486e2:	pop    r15
0x486e1:	pop    rsi; 	pop    r15
0x486e0:	pop    r14; 	pop    r15
0x487d3:	pop    rdi
0x487d2:	pop    r15
0x487d1:	pop    rsi; 	pop    r15
0x487d0:	pop    r14; 	pop    r15
0x488ae:	pop    rdi
0x488ad:	pop    r15
0x488ac:	pop    rsi; 	pop    r15
0x488ab:	pop    r14; 	pop    r15
0x488c5:	dec    DWORD PTR [rcx-0x77]
0x48989:	mov    DWORD PTR [rdi],ecx
0x48988:	mov    QWORD PTR [rdi],r9
0x48987:	loope  0x489d5; 	mov    DWORD PTR [rdi],ecx
0x489bc:	clc    
0x489bb:	rex.WRXB clc 
0x489ba:	mov    DWORD PTR [rdi-0x8],ecx
0x489b9:	mov    QWORD PTR [rdi-0x8],r9
0x489e2:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x489df:	add    BYTE PTR [rbp+0xf],cl; 	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x48a1e:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x48a2f:	mov    DWORD PTR [rdi-0x10],ecx
0x48a2e:	mov    QWORD PTR [rdi-0x10],r9
0x48a93:	mov    DWORD PTR [rdi],ecx
0x48a92:	mov    QWORD PTR [rdi],r9
0x48ac4:	mov    DWORD PTR [rdi+0x8],ecx
0x48ac3:	mov    QWORD PTR [rdi+0x8],r9
0x48af2:	lods   eax,DWORD PTR ds:[rsi]
0x48aef:	add    BYTE PTR [rbp+0xf],cl; 	lods   eax,DWORD PTR ds:[rsi]
0x48b2e:	lods   eax,DWORD PTR ds:[rsi]
0x48b3f:	mov    DWORD PTR [rdi+0x10],ecx
0x48b3e:	mov    QWORD PTR [rdi+0x10],r9
0x48c36:	or     BYTE PTR [rax-0x7d],cl
0x48ce0:	pop    rbp
0x48cdf:	pop    rdi; 	pop    rbp
0x48cde:	pop    r15; 	pop    rbp
0x48cdd:	pop    rsi; 	pop    r15; 	pop    rbp
0x48dab:	enter  0x8b48,0x14
0x48db3:	ror    BYTE PTR [rax-0x77],0x14
0x49011:	fisttp DWORD PTR [rax-0x77]
0x4906e:	adc    BYTE PTR [rax+0x1],cl
0x490b7:	pop    rbx
0x490b5:	mov    eax,edx; 	pop    rbx
0x490b4:	mov    rax,rdx; 	pop    rbx
0x49125:	sub    ecx,DWORD PTR [rax-0x7d]
0x49165:	pop    rdi
0x49164:	pop    r15
0x49163:	pop    rsi; 	pop    r15
0x49162:	pop    r14; 	pop    r15
0x492d9:	pop    rdi
0x492d8:	pop    r15
0x492d7:	pop    rsi; 	pop    r15
0x492d6:	pop    r14; 	pop    r15
0x495a1:	adc    cl,BYTE PTR [rcx-0x7d]
0x49805:	sub    ecx,DWORD PTR [rax-0x7d]
0x4983f:	pop    rsi
0x4983e:	pop    r14
0x4983d:	pop    rbp; 	pop    r14
0x4983c:	pop    r13; 	pop    r14
0x499b8:	pop    rdi
0x499b7:	pop    r15
0x499b6:	pop    rsi; 	pop    r15
0x499b5:	pop    r14; 	pop    r15
0x49e3e:	leave  
0x49e3d:	dec    ecx
0x49e45:	leave  
0x49e44:	dec    ecx
0x49e5e:	leave  
0x49e5d:	dec    ecx
0x49e7c:	leave  
0x49e7b:	dec    ecx
0x49ed9:	adc    eax,eax
0x49ed7:	mov    eax,ecx; 	adc    eax,eax
0x49fe0:	add    BYTE PTR [rax-0x7d],cl
0x4a019:	pop    rbx
0x4a018:	pop    rbp; 	pop    rbx
0x4a017:	rcr    BYTE PTR [rbp+0x5b],1
0x4a016:	adc    eax,edx; 	pop    rbp; 	pop    rbx
0x4a084:	add    BYTE PTR [rax],al
0x4a082:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x4a0a3:	mov    DWORD PTR [rdi],esi
0x4a0a2:	mov    QWORD PTR [rdi],rsi
0x4a0b9:	add    BYTE PTR [rax],al
0x4a0b7:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x4a10c:	add    BYTE PTR [rax],al
0x4a10a:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x4a144:	add    BYTE PTR [rax],al
0x4a142:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x4a192:	cld    
0x4a191:	and    al,0xfc
0x4a190:	rex.R and al,0xfc
0x4a18f:	adc    BYTE PTR [rsp-0x4],al
0x4a1d8:	clc    
0x4a1d7:	and    al,0xf8
0x4a1d6:	rex.R and al,0xf8
0x4a1d5:	adc    BYTE PTR [rsp-0x8],al
0x4a21c:	and    al,0xe8
0x4a21b:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xe8
0x4a21a:	fld    TBYTE PTR [rsp-0x18]
0x4a31f:	pop    rdi
0x4a31e:	pop    r15
0x4a31d:	pop    rsi; 	pop    r15
0x4a31c:	pop    r14; 	pop    r15
0x4a349:	pop    rdi
0x4a348:	pop    r15
0x4a347:	pop    rsi; 	pop    r15
0x4a346:	pop    r14; 	pop    r15
0x4a4f9:	or     BYTE PTR [rax-0x7d],cl
0x4a5c1:	cmovae eax,edi
0x4a5c0:	cmovae rax,rdi
0x4a682:	pop    rbx
0x4a680:	add    BYTE PTR [rax],al; 	pop    rbx
0x4a69a:	pop    rbx
0x4a698:	add    BYTE PTR [rax],al; 	pop    rbx
0x4a6f4:	mov    eax,esi
0x4a6f3:	mov    rax,rsi
0x4a6f2:	in     eax,0x48; 	mov    eax,esi
0x4a778:	mov    eax,esi
0x4a777:	mov    rax,rsi
0x4a809:	pop    rbx
0x4a807:	mov    eax,eax; 	pop    rbx
0x4a806:	mov    rax,r8; 	pop    rbx
0x4a8df:	pop    rbp
0x4a8de:	pop    r13
0x4a8dd:	pop    rsp; 	pop    r13
0x4a8dc:	pop    r12; 	pop    r13
0x4a9a5:	pop    rbp
0x4a9a4:	pop    rdi; 	pop    rbp
0x4a9a3:	pop    r15; 	pop    rbp
0x4a9a2:	pop    rsi; 	pop    r15; 	pop    rbp
0x4aa7a:	pop    rbp
0x4aa79:	pop    rdi; 	pop    rbp
0x4aa78:	pop    r15; 	pop    rbp
0x4aa77:	pop    rsi; 	pop    r15; 	pop    rbp
0x4aca2:	pop    rbp
0x4aca1:	pop    rdi; 	pop    rbp
0x4aca0:	pop    r15; 	pop    rbp
0x4ac9f:	pop    rsi; 	pop    r15; 	pop    rbp
0x4ae2c:	and    BYTE PTR [rax+0x1],cl
0x4b2da:	add    BYTE PTR [rax+0x63],cl
0x4b686:	dec    DWORD PTR [rax-0x39]
0x4b701:	pop    rbp
0x4b700:	pop    rdi; 	pop    rbp
0x4b6ff:	pop    r15; 	pop    rbp
0x4b6fe:	pop    rsi; 	pop    r15; 	pop    rbp
0x4b792:	dec    DWORD PTR [rax-0x77]
0x4b791:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x4b82a:	cmp    BYTE PTR [rax+0x39],cl
0x4b829:	push   rax; 	cmp    BYTE PTR [rax+0x39],cl
0x4b879:	add    BYTE PTR [rax+0x39],cl
0x4bab1:	add    BYTE PTR [rax+0x39],cl
0x4bc85:	or     al,0x83
0x4bc84:	rex.RX or al,0x83
0x4bc83:	mov    dh,0x46; 	or     al,0x83
0x4bcd2:	add    BYTE PTR [rcx-0x7d],cl
0x4bef1:	dec    DWORD PTR [rax-0x77]
0x4bfb3:	cmp    BYTE PTR [rax+0x39],cl
0x4bfb2:	push   rax; 	cmp    BYTE PTR [rax+0x39],cl
0x4c017:	add    BYTE PTR [rax+0x39],cl
0x4c4e7:	add    BYTE PTR [rax+0x39],cl
0x4c5b6:	lahf   
0x4c5b4:	in     al,0xf; 	lahf   
0x4c671:	add    BYTE PTR [rax+0x39],cl
0x4c73e:	add    BYTE PTR [rax+0x39],cl
0x4c7d5:	cmp    BYTE PTR [rax+0x39],cl
0x4c7d4:	push   rax; 	cmp    BYTE PTR [rax+0x39],cl
0x4c8b2:	dec    DWORD PTR [rax-0x77]
0x4c8b1:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x4c989:	add    BYTE PTR [rax-0x77],cl
0x4cfcd:	dec    DWORD PTR [rax-0x77]
0x4cfcc:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x4d289:	pop    rbp
0x4d288:	pop    rdi; 	pop    rbp
0x4d287:	pop    r15; 	pop    rbp
0x4d286:	pop    rsi; 	pop    r15; 	pop    rbp
0x4d33a:	pop    rbp
0x4d339:	pop    rdi; 	pop    rbp
0x4d338:	pop    r15; 	pop    rbp
0x4d337:	pop    rsi; 	pop    r15; 	pop    rbp
0x4d34a:	icebp  
0x4d385:	outs   dx,DWORD PTR ds:[rsi]
0x4d6d5:	dec    DWORD PTR [rcx-0x77]
0x4d6d4:	clc    ; 	dec    DWORD PTR [rcx-0x77]
0x4d7dc:	dec    DWORD PTR [rcx+0x39]
0x4dc0e:	dec    DWORD PTR [rcx+0x29]
0x4f2c3:	dec    DWORD PTR [rcx-0x77]
0x4fff9:	pop    rbp
0x4fff8:	pop    r13
0x4fff7:	pop    rsp; 	pop    r13
0x4fff6:	pop    r12; 	pop    r13
0x500e5:	pop    rbp
0x500e4:	pop    rbx; 	pop    rbp
0x500e2:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x50169:	pop    rbp
0x50168:	pop    rbx; 	pop    rbp
0x50166:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x5019e:	pop    rbp
0x5019d:	pop    rbx; 	pop    rbp
0x5019b:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x501bd:	pop    rbp
0x501bc:	pop    rbx; 	pop    rbp
0x501ba:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x503b2:	pop    rbp
0x503b1:	pop    rdi; 	pop    rbp
0x503b0:	pop    r15; 	pop    rbp
0x503af:	pop    rsi; 	pop    r15; 	pop    rbp
0x504c8:	add    eax,eax
0x504c7:	add    eax,r8d
0x504c6:	icebp  ; 	add    eax,r8d
0x5096f:	add    BYTE PTR [rax-0x7d],cl
0x50cd5:	pop    rbp
0x50cd4:	pop    rdi; 	pop    rbp
0x50cd3:	pop    r15; 	pop    rbp
0x50cd2:	pop    rsi; 	pop    r15; 	pop    rbp
0x50e0b:	pop    rbp
0x50e0a:	pop    rdi; 	pop    rbp
0x50e09:	pop    r15; 	pop    rbp
0x50e08:	pop    rsi; 	pop    r15; 	pop    rbp
0x50e5d:	pop    rbp
0x50e5c:	pop    rdi; 	pop    rbp
0x50e5b:	pop    r15; 	pop    rbp
0x50e5a:	pop    rsi; 	pop    r15; 	pop    rbp
0x50fc0:	pop    rbp
0x50fbf:	pop    rdi; 	pop    rbp
0x50fbe:	pop    r15; 	pop    rbp
0x50fbd:	pop    rsi; 	pop    r15; 	pop    rbp
0x51344:	xchg   esp,eax
0x51342:	xor    BYTE PTR [rdi],cl; 	xchg   esp,eax
0x51341:	std    ; 	xor    BYTE PTR [rdi],cl; 	xchg   esp,eax
0x5137d:	xchg   esp,eax
0x5137b:	xor    BYTE PTR [rdi],cl; 	xchg   esp,eax
0x5137a:	std    ; 	xor    BYTE PTR [rdi],cl; 	xchg   esp,eax
0x51601:	xchg   esp,eax
0x515ff:	xor    BYTE PTR [rdi],cl; 	xchg   esp,eax
0x515fe:	std    ; 	xor    BYTE PTR [rdi],cl; 	xchg   esp,eax
0x519de:	add    DWORD PTR [rax-0x7d],ecx
0x52c94:	pop    rsp
0x52c93:	pop    r12
0x52c92:	pop    rbp; 	pop    r12
0x52c91:	rcr    BYTE PTR [rbp+0x41],0x5c
0x52e0b:	pop    rdi
0x52e0a:	pop    r15
0x52e09:	pop    rsi; 	pop    r15
0x52e08:	pop    r14; 	pop    r15
0x53175:	pop    rdi
0x53174:	pop    r15
0x53173:	pop    rsi; 	pop    r15
0x53172:	pop    r14; 	pop    r15
0x53b2e:	jrcxz  0x53ba5
0x548df:	adc    cl,ch
0x54a7a:	add    BYTE PTR [rax-0x7d],cl
0x54b91:	pop    rbp
0x54b90:	pop    r13
0x54b8f:	pop    rsp; 	pop    r13
0x54b8e:	pop    r12; 	pop    r13
0x54bb4:	pop    rbp
0x54bb3:	pop    r13
0x54bb2:	pop    rsp; 	pop    r13
0x54bb1:	pop    r12; 	pop    r13
0x54cbd:	pop    rsi
0x54cbc:	pop    r14
0x54cbb:	pop    rbp; 	pop    r14
0x54cba:	pop    r13; 	pop    r14
0x54cd5:	pop    rsi
0x54cd4:	pop    r14
0x54cd3:	pop    rbp; 	pop    r14
0x54cd2:	pop    r13; 	pop    r14
0x54d8d:	pop    rbp
0x54d8c:	pop    r13
0x54d8b:	pop    rsp; 	pop    r13
0x54d8a:	pop    r12; 	pop    r13
0x54da3:	pop    rbp
0x54da2:	pop    r13
0x54da1:	pop    rsp; 	pop    r13
0x54da0:	pop    r12; 	pop    r13
0x54e56:	pop    rbx
0x54e54:	mov    eax,edx; 	pop    rbx
0x55060:	pop    rdi
0x5505f:	pop    r15
0x5505e:	pop    rsi; 	pop    r15
0x5505d:	pop    r14; 	pop    r15
0x55275:	pop    rdi
0x55274:	pop    r15
0x55273:	pop    rsi; 	pop    r15
0x55272:	pop    r14; 	pop    r15
0x55429:	pop    rdi
0x55428:	pop    r15
0x55427:	pop    rsi; 	pop    r15
0x55426:	pop    r14; 	pop    r15
0x554ef:	pop    rdi
0x554ee:	pop    r15
0x554ed:	pop    rsi; 	pop    r15
0x554ec:	pop    r14; 	pop    r15
0x55586:	pop    rdi
0x55585:	pop    r15
0x55584:	pop    rsi; 	pop    r15
0x55583:	pop    r14; 	pop    r15
0x5576c:	add    BYTE PTR [rax],al
0x5576a:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x557fc:	add    BYTE PTR [rax],al
0x557fa:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x5589e:	add    BYTE PTR [rax],al
0x5589c:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x55937:	add    BYTE PTR [rax],al
0x55935:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x559cc:	add    BYTE PTR [rax],al
0x559ca:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x55a5c:	add    BYTE PTR [rax],al
0x55a5a:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x55aec:	add    BYTE PTR [rax],al
0x55aea:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x55b38:	pop    rbp
0x55b37:	pop    r13
0x55b36:	pop    rsp; 	pop    r13
0x55b35:	pop    r12; 	pop    r13
0x55b8d:	add    BYTE PTR [rax+0x29],cl
0x55bfe:	pop    rbp
0x55bfd:	pop    rdi; 	pop    rbp
0x55bfc:	pop    r15; 	pop    rbp
0x55bfb:	pop    rsi; 	pop    r15; 	pop    rbp
0x55ceb:	add    BYTE PTR [rax-0x77],cl
0x55d0d:	loop   0x55c98
0x55e1c:	pop    rbp
0x55e1b:	pop    rdi; 	pop    rbp
0x55e1a:	pop    r15; 	pop    rbp
0x55e19:	pop    rsi; 	pop    r15; 	pop    rbp
0x55e5d:	pop    rbp
0x55e5c:	pop    rdi; 	pop    rbp
0x55e5b:	pop    r15; 	pop    rbp
0x55e5a:	pop    rsi; 	pop    r15; 	pop    rbp
0x55f3c:	and    BYTE PTR [rax+0x1],cl
0x563e4:	add    BYTE PTR [rax+0x63],cl
0x56809:	or     al,0x83
0x56808:	push   rsi; 	or     al,0x83
0x56807:	mov    dh,0x56; 	or     al,0x83
0x56a66:	dec    DWORD PTR [rax-0x39]
0x56ae9:	pop    rbp
0x56ae8:	pop    rdi; 	pop    rbp
0x56ae7:	pop    r15; 	pop    rbp
0x56ae6:	pop    rsi; 	pop    r15; 	pop    rbp
0x5715e:	add    cl,BYTE PTR [rax+0x29]
0x5715d:	clc    ; 	add    cl,BYTE PTR [rax+0x29]
0x57346:	cmp    BYTE PTR [rax+0x39],cl
0x57345:	push   rax; 	cmp    BYTE PTR [rax+0x39],cl
0x57451:	add    BYTE PTR [rax-0x7d],cl
0x575a7:	add    BYTE PTR [rax+0x39],cl
0x58ae5:	pop    rbp
0x58ae4:	pop    rdi; 	pop    rbp
0x58ae3:	pop    r15; 	pop    rbp
0x58ae2:	pop    rsi; 	pop    r15; 	pop    rbp
0x58b0b:	pop    rbp
0x58b0a:	pop    rdi; 	pop    rbp
0x58b09:	pop    r15; 	pop    rbp
0x58b08:	pop    rsi; 	pop    r15; 	pop    rbp
0x58bf0:	pop    rbp
0x58bef:	pop    rdi; 	pop    rbp
0x58bee:	pop    r15; 	pop    rbp
0x58bed:	pop    rsi; 	pop    r15; 	pop    rbp
0x59474:	dec    DWORD PTR [rcx-0x77]
0x59473:	clc    ; 	dec    DWORD PTR [rcx-0x77]
0x5959e:	dec    DWORD PTR [rcx+0x39]
0x596f9:	dec    DWORD PTR [rcx+0x39]
0x59781:	add    BYTE PTR [rcx-0x77],cl
0x5a7b7:	dec    DWORD PTR [rcx+0x39]
0x5aa9a:	sbb    al,BYTE PTR [rcx-0x7d]
0x5af86:	sbb    al,BYTE PTR [rcx-0x7d]
0x5b77b:	pop    rbp
0x5b77a:	pop    r13
0x5b779:	pop    rsp; 	pop    r13
0x5b778:	pop    r12; 	pop    r13
0x5bbaf:	pop    rbp
0x5bbae:	pop    rdi; 	pop    rbp
0x5bbad:	pop    r15; 	pop    rbp
0x5bbac:	pop    rsi; 	pop    r15; 	pop    rbp
0x5bc18:	add    BYTE PTR [rax-0x7d],cl
0x5bce1:	adc    BYTE PTR [rax-0x7d],cl
0x5c337:	dec    DWORD PTR [rax+0x63]
0x5c487:	add    al,ch
0x5c485:	add    BYTE PTR [rax],al; 	add    al,ch
0x5cc14:	dec    DWORD PTR [rax-0x77]
0x5cd99:	ror    BYTE PTR [rdi],0x85
0x5cdca:	dec    DWORD PTR [rax-0x77]
0x5d66f:	dec    DWORD PTR [rax+0x63]
0x5e5a0:	add    BYTE PTR [rax-0x7d],cl
0x5e690:	fisttp WORD PTR [rax-0x7d]
0x5e794:	dec    DWORD PTR [rax+0x39]
0x5e793:	rex.RXB dec DWORD PTR [r8+0x39]
0x5e85c:	add    BYTE PTR [rax-0x77],cl
0x5e8b6:	cmp    BYTE PTR [rax-0x7d],cl
0x5ebf5:	dec    DWORD PTR [rax+0x1]
0x5f4bb:	dec    DWORD PTR [rax-0x77]
0x5f536:	dec    DWORD PTR [rax-0x77]
0x5f681:	dec    DWORD PTR [rax-0x7d]
0x609e0:	dec    DWORD PTR [rax-0x77]
0x60aec:	dec    DWORD PTR [rax-0x7d]
0x60dbc:	jo     0x60d47
0x60dbb:	push   QWORD PTR [rax-0x77]
0x613a9:	dec    DWORD PTR [rax-0x77]
0x61a41:	xchg   esp,eax
0x61a3f:	add    BYTE PTR [rdi],cl; 	xchg   esp,eax
0x61e94:	add    DWORD PTR [rax-0x7d],ecx
0x62059:	adc    BYTE PTR [rax-0x7d],cl
0x623f8:	adc    BYTE PTR [rax-0x77],cl
0x62420:	adc    BYTE PTR [rax-0x7d],cl
0x637b4:	pop    rbp
0x637b3:	pop    rdi; 	pop    rbp
0x637b2:	pop    r15; 	pop    rbp
0x637b1:	pop    rsi; 	pop    r15; 	pop    rbp
0x63dfd:	jg     0x63d88
0x64124:	div    dh
0x64122:	add    BYTE PTR [rcx],dh; 	div    dh
0x64136:	add    dh,dh
0x64134:	sbb    BYTE PTR [rax],al; 	add    dh,dh
0x6432a:	add    DWORD PTR [rax+0x1],ecx
0x64329:	in     al,dx; 	add    DWORD PTR [rax+0x1],ecx
0x64708:	add    BYTE PTR [rax-0x77],cl
0x649a5:	div    dh
0x649ae:	push   rsi
0x64d5c:	push   rsi
0x64f2e:	add    BYTE PTR [rax+0x1],cl
0x652f8:	dec    DWORD PTR [rax-0x77]
0x65895:	add    dh,dh
0x65893:	add    BYTE PTR [rax],al; 	add    dh,dh
0x6589e:	add    dh,dh
0x6589c:	adc    DWORD PTR [rax],eax; 	add    dh,dh
0x6597f:	push   rsi
0x65ace:	push   rsi
0x65b8f:	push   rsi
0x662ce:	add    BYTE PTR [rcx-0x77],cl
0x662ef:	dec    DWORD PTR [rcx-0x7d]
0x6632c:	rol    BYTE PTR [rax+rcx*2],0x1
0x66506:	add    BYTE PTR [rax-0x77],cl
0x66571:	add    BYTE PTR [rcx-0x77],cl
0x66592:	add    BYTE PTR [rcx-0x7d],cl
0x668b5:	push   rsi
0x668fc:	imul   cl
0x668fa:	xor    BYTE PTR [rcx],dh; 	imul   cl
0x67f54:	add    cl,ch
0x67f52:	add    BYTE PTR [rax],al; 	add    cl,ch
0x6846d:	add    BYTE PTR [rax-0x7d],cl
0x684ec:	jle    0x68477
0x68ac8:	sbb    al,0x89
0x6a7dc:	add    BYTE PTR [rax],al
0x6a7da:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x6a880:	add    BYTE PTR [rax],al
0x6a87e:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x6a91c:	add    BYTE PTR [rax],al
0x6a91a:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x6a975:	pop    rsp
0x6a974:	pop    r12
0x6a973:	pop    rbp; 	pop    r12
0x6a972:	pop    rbx; 	pop    rbp; 	pop    r12
0x6aad7:	pop    rsp
0x6aad6:	pop    r12
0x6aad5:	pop    rbp; 	pop    r12
0x6aad4:	pop    rbx; 	pop    rbp; 	pop    r12
0x6ab49:	pop    rsp
0x6ab48:	pop    r12
0x6ab47:	pop    rbp; 	pop    r12
0x6ab46:	pop    rbx; 	pop    rbp; 	pop    r12
0x6abd3:	pop    rbp
0x6abd2:	pop    rbx; 	pop    rbp
0x6abd1:	fcomp  DWORD PTR [rbx+0x5d]
0x6abd0:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x6abe5:	pop    rbp
0x6abe4:	pop    rbx; 	pop    rbp
0x6abe3:	fcomp  DWORD PTR [rbx+0x5d]
0x6abe2:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x6ac4d:	pop    rbp
0x6ac4c:	pop    rbx; 	pop    rbp
0x6ac4b:	sub    BYTE PTR [rbx+0x5d],bl
0x6ac57:	pop    rbp
0x6ac56:	pop    rbx; 	pop    rbp
0x6ac54:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x6ac8b:	pop    rbp
0x6ac8a:	pop    rbx; 	pop    rbp
0x6ac89:	add    BYTE PTR [rbx+0x5d],bl
0x6acc6:	pop    rbx
0x6acc4:	mov    eax,ebx; 	pop    rbx
0x6acc3:	mov    rax,rbx; 	pop    rbx
0x6acd2:	pop    rbx
0x6acd0:	xor    eax,eax; 	pop    rbx
0x6acd8:	xor    eax,eax
0x6ad29:	pop    rbx
0x6ad27:	add    BYTE PTR [rax],al; 	pop    rbx
0x6ad39:	pop    rbx
0x6ad37:	xor    eax,eax; 	pop    rbx
0x6adff:	pop    rdi
0x6adfe:	pop    r15
0x6adfd:	pop    rsi; 	pop    r15
0x6adfc:	pop    r14; 	pop    r15
0x6b250:	pop    rdi
0x6b24f:	pop    r15
0x6b24e:	pop    rsi; 	pop    r15
0x6b24d:	pop    r14; 	pop    r15
0x6b2ea:	add    esp,0x18
0x6b2e9:	add    rsp,0x18
0x6b31c:	neg    eax
0x6b31a:	mov    dh,0xc0; 	neg    eax
0x6b351:	pop    rbx
0x6b34f:	neg    eax; 	pop    rbx
0x6b36d:	jae    0x6b370
0x6b36c:	push   QWORD PTR [rbx+0x1]
0x6b37d:	or     eax,0xffffffff
0x6b37c:	or     rax,0xffffffffffffffff
0x6b3a0:	jae    0x6b3a3
0x6b39f:	push   QWORD PTR [rbx+0x1]
0x6b3b0:	or     eax,0xffffffff
0x6b3af:	or     rax,0xffffffffffffffff
0x6b419:	add    al,0x1
0x6b418:	rex.X add al,0x1
0x6b417:	add    DWORD PTR [rdx+0x4],0x1
0x6b45b:	add    al,0xf3
0x6b472:	xor    eax,eax
0x6b470:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x6b47c:	xor    eax,eax
0x6b47a:	add    al,0x1; 	xor    eax,eax
0x6b4be:	add    bl,dh
0x6b4bc:	add    BYTE PTR [rax],al; 	add    bl,dh
0x6b635:	pop    rbx
0x6b634:	lock pop rbx
0x6b633:	mov    eax,esi; 	pop    rbx
0x6b784:	pop    rbp
0x6b783:	pop    rbx; 	pop    rbp
0x6b782:	lock pop rbx; 	pop    rbp
0x6b781:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x6b93f:	pop    rbx
0x6b93e:	lock pop rbx
0x6b93d:	mov    eax,esi; 	pop    rbx
0x6ba69:	pop    rbx
0x6ba68:	lock pop rbx
0x6ba67:	mov    eax,esi; 	pop    rbx
0x6bb5c:	add    BYTE PTR [rax],al
0x6bb5a:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x6bbd8:	pop    rbp
0x6bbd7:	pop    r13
0x6bbd6:	pop    rsp; 	pop    r13
0x6bbd5:	pop    r12; 	pop    r13
0x6bcf8:	rol    DWORD PTR [rax],1
0x6bcf7:	rex.R rol DWORD PTR [rax],1
0x6bd23:	pop    rsi
0x6bd22:	pop    r14
0x6bd21:	pop    rbp; 	pop    r14
0x6bd20:	pop    r13; 	pop    r14
0x6bf98:	pop    rsi
0x6bf97:	pop    r14
0x6bf96:	pop    rbp; 	pop    r14
0x6bf95:	pop    r13; 	pop    r14
0x6c47f:	pop    rsp
0x6c47e:	pop    r12
0x6c47d:	pop    rbp; 	pop    r12
0x6c47c:	pop    rbx; 	pop    rbp; 	pop    r12
0x6c4a9:	pop    rsp
0x6c4a8:	pop    r12
0x6c4a7:	pop    rbp; 	pop    r12
0x6c4a6:	pop    rbx; 	pop    rbp; 	pop    r12
0x6c6da:	or     al,0x7e
0x6c6d9:	int3   ; 	or     al,0x7e
0x6c6d8:	int3   ; 	int3   ; 	or     al,0x7e
0x6c86a:	or     al,0x7e
0x6c869:	int3   ; 	or     al,0x7e
0x6c868:	int3   ; 	int3   ; 	or     al,0x7e
0x6cb8f:	pop    rsp
0x6cb8e:	pop    r12
0x6cb8d:	pop    rbp; 	pop    r12
0x6cb8c:	pop    rbx; 	pop    rbp; 	pop    r12
0x6cc11:	pop    rsp
0x6cc10:	pop    r12
0x6cc0f:	pop    rbp; 	pop    r12
0x6cc0e:	pop    rbx; 	pop    rbp; 	pop    r12
0x6d129:	pop    rbp
0x6d128:	pop    rbp; 	pop    rbp
0x6d127:	pop    r13; 	pop    rbp
0x6d126:	pop    rsp; 	pop    r13; 	pop    rbp
0x6d14b:	pop    rbp
0x6d14a:	pop    rbp; 	pop    rbp
0x6d149:	pop    r13; 	pop    rbp
0x6d148:	pop    rsp; 	pop    r13; 	pop    rbp
0x6d202:	pop    rsp
0x6d201:	pop    r12
0x6d200:	pop    rbp; 	pop    r12
0x6d1ff:	pop    rbx; 	pop    rbp; 	pop    r12
0x6d368:	pop    rsp
0x6d367:	pop    r12
0x6d366:	pop    rbp; 	pop    r12
0x6d365:	pop    rbx; 	pop    rbp; 	pop    r12
0x6d506:	pop    rdi
0x6d505:	pop    r15
0x6d504:	pop    rsi; 	pop    r15
0x6d503:	pop    r14; 	pop    r15
0x6d832:	pop    rbx
0x6d830:	mov    eax,edx; 	pop    rbx
0x6d879:	pop    rbx
0x6d877:	mov    eax,edx; 	pop    rbx
0x6d9e7:	pop    rbp
0x6d9e6:	pop    rbx; 	pop    rbp
0x6d9e5:	lock pop rbx; 	pop    rbp
0x6d9e4:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x6da16:	pop    rbp
0x6da15:	pop    rbx; 	pop    rbp
0x6da14:	lock pop rbx; 	pop    rbp
0x6da13:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x6db9b:	pop    rsp
0x6db9a:	pop    r12
0x6db99:	pop    rbp; 	pop    r12
0x6db98:	pop    rbx; 	pop    rbp; 	pop    r12
0x6dc0d:	pop    rsp
0x6dc0c:	pop    r12
0x6dc0b:	pop    rbp; 	pop    r12
0x6dc0a:	pop    rbx; 	pop    rbp; 	pop    r12
0x6dcbc:	add    bl,dh
0x6dcba:	add    DWORD PTR [rax],eax; 	add    bl,dh
0x6dcd7:	or     al,ch
0x6dcd6:	in     al,dx; 	or     al,ch
0x6dd68:	pop    rbp
0x6dd67:	pop    r13
0x6dd66:	pop    rsp; 	pop    r13
0x6dd65:	pop    r12; 	pop    r13
0x6ddeb:	pop    rbp
0x6ddea:	pop    rbx; 	pop    rbp
0x6dde9:	or     BYTE PTR [rbx+0x5d],bl
0x6ddf0:	or     DWORD PTR [rdi],0x20
0x6de3b:	add    esp,0x18
0x6de3a:	add    rsp,0x18
0x6de78:	xor    eax,eax
0x6de76:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x6df3f:	pop    rsp
0x6df3e:	pop    r12
0x6df3d:	pop    rbp; 	pop    r12
0x6df3c:	pop    rbx; 	pop    rbp; 	pop    r12
0x6df85:	pop    rsp
0x6df84:	pop    r12
0x6df83:	pop    rbp; 	pop    r12
0x6df82:	pop    rbx; 	pop    rbp; 	pop    r12
0x6dfef:	pop    rsp
0x6dfee:	pop    r12
0x6dfed:	pop    rbp; 	pop    r12
0x6dfec:	pop    rbx; 	pop    rbp; 	pop    r12
0x6e0df:	pop    rsp
0x6e0de:	pop    r12
0x6e0dd:	pop    rbp; 	pop    r12
0x6e0dc:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x6e13e:	pop    rsp
0x6e13d:	pop    r12
0x6e13c:	pop    rbp; 	pop    r12
0x6e13b:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x6e296:	pop    rbp
0x6e295:	pop    r13
0x6e294:	pop    rsp; 	pop    r13
0x6e293:	pop    r12; 	pop    r13
0x6e2ab:	pop    rbp
0x6e2aa:	pop    r13
0x6e2a9:	pop    rsp; 	pop    r13
0x6e2a8:	pop    r12; 	pop    r13
0x6e2bc:	pop    rbp
0x6e2bb:	pop    r13
0x6e2ba:	pop    rsp; 	pop    r13
0x6e2b9:	pop    r12; 	pop    r13
0x6e3c2:	pop    rbp
0x6e3c1:	pop    rbx; 	pop    rbp
0x6e3c0:	rcr    BYTE PTR [rbx+0x5d],1
0x6e3bf:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x6e40e:	pop    rbp
0x6e40d:	pop    rbx; 	pop    rbp
0x6e40c:	rcr    BYTE PTR [rbx+0x5d],1
0x6e40b:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x6e53e:	pop    rbx
0x6e53c:	mov    eax,edx; 	pop    rbx
0x6e53b:	mov    rax,rdx; 	pop    rbx
0x6e57a:	pop    rbx
0x6e578:	add    BYTE PTR [rax],al; 	pop    rbx
0x6e6bf:	pop    rbp
0x6e6be:	pop    rbx; 	pop    rbp
0x6e6bd:	or     BYTE PTR [rbx+0x5d],bl
0x6e79e:	pop    rsi
0x6e79d:	pop    r14
0x6e79c:	pop    rbp; 	pop    r14
0x6e79b:	pop    r13; 	pop    r14
0x6e7e3:	pop    rsi
0x6e7e2:	pop    r14
0x6e7e1:	pop    rbp; 	pop    r14
0x6e7e0:	pop    r13; 	pop    r14
0x6e7f1:	pop    rsi
0x6e7f0:	pop    r14
0x6e7ef:	pop    rbp; 	pop    r14
0x6e7ee:	pop    r13; 	pop    r14
0x6e9bc:	pop    rdi
0x6e9bb:	pop    r15
0x6e9ba:	pop    rsi; 	pop    r15
0x6e9b9:	pop    r14; 	pop    r15
0x6eca5:	pop    rdi
0x6eca4:	pop    r15
0x6eca3:	pop    rsi; 	pop    r15
0x6eca2:	pop    r14; 	pop    r15
0x6ecfe:	pop    rdi
0x6ecfd:	pop    r15
0x6ecfc:	pop    rsi; 	pop    r15
0x6ecfb:	pop    r14; 	pop    r15
0x6ee7d:	pop    rsp
0x6ee7c:	pop    r12
0x6ee7b:	pop    rbp; 	pop    r12
0x6ee7a:	pop    rbx; 	pop    rbp; 	pop    r12
0x6eecd:	pop    rsp
0x6eecc:	pop    r12
0x6eecb:	pop    rbp; 	pop    r12
0x6eeca:	pop    rbx; 	pop    rbp; 	pop    r12
0x6efd3:	pop    rbp
0x6efd2:	pop    r13
0x6efd1:	pop    rsp; 	pop    r13
0x6efd0:	pop    r12; 	pop    r13
0x6efff:	pop    rbp
0x6effe:	pop    r13
0x6effd:	pop    rsp; 	pop    r13
0x6effc:	pop    r12; 	pop    r13
0x6f0bf:	add    BYTE PTR [rax+0x39],cl
0x6f1ad:	pop    rsp
0x6f1ac:	pop    r12
0x6f1ab:	pop    rbp; 	pop    r12
0x6f1aa:	pop    rbx; 	pop    rbp; 	pop    r12
0x6f1ba:	pop    rsp
0x6f1b9:	pop    r12
0x6f1b8:	pop    rbp; 	pop    r12
0x6f1b7:	pop    rbx; 	pop    rbp; 	pop    r12
0x6f299:	add    bl,dh
0x6f297:	add    BYTE PTR [rax],al; 	add    bl,dh
0x6f2fa:	pop    rdi
0x6f2f9:	pop    r15
0x6f2f8:	pop    rsi; 	pop    r15
0x6f2f7:	pop    r14; 	pop    r15
0x6f66b:	pop    rsp
0x6f66a:	pop    r12
0x6f669:	pop    rbp; 	pop    r12
0x6f668:	pop    rbx; 	pop    rbp; 	pop    r12
0x6f6a2:	add    BYTE PTR [rax-0x77],cl
0x6f737:	cmp    BYTE PTR [rax+0x39],cl
0x6f736:	push   rax; 	cmp    BYTE PTR [rax+0x39],cl
0x6f75c:	or     cl,BYTE PTR [rax-0x7d]
0x6f77f:	pop    rsp
0x6f77e:	pop    r12
0x6f77d:	pop    rbp; 	pop    r12
0x6f77c:	pop    rbx; 	pop    rbp; 	pop    r12
0x6f7df:	pop    rsp
0x6f7de:	pop    r12
0x6f7dd:	pop    rbp; 	pop    r12
0x6f7dc:	pop    rbx; 	pop    rbp; 	pop    r12
0x6fa1d:	pop    rsp
0x6fa1c:	pop    r12
0x6fa1b:	pop    rbp; 	pop    r12
0x6fa1a:	pop    rbx; 	pop    rbp; 	pop    r12
0x6fa69:	pop    rsp
0x6fa68:	pop    r12
0x6fa67:	pop    rbp; 	pop    r12
0x6fa66:	pop    rbx; 	pop    rbp; 	pop    r12
0x6fc88:	pop    rsp
0x6fc87:	pop    r12
0x6fc86:	pop    rbp; 	pop    r12
0x6fc85:	lock pop rbp; 	pop    r12
0x6fdc8:	pop    rsp
0x6fdc7:	pop    r12
0x6fdc6:	pop    rbp; 	pop    r12
0x6fdc5:	pop    rbx; 	pop    rbp; 	pop    r12
0x6fe12:	pop    rsp
0x6fe11:	pop    r12
0x6fe10:	pop    rbp; 	pop    r12
0x6fe0f:	pop    rbx; 	pop    rbp; 	pop    r12
0x6ff62:	pop    rbp
0x6ff61:	pop    rbx; 	pop    rbp
0x6ff60:	rcr    BYTE PTR [rbx+0x5d],1
0x6ff5f:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x6ff86:	pop    rbp
0x6ff85:	pop    rbx; 	pop    rbp
0x6ff84:	rcr    BYTE PTR [rbx+0x5d],1
0x6ff83:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x6ffd0:	pop    rbp
0x6ffcf:	pop    rbx; 	pop    rbp
0x6ffce:	rcr    BYTE PTR [rbx+0x5d],1
0x6ffcd:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x7010b:	pop    rbx
0x70109:	mov    eax,edx; 	pop    rbx
0x70151:	pop    rbx
0x7014f:	mov    eax,edx; 	pop    rbx
0x70159:	clc    
0x70158:	mov    eax,edi
0x70156:	add    BYTE PTR [rax],al; 	mov    eax,edi
0x701ea:	pop    rbp
0x701e9:	pop    r13
0x701e8:	pop    rsp; 	pop    r13
0x701e7:	pop    r12; 	pop    r13
0x70208:	pop    rbp
0x70207:	pop    r13
0x70206:	pop    rsp; 	pop    r13
0x70205:	pop    r12; 	pop    r13
0x70283:	pop    rbp
0x70282:	pop    r13
0x70281:	pop    rsp; 	pop    r13
0x70280:	pop    r12; 	pop    r13
0x7033e:	pop    rbp
0x7033d:	pop    rbx; 	pop    rbp
0x7033b:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x70393:	pop    rbp
0x70392:	pop    rbx; 	pop    rbp
0x70390:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x70443:	pop    rbp
0x70442:	pop    rbx; 	pop    rbp
0x70441:	fcomp  DWORD PTR [rbx+0x5d]
0x70440:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x70452:	pop    rbp
0x70451:	pop    rbx; 	pop    rbp
0x70450:	call   FWORD PTR [rbx+0x5d]
0x704b7:	add    al,ch
0x704b5:	add    BYTE PTR [rax],al; 	add    al,ch
0x704fb:	pop    rbx
0x704fa:	lock pop rbx
0x704f9:	mov    eax,esi; 	pop    rbx
0x70541:	pop    rbx
0x70540:	lock pop rbx
0x7053f:	mov    eax,esi; 	pop    rbx
0x705cc:	mov    eax,DWORD PTR [rdx]
0x705ca:	mov    DWORD PTR [rax],ecx; 	mov    eax,DWORD PTR [rdx]
0x7067d:	pop    rbx
0x7067c:	lock pop rbx
0x7067b:	mov    eax,esi; 	pop    rbx
0x706c1:	pop    rbx
0x706c0:	lock pop rbx
0x706bf:	mov    eax,esi; 	pop    rbx
0x70753:	mov    eax,DWORD PTR [rdx]
0x70751:	mov    DWORD PTR [rax],ecx; 	mov    eax,DWORD PTR [rdx]
0x7083b:	pop    rsp
0x7083a:	pop    r12
0x70839:	pop    rbp; 	pop    r12
0x70838:	pop    rbx; 	pop    rbp; 	pop    r12
0x708b0:	pop    rsp
0x708af:	pop    r12
0x708ae:	pop    rbp; 	pop    r12
0x708ad:	pop    rbx; 	pop    rbp; 	pop    r12
0x70988:	pop    rsp
0x70987:	pop    r12
0x70986:	pop    rbp; 	pop    r12
0x70985:	pop    rbx; 	pop    rbp; 	pop    r12
0x709c0:	xor    eax,eax
0x709be:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x70a7d:	pop    rsp
0x70a7c:	pop    r12
0x70a7b:	pop    rbp; 	pop    r12
0x70a7a:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x70ac4:	pop    rsp
0x70ac3:	pop    r12
0x70ac2:	pop    rbp; 	pop    r12
0x70ac1:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x70b74:	pop    rsp
0x70b73:	pop    r12
0x70b72:	pop    rbp; 	pop    r12
0x70b71:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x70b88:	pop    rsp
0x70b87:	pop    r12
0x70b86:	pop    rbp; 	pop    r12
0x70b85:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x70c99:	pop    rdi
0x70c98:	pop    r15
0x70c97:	pop    rsi; 	pop    r15
0x70c96:	pop    r14; 	pop    r15
0x70caf:	add    cl,BYTE PTR [rax-0x77]
0x70cae:	clc    ; 	add    cl,BYTE PTR [rax-0x77]
0x70d06:	pop    rdi
0x70d05:	pop    r15
0x70d04:	pop    rsi; 	pop    r15
0x70d03:	pop    r14; 	pop    r15
0x70e33:	pop    rbp
0x70e32:	pop    r13
0x70e31:	pop    rsp; 	pop    r13
0x70e30:	pop    r12; 	pop    r13
0x70e5f:	pop    rbp
0x70e5e:	pop    r13
0x70e5d:	pop    rsp; 	pop    r13
0x70e5c:	pop    r12; 	pop    r13
0x70f0b:	pop    rbp
0x70f0a:	pop    rbx; 	pop    rbp
0x70f09:	rcr    BYTE PTR [rbx+0x5d],1
0x70f08:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x70f56:	pop    rbp
0x70f55:	pop    rbx; 	pop    rbp
0x70f54:	rcr    BYTE PTR [rbx+0x5d],1
0x70f53:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x70ff2:	pop    rbx
0x70ff0:	mov    eax,eax; 	pop    rbx
0x70fef:	mov    eax,r8d; 	pop    rbx
0x7103a:	pop    rbx
0x71038:	mov    eax,eax; 	pop    rbx
0x71037:	mov    eax,r8d; 	pop    rbx
0x710d4:	clc    
0x710d3:	mov    eax,edi
0x710d1:	mov    DWORD PTR [rcx],edi; 	mov    eax,edi
0x71194:	pop    rbx
0x71192:	mov    eax,edx; 	pop    rbx
0x711e1:	pop    rbx
0x711df:	mov    eax,edx; 	pop    rbx
0x71277:	mov    DWORD PTR [rcx],eax
0x71275:	jb     0x71297; 	mov    DWORD PTR [rcx],eax
0x7132b:	pop    rbx
0x71329:	mov    eax,edx; 	pop    rbx
0x71371:	pop    rbx
0x7136f:	mov    eax,edx; 	pop    rbx
0x713fe:	mov    dh,0xc7
0x713fd:	movzx  eax,bh
0x713fc:	movzx  eax,dil
0x714ac:	add    BYTE PTR [rax],al
0x714aa:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x71537:	add    BYTE PTR [rax],al
0x71535:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x715fe:	add    BYTE PTR [rax],al
0x715fc:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x716b0:	add    BYTE PTR [rax],al
0x716ae:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x7174c:	add    BYTE PTR [rax],al
0x7174a:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x717d2:	pop    rbp
0x717d1:	pop    r13
0x717d0:	pop    rsp; 	pop    r13
0x717cf:	pop    r12; 	pop    r13
0x7186c:	add    BYTE PTR [rax-0x7f],cl
0x71892:	pop    rsi
0x71891:	pop    r14
0x71890:	pop    rbp; 	pop    r14
0x7188f:	pop    r13; 	pop    r14
0x71918:	pop    rbp
0x71917:	pop    r13
0x71916:	pop    rsp; 	pop    r13
0x71915:	pop    r12; 	pop    r13
0x719ac:	add    BYTE PTR [rax],al
0x719aa:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x71a6a:	pop    rdi
0x71a69:	pop    r15
0x71a68:	pop    rsi; 	pop    r15
0x71a67:	pop    r14; 	pop    r15
0x71c3d:	mov    DWORD PTR [rax+0x40],ecx
0x71c3c:	mov    QWORD PTR [rax+0x40],rcx
0x71c7d:	mov    DWORD PTR [rax+0x40],ecx
0x71c7c:	mov    QWORD PTR [rax+0x40],rcx
0x71ccb:	pop    rbx
0x71cc8:	add    esp,0x20; 	pop    rbx
0x71d84:	pop    rdi
0x71d83:	pop    r15
0x71d82:	pop    rsi; 	pop    r15
0x71d81:	pop    r14; 	pop    r15
0x71e2b:	pop    rdi
0x71e2a:	pop    r15
0x71e29:	pop    rsi; 	pop    r15
0x71e28:	pop    r14; 	pop    r15
0x71f8c:	pop    rbx
0x71f8a:	mov    eax,edx; 	pop    rbx
0x72098:	pop    rbx
0x720a9:	pop    rbx
0x720a7:	mov    eax,DWORD PTR [rsi]; 	pop    rbx
0x72169:	pop    rbx
0x72167:	mov    eax,DWORD PTR [rdx]; 	pop    rbx
0x72258:	pop    rbx
0x72292:	pop    rbx
0x72290:	mov    eax,DWORD PTR [rsi]; 	pop    rbx
0x72510:	or     BYTE PTR [rcx-0x77],cl
0x7250f:	rex.WRXB or BYTE PTR [r9-0x77],r9b
0x72605:	pop    rdi
0x72604:	pop    r15
0x72603:	pop    rsi; 	pop    r15
0x72602:	pop    r14; 	pop    r15
0x72775:	pop    rdi
0x72774:	pop    r15
0x72773:	pop    rsi; 	pop    r15
0x72772:	pop    r14; 	pop    r15
0x72aac:	je     0x72ab0
0x72aaa:	xor    BYTE PTR [rax],al; 	je     0x72ab0
0x72ade:	pop    rsp
0x72add:	pop    r12
0x72adc:	pop    rbp; 	pop    r12
0x72adb:	pop    rbx; 	pop    rbp; 	pop    r12
0x72b83:	pop    rsp
0x72b82:	pop    r12
0x72b81:	pop    rbp; 	pop    r12
0x72b80:	pop    rbx; 	pop    rbp; 	pop    r12
0x72be0:	pop    rbx
0x72bde:	xor    eax,eax; 	pop    rbx
0x72c7e:	pop    rbx
0x72c7c:	add    BYTE PTR [rax],al; 	pop    rbx
0x72cc2:	pop    rbx
0x72cc1:	out    dx,eax; 	pop    rbx
0x72cc0:	and    ebp,edi; 	pop    rbx
0x72cbf:	and    DWORD PTR [rbx],0xffffffef; 	pop    rbx
0x72d06:	pop    rbx
0x72d05:	out    dx,eax; 	pop    rbx
0x72d04:	and    ebp,edi; 	pop    rbx
0x72d03:	and    DWORD PTR [rbx],0xffffffef; 	pop    rbx
0x72d5f:	add    al,0x3a
0x72d5e:	lea    eax,[rdx+rdi*1]
0x72d5d:	repnz lea eax,[rdx+rdi*1]
0x72d70:	lea    eax,[rax-0x1]
0x72d6f:	lea    eax,[r8-0x1]
0x72dc2:	pop    rbp
0x72dc1:	pop    rbx; 	pop    rbp
0x72dc0:	or     BYTE PTR [rbx+0x5d],bl
0x72e76:	sub    eax,edx
0x72e8b:	sub    eax,edx
0x72faf:	or     cl,BYTE PTR [rax-0x77]
0x72fd6:	add    BYTE PTR [rbx-0xd],bl
0x73027:	or     bl,dh
0x73030:	mov    eax,DWORD PTR [rdx]
0x7302e:	add    BYTE PTR [rax],al; 	mov    eax,DWORD PTR [rdx]
0x7305f:	neg    eax
0x730e0:	pop    rdi
0x730df:	pop    r15
0x730de:	pop    rsi; 	pop    r15
0x730dd:	pop    r14; 	pop    r15
0x731f3:	pop    rdi
0x731f2:	pop    r15
0x731f1:	pop    rsi; 	pop    r15
0x731f0:	pop    r14; 	pop    r15
0x733d9:	pop    rdi
0x733d8:	pop    r15
0x733d7:	pop    rsi; 	pop    r15
0x733d6:	pop    r14; 	pop    r15
0x734ad:	pop    rbp
0x734ac:	pop    r13
0x734ab:	pop    rsp; 	pop    r13
0x734aa:	pop    r12; 	pop    r13
0x734f9:	sar    eax,0x2
0x734f8:	sar    rax,0x2
0x73584:	pop    rsi
0x73583:	pop    r14
0x73582:	pop    rbp; 	pop    r14
0x73581:	pop    r13; 	pop    r14
0x735b2:	pop    rsi
0x735b1:	pop    r14
0x735b0:	pop    rbp; 	pop    r14
0x735af:	pop    r13; 	pop    r14
0x73637:	sar    eax,0x2
0x73636:	sar    rax,0x2
0x73659:	pop    rsi
0x73658:	pop    r14
0x73657:	pop    rbp; 	pop    r14
0x73656:	pop    r13; 	pop    r14
0x73757:	pop    rsp
0x73756:	pop    r12
0x73755:	pop    rbp; 	pop    r12
0x73754:	pop    rbx; 	pop    rbp; 	pop    r12
0x73a93:	pop    rdi
0x73a92:	pop    r15
0x73a91:	pop    rsi; 	pop    r15
0x73a90:	pop    r14; 	pop    r15
0x73b70:	mov    eax,DWORD PTR [rdx]
0x73ba4:	pop    rdi
0x73ba3:	pop    r15
0x73ba2:	pop    rsi; 	pop    r15
0x73ba1:	pop    r14; 	pop    r15
0x73c8a:	pop    rdi
0x73c89:	pop    r15
0x73c88:	pop    rsi; 	pop    r15
0x73c87:	pop    r14; 	pop    r15
0x73e5a:	pop    rdi
0x73e59:	pop    r15
0x73e58:	pop    rsi; 	pop    r15
0x73e57:	pop    r14; 	pop    r15
0x74039:	dec    DWORD PTR [rax+0x29]
0x7407d:	ret    0x2948
0x7407c:	scas   eax,DWORD PTR es:[rdi]; 	ret    0x2948
0x74088:	or     BYTE PTR [rax+0x29],cl
0x74087:	rex.RXB or BYTE PTR [r8+0x29],r9b
0x7409c:	dec    DWORD PTR [rax+0x1]
0x74143:	ror    DWORD PTR [rax+0x29],cl
0x74157:	add    BYTE PTR [rax+0x1],cl
0x7442a:	ror    BYTE PTR [rax+0x29],1
0x745fb:	pop    rbp
0x745fa:	pop    rbx; 	pop    rbp
0x745f9:	sbb    BYTE PTR [rbx+0x5d],bl
0x74600:	mov    eax,DWORD PTR [rdx]
0x74637:	pop    rbp
0x74636:	pop    rbx; 	pop    rbp
0x74635:	sbb    BYTE PTR [rbx+0x5d],bl
0x7469e:	pop    rbx
0x7469c:	jne    0x746a0; 	pop    rbx
0x7469b:	push   QWORD PTR [rbp+0x2]; 	pop    rbx
0x74825:	pop    rdi
0x74824:	pop    r15
0x74823:	pop    rsi; 	pop    r15
0x74822:	pop    r14; 	pop    r15
0x7486a:	pop    rdi
0x74869:	pop    r15
0x74868:	pop    rsi; 	pop    r15
0x74867:	pop    r14; 	pop    r15
0x7499f:	pop    rbp
0x7499e:	pop    rbx; 	pop    rbp
0x7499d:	call   FWORD PTR [rbx+0x5d]
0x749b9:	pop    rbp
0x749b8:	pop    rbx; 	pop    rbp
0x749b6:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x74b56:	pop    rsp
0x74b55:	pop    r12
0x74b54:	pop    rbp; 	pop    r12
0x74b53:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x74b87:	pop    rsp
0x74b86:	pop    r12
0x74b85:	pop    rbp; 	pop    r12
0x74b84:	pop    rbx; 	pop    rbp; 	pop    r12
0x74d17:	fadd   DWORD PTR [rdi+rcx*1+0x47]
0x74e11:	fmul   DWORD PTR [rax-0x77]
0x74e52:	pop    rdi
0x74e51:	pop    r15
0x74e50:	pop    rsi; 	pop    r15
0x74e4f:	pop    r14; 	pop    r15
0x74e58:	xor    eax,eax
0x74e70:	dec    DWORD PTR [rax+0x29]
0x74f51:	cmove  eax,ecx
0x74f50:	cmove  r8,rcx
0x74f60:	xor    eax,eax
0x74f5f:	nop; 	xor    eax,eax
0x74f5e:	xchg   ax,ax; 	xor    eax,eax
0x74f74:	mov    eax,DWORD PTR [rax+0x4c]
0x74f73:	mov    rax,QWORD PTR [rax+0x4c]
0x75025:	pop    rsi
0x75024:	pop    r14
0x75023:	pop    rbp; 	pop    r14
0x75022:	pop    r13; 	pop    r14
0x75040:	pop    rsi
0x7503f:	pop    r14
0x7503e:	pop    rbp; 	pop    r14
0x7503d:	pop    r13; 	pop    r14
0x75059:	pop    rsi
0x75058:	pop    r14
0x75057:	pop    rbp; 	pop    r14
0x75056:	pop    r13; 	pop    r14
0x750f5:	pop    rbp
0x750f4:	pop    r13
0x750f3:	pop    rsp; 	pop    r13
0x750f2:	pop    r12; 	pop    r13
0x7510e:	pop    rbp
0x7510d:	pop    r13
0x7510c:	pop    rsp; 	pop    r13
0x7510b:	pop    r12; 	pop    r13
0x7511f:	pop    rbp
0x7511e:	pop    r13
0x7511d:	pop    rsp; 	pop    r13
0x7511c:	pop    r12; 	pop    r13
0x751e7:	pop    rsi
0x751e6:	pop    r14
0x751e5:	pop    rbp; 	pop    r14
0x751e4:	pop    r13; 	pop    r14
0x75200:	pop    rsi
0x751ff:	pop    r14
0x751fe:	pop    rbp; 	pop    r14
0x751fd:	pop    r13; 	pop    r14
0x75219:	pop    rsi
0x75218:	pop    r14
0x75217:	pop    rbp; 	pop    r14
0x75216:	pop    r13; 	pop    r14
0x752af:	pop    rbp
0x752ae:	pop    rdi; 	pop    rbp
0x752ad:	pop    r15; 	pop    rbp
0x752ac:	pop    rsi; 	pop    r15; 	pop    rbp
0x75455:	pop    rbp
0x75454:	pop    r13
0x75453:	pop    rsp; 	pop    r13
0x75452:	pop    r12; 	pop    r13
0x754cc:	mov    eax,edx
0x754ca:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x75517:	pop    rbx
0x75515:	mov    eax,edx; 	pop    rbx
0x75514:	ret    0xd089; 	pop    rbx
0x75668:	pop    rbx
0x75666:	xor    eax,eax; 	pop    rbx
0x75742:	add    BYTE PTR [rax-0x77],cl
0x757e3:	pop    rbp
0x757e2:	pop    r13
0x757e1:	pop    rsp; 	pop    r13
0x757e0:	pop    r12; 	pop    r13
0x758bb:	add    BYTE PTR [rax],al
0x758c3:	mov    DWORD PTR [rdi],ecx
0x758c2:	iret   ; 	mov    DWORD PTR [rdi],ecx
0x758c1:	loope  0x75892; 	mov    DWORD PTR [rdi],ecx
0x758cf:	add    bl,dh
0x758cd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x759a6:	mov    eax,edx
0x759a4:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x759b6:	mov    eax,edx
0x759b4:	loop   0x759b7; 	mov    eax,edx
0x75a96:	mov    eax,edx
0x75a94:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x75aa6:	mov    eax,edx
0x75aa4:	loop   0x75aa7; 	mov    eax,edx
0x75ade:	or     ebx,esi
0x75adc:	sar    BYTE PTR [rax+0x9],0xf3
0x75b89:	pop    rbx
0x75b87:	mov    eax,edx; 	pop    rbx
0x75bd1:	pop    rbx
0x75bcf:	mov    eax,edx; 	pop    rbx
0x75dfd:	pop    rsi
0x75dfc:	pop    r14
0x75dfb:	pop    rbp; 	pop    r14
0x75dfa:	pop    r13; 	pop    r14
0x75f8e:	pop    rbx
0x75f8c:	mov    eax,edx; 	pop    rbx
0x75fd1:	pop    rbx
0x75fcf:	mov    eax,edx; 	pop    rbx
0x760b2:	pop    rbx
0x760b1:	lock pop rbx
0x760b0:	mov    eax,esi; 	pop    rbx
0x760f9:	pop    rbx
0x760f8:	lock pop rbx
0x760f7:	mov    eax,esi; 	pop    rbx
0x761f4:	pop    rbx
0x761f3:	lock pop rbx
0x761f2:	mov    eax,esi; 	pop    rbx
0x76241:	pop    rbx
0x76240:	lock pop rbx
0x7623f:	mov    eax,esi; 	pop    rbx
0x762e3:	pop    rbx
0x762e1:	xor    eax,eax; 	pop    rbx
0x76392:	add    BYTE PTR [rax-0x77],cl
0x7641f:	pop    rbp
0x7641e:	pop    r13
0x7641d:	pop    rsp; 	pop    r13
0x7641c:	pop    r12; 	pop    r13
0x764d9:	pop    rbx
0x764d7:	mov    eax,edx; 	pop    rbx
0x76521:	pop    rbx
0x7651f:	mov    eax,edx; 	pop    rbx
0x76651:	pop    rbx
0x7664f:	add    BYTE PTR [rax],al; 	pop    rbx
0x767c8:	pop    rsi
0x767c7:	pop    r14
0x767c6:	pop    rbp; 	pop    r14
0x767c5:	pop    r13; 	pop    r14
0x76913:	pop    rbp
0x76912:	pop    r13
0x76911:	pop    rsp; 	pop    r13
0x76910:	pop    r12; 	pop    r13
0x769cc:	pop    rbp
0x769cb:	pop    r13
0x769ca:	pop    rsp; 	pop    r13
0x769c9:	pop    r12; 	pop    r13
0x76a48:	dec    DWORD PTR [rax-0x7f]
0x76a47:	std    ; 	dec    DWORD PTR [rax-0x7f]
0x76a6d:	pop    rsi
0x76a6c:	pop    r14
0x76a6b:	pop    rbp; 	pop    r14
0x76a6a:	pop    r13; 	pop    r14
0x76b0c:	pop    rsi
0x76b0b:	pop    r14
0x76b0a:	pop    rbp; 	pop    r14
0x76b09:	pop    r13; 	pop    r14
0x76b3e:	pop    rsi
0x76b3d:	pop    r14
0x76b3c:	pop    rbp; 	pop    r14
0x76b3b:	pop    r13; 	pop    r14
0x76bab:	pop    rsp
0x76baa:	pop    r12
0x76ba9:	pop    rbp; 	pop    r12
0x76ba8:	pop    rbx; 	pop    rbp; 	pop    r12
0x76ca7:	sbb    al,ch
0x76ca6:	pop    rbp; 	sbb    al,ch
0x76ccb:	pop    rdi
0x76cca:	pop    r15
0x76cc9:	pop    rsi; 	pop    r15
0x76cc8:	pop    r14; 	pop    r15
0x76ddc:	add    BYTE PTR [rax],al
0x76dda:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x76e7e:	pop    rbx
0x76e7c:	mov    eax,edx; 	pop    rbx
0x76ec1:	pop    rbx
0x76ebf:	mov    eax,edx; 	pop    rbx
0x76fbe:	pop    rbx
0x76fbc:	mov    eax,edx; 	pop    rbx
0x76fbb:	mov    rax,rdx; 	pop    rbx
0x76ffa:	pop    rbx
0x76ff8:	add    BYTE PTR [rax],al; 	pop    rbx
0x7729a:	pop    rsi
0x77299:	pop    r14
0x77298:	pop    rbp; 	pop    r14
0x77297:	pop    r13; 	pop    r14
0x773ba:	sar    eax,0x2
0x773b9:	sar    rax,0x2
0x773c5:	sub    eax,DWORD PTR [rdi+0x38]
0x773c4:	sub    rax,QWORD PTR [rdi+0x38]
0x773e8:	setne  al
0x773f4:	add    bl,dh
0x773f2:	add    BYTE PTR [rax],al; 	add    bl,dh
0x77405:	add    BYTE PTR [rax],al
0x77403:	add    al,0x8; 	add    BYTE PTR [rax],al
0x77415:	sete   al
0x77425:	sete   al
0x77435:	add    BYTE PTR [rax],al
0x77433:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x7746c:	pop    rbx
0x77469:	mov    DWORD PTR [rax+0x20],edx; 	pop    rbx
0x77498:	pop    rbx
0x77495:	mov    DWORD PTR [rbx+0x28],eax; 	pop    rbx
0x774ca:	sar    eax,0x2
0x774c9:	sar    rax,0x2
0x774d5:	sub    eax,DWORD PTR [rdi+0x20]
0x774d4:	sub    rax,QWORD PTR [rdi+0x20]
0x775ee:	fimul  WORD PTR [rax-0x77]
0x77640:	or     cl,BYTE PTR [rax-0x7d]
0x776e9:	pop    rbp
0x776e8:	pop    rdi; 	pop    rbp
0x776e7:	pop    r15; 	pop    rbp
0x776e6:	pop    rsi; 	pop    r15; 	pop    rbp
0x7775e:	fmul   DWORD PTR [rcx+0x21]
0x7783d:	xor    eax,eax
0x7783b:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x7789d:	pop    rbx
0x7789b:	xor    eax,eax; 	pop    rbx
0x77938:	pop    rbp
0x77937:	pop    r13
0x77936:	pop    rsp; 	pop    r13
0x77935:	pop    r12; 	pop    r13
0x77969:	pop    rbp
0x77968:	pop    r13
0x77967:	pop    rsp; 	pop    r13
0x77966:	pop    r12; 	pop    r13
0x779cc:	pop    rsp
0x779cb:	pop    r12
0x779ca:	pop    rbp; 	pop    r12
0x779c9:	pop    rbx; 	pop    rbp; 	pop    r12
0x77a0c:	add    BYTE PTR [rax-0x77],cl
0x77a86:	call   QWORD PTR [rax-0x18]
0x77aa5:	pop    rsi
0x77aa4:	pop    r14
0x77aa3:	pop    rbp; 	pop    r14
0x77aa2:	pop    r13; 	pop    r14
0x77bbd:	xor    eax,eax
0x77bbb:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x77c0d:	pop    rbx
0x77c0b:	xor    eax,eax; 	pop    rbx
0x77c90:	pop    rsp
0x77c8f:	pop    r12
0x77c8e:	pop    rbp; 	pop    r12
0x77c8d:	pop    rbx; 	pop    rbp; 	pop    r12
0x77cc3:	pop    rsp
0x77cc2:	pop    r12
0x77cc1:	pop    rbp; 	pop    r12
0x77cc0:	pop    rbx; 	pop    rbp; 	pop    r12
0x77d3f:	pop    rbp
0x77d3e:	pop    rbx; 	pop    rbp
0x77d3d:	fcomp  DWORD PTR [rbx+0x5d]
0x77d3c:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x77d57:	pop    rbp
0x77d56:	pop    rbx; 	pop    rbp
0x77d54:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x77e34:	pop    rsi
0x77e33:	pop    r14
0x77e32:	pop    rbp; 	pop    r14
0x77e31:	pop    r13; 	pop    r14
0x77eb3:	pop    rsi
0x77eb2:	pop    r14
0x77eb1:	pop    rbp; 	pop    r14
0x77eb0:	pop    r13; 	pop    r14
0x77ef2:	iret   
0x77ef0:	and    DWORD PTR [rdi],0xffffffcf
0x77f06:	loopne 0x77f09
0x77f05:	and    eax,0x1
0x77f04:	add    al,0x83; 	loopne 0x77f09
0x77f16:	loopne 0x77f19
0x77f15:	and    eax,0x1
0x77f3a:	mov    BYTE PTR [rdx],bh
0x77f39:	mov    BYTE PTR [rdx],dil
0x77f63:	mov    dh,0x0
0x77f62:	movzx  eax,BYTE PTR [rax]
0x77f61:	or     BYTE PTR [rdi],cl; 	mov    dh,0x0
0x77f9a:	mov    dh,0x0
0x77f99:	movzx  eax,BYTE PTR [rax]
0x77f98:	or     BYTE PTR [rdi],cl; 	mov    dh,0x0
0x77fcf:	neg    eax
0x77fcd:	mov    dh,0xc0; 	neg    eax
0x77ffa:	mov    BYTE PTR [rdx],bh
0x77ff9:	mov    BYTE PTR [rdx],dil
0x7808a:	pop    rbx
0x78088:	mov    eax,edx; 	pop    rbx
0x780d1:	pop    rbx
0x780cf:	mov    eax,edx; 	pop    rbx
0x78165:	pop    rsp
0x78164:	pop    r12
0x78163:	pop    rbp; 	pop    r12
0x78162:	pop    rbx; 	pop    rbp; 	pop    r12
0x78183:	add    BYTE PTR [rax+0x39],cl
0x78191:	pop    rsp
0x78190:	pop    r12
0x7818f:	pop    rbp; 	pop    r12
0x7818e:	pop    rbx; 	pop    rbp; 	pop    r12
0x781d4:	pop    rsp
0x781d3:	pop    r12
0x781d2:	pop    rbp; 	pop    r12
0x781d1:	pop    rbx; 	pop    rbp; 	pop    r12
0x78268:	pop    rsp
0x78267:	pop    r12
0x78266:	pop    rbp; 	pop    r12
0x78265:	pop    rbx; 	pop    rbp; 	pop    r12
0x782a0:	xor    eax,eax
0x7829e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x782f6:	pop    rsp
0x782f5:	pop    r12
0x782f4:	pop    rbp; 	pop    r12
0x782f3:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x7830d:	pop    rsp
0x7830c:	pop    r12
0x7830b:	pop    rbp; 	pop    r12
0x7830a:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x7832d:	pop    rbx
0x7832b:	add    BYTE PTR [rax],al; 	pop    rbx
0x78337:	pop    rbx
0x78363:	push   rbx
0x783c6:	pop    rbx
0x783c4:	xor    eax,eax; 	pop    rbx
0x78422:	pop    rbx
0x7845d:	pop    rbx
0x7845b:	mov    eax,ebx; 	pop    rbx
0x7845a:	mov    rax,rbx; 	pop    rbx
0x78491:	pop    rbx
0x7848f:	je     0x78498; 	pop    rbx
0x784bb:	pop    rbx
0x784b9:	add    BYTE PTR [rax],al; 	pop    rbx
0x785b0:	pop    rsi
0x785af:	pop    r14
0x785ae:	pop    rbp; 	pop    r14
0x785ad:	pop    r13; 	pop    r14
0x78968:	pop    rbx
0x789be:	pop    rbx
0x789bc:	xor    eax,eax; 	pop    rbx
0x789d8:	pop    rbx
0x78a68:	pop    rbp
0x78a67:	pop    r13
0x78a66:	pop    rsp; 	pop    r13
0x78a65:	pop    r12; 	pop    r13
0x78be9:	pop    rsi
0x78be8:	pop    r14
0x78be7:	pop    rbp; 	pop    r14
0x78be6:	pop    r13; 	pop    r14
0x78dec:	pop    rdi
0x78deb:	pop    r15
0x78dea:	pop    rsi; 	pop    r15
0x78de9:	pop    r14; 	pop    r15
0x78e90:	dec    DWORD PTR [rax-0x77]
0x78fc0:	pop    rsi
0x78fbf:	pop    r14
0x78fbe:	pop    rbp; 	pop    r14
0x78fbd:	pop    r13; 	pop    r14
0x7906e:	pop    rsi
0x7906d:	pop    r14
0x7906c:	pop    rbp; 	pop    r14
0x7906b:	pop    r13; 	pop    r14
0x79131:	pop    rbp
0x79130:	pop    rbx; 	pop    rbp
0x7912f:	or     BYTE PTR [rbx+0x5d],bl
0x7915e:	sub    eax,edx
0x7915d:	sub    rax,rdx
0x7915c:	pop    rbp; 	sub    rax,rdx
0x791cf:	add    bl,dh
0x79514:	pop    rbp
0x79513:	pop    rbx; 	pop    rbp
0x79512:	add    BYTE PTR [rbx+0x5d],bl
0x79511:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x7961b:	mov    dh,0x0
0x7961a:	movzx  eax,BYTE PTR [rax]
0x796d0:	pop    rbp
0x796cf:	pop    rbx; 	pop    rbp
0x796ce:	add    BYTE PTR [rbx+0x5d],bl
0x796cd:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x7978e:	pop    rbp
0x7978d:	pop    rbx; 	pop    rbp
0x7978c:	add    BYTE PTR [rbx+0x5d],bl
0x7978b:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x7983a:	pop    rbp
0x79839:	pop    rbx; 	pop    rbp
0x79838:	or     BYTE PTR [rbx+0x5d],bl
0x79aa4:	pop    rbp
0x79aa3:	pop    rbx; 	pop    rbp
0x79aa2:	sbb    BYTE PTR [rbx+0x5d],bl
0x79b78:	pop    rdi
0x79b77:	pop    r15
0x79b76:	pop    rsi; 	pop    r15
0x79b75:	pop    r14; 	pop    r15
0x79ba7:	pop    rdi
0x79ba6:	pop    r15
0x79ba5:	pop    rsi; 	pop    r15
0x79ba4:	pop    r14; 	pop    r15
0x79fc5:	pop    rdi
0x79fc4:	pop    r15
0x79fc3:	pop    rsi; 	pop    r15
0x79fc2:	pop    r14; 	pop    r15
0x7a170:	pop    rdi
0x7a16f:	pop    r15
0x7a16e:	pop    rsi; 	pop    r15
0x7a16d:	pop    r14; 	pop    r15
0x7a368:	pop    rsp
0x7a367:	pop    r12
0x7a366:	pop    rbp; 	pop    r12
0x7a365:	pop    rbx; 	pop    rbp; 	pop    r12
0x7a370:	xor    eax,eax
0x7a36e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x7a395:	jne    0x7a3a0
0x7a393:	test   edx,edx; 	jne    0x7a3a0
0x7a45a:	pop    rbp
0x7a459:	pop    r13
0x7a458:	pop    rsp; 	pop    r13
0x7a457:	pop    r12; 	pop    r13
0x7a615:	pop    rbp
0x7a614:	pop    rbx; 	pop    rbp
0x7a613:	or     BYTE PTR [rbx+0x5d],bl
0x7a621:	mov    dh,0x2
0x7a620:	movzx  eax,BYTE PTR [rdx]
0x7a61f:	add    BYTE PTR [rdi],cl; 	mov    dh,0x2
0x7a676:	pop    rbp
0x7a675:	pop    rbx; 	pop    rbp
0x7a674:	call   FWORD PTR [rbx+0x5d]
0x7a793:	pop    rsp
0x7a792:	pop    r12
0x7a791:	pop    rbp; 	pop    r12
0x7a790:	pop    rbx; 	pop    rbp; 	pop    r12
0x7a9cc:	add    bl,dh
0x7a9ca:	add    BYTE PTR [rax],al; 	add    bl,dh
0x7aee7:	add    al,ch
0x7aee5:	add    BYTE PTR [rax],al; 	add    al,ch
0x7afda:	pop    rdi
0x7afd9:	pop    r15
0x7afd8:	pop    rsi; 	pop    r15
0x7afd7:	pop    r14; 	pop    r15
0x7b137:	mov    DWORD PTR [rdi+0x8],eax
0x7b136:	mov    QWORD PTR [rdi+0x8],rax
0x7b167:	mov    DWORD PTR [rdi+0x8],eax
0x7b166:	mov    QWORD PTR [rdi+0x8],rax
0x7b1aa:	pop    rbx
0x7b1a8:	xor    eax,eax; 	pop    rbx
0x7b212:	pop    rbx
0x7b210:	add    BYTE PTR [rax],al; 	pop    rbx
0x7b2ba:	pop    rbx
0x7b2d8:	pop    rbx
0x7b2d6:	mov    dh,0x0; 	pop    rbx
0x7b2d5:	movzx  eax,BYTE PTR [rax]; 	pop    rbx
0x7b40a:	pop    rbx
0x7b430:	pop    rbx
0x7b42e:	mov    dh,0x0; 	pop    rbx
0x7b42d:	movzx  eax,BYTE PTR [rax]; 	pop    rbx
0x7b532:	pop    rbx
0x7b52f:	add    esp,0x20; 	pop    rbx
0x7b565:	je     0x7b570
0x7b563:	cmp    BYTE PTR [rax],al; 	je     0x7b570
0x7b59c:	pop    rsp
0x7b59b:	pop    r12
0x7b59a:	pop    rbp; 	pop    r12
0x7b599:	pop    rbx; 	pop    rbp; 	pop    r12
0x7b5df:	fucomp st(0)
0x7b5dd:	add    bl,ch; 	fucomp st(0)
0x7b622:	pop    rbx
0x7b620:	mov    dh,0x0; 	pop    rbx
0x7b61f:	movzx  eax,BYTE PTR [rax]; 	pop    rbx
0x7b681:	add    DWORD PTR [rax+0x39],ecx
0x7b6e5:	pop    rsi
0x7b6e4:	pop    r14
0x7b6e3:	pop    rbp; 	pop    r14
0x7b6e2:	pop    r13; 	pop    r14
0x7b6f0:	xor    eax,eax
0x7b6ee:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x7b802:	pop    rsi
0x7b801:	pop    r14
0x7b800:	pop    rbp; 	pop    r14
0x7b7ff:	pop    r13; 	pop    r14
0x7b9b7:	pop    rsp
0x7b9b6:	pop    r12
0x7b9b5:	pop    rbp; 	pop    r12
0x7b9b4:	pop    rbx; 	pop    rbp; 	pop    r12
0x7ba6a:	pop    rsp
0x7ba69:	pop    r12
0x7ba68:	pop    rbp; 	pop    r12
0x7ba67:	pop    rbx; 	pop    rbp; 	pop    r12
0x7bb20:	add    bl,dh
0x7bb1e:	add    BYTE PTR [rax],al; 	add    bl,dh
0x7bbd4:	pop    rbp
0x7bbd3:	pop    r13
0x7bbd2:	pop    rsp; 	pop    r13
0x7bbd1:	pop    r12; 	pop    r13
0x7bc00:	xor    eax,eax
0x7bbff:	nop; 	xor    eax,eax
0x7bc68:	pop    rbp
0x7bc67:	pop    rbx; 	pop    rbp
0x7bc66:	sub    BYTE PTR [rbx+0x5d],bl
0x7be32:	pop    rbp
0x7be31:	pop    rbx; 	pop    rbp
0x7be30:	sub    BYTE PTR [rbx+0x5d],bl
0x7bf7f:	pop    rbx
0x7bf7e:	out    dx,eax; 	pop    rbx
0x7bf7d:	and    ebp,edi; 	pop    rbx
0x7bf7c:	and    DWORD PTR [rbx],0xffffffef; 	pop    rbx
0x7bfbd:	pop    rbx
0x7bfbc:	out    dx,eax; 	pop    rbx
0x7bfbb:	and    ebp,edi; 	pop    rbx
0x7bfba:	and    DWORD PTR [rbx],0xffffffef; 	pop    rbx
0x7bfd4:	pop    rbx
0x7bfd3:	out    0x5b,al
0x7bfd2:	jne    0x7bfba; 	pop    rbx
0x7bfd1:	push   QWORD PTR [rbp-0x1a]; 	pop    rbx
0x7c00f:	add    al,0x3a
0x7c00e:	lea    eax,[rdx+rdi*1]
0x7c00d:	repnz lea eax,[rdx+rdi*1]
0x7c01c:	lea    eax,[rax-0x1]
0x7c01b:	lea    eax,[r8-0x1]
0x7c25e:	pop    rdi
0x7c25d:	pop    r15
0x7c25c:	pop    rsi; 	pop    r15
0x7c25b:	pop    r14; 	pop    r15
0x7c444:	pop    rbp
0x7c443:	pop    r13
0x7c442:	pop    rsp; 	pop    r13
0x7c441:	pop    r12; 	pop    r13
0x7c725:	pop    rbp
0x7c724:	pop    r13
0x7c723:	pop    rsp; 	pop    r13
0x7c722:	pop    r12; 	pop    r13
0x7c799:	pop    rbp
0x7c798:	pop    rbx; 	pop    rbp
0x7c797:	or     BYTE PTR [rbx+0x5d],bl
0x7c852:	mov    DWORD PTR [rdx],eax
0x7c851:	mov    QWORD PTR [rdx],rax
0x7c863:	sub    eax,DWORD PTR [rsi+0x10]
0x7c88b:	sub    eax,edx
0x7c896:	sub    eax,edx
0x7c8d7:	pop    rbp
0x7c8d6:	pop    rbx; 	pop    rbp
0x7c8d5:	or     BYTE PTR [rbx+0x5d],bl
0x7c908:	pop    rbp
0x7c907:	pop    rbx; 	pop    rbp
0x7c905:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x7c963:	add    BYTE PTR [rbx-0xd],bl
0x7c9c6:	pop    rdi
0x7c9c5:	pop    r15
0x7c9c4:	pop    rsi; 	pop    r15
0x7c9c3:	pop    r14; 	pop    r15
0x7cae0:	xor    eax,eax
0x7cade:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x7caff:	add    bl,dh
0x7cafd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x7cb15:	xor    al,0x0
0x7cb14:	mov    dh,BYTE PTR [rax+rax*1]
0x7cb20:	xor    eax,eax
0x7cb1e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x7cb31:	mov    eax,DWORD PTR [rdi+0x68]
0x7cb30:	mov    rax,QWORD PTR [rdi+0x68]
0x7cb42:	clc    
0x7cb41:	mov    eax,edi
0x7cb40:	mov    rax,rdi
0x7cb3f:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x7cbad:	add    BYTE PTR [rcx],al
0x7cbf9:	add    bl,dh
0x7cbf7:	add    BYTE PTR [rax],al; 	add    bl,dh
0x7cc1d:	add    BYTE PTR [rax],al
0x7cc1b:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x7cc4e:	mov    dh,0x0
0x7cc4d:	movzx  eax,BYTE PTR [rax]
0x7cc4c:	and    ecx,DWORD PTR [rdi]; 	mov    dh,0x0
0x7cc8f:	neg    eax
0x7cdbe:	pop    rdi
0x7cdbd:	pop    r15
0x7cdbc:	pop    rsi; 	pop    r15
0x7cdbb:	pop    r14; 	pop    r15
0x7ce31:	pop    rdi
0x7ce30:	pop    r15
0x7ce2f:	pop    rsi; 	pop    r15
0x7ce2e:	pop    r14; 	pop    r15
0x7d036:	pop    rbp
0x7d035:	pop    r13
0x7d034:	pop    rsp; 	pop    r13
0x7d033:	pop    r12; 	pop    r13
0x7d0ab:	pop    rbx
0x7d0a9:	or     ecx,DWORD PTR [rax]; 	pop    rbx
0x7d0a8:	or     DWORD PTR [rbx],0x8; 	pop    rbx
0x7d0be:	sub    eax,DWORD PTR [rdi+0x18]
0x7d0bd:	sub    rax,QWORD PTR [rdi+0x18]
0x7d13b:	pop    rsi
0x7d13a:	pop    r14
0x7d139:	pop    rbp; 	pop    r14
0x7d138:	pop    r13; 	pop    r14
0x7d153:	pop    rsi
0x7d152:	pop    r14
0x7d151:	pop    rbp; 	pop    r14
0x7d150:	pop    r13; 	pop    r14
0x7d1bf:	pop    rsi
0x7d1be:	pop    r14
0x7d1bd:	pop    rbp; 	pop    r14
0x7d1bc:	pop    r13; 	pop    r14
0x7d1e1:	pop    rsi
0x7d1e0:	pop    r14
0x7d1df:	pop    rbp; 	pop    r14
0x7d1de:	pop    r13; 	pop    r14
0x7d1e7:	add    al,ch
0x7d270:	xor    eax,eax
0x7d26e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x7d360:	dec    DWORD PTR [rax-0x77]
0x7d35f:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x7d39f:	pop    rsp
0x7d39e:	pop    r12
0x7d39d:	pop    rbp; 	pop    r12
0x7d39c:	pop    rbx; 	pop    rbp; 	pop    r12
0x7d47c:	dec    DWORD PTR [rax-0x77]
0x7d47b:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x7d55f:	add    BYTE PTR [rax+0x39],cl
0x7d57c:	pop    rbp
0x7d57b:	pop    r13
0x7d57a:	pop    rsp; 	pop    r13
0x7d579:	pop    r12; 	pop    r13
0x7d728:	add    esp,0x8
0x7d727:	add    rsp,0x8
0x7d77a:	add    dh,dh
0x7d778:	add    BYTE PTR [rax],al; 	add    dh,dh
0x7d794:	pop    rsi
0x7d793:	pop    r14
0x7d792:	pop    rbp; 	pop    r14
0x7d791:	pop    r13; 	pop    r14
0x7d81f:	pop    rsi
0x7d81e:	pop    r14
0x7d81d:	pop    rbp; 	pop    r14
0x7d81c:	pop    r13; 	pop    r14
0x7d882:	fisttp DWORD PTR [rax+0x21]
0x7d897:	pop    rdi
0x7d896:	pop    r15
0x7d895:	pop    rsi; 	pop    r15
0x7d894:	pop    r14; 	pop    r15
0x7db2f:	pop    rbp
0x7db2e:	pop    rbx; 	pop    rbp
0x7db2d:	rcr    BYTE PTR [rbx+0x5d],1
0x7db2c:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x7db72:	pop    rbp
0x7db71:	pop    rbx; 	pop    rbp
0x7db70:	rcr    BYTE PTR [rbx+0x5d],1
0x7db6f:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x7df37:	mov    eax,eax
0x7df36:	mov    rax,r8
0x7df35:	add    BYTE PTR [rcx+rcx*4-0x40],cl
0x7df40:	xor    eax,eax
0x7df3e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x7df8d:	pop    rbp
0x7df8c:	pop    rbx; 	pop    rbp
0x7df8b:	or     BYTE PTR [rbx+0x5d],bl
0x7e04a:	add    BYTE PTR [rax+0x1],cl
0x7e0ab:	pop    rsi
0x7e0aa:	pop    r14
0x7e0a9:	pop    rbp; 	pop    r14
0x7e0a8:	pop    r13; 	pop    r14
0x7e0f9:	pop    rsi
0x7e0f8:	pop    r14
0x7e0f7:	pop    rbp; 	pop    r14
0x7e0f6:	pop    r13; 	pop    r14
0x7e226:	pop    rbp
0x7e225:	pop    r13
0x7e224:	pop    rsp; 	pop    r13
0x7e223:	pop    r12; 	pop    r13
0x7e243:	add    dh,dh
0x7e241:	add    BYTE PTR [rax],al; 	add    dh,dh
0x7e469:	add    ecx,DWORD PTR [rax+0x29]
0x7e527:	pop    rdi
0x7e526:	pop    r15
0x7e525:	pop    rsi; 	pop    r15
0x7e524:	pop    r14; 	pop    r15
0x7e54f:	add    BYTE PTR [rcx-0xa],al
0x7e5c7:	add    BYTE PTR [rcx-0xa],al
0x7e5fa:	add    BYTE PTR [rcx-0xa],al
0x7e604:	add    BYTE PTR [rcx-0xa],al
0x7eace:	mov    DWORD PTR [rdi+0x4],eax
0x7eacd:	pop    rax; 	mov    DWORD PTR [rdi+0x4],eax
0x7eb10:	dec    DWORD PTR [rax+0x39]
0x7eb55:	add    BYTE PTR [rcx-0xa],al
0x7ee9a:	adc    BYTE PTR [rbp+0x39],cl
0x7eed3:	sbb    BYTE PTR [rax+0x39],cl
0x7eedc:	pop    rsp
0x7eedb:	pop    r12
0x7eeda:	pop    rbp; 	pop    r12
0x7eed9:	pop    rbx; 	pop    rbp; 	pop    r12
0x7ef0c:	pop    rsp
0x7ef0b:	pop    r12
0x7ef0a:	adc    al,0x41; 	pop    rsp
0x7ef09:	and    al,0x14; 	pop    r12
0x7ef57:	mov    cl,0x35
0x7ef55:	and    ecx,DWORD PTR [rdi]; 	mov    cl,0x35
0x7f0bf:	fmul   DWORD PTR [rax+0x39]
0x7f0c8:	add    dh,dh
0x7f0c6:	add    al,0x0; 	add    dh,dh
0x7f104:	add    BYTE PTR [rax+0x39],cl
0x7f418:	add    dh,dh
0x7f416:	add    al,0x0; 	add    dh,dh
0x7f52f:	add    BYTE PTR [rax+0x39],cl
0x7fc52:	dec    DWORD PTR [rax+0x39]
0x7fe56:	add    BYTE PTR [rax+0x39],cl
0x7feb0:	pop    rdi
0x7feaf:	pop    r15
0x7feae:	pop    rsi; 	pop    r15
0x7fead:	pop    r14; 	pop    r15
0x7ff36:	add    ecx,DWORD PTR [rax+0x29]
0x802b7:	add    al,ch
0x802b5:	add    BYTE PTR [rax],al; 	add    al,ch
0x802cb:	and    ecx,DWORD PTR [rax+0x39]
0x80387:	pop    rdi
0x80386:	pop    r15
0x80385:	pop    rsi; 	pop    r15
0x80384:	pop    r14; 	pop    r15
0x812c7:	xchg   ebp,eax
0x812c4:	add    BYTE PTR [rcx+0xf],al; 	xchg   ebp,eax
0x812f5:	add    BYTE PTR [rax+0x39],cl
0x813e6:	pop    rdi
0x813e5:	pop    r15
0x813e4:	pop    rsi; 	pop    r15
0x813e3:	pop    r14; 	pop    r15
0x819e7:	add    al,ch
0x819e6:	push   rax; 	add    al,ch
0x819e5:	and    al,0x50; 	add    al,ch
0x81c92:	add    BYTE PTR [rax+0x39],cl
0x81ec5:	pop    rdi
0x81ec4:	pop    r15
0x81ec3:	pop    rsi; 	pop    r15
0x81ec2:	pop    r14; 	pop    r15
0x8217e:	push   rsp
0x8217b:	ror    BYTE PTR [rax-0x73],0x54
0x822d4:	add    DWORD PTR [rax+0x39],ecx
0x823d1:	add    DWORD PTR [rax+0x39],ecx
0x82422:	mov    eax,ecx
0x82421:	mov    rax,rcx
0x8249d:	push   rsp
0x8249a:	ror    BYTE PTR [rax-0x73],1; 	push   rsp
0x82591:	add    DWORD PTR [rax+0x39],ecx
0x82cea:	pop    rsi
0x82ce9:	pop    r14
0x82ce8:	pop    rbp; 	pop    r14
0x82ce7:	pop    r13; 	pop    r14
0x82d78:	pop    rsi
0x82d77:	pop    r14
0x82d76:	pop    rbp; 	pop    r14
0x82d75:	pop    r13; 	pop    r14
0x82d8e:	xor    eax,eax
0x82d8c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x82f17:	pop    rbx
0x82f15:	mov    eax,eax; 	pop    rbx
0x82f14:	mov    rax,r8; 	pop    rbx
0x82f2e:	xor    eax,eax
0x82f2c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x82f3a:	pop    rbx
0x82f38:	xor    eax,eax; 	pop    rbx
0x83094:	pop    rbp
0x83093:	pop    rbx; 	pop    rbp
0x83092:	or     BYTE PTR [rbx+0x5d],bl
0x831f0:	pop    rdi
0x831ef:	pop    r15
0x831ee:	pop    rsi; 	pop    r15
0x831ed:	pop    r14; 	pop    r15
0x83360:	pop    rdi
0x8335f:	pop    r15
0x8335e:	pop    rsi; 	pop    r15
0x8335d:	pop    r14; 	pop    r15
0x833ba:	pop    rdi
0x833b9:	pop    r15
0x833b8:	pop    rsi; 	pop    r15
0x833b7:	pop    r14; 	pop    r15
0x83c1d:	pop    rdi
0x83c1c:	pop    r15
0x83c1b:	pop    rsi; 	pop    r15
0x83c1a:	pop    r14; 	pop    r15
0x83d6d:	pop    rdi
0x83d6c:	pop    r15
0x83d6b:	pop    rsi; 	pop    r15
0x83d6a:	pop    r14; 	pop    r15
0x84013:	add    bl,dh
0x84011:	add    BYTE PTR [rax],al; 	add    bl,dh
0x840af:	add    bl,dh
0x840ad:	add    BYTE PTR [rax],al; 	add    bl,dh
0x84116:	mov    DWORD PTR [rax],edi
0x84115:	mov    QWORD PTR [rax],rdi
0x84128:	add    BYTE PTR [rax],al
0x84126:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x841f4:	pop    rbp
0x841f3:	pop    rbx; 	pop    rbp
0x841f2:	or     BYTE PTR [rbx+0x5d],bl
0x842e3:	add    BYTE PTR [rax-0x77],cl
0x844e5:	pop    rbx
0x844e3:	mov    eax,ebx; 	pop    rbx
0x844e2:	mov    rax,rbx; 	pop    rbx
0x844e9:	pop    rbx
0x844e7:	xor    eax,eax; 	pop    rbx
0x844e6:	ret    ; 	xor    eax,eax; 	pop    rbx
0x84545:	pop    rbp
0x84544:	pop    r13
0x84543:	pop    rsp; 	pop    r13
0x84542:	pop    r12; 	pop    r13
0x845da:	pop    rbp
0x845d9:	pop    r13
0x845d8:	pop    rsp; 	pop    r13
0x845d7:	pop    r12; 	pop    r13
0x845f0:	pop    rbp
0x845ef:	pop    r13
0x845ee:	pop    rsp; 	pop    r13
0x845ed:	pop    r12; 	pop    r13
0x8460b:	add    dh,dh
0x84609:	add    BYTE PTR [rax],al; 	add    dh,dh
0x8478e:	pop    rdi
0x8478d:	pop    r15
0x8478c:	pop    rsi; 	pop    r15
0x8478b:	pop    r14; 	pop    r15
0x84bac:	pop    rsp
0x84bab:	pop    r12
0x84baa:	pop    rbp; 	pop    r12
0x84ba9:	pop    rbx; 	pop    rbp; 	pop    r12
0x84e51:	pop    rbp
0x84e50:	pop    r13
0x84e4f:	pop    rsp; 	pop    r13
0x84e4e:	pop    r12; 	pop    r13
0x850ac:	pop    rbp
0x850ab:	pop    r13
0x850aa:	pop    rsp; 	pop    r13
0x850a9:	pop    r12; 	pop    r13
0x850c1:	pop    rbp
0x850c0:	pop    r13
0x850bf:	pop    rsp; 	pop    r13
0x850be:	pop    r12; 	pop    r13
0x850e8:	pop    rbp
0x850e7:	pop    r13
0x850e6:	pop    rsp; 	pop    r13
0x850e5:	pop    r12; 	pop    r13
0x851a2:	push   rsi
0x85376:	pop    rbp
0x85375:	pop    rbx; 	pop    rbp
0x85374:	rcr    BYTE PTR [rbx+0x5d],1
0x85373:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x85584:	pop    rsi
0x85583:	pop    r14
0x85582:	pop    rbp; 	pop    r14
0x85581:	pop    r13; 	pop    r14
0x85817:	sar    BYTE PTR [rax+0x6],0xf3
0x85908:	pop    rbp
0x85907:	pop    rbx; 	pop    rbp
0x85906:	or     BYTE PTR [rbx+0x5d],bl
0x85af5:	pop    rdi
0x85af4:	pop    r15
0x85af3:	pop    rsi; 	pop    r15
0x85af2:	pop    r14; 	pop    r15
0x85f49:	pop    rsp
0x85f48:	pop    r12
0x85f47:	pop    rbp; 	pop    r12
0x85f46:	pop    rbx; 	pop    rbp; 	pop    r12
0x8652b:	pop    rbx
0x86529:	xor    eax,eax; 	pop    rbx
0x865e0:	pop    rbx
0x865e7:	pop    rbx
0x86735:	pop    rsp
0x86734:	pop    r12
0x86733:	pop    rbp; 	pop    r12
0x86732:	pop    rbx; 	pop    rbp; 	pop    r12
0x86a15:	pop    rsp
0x86a14:	pop    r12
0x86a13:	pop    rbp; 	pop    r12
0x86a12:	pop    rbx; 	pop    rbp; 	pop    r12
0x86a7f:	pop    rsp
0x86a7e:	pop    r12
0x86a7d:	pop    rbp; 	pop    r12
0x86a7c:	pop    rbx; 	pop    rbp; 	pop    r12
0x86b73:	dec    DWORD PTR [rax-0x77]
0x86c77:	pop    rdi
0x86c76:	pop    r15
0x86c75:	pop    rsi; 	pop    r15
0x86c74:	pop    r14; 	pop    r15
0x86f7b:	pop    rsi
0x86f7a:	pop    r14
0x86f79:	pop    rbp; 	pop    r14
0x86f78:	pop    r13; 	pop    r14
0x8715b:	pop    rdi
0x8715a:	pop    r15
0x87159:	pop    rsi; 	pop    r15
0x87158:	pop    r14; 	pop    r15
0x87562:	pop    rdi
0x87561:	pop    r15
0x87560:	pop    rsi; 	pop    r15
0x8755f:	pop    r14; 	pop    r15
0x87609:	je     0x87610
0x87607:	add    BYTE PTR [rax],al; 	je     0x87610
0x87798:	pop    rbp
0x87797:	pop    r13
0x87796:	pop    rsp; 	pop    r13
0x87795:	pop    r12; 	pop    r13
0x877a3:	add    BYTE PTR [rax],al
0x878a7:	add    BYTE PTR [rax],al
0x878d7:	add    esp,0x8
0x878d6:	add    rsp,0x8
0x87a65:	pop    rsi
0x87a64:	pop    r14
0x87a63:	pop    rbp; 	pop    r14
0x87a62:	pop    r13; 	pop    r14
0x87ad3:	pop    rsi
0x87ad2:	pop    r14
0x87ad1:	pop    rbp; 	pop    r14
0x87ad0:	pop    r13; 	pop    r14
0x87bbe:	fmul   DWORD PTR [rax+0x21]
0x87c92:	pop    rdi
0x87c91:	pop    r15
0x87c90:	pop    rsi; 	pop    r15
0x87c8f:	pop    r14; 	pop    r15
0x87e7c:	pop    rsi
0x87e7b:	pop    r14
0x87e7a:	pop    rbp; 	pop    r14
0x87e79:	pop    r13; 	pop    r14
0x8810c:	ror    BYTE PTR [rax-0x77],1
0x881c4:	pop    rdi
0x881c3:	pop    r15
0x881c2:	pop    rsi; 	pop    r15
0x881c1:	pop    r14; 	pop    r15
0x88377:	dec    DWORD PTR [rax-0x77]
0x88376:	stc    ; 	dec    DWORD PTR [rax-0x77]
0x8848a:	pop    rsp
0x88489:	pop    r12
0x88488:	pop    rbp; 	pop    r12
0x88487:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x884ff:	xchg   esp,eax
0x884fd:	ror    BYTE PTR [rdi],0x94
0x88509:	pop    rbx
0x88507:	mov    eax,ebx; 	pop    rbx
0x88522:	pop    rbx
0x88520:	mov    eax,ebx; 	pop    rbx
0x885e6:	ror    BYTE PTR [rdi],0x84
0x885f7:	xor    eax,eax
0x885f5:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x886a7:	add    esp,0x18
0x886a6:	add    rsp,0x18
0x8870e:	pop    rbx
0x8870c:	add    BYTE PTR [rax],al; 	pop    rbx
0x88743:	pop    rbx
0x88741:	xor    eax,eax; 	pop    rbx
0x88740:	scas   eax,DWORD PTR es:[rdi]; 	xor    eax,eax; 	pop    rbx
0x88a11:	pop    rdi
0x88a10:	pop    r15
0x88a0f:	pop    rsi; 	pop    r15
0x88a0e:	pop    r14; 	pop    r15
0x88d80:	pop    rsi
0x88d7f:	pop    r14
0x88d7e:	pop    rbp; 	pop    r14
0x88d7d:	pop    r13; 	pop    r14
0x88ee3:	pop    rdi
0x88ee2:	pop    r15
0x88ee1:	pop    rsi; 	pop    r15
0x88ee0:	pop    r14; 	pop    r15
0x88f0f:	add    bl,dh
0x88f0d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x88f28:	je     0x88f30
0x88f26:	add    BYTE PTR [rax],al; 	je     0x88f30
0x89087:	pop    rbp
0x89086:	pop    rbx; 	pop    rbp
0x89085:	or     BYTE PTR [rbx+0x5d],bl
0x89130:	pop    rbx
0x8912f:	nop; 	pop    rbx
0x8912e:	xchg   ax,ax; 	pop    rbx
0x8912d:	jmp    QWORD PTR [rsi-0x70]; 	pop    rbx
0x891fc:	pop    rsp
0x891fb:	pop    r12
0x891fa:	pop    rbp; 	pop    r12
0x891f9:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x892b1:	pop    rsp
0x892b0:	pop    r12
0x892af:	pop    rbp; 	pop    r12
0x892ae:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x893d8:	pop    rdi
0x893d7:	pop    r15
0x893d6:	pop    rsi; 	pop    r15
0x893d5:	pop    r14; 	pop    r15
0x894c5:	add    cl,BYTE PTR [rbp-0x77]
0x895db:	add    BYTE PTR [rax],al
0x895d9:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x89653:	pop    rsp
0x89652:	pop    r12
0x89651:	pop    rbp; 	pop    r12
0x89650:	pop    rbx; 	pop    rbp; 	pop    r12
0x896d8:	pop    rsp
0x896d7:	pop    r12
0x896d6:	pop    rbp; 	pop    r12
0x896d5:	pop    rbx; 	pop    rbp; 	pop    r12
0x89702:	pop    rsp
0x89701:	pop    r12
0x89700:	pop    rbp; 	pop    r12
0x896ff:	pop    rbx; 	pop    rbp; 	pop    r12
0x8975b:	pop    rsi
0x8975a:	pop    r14
0x89759:	pop    rbp; 	pop    r14
0x89758:	pop    r13; 	pop    r14
0x89821:	pop    rsp
0x89820:	pop    r12
0x8981f:	pop    rbp; 	pop    r12
0x8981e:	pop    rbx; 	pop    rbp; 	pop    r12
0x89860:	pop    rsp
0x8985f:	pop    r12
0x8985e:	pop    rbp; 	pop    r12
0x8985d:	pop    rbx; 	pop    rbp; 	pop    r12
0x898b2:	add    DWORD PTR [rax],eax
0x898b0:	jl     0x89929; 	add    DWORD PTR [rax],eax
0x89a7a:	clc    
0x89a79:	mov    eax,edi
0x89a78:	mov    rax,rdi
0x89b03:	cmovne eax,edx
0x89b02:	cmovne rax,rdx
0x89b51:	enter  0xf66,0xeb
0x89bf9:	xlat   BYTE PTR ds:[rbx]
0x89c21:	cmovne eax,edx
0x89c20:	cmovne rax,rdx
0x89c56:	xlat   BYTE PTR ds:[rbx]
0x89c6f:	xlat   BYTE PTR ds:[rbx]
0x89c6c:	fsub   QWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x89d02:	add    BYTE PTR [rax],al
0x89d00:	or     al,0x0; 	add    BYTE PTR [rax],al
0x8b12c:	sub    eax,ecx
0x8b12a:	add    al,0x17; 	sub    eax,ecx
0x8b12f:	xor    eax,eax
0x8b12e:	ret    ; 	xor    eax,eax
0x8b12d:	enter  0x31c3,0xc0
0x8b146:	sub    eax,ecx
0x8b144:	mov    dh,0x7; 	sub    eax,ecx
0x8b27a:	clc    
0x8b279:	mov    eax,edi
0x8b278:	mov    rax,rdi
0x8b29f:	or     eax,DWORD PTR [rax]
0x8b29e:	repz or eax,DWORD PTR [rax]
0x8b29d:	rex.WRXB; 	repz or eax,DWORD PTR [rax]
0x8b344:	sub    eax,edx
0x8b343:	sub    rax,rdx
0x8b417:	movsx  eax,dl
0x8b420:	xor    eax,eax
0x8b41e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x8b457:	cmovae eax,ecx
0x8b45f:	add    bl,dh
0x8b45d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x8b4af:	pop    rbp
0x8b4ae:	pop    rbx; 	pop    rbp
0x8b4ac:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x8b4d1:	add    DWORD PTR [rax-0x77],ecx
0x8b507:	pop    rbp
0x8b506:	pop    rbx; 	pop    rbp
0x8b504:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x8b527:	pop    rsp
0x8b526:	pop    r12
0x8b525:	pop    rbp; 	pop    r12
0x8b524:	pop    rbx; 	pop    rbp; 	pop    r12
0x8b5f9:	pop    rdi
0x8b5f8:	pop    r15
0x8b5f7:	pop    rsi; 	pop    r15
0x8b5f6:	pop    r14; 	pop    r15
0x8b690:	pop    rdi
0x8b68f:	pop    r15
0x8b68e:	pop    rsi; 	pop    r15
0x8b68d:	pop    r14; 	pop    r15
0x8b6e9:	dec    BYTE PTR [rax-0x77]
0x8b756:	bsf    eax,edx
0x8b7a3:	bsf    eax,edx
0x8b7a2:	bsf    rax,rdx
0x8b800:	bsf    eax,edx
0x8b7ff:	bsf    rax,rdx
0x8b8ba:	clc    
0x8b8b9:	sub    eax,edi
0x8b8b8:	sub    rax,rdi
0x8b8b7:	ror    BYTE PTR [rax+0x29],1; 	clc    
0x8b8c6:	xor    eax,eax
0x8b8c5:	xor    rax,rax
0x8b8c4:	add    al,0x48; 	xor    eax,eax
0x8b963:	bsf    eax,edx
0x8b962:	bsf    rax,rdx
0x8b9cf:	bsf    eax,edx
0x8b9ce:	bsf    rax,rdx
0x8b9e0:	bsf    eax,edx
0x8b9df:	bsf    rax,rdx
0x8ba2f:	add    BYTE PTR [rcx+0x39],cl
0x8ba7f:	clc    
0x8ba7e:	sub    eax,edi
0x8ba7d:	sub    rax,rdi
0x8ba7c:	ror    BYTE PTR [rax+0x29],1; 	clc    
0x8bad6:	clc    
0x8bad5:	sub    eax,edi
0x8bad4:	sub    rax,rdi
0x8bad3:	ror    BYTE PTR [rax+0x29],1; 	clc    
0x8bb12:	add    DWORD PTR [rax],eax
0x8bb10:	cmp    al,0x71; 	add    DWORD PTR [rax],eax
0x8bb5e:	add    BYTE PTR [rax],al
0x8bb5c:	adc    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x8d3a1:	sub    eax,ecx
0x8d39f:	add    al,0x17; 	sub    eax,ecx
0x8d3a4:	xor    eax,eax
0x8d3a3:	ret    ; 	xor    eax,eax
0x8d3a2:	enter  0x31c3,0xc0
0x8d3b6:	sub    eax,ecx
0x8d3b4:	mov    dh,0x7; 	sub    eax,ecx
0x8d45c:	clc    
0x8d45b:	add    eax,edi
0x8d45a:	add    rax,rdi
0x8d459:	ror    BYTE PTR [rax+0x1],0xf8
0x8d496:	xlat   BYTE PTR ds:[rbx]
0x8d4ea:	add    al,0x37
0x8d4e9:	lea    eax,[rdi+rsi*1]
0x8d4e8:	lea    rax,[rdi+rsi*1]
0x8d52f:	outs   dx,DWORD PTR ds:[rsi]
0x8d52c:	xor    BYTE PTR [rsi+0xf],ah; 	outs   dx,DWORD PTR ds:[rsi]
0x8d569:	outs   dx,DWORD PTR ds:[rsi]
0x8d566:	shl    BYTE PTR [rsi+0xf],1; 	outs   dx,DWORD PTR ds:[rsi]
0x8d5ee:	add    al,0x31
0x8d5ed:	lea    eax,[rcx+rsi*1]
0x8d5ec:	lea    rax,[rcx+rsi*1]
0x8d610:	xor    eax,eax
0x8d6e0:	clc    
0x8d6df:	add    eax,edi
0x8d6de:	add    rax,rdi
0x8d70f:	or     eax,DWORD PTR [rax]
0x8d7b8:	cmove  eax,edx
0x8d7b7:	cmove  rax,rdx
0x8d7dd:	add    esp,0x8
0x8d7dc:	add    rsp,0x8
0x8d811:	add    esp,0x8
0x8d810:	add    rsp,0x8
0x8d834:	add    esp,0x8
0x8d833:	add    rsp,0x8
0x8d907:	pop    rbp
0x8d906:	pop    rbx; 	pop    rbp
0x8d905:	or     BYTE PTR [rbx+0x5d],bl
0x8d9f6:	add    BYTE PTR [rcx],ch
0x8d9f4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rcx],ch
0x8da9f:	or     eax,DWORD PTR [rax]
0x8db44:	sub    eax,edx
0x8db43:	sub    rax,rdx
0x8dff6:	pop    rdi
0x8dff5:	pop    r15
0x8dff4:	pop    rsi; 	pop    r15
0x8dff3:	pop    r14; 	pop    r15
0x8e0a2:	add    DWORD PTR [rax-0x7d],ecx
0x8e137:	pop    rdi
0x8e136:	pop    r15
0x8e135:	pop    rsi; 	pop    r15
0x8e134:	pop    r14; 	pop    r15
0x8e150:	pop    rdi
0x8e14f:	pop    r15
0x8e14e:	pop    rsi; 	pop    r15
0x8e14d:	pop    r14; 	pop    r15
0x8e1e3:	add    BYTE PTR [rcx-0x77],cl
0x8e4a1:	add    DWORD PTR [rax],edi
0x8e64d:	cmove  eax,edx
0x8e64c:	cmove  rax,rdx
0x8e743:	add    BYTE PTR [rax],al
0x8e741:	add    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x8e83e:	add    BYTE PTR [rax],al
0x8e83c:	add    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x8e8fa:	add    eax,ecx
0x8e8f9:	add    rax,rcx
0x8e8f8:	clc    ; 	add    rax,rcx
0x8e954:	xlat   BYTE PTR ds:[rbx]
0x8e951:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x8e9be:	xlat   BYTE PTR ds:[rbx]
0x8e9bb:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x8e9d3:	xlat   BYTE PTR ds:[rbx]
0x8e9d0:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x8ea61:	xlat   BYTE PTR ds:[rbx]
0x8ea5e:	xor    BYTE PTR [rsi+0xf],ah; 	xlat   BYTE PTR ds:[rbx]
0x8ea73:	lea    eax,[rdi+rax*1+0x30]
0x8eaba:	xlat   BYTE PTR ds:[rbx]
0x8eab7:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x8eae0:	xor    eax,eax
0x8eadf:	xor    rax,rax
0x8eb1c:	xor    eax,eax
0x8eb1b:	xor    rax,rax
0x8eb1a:	push   rbp; 	xor    rax,rax
0x8eb26:	cmp    al,dh
0x8eb25:	cmp    al,r14b
0x8eb24:	lea    eax,[rax+rdi*1-0x10]
0x8eb35:	clc    
0x8eb34:	add    eax,edi
0x8eb33:	add    rax,rdi
0x8eb32:	ror    BYTE PTR [rax+0x1],0xf8
0x8eb46:	cmp    BYTE PTR [rax],dl
0x8eb45:	cmp    BYTE PTR [rax],r10b
0x8eb44:	lea    eax,[rax+rdi*1+0x10]
0x8eb56:	cmp    BYTE PTR [rax],ah
0x8eb55:	cmp    BYTE PTR [rax],r12b
0x8eb54:	lea    eax,[rax+rdi*1+0x20]
0x8eb6a:	clc    
0x8eb69:	add    eax,edi
0x8eb68:	add    rax,rdi
0x8eb67:	cmp    BYTE PTR [rax+0x1],cl; 	clc    
0x8eb79:	lea    eax,[rdi+rax*1+0x10]
0x8eb89:	lea    eax,[rdi+rax*1+0x20]
0x8eb99:	lea    eax,[rdi+rax*1+0x30]
0x8eba1:	xor    eax,eax
0x8eba0:	xor    rax,rax
0x8eb9f:	nop; 	xor    rax,rax
0x8ebc8:	add    BYTE PTR [rax],al
0x8ecc6:	sub    eax,edx
0x8ecc4:	mov    dh,0x16; 	sub    eax,edx
0x8eccd:	and    cl,BYTE PTR [rcx-0x77]
0x8ecec:	sub    eax,edx
0x8ecea:	mov    dh,0xd2; 	sub    eax,edx
0x8ecf0:	xor    eax,eax
0x8ecef:	nop; 	xor    eax,eax
0x8ecee:	ret    ; 	nop; 	xor    eax,eax
0x8f0a3:	pop    rbp
0x8f0a2:	pop    r13
0x8f0a1:	pop    rsp; 	pop    r13
0x8f0a0:	pop    r12; 	pop    r13
0x8f138:	pop    rbp
0x8f137:	pop    r13
0x8f136:	pop    rsp; 	pop    r13
0x8f135:	pop    r12; 	pop    r13
0x8f1ee:	add    DWORD PTR [rax],eax
0x8f273:	or     al,0xf3
0x8f2eb:	in     al,0xf3
0x8f310:	adc    dh,bh
0x8f30f:	rex.WR adc sil,r15b
0x8f30e:	mov    DWORD PTR [rax+rdx*1-0x2],ecx
0x8f318:	cld    
0x8f315:	mov    DWORD PTR [rdi+rdx*1-0x4],ecx
0x8f321:	clc    
0x8f31e:	mov    DWORD PTR [rdi+rdx*1-0x8],ecx
0x8f354:	add    DWORD PTR [rax],eax
0x8f395:	or     eax,DWORD PTR [rax]
0x8f394:	out    dx,al; 	or     eax,DWORD PTR [rax]
0x8f42d:	clc    
0x8f42c:	mov    eax,edi
0x8f42b:	mov    rax,rdi
0x8f42a:	in     eax,0x48; 	mov    eax,edi
0x8f4db:	clc    
0x8f4da:	mov    eax,edi
0x8f4d9:	mov    rax,rdi
0x8f4d8:	dec    DWORD PTR [rax-0x77]; 	clc    
0x8f517:	clc    
0x8f516:	mov    eax,edi
0x8f515:	mov    rax,rdi
0x8f514:	dec    DWORD PTR [rax-0x77]; 	clc    
0x8f701:	clc    
0x8f700:	mov    eax,edi
0x8f6ff:	mov    rax,rdi
0x8f6fe:	dec    DWORD PTR [rax-0x77]; 	clc    
0x8f75f:	cmp    BYTE PTR [rax+0xf],cl
0x8f800:	clc    
0x8f7ff:	mov    eax,edi
0x8f7fe:	mov    rax,rdi
0x8f7fd:	dec    DWORD PTR [rax-0x77]; 	clc    
0x8f82b:	add    eax,0x1
0x8f83d:	add    eax,0x1
0x8f969:	mov    eax,edx
0x8f968:	mov    rax,rdx
0x8f9ee:	add    BYTE PTR [rax],al
0x8fa51:	add    BYTE PTR [rax],al
0x91c79:	sub    eax,ecx
0x91c77:	add    al,0x82; 	sub    eax,ecx
0x91c7c:	xor    eax,eax
0x91c7b:	ret    ; 	xor    eax,eax
0x91c7a:	enter  0x31c3,0xc0
0x91c93:	sub    eax,ecx
0x91c91:	add    al,0x82; 	sub    eax,ecx
0x91cde:	add    BYTE PTR [rax],al
0x91d41:	add    BYTE PTR [rax],al
0x9436e:	sub    eax,ecx
0x9436c:	add    al,0x82; 	sub    eax,ecx
0x94371:	xor    eax,eax
0x94370:	ret    ; 	xor    eax,eax
0x9436f:	enter  0x31c3,0xc0
0x94393:	sub    eax,ecx
0x94391:	add    al,0x82; 	sub    eax,ecx
0x943eb:	pop    rsp
0x943ea:	pop    r12
0x943e9:	pop    rbp; 	pop    r12
0x943e8:	rcr    BYTE PTR [rbp+0x41],0x5c
0x94414:	add    BYTE PTR [rax],al
0x94428:	je     0x9442b
0x94426:	add    BYTE PTR [rax],al; 	je     0x9442b
0x94443:	add    BYTE PTR [rax],al
0x94457:	or     eax,DWORD PTR [rax]
0x94456:	retf   ; 	or     eax,DWORD PTR [rax]
0x94455:	rex.RXB retf ; 	or     eax,DWORD PTR [rax]
0x944ea:	in     eax,0xf3
0x945ad:	push   rbx
0x945e9:	push   rbx
0x947d3:	push   rbx
0x9482f:	cmp    BYTE PTR [rax+0xf],cl
0x948d2:	push   rbx
0x94a99:	pop    rbx
0x94a97:	mov    DWORD PTR [rdi],ecx; 	pop    rbx
0x94a96:	mov    QWORD PTR [rdi],r9; 	pop    rbx
0x94cd3:	cmp    bl,dh
0x94cd2:	rex.WRXB cmp r11b,r14b
0x94d65:	pop    rsp
0x94d64:	pop    r12
0x94d63:	pop    rbp; 	pop    r12
0x94d62:	pop    rbx; 	pop    rbp; 	pop    r12
0x94e7e:	pop    rbp
0x94e7d:	pop    rbx; 	pop    rbp
0x94e7c:	or     BYTE PTR [rbx+0x5d],bl
0x94e9b:	pop    rbp
0x94e9a:	pop    rbx; 	pop    rbp
0x94e99:	fcomp  DWORD PTR [rbx+0x5d]
0x94e98:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x94f36:	ror    BYTE PTR [rcx-0x39],cl
0x94f78:	ror    BYTE PTR [rcx-0x7d],1
0x94f80:	add    DWORD PTR [rcx+0x39],ecx
0x94f8f:	pop    rsp
0x94f8e:	pop    r12
0x94f8d:	pop    rbp; 	pop    r12
0x94f8c:	pop    rbx; 	pop    rbp; 	pop    r12
0x9541e:	cmp    DWORD PTR [rcx+0x39],ecx
0x9543b:	pop    rdi
0x9543a:	pop    r15
0x95439:	pop    rsi; 	pop    r15
0x95438:	pop    r14; 	pop    r15
0x954d5:	add    DWORD PTR [rax-0x7d],ecx
0x95527:	pop    rdi
0x95526:	pop    r15
0x95525:	pop    rsi; 	pop    r15
0x95524:	pop    r14; 	pop    r15
0x95544:	dec    DWORD PTR [rcx-0x77]
0x95707:	pop    rdi
0x95706:	pop    r15
0x95705:	pop    rsi; 	pop    r15
0x95704:	pop    r14; 	pop    r15
0x9585a:	add    DWORD PTR [rax+0x39],ecx
0x959b9:	out    0xf3,al
0x959e4:	add    DWORD PTR [rax-0x77],ecx
0x959e3:	clc    ; 	add    DWORD PTR [rax-0x77],ecx
0x95a4e:	pop    rsi
0x95a4d:	pop    r14
0x95a4c:	pop    rbp; 	pop    r14
0x95a4b:	pop    r13; 	pop    r14
0x95a61:	dec    DWORD PTR [rax-0x77]
0x95a60:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x95c44:	or     DWORD PTR [rcx-0x7d],ecx
0x95cfc:	xor    BYTE PTR [rdx+0xe],0x2a
0x95d07:	add    bl,dh
0x95d05:	add    BYTE PTR [rax],al; 	add    bl,dh
0x95d0f:	add    bl,dh
0x95faa:	pop    rdi
0x95fa9:	pop    r15
0x95fa8:	pop    rsi; 	pop    r15
0x95fa7:	pop    r14; 	pop    r15
0x95ff4:	or     cl,ch
0x9614f:	dec    DWORD PTR [rax-0x39]
0x961eb:	xor    cl,BYTE PTR [rax+0x39]
0x96233:	xor    cl,BYTE PTR [rax+0x39]
0x96319:	add    DWORD PTR [rax+0x39],ecx
0x9638c:	pop    rdi
0x9638b:	pop    r15
0x9638a:	pop    rsi; 	pop    r15
0x96389:	pop    r14; 	pop    r15
0x963d2:	clc    
0x963d1:	mov    eax,edi
0x963d0:	mov    rax,rdi
0x963cf:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x964e4:	pop    rdi
0x964e3:	pop    r15
0x964e2:	pop    rsi; 	pop    r15
0x964e1:	pop    r14; 	pop    r15
0x96541:	xor    eax,eax
0x965b1:	add    eax,ecx
0x965b0:	add    rax,rcx
0x965af:	clc    ; 	add    rax,rcx
0x96604:	xlat   BYTE PTR ds:[rbx]
0x96601:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x96664:	xlat   BYTE PTR ds:[rbx]
0x96661:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x96679:	xlat   BYTE PTR ds:[rbx]
0x96676:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x966ef:	xlat   BYTE PTR ds:[rbx]
0x966ec:	xor    BYTE PTR [rsi+0xf],ah; 	xlat   BYTE PTR ds:[rbx]
0x966fd:	lea    eax,[rdi+rax*1+0x30]
0x96716:	cmp    al,dh
0x96715:	cmp    al,r14b
0x96714:	lea    eax,[rax+rdi*1-0x10]
0x96725:	clc    
0x96724:	add    eax,edi
0x96723:	add    rax,rdi
0x96722:	ror    BYTE PTR [rax+0x1],0xf8
0x96736:	cmp    BYTE PTR [rax],dl
0x96735:	cmp    BYTE PTR [rax],r10b
0x96734:	lea    eax,[rax+rdi*1+0x10]
0x96746:	cmp    BYTE PTR [rax],ah
0x96745:	cmp    BYTE PTR [rax],r12b
0x96744:	lea    eax,[rax+rdi*1+0x20]
0x96751:	xor    eax,eax
0x96750:	xor    rax,rax
0x967a8:	add    al,0x7
0x967a7:	lea    eax,[rdi+rax*1]
0x967a6:	lea    rax,[rdi+rax*1]
0x967f9:	enter  0xf66,0xeb
0x968a9:	xlat   BYTE PTR ds:[rbx]
0x968c6:	add    al,0x7
0x968c5:	lea    eax,[rdi+rax*1]
0x968c4:	lea    rax,[rdi+rax*1]
0x968f6:	xlat   BYTE PTR ds:[rbx]
0x9690f:	xlat   BYTE PTR ds:[rbx]
0x9690c:	fsub   QWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x969cf:	pop    rdi
0x969ce:	pop    r15
0x969cd:	pop    rsi; 	pop    r15
0x969cc:	pop    r14; 	pop    r15
0x96a4e:	pop    rsp
0x96a4d:	pop    r12
0x96a4c:	pop    rbp; 	pop    r12
0x96a4b:	pop    rbx; 	pop    rbp; 	pop    r12
0x96ac8:	pop    rdi
0x96ac7:	pop    r15
0x96ac6:	pop    rsi; 	pop    r15
0x96ac5:	pop    r14; 	pop    r15
0x96b5e:	add    DWORD PTR [rax-0x7d],ecx
0x96b80:	add    BYTE PTR [rax-0x7d],cl
0x96baf:	pop    rsi
0x96bae:	pop    r14
0x96bad:	pop    rbp; 	pop    r14
0x96bac:	pop    r13; 	pop    r14
0x96bd9:	pop    rsi
0x96bd8:	pop    r14
0x96bd7:	pop    rbp; 	pop    r14
0x96bd6:	pop    r13; 	pop    r14
0x96c13:	pop    rbp
0x96c12:	pop    rbx; 	pop    rbp
0x96c11:	fcomp  DWORD PTR [rbx+0x5d]
0x96c10:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x96c2a:	pop    rbp
0x96c29:	pop    rbx; 	pop    rbp
0x96c28:	fcomp  DWORD PTR [rbx+0x5d]
0x96c27:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x96ce8:	pop    rsp
0x96ce7:	pop    r12
0x96ce6:	pop    rbp; 	pop    r12
0x96ce5:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x96d27:	pop    rdi
0x96d26:	pop    r15
0x96d25:	pop    rsi; 	pop    r15
0x96d24:	pop    r14; 	pop    r15
0x96ea9:	add    DWORD PTR [rax-0x7d],ecx
0x96ed1:	add    DWORD PTR [rax-0x7d],ecx
0x96eed:	pop    rsi
0x96eec:	pop    r14
0x96eeb:	pop    rbp; 	pop    r14
0x96eea:	pop    r13; 	pop    r14
0x96ff3:	pop    rdi
0x96ff2:	pop    r15
0x96ff1:	pop    rsi; 	pop    r15
0x96ff0:	pop    r14; 	pop    r15
0x97005:	add    DWORD PTR [rax+0x39],ecx
0x9731f:	xchg   esp,eax
0x9731d:	ror    BYTE PTR [rdi],1; 	xchg   esp,eax
0x97326:	xchg   ebp,eax
0x97323:	rol    BYTE PTR [rcx+0xf],0x95
0x9735c:	pop    rbx
0x9735b:	clc    ; 	pop    rbx
0x9735a:	mov    eax,edi; 	pop    rbx
0x97359:	mov    rax,rdi; 	pop    rbx
0x97389:	pop    rbx
0x97387:	xor    eax,eax; 	pop    rbx
0x97386:	icebp  ; 	xor    eax,eax; 	pop    rbx
0x973cf:	xchg   ebp,eax
0x9742f:	xor    eax,eax
0x9742e:	icebp  ; 	xor    eax,eax
0x9742d:	jne    0x97420; 	xor    eax,eax
0x9748b:	cmovne eax,edi
0x9748a:	cmovne rax,rdi
0x974bf:	xchg   esp,eax
0x974bd:	ror    BYTE PTR [rdi],1; 	xchg   esp,eax
0x974c6:	xchg   ebp,eax
0x974c3:	rol    BYTE PTR [rcx+0xf],0x95
0x97520:	pop    rbp
0x9751f:	pop    rbx; 	pop    rbp
0x9751e:	icebp  ; 	pop    rbx; 	pop    rbp
0x9751d:	jne    0x97510; 	pop    rbx; 	pop    rbp
0x975a7:	xchg   esp,eax
0x976db:	pop    rdi
0x976da:	pop    r15
0x976d9:	pop    rsi; 	pop    r15
0x976d8:	pop    r14; 	pop    r15
0x97860:	pop    rdi
0x9785f:	pop    r15
0x9785e:	pop    rsi; 	pop    r15
0x9785d:	pop    r14; 	pop    r15
0x978cd:	xor    eax,eax
0x97927:	pop    rsi
0x97926:	pop    r14
0x97925:	pop    rbp; 	pop    r14
0x97924:	pop    r13; 	pop    r14
0x9796c:	pop    rbx
0x9796b:	ret    ; 	pop    rbx
0x9796a:	rex.R ret ; 	pop    rbx
0x97969:	cmove  eax,ebx; 	pop    rbx
0x97b2d:	add    BYTE PTR [rax+0x29],cl
0x97b72:	fimul  DWORD PTR [rax-0x7d]
0x97d07:	and    BYTE PTR [rax-0x7d],cl
0x97e22:	fimul  DWORD PTR [rax-0x7d]
0x97fb7:	and    BYTE PTR [rax-0x7d],cl
0x98068:	add    BYTE PTR [rax+0x39],cl
0x98084:	pop    rdi
0x98083:	pop    r15
0x98082:	pop    rsi; 	pop    r15
0x98081:	pop    r14; 	pop    r15
0x981cf:	add    BYTE PTR [rax+0x29],cl
0x983ed:	add    BYTE PTR [rax+0x29],cl
0x989c2:	dec    DWORD PTR [rax-0x77]
0x989f8:	pop    rbp
0x989f7:	pop    rdi; 	pop    rbp
0x989f6:	pop    r15; 	pop    rbp
0x989f5:	pop    rsi; 	pop    r15; 	pop    rbp
0x98f97:	or     BYTE PTR [rax-0x77],cl
0x9933f:	add    BYTE PTR [rax+0x29],cl
0x99568:	push   rbp
0x99567:	mov    dh,0x55
0x99565:	sub    cl,BYTE PTR [rdi]; 	mov    dh,0x55
0x99711:	add    BYTE PTR [rax-0x77],cl
0x99b81:	mov    dh,0x45
0x99d44:	add    DWORD PTR [rcx+0x29],ecx
0x9a2f9:	add    al,BYTE PTR [rbp+0x38]
0x9a42f:	add    BYTE PTR [rax+0x29],cl
0x9a6fa:	xchg   ebx,eax
0x9a6f8:	adc    BYTE PTR [rdi],cl; 	xchg   ebx,eax
0x9a6f7:	movups xmm1,XMMWORD PTR [rdi]; 	xchg   ebx,eax
0x9b084:	cmovs  ebp,DWORD PTR [rcx]
0x9b2cf:	ret    0x294c
0x9b58e:	add    BYTE PTR [rax+0x29],cl
0x9bb85:	push   rbp
0x9bb84:	mov    dh,0x55
0x9bb82:	sub    al,0xf; 	mov    dh,0x55
0x9bd2f:	add    BYTE PTR [rcx-0x77],cl
0x9c98f:	xchg   ebx,eax
0x9c98c:	fiadd  DWORD PTR [rcx+0xf]; 	xchg   ebx,eax
0x9cbe9:	xor    DWORD PTR [rcx-0x7d],ecx
0x9ce26:	xchg   ebx,eax
0x9ce24:	fisttp DWORD PTR [rdi]; 	xchg   ebx,eax
0x9d0a3:	cmp    DWORD PTR [rax-0x7d],ecx
0x9d5e9:	push   rbp
0x9d5e8:	mov    dh,0x55
0x9d5e6:	sub    al,0xf; 	mov    dh,0x55
0x9dac8:	mov    dh,0x45
0x9dac6:	sub    al,0xf; 	mov    dh,0x45
0x9e3b1:	add    cl,ch
0x9e3af:	add    BYTE PTR [rax],al; 	add    cl,ch
0x9e507:	mov    dh,0x45
0x9e505:	dec    DWORD PTR [rdi]; 	mov    dh,0x45
0x9e8ea:	clc    
0x9e8e9:	mov    eax,edi
0x9e8e8:	mov    rax,rdi
0x9e8e7:	cli    ; 	mov    rax,rdi
0x9e904:	clc    
0x9e903:	mov    eax,edi
0x9e902:	mov    rax,rdi
0x9e901:	cld    ; 	mov    rax,rdi
0x9e919:	clc    
0x9e918:	mov    eax,edi
0x9e917:	mov    rax,rdi
0x9e916:	add    DWORD PTR [rax-0x77],ecx; 	clc    
0x9e92a:	clc    
0x9e929:	mov    eax,edi
0x9e928:	mov    rax,rdi
0x9e927:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x9e93d:	clc    
0x9e93c:	mov    eax,edi
0x9e93b:	mov    rax,rdi
0x9e93a:	add    ecx,DWORD PTR [rax-0x77]; 	clc    
0x9e94d:	clc    
0x9e94c:	mov    eax,edi
0x9e94b:	mov    rax,rdi
0x9e94a:	cld    ; 	mov    rax,rdi
0x9e960:	clc    
0x9e95f:	mov    eax,edi
0x9e95e:	mov    rax,rdi
0x9e95d:	sti    ; 	mov    rax,rdi
0x9e97e:	clc    
0x9e97d:	mov    eax,edi
0x9e97c:	mov    rax,rdi
0x9e97b:	stc    ; 	mov    rax,rdi
0x9e9a8:	clc    
0x9e9a7:	mov    eax,edi
0x9e9a6:	mov    rax,rdi
0x9e9a5:	add    al,0x48; 	mov    eax,edi
0x9e9b8:	clc    
0x9e9b7:	mov    eax,edi
0x9e9b6:	mov    rax,rdi
0x9e9b5:	add    al,0x48; 	mov    eax,edi
0x9e9c5:	clc    
0x9e9c4:	mov    eax,edi
0x9e9c3:	mov    rax,rdi
0x9e9c2:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x9e9d5:	clc    
0x9e9d4:	mov    eax,edi
0x9e9d3:	mov    rax,rdi
0x9e9e9:	clc    
0x9e9e8:	mov    eax,edi
0x9e9e7:	mov    rax,rdi
0x9e9e6:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x9e9f4:	clc    
0x9e9f3:	mov    eax,edi
0x9e9f2:	mov    rax,rdi
0x9ea08:	clc    
0x9ea07:	mov    eax,edi
0x9ea06:	mov    rax,rdi
0x9ea05:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x9ea19:	mov    BYTE PTR [rdi+0x6],0x0
0x9ea45:	clc    
0x9ea44:	mov    eax,edi
0x9ea43:	mov    rax,rdi
0x9ea42:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x9ea57:	lea    eax,[rdi+0x7]
0x9ea56:	lea    rax,[rdi+0x7]
0x9ea64:	lea    eax,[rdi+0x1]
0x9ea63:	lea    rax,[rdi+0x1]
0x9ea78:	lea    eax,[rdi+0x2]
0x9ea77:	lea    rax,[rdi+0x2]
0x9ea83:	lea    eax,[rdi+0x3]
0x9ea82:	lea    rax,[rdi+0x3]
0x9ea97:	lea    eax,[rdi+0x4]
0x9ea96:	lea    rax,[rdi+0x4]
0x9eaa7:	lea    eax,[rdi+0x5]
0x9eaa6:	lea    rax,[rdi+0x5]
0x9eaba:	mov    BYTE PTR [rdi+0x6],0x0
0x9eaef:	add    bl,dh
0x9eaf2:	xor    eax,eax
0x9eaf1:	ret    ; 	xor    eax,eax
0x9eaf0:	repz ret ; 	xor    eax,eax
0x9eb32:	xor    eax,eax
0x9eb31:	ret    ; 	xor    eax,eax
0x9eb30:	repz ret ; 	xor    eax,eax
0x9eb8f:	add    bl,dh
0x9eb8d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x9eb92:	xor    eax,eax
0x9eb91:	ret    ; 	xor    eax,eax
0x9eb90:	repz ret ; 	xor    eax,eax
0x9ebe2:	xor    eax,eax
0x9ebe1:	ret    ; 	xor    eax,eax
0x9ebe0:	repz ret ; 	xor    eax,eax
0x9ec30:	fcomip st,st(3)
0x9ec2e:	enter  0xdf74,0xf3
0x9ec33:	xor    eax,eax
0x9ec32:	ret    ; 	xor    eax,eax
0x9ec31:	repz ret ; 	xor    eax,eax
0x9ec6b:	xor    eax,eax
0x9ec6a:	in     eax,dx; 	xor    eax,eax
0x9ec69:	jne    0x9ec58; 	xor    eax,eax
0x9ec72:	clc    
0x9ec71:	mov    eax,edi
0x9ec70:	mov    rax,rdi
0x9ec6f:	nop; 	mov    rax,rdi
0x9ecc4:	xor    eax,eax
0x9ecc2:	jne    0x9eca0; 	xor    eax,eax
0x9ecd2:	clc    
0x9ecd1:	mov    eax,edi
0x9ecd0:	mov    rax,rdi
0x9eccf:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x9ed25:	mov    DWORD PTR [rdx],ecx
0x9ed24:	mov    QWORD PTR [rdx],rcx
0x9ed23:	in     al,dx; 	mov    QWORD PTR [rdx],rcx
0x9ed37:	mov    DWORD PTR [rdx],ecx
0x9ed36:	mov    QWORD PTR [rdx],rcx
0x9ed35:	ror    DWORD PTR [rax-0x77],0xa
0x9ed4b:	mov    DWORD PTR [rdx],ecx
0x9ed4a:	mov    QWORD PTR [rdx],rcx
0x9ed49:	ror    BYTE PTR [rax-0x77],0xa
0x9ed84:	pop    rbp
0x9ed83:	pop    rbx; 	pop    rbp
0x9ed81:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x9edef:	mov    DWORD PTR [rdi],edx
0x9edee:	mov    QWORD PTR [rdi],rdx
0x9ee19:	xchg   esp,eax
0x9ee17:	ror    DWORD PTR [rdi],1; 	xchg   esp,eax
0x9ee6f:	mov    DWORD PTR [rdi],edx
0x9ee6e:	mov    QWORD PTR [rdi],rdx
0x9ee6d:	pop    rbx; 	mov    QWORD PTR [rdi],rdx
0x9ee75:	mov    DWORD PTR [rdi],edx
0x9ee74:	mov    QWORD PTR [rdi],rdx
0x9ef0f:	xlat   BYTE PTR ds:[rbx]
0x9ef0c:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x9ef70:	xlat   BYTE PTR ds:[rbx]
0x9ef6d:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x9ef84:	xlat   BYTE PTR ds:[rbx]
0x9ef81:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x9efff:	xlat   BYTE PTR ds:[rbx]
0x9effc:	add    BYTE PTR [rsi+0xf],ah; 	xlat   BYTE PTR ds:[rbx]
0x9f02b:	clc    
0x9f02a:	add    eax,edi
0x9f029:	add    rax,rdi
0x9f028:	ror    BYTE PTR [rax+0x1],0xf8
0x9f06f:	xlat   BYTE PTR ds:[rbx]
0x9f06c:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x9f093:	xor    eax,eax
0x9f091:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x9f0cc:	xor    eax,eax
0x9f0ca:	jne    0x9f140; 	xor    eax,eax
0x9f0d5:	clc    
0x9f0d4:	add    eax,edi
0x9f0d3:	add    rax,rdi
0x9f0d2:	ror    BYTE PTR [rax+0x1],0xf8
0x9f0e6:	cmp    BYTE PTR [rax],dl
0x9f0e5:	cmp    BYTE PTR [rax],r10b
0x9f0e4:	lea    eax,[rax+rdi*1+0x10]
0x9f0f6:	cmp    BYTE PTR [rax],ah
0x9f0f5:	cmp    BYTE PTR [rax],r12b
0x9f0f4:	lea    eax,[rax+rdi*1+0x20]
0x9f106:	cmp    BYTE PTR [rax],dh
0x9f105:	cmp    BYTE PTR [rax],r14b
0x9f104:	lea    eax,[rax+rdi*1+0x30]
0x9f11e:	clc    
0x9f11d:	add    eax,edi
0x9f11c:	add    rax,rdi
0x9f11b:	fs add rax,rdi
0x9f12d:	lea    eax,[rdi+rax*1+0x10]
0x9f14d:	lea    eax,[rdi+rax*1+0x20]
0x9f16d:	lea    eax,[rdi+rax*1+0x30]
0x9f181:	xor    eax,eax
0x9f180:	xor    rax,rax
0x9f1b3:	clc    
0x9f1b2:	add    eax,edi
0x9f1b1:	add    rax,rdi
0x9f1b0:	ror    BYTE PTR [rax+0x1],0xf8
0x9f218:	add    eax,eax
0x9f217:	add    rax,r8
0x9f216:	clc    ; 	add    rax,r8
0x9f25b:	add    eax,eax
0x9f25a:	add    rax,r8
0x9f259:	clc    ; 	add    rax,r8
0x9f266:	cmp    BYTE PTR [rax],dl
0x9f265:	cmp    BYTE PTR [rax],r10b
0x9f264:	lea    eax,[rax+rdi*1+0x10]
0x9f2da:	pop    rbp
0x9f2d9:	pop    r13
0x9f2d8:	pop    rsp; 	pop    r13
0x9f2d7:	pop    r12; 	pop    r13
0x9f309:	pop    rbp
0x9f308:	pop    r13
0x9f307:	pop    rsp; 	pop    r13
0x9f306:	pop    r12; 	pop    r13
0x9f3d1:	pop    rbp
0x9f3d0:	pop    r13
0x9f3cf:	pop    rsp; 	pop    r13
0x9f3ce:	pop    r12; 	pop    r13
0x9f453:	pop    rbp
0x9f452:	pop    r13
0x9f451:	pop    rsp; 	pop    r13
0x9f450:	pop    r12; 	pop    r13
0x9f46c:	pop    rbp
0x9f46b:	pop    r13
0x9f46a:	pop    rsp; 	pop    r13
0x9f469:	pop    r12; 	pop    r13
0x9f4b6:	pop    rbp
0x9f4b5:	pop    r13
0x9f4b4:	pop    rsp; 	pop    r13
0x9f4b3:	pop    r12; 	pop    r13
0x9f51c:	pop    rbp
0x9f51b:	pop    r13
0x9f51a:	pop    rsp; 	pop    r13
0x9f519:	pop    r12; 	pop    r13
0x9f53d:	dec    DWORD PTR [rax+0x39]
0x9f545:	adc    cl,BYTE PTR [rax+0x29]
0x9f5b7:	sub    eax,edx
0x9f5b5:	adc    al,0x16; 	sub    eax,edx
0x9f725:	sub    eax,edx
0x9f723:	adc    al,0xa; 	sub    eax,edx
0x9f7eb:	sub    eax,edx
0x9f7e9:	adc    al,0xa; 	sub    eax,edx
0x9f810:	sub    eax,ecx
0x9f80f:	shr    BYTE PTR [rcx],0xc8
0x9f80e:	xor    eax,eax; 	sub    eax,ecx
0x9f860:	clc    
0x9f85f:	mov    eax,edi
0x9f85e:	mov    rax,rdi
0x9f85d:	adc    cl,BYTE PTR [rax-0x77]; 	clc    
0x9fae7:	jns    0x9fae8
0x9fae6:	adc    DWORD PTR [rcx-0x1],edi
0x9fae5:	adc    QWORD PTR [rcx-0x1],rdi
0x9fb22:	adc    DWORD PTR [rcx-0x1],ebx
0x9fb21:	adc    QWORD PTR [rcx-0x1],rbx
0x9fb93:	clc    
0x9fb92:	rex.WB clc 
0x9fb91:	mov    DWORD PTR [rcx-0x8],ecx
0x9fb90:	mov    QWORD PTR [r9-0x8],rcx
0x9fba4:	cld    
0x9fba3:	rex.WB cld 
0x9fba2:	mov    DWORD PTR [rcx-0x4],ecx
0x9fba1:	mov    DWORD PTR [r9-0x4],ecx
0x9fbb7:	mov    DWORD PTR [rcx-0x2],ecx
0x9fbb6:	mov    DWORD PTR [r9-0x2],ecx
0x9fbc2:	mov    BYTE PTR [rdi],cl
0x9fbc0:	mov    cl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],cl
0x9fd21:	jns    0x9fd22
0x9fd20:	adc    DWORD PTR [rcx-0x1],edi
0x9fd1f:	adc    QWORD PTR [rcx-0x1],rdi
0x9fe88:	jns    0x9fe91
0x9fe87:	adc    DWORD PTR [rcx+0x7],edi
0x9fe86:	adc    QWORD PTR [rcx+0x7],rdi
0x9ffeb:	clc    
0x9ffea:	jg     0x9ffe4
0x9ffe9:	adc    DWORD PTR [rdi-0x8],edi
0x9ffe8:	adc    QWORD PTR [rdi-0x8],rdi
0xa023a:	jns    0xa023b
0xa0239:	adc    DWORD PTR [rcx-0x1],edi
0xa0238:	adc    QWORD PTR [rcx-0x1],rdi
0xa0275:	adc    DWORD PTR [rcx-0x1],ebx
0xa0274:	adc    QWORD PTR [rcx-0x1],rbx
0xa02e6:	clc    
0xa02e5:	rex.WB clc 
0xa02e4:	mov    DWORD PTR [rcx-0x8],ecx
0xa02e3:	mov    QWORD PTR [r9-0x8],rcx
0xa02f7:	cld    
0xa02f6:	rex.WB cld 
0xa02f5:	mov    DWORD PTR [rcx-0x4],ecx
0xa02f4:	mov    DWORD PTR [r9-0x4],ecx
0xa030a:	mov    DWORD PTR [rcx-0x2],ecx
0xa0309:	mov    DWORD PTR [r9-0x2],ecx
0xa0315:	mov    BYTE PTR [rdi],cl
0xa0313:	mov    cl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],cl
0xa0474:	jns    0xa0475
0xa0473:	adc    DWORD PTR [rcx-0x1],edi
0xa0472:	adc    QWORD PTR [rcx-0x1],rdi
0xa05db:	jns    0xa05e4
0xa05da:	adc    DWORD PTR [rcx+0x7],edi
0xa05d9:	adc    QWORD PTR [rcx+0x7],rdi
0xa073e:	clc    
0xa073d:	jg     0xa0737
0xa073c:	adc    DWORD PTR [rdi-0x8],edi
0xa073b:	adc    QWORD PTR [rdi-0x8],rdi
0xa0987:	jns    0xa0988
0xa0986:	adc    DWORD PTR [rcx-0x1],edi
0xa0985:	adc    QWORD PTR [rcx-0x1],rdi
0xa09c2:	adc    DWORD PTR [rcx-0x1],ebx
0xa09c1:	adc    QWORD PTR [rcx-0x1],rbx
0xa0a33:	clc    
0xa0a32:	rex.WB clc 
0xa0a31:	mov    DWORD PTR [rcx-0x8],ecx
0xa0a30:	mov    QWORD PTR [r9-0x8],rcx
0xa0a44:	cld    
0xa0a43:	rex.WB cld 
0xa0a42:	mov    DWORD PTR [rcx-0x4],ecx
0xa0a41:	mov    DWORD PTR [r9-0x4],ecx
0xa0a57:	mov    DWORD PTR [rcx-0x2],ecx
0xa0a56:	mov    DWORD PTR [r9-0x2],ecx
0xa0a62:	mov    BYTE PTR [rdi],cl
0xa0a60:	mov    cl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],cl
0xa0bc1:	jns    0xa0bc2
0xa0bc0:	adc    DWORD PTR [rcx-0x1],edi
0xa0bbf:	adc    QWORD PTR [rcx-0x1],rdi
0xa0d28:	jns    0xa0d31
0xa0d27:	adc    DWORD PTR [rcx+0x7],edi
0xa0d26:	adc    QWORD PTR [rcx+0x7],rdi
0xa0e8b:	clc    
0xa0e8a:	jg     0xa0e84
0xa0e89:	adc    DWORD PTR [rdi-0x8],edi
0xa0e88:	adc    QWORD PTR [rdi-0x8],rdi
0xa1677:	xlat   BYTE PTR ds:[rbx]
0xa1674:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xa2a1c:	clc    
0xa2a1b:	mov    eax,edi
0xa2a1a:	mov    rax,rdi
0xa2a19:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa2a73:	clc    
0xa2a72:	mov    eax,edi
0xa2a71:	mov    rax,rdi
0xa2a70:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa2a8b:	clc    
0xa2a8a:	mov    eax,edi
0xa2a89:	mov    rax,rdi
0xa2a88:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa2a9d:	clc    
0xa2a9c:	mov    eax,edi
0xa2a9b:	mov    rax,rdi
0xa2a9a:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa2ab3:	clc    
0xa2ab2:	mov    eax,edi
0xa2ab1:	mov    rax,rdi
0xa2ab0:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa2acb:	clc    
0xa2aca:	mov    eax,edi
0xa2ac9:	mov    rax,rdi
0xa2ac8:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa2ae1:	clc    
0xa2ae0:	mov    eax,edi
0xa2adf:	mov    rax,rdi
0xa2ade:	add    al,0x48; 	mov    eax,edi
0xa2b03:	clc    
0xa2b02:	mov    eax,edi
0xa2b01:	mov    rax,rdi
0xa2b00:	add    al,0x48; 	mov    eax,edi
0xa2b21:	clc    
0xa2b20:	mov    eax,edi
0xa2b1f:	mov    rax,rdi
0xa2b1e:	add    ecx,DWORD PTR [rax-0x77]; 	clc    
0xa2b3f:	clc    
0xa2b3e:	mov    eax,edi
0xa2b3d:	mov    rax,rdi
0xa2b3c:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa2b65:	clc    
0xa2b64:	mov    eax,edi
0xa2b63:	mov    rax,rdi
0xa2b62:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa2b87:	clc    
0xa2b86:	mov    eax,edi
0xa2b85:	mov    rax,rdi
0xa2b84:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa2ba5:	clc    
0xa2ba4:	mov    eax,edi
0xa2ba3:	mov    rax,rdi
0xa2bc5:	clc    
0xa2bc4:	mov    eax,edi
0xa2bc3:	mov    rax,rdi
0xa2bc2:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa2be9:	clc    
0xa2be8:	mov    eax,edi
0xa2be7:	mov    rax,rdi
0xa2c09:	clc    
0xa2c08:	mov    eax,edi
0xa2c07:	mov    rax,rdi
0xa2c29:	clc    
0xa2c28:	mov    eax,edi
0xa2c27:	mov    rax,rdi
0xa2c49:	clc    
0xa2c48:	mov    eax,edi
0xa2c47:	mov    rax,rdi
0xa2c46:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa32d6:	ror    BYTE PTR [rdi],0x85
0xa3327:	xlat   BYTE PTR ds:[rbx]
0xa3324:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xa4cc7:	add    cl,ch
0xa4cc5:	or     DWORD PTR [rax],eax; 	add    cl,ch
0xa53ec:	clc    
0xa53eb:	mov    eax,edi
0xa53ea:	mov    rax,rdi
0xa53e9:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa5443:	clc    
0xa5442:	mov    eax,edi
0xa5441:	mov    rax,rdi
0xa5440:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa545b:	clc    
0xa545a:	mov    eax,edi
0xa5459:	mov    rax,rdi
0xa5458:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa546d:	clc    
0xa546c:	mov    eax,edi
0xa546b:	mov    rax,rdi
0xa546a:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa5483:	clc    
0xa5482:	mov    eax,edi
0xa5481:	mov    rax,rdi
0xa5480:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa549b:	clc    
0xa549a:	mov    eax,edi
0xa5499:	mov    rax,rdi
0xa5498:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa54b1:	clc    
0xa54b0:	mov    eax,edi
0xa54af:	mov    rax,rdi
0xa54ae:	add    al,0x48; 	mov    eax,edi
0xa54d3:	clc    
0xa54d2:	mov    eax,edi
0xa54d1:	mov    rax,rdi
0xa54d0:	add    al,0x48; 	mov    eax,edi
0xa54f1:	clc    
0xa54f0:	mov    eax,edi
0xa54ef:	mov    rax,rdi
0xa54ee:	add    ecx,DWORD PTR [rax-0x77]; 	clc    
0xa550f:	clc    
0xa550e:	mov    eax,edi
0xa550d:	mov    rax,rdi
0xa550c:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa5535:	clc    
0xa5534:	mov    eax,edi
0xa5533:	mov    rax,rdi
0xa5532:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa5557:	clc    
0xa5556:	mov    eax,edi
0xa5555:	mov    rax,rdi
0xa5554:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa5575:	clc    
0xa5574:	mov    eax,edi
0xa5573:	mov    rax,rdi
0xa5595:	clc    
0xa5594:	mov    eax,edi
0xa5593:	mov    rax,rdi
0xa5592:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa55b9:	clc    
0xa55b8:	mov    eax,edi
0xa55b7:	mov    rax,rdi
0xa55d9:	clc    
0xa55d8:	mov    eax,edi
0xa55d7:	mov    rax,rdi
0xa55f9:	clc    
0xa55f8:	mov    eax,edi
0xa55f7:	mov    rax,rdi
0xa5619:	clc    
0xa5618:	mov    eax,edi
0xa5617:	mov    rax,rdi
0xa5616:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa56d6:	clc    
0xa56d5:	mov    eax,edi
0xa56d4:	mov    rax,rdi
0xa56d3:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa5779:	clc    
0xa5778:	mov    eax,edi
0xa5777:	mov    rax,rdi
0xa5776:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa57f5:	clc    
0xa57f4:	mov    eax,edi
0xa57f3:	mov    rax,rdi
0xa57f2:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa585f:	clc    
0xa585e:	mov    eax,edi
0xa585d:	mov    rax,rdi
0xa585c:	adc    BYTE PTR [rax-0x77],cl; 	clc    
0xa5872:	clc    
0xa5871:	mov    eax,edi
0xa5870:	mov    rax,rdi
0xa586f:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xa5911:	clc    
0xa5910:	mov    eax,edi
0xa590f:	mov    rax,rdi
0xa590e:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa59c4:	clc    
0xa59c3:	mov    eax,edi
0xa59c2:	mov    rax,rdi
0xa59c1:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xa5d30:	mov    BYTE PTR [rdi],dh
0xa5d2e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dh
0xa5d44:	mov    DWORD PTR [rdi],edx
0xa5d43:	mov    WORD PTR [rdi],dx
0xa5d57:	ja     0xa5d5b
0xa5d56:	mov    BYTE PTR [rdi+0x2],dh
0xa5d62:	mov    DWORD PTR [rdi],edx
0xa5d60:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xa5d75:	mov    DWORD PTR [rdi],ecx
0xa5d73:	ja     0xa5d79; 	mov    DWORD PTR [rdi],ecx
0xa5d89:	mov    DWORD PTR [rdi+0x4],edx
0xa5d88:	mov    WORD PTR [rdi+0x4],dx
0xa5d97:	mov    DWORD PTR [rdi+0x3],edx
0xa5da4:	mov    DWORD PTR [rdi],edx
0xa5da3:	mov    QWORD PTR [rdi],rdx
0xa5db7:	mov    DWORD PTR [rdi],ecx
0xa5db6:	mov    QWORD PTR [rdi],rcx
0xa5dcb:	mov    DWORD PTR [rdi+0x8],edx
0xa5dca:	mov    WORD PTR [rdi+0x8],dx
0xa5dd9:	mov    DWORD PTR [rdi+0x7],edx
0xa5de9:	mov    DWORD PTR [rdi+0x8],edx
0xa5dfb:	mov    DWORD PTR [rdi+0x5],edx
0xa5dfa:	mov    QWORD PTR [rdi+0x5],rdx
0xa5e0b:	mov    DWORD PTR [rdi+0x6],edx
0xa5e0a:	mov    QWORD PTR [rdi+0x6],rdx
0xa5e1b:	mov    DWORD PTR [rdi+0x7],edx
0xa5e1a:	mov    QWORD PTR [rdi+0x7],rdx
0xa5e26:	jg     0xa5e2f
0xa5e25:	movq   QWORD PTR [rdi],mm0
0xa5e24:	movdqu XMMWORD PTR [rdi],xmm0
0xa5e39:	ja     0xa5e4b
0xa5e38:	mov    BYTE PTR [rdi+0x10],dh
0xa5e4d:	mov    DWORD PTR [rdi+0x10],ecx
0xa5e4c:	mov    WORD PTR [rdi+0x10],cx
0xa5e6b:	mov    DWORD PTR [rdi+0xf],ecx
0xa5e7b:	mov    DWORD PTR [rdi+0x10],ecx
0xa5e8f:	ja     0xa5ea5
0xa5e8e:	mov    BYTE PTR [rdi+0x14],dh
0xa5ead:	mov    DWORD PTR [rdi+0xe],ecx
0xa5eac:	mov    QWORD PTR [rdi+0xe],rcx
0xa5ecd:	mov    DWORD PTR [rdi+0xf],ecx
0xa5ecc:	mov    QWORD PTR [rdi+0xf],rcx
0xa5eed:	mov    DWORD PTR [rdi+0x10],ecx
0xa5eec:	mov    QWORD PTR [rdi+0x10],rcx
0xa5f11:	ja     0xa5f2b
0xa5f10:	mov    BYTE PTR [rdi+0x18],dh
0xa5f35:	mov    DWORD PTR [rdi+0x18],ecx
0xa5f34:	mov    WORD PTR [rdi+0x18],cx
0xa5f53:	mov    DWORD PTR [rdi+0x17],ecx
0xa5f73:	mov    DWORD PTR [rdi+0x18],ecx
0xa5f8e:	movq   QWORD PTR [rdi+0xd],mm2
0xa5fae:	movq   QWORD PTR [rdi+0xe],mm2
0xa5fce:	movq   QWORD PTR [rdi+0xf],mm2
0xa5fee:	movq   QWORD PTR [rdi+0x10],mm2
0xa657e:	add    BYTE PTR [rax],al
0xa657c:	mov    al,0x8; 	add    BYTE PTR [rax],al
0xa65a2:	add    BYTE PTR [rax],al
0xa65a0:	mov    WORD PTR [rax],cs; 	add    BYTE PTR [rax],al
0xa65c5:	add    BYTE PTR [rax],al
0xa65e0:	add    BYTE PTR [rax],al
0xa6603:	add    BYTE PTR [rax],al
0xa6601:	sub    ecx,DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0xa6628:	add    BYTE PTR [rax],al
0xa6646:	add    BYTE PTR [rax],al
0xa6662:	add    BYTE PTR [rax],al
0xa6685:	add    BYTE PTR [rax],al
0xa66aa:	add    BYTE PTR [rax],al
0xa66a8:	test   BYTE PTR [rdi],al; 	add    BYTE PTR [rax],al
0xa66c8:	add    BYTE PTR [rax],al
0xa66e8:	add    BYTE PTR [rax],al
0xa670a:	add    BYTE PTR [rax],al
0xa6708:	and    al,0x7; 	add    BYTE PTR [rax],al
0xa672a:	add    BYTE PTR [rax],al
0xa6728:	add    al,0x7; 	add    BYTE PTR [rax],al
0xa674a:	add    BYTE PTR [rax],al
0xa6748:	in     al,0x6; 	add    BYTE PTR [rax],al
0xa6764:	add    BYTE PTR [rax],al
0xa6787:	add    BYTE PTR [rax],al
0xa67ac:	add    BYTE PTR [rax],al
0xa67ca:	add    BYTE PTR [rax],al
0xa67ea:	add    BYTE PTR [rax],al
0xa680d:	add    BYTE PTR [rax],al
0xa680b:	and    DWORD PTR [rsi],eax; 	add    BYTE PTR [rax],al
0xa682c:	add    BYTE PTR [rax],al
0xa682a:	add    al,BYTE PTR [rsi]; 	add    BYTE PTR [rax],al
0xa684c:	add    BYTE PTR [rax],al
0xa684a:	loop   0xa6851; 	add    BYTE PTR [rax],al
0xa686c:	add    BYTE PTR [rax],al
0xa688f:	add    BYTE PTR [rax],al
0xa68c4:	add    BYTE PTR [rax],al
0xa68c2:	push   0x5; 	add    BYTE PTR [rax],al
0xa68f2:	add    BYTE PTR [rax],al
0xa68f0:	cmp    al,0x5; 	add    BYTE PTR [rax],al
0xa6922:	add    BYTE PTR [rax],al
0xa6920:	or     al,0x5; 	add    BYTE PTR [rax],al
0xa694e:	add    BYTE PTR [rax],al
0xa694c:	loopne 0xa6952; 	add    BYTE PTR [rax],al
0xa697e:	add    BYTE PTR [rax],al
0xa697c:	mov    al,0x4; 	add    BYTE PTR [rax],al
0xa69ae:	add    BYTE PTR [rax],al
0xa69ac:	add    BYTE PTR [rax+rax*1],0x0
0xa69de:	add    BYTE PTR [rax],al
0xa69ee:	add    BYTE PTR [rax],al
0xa69ec:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xa6a02:	mov    BYTE PTR [rdi],dl
0xa6a00:	mov    dl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],dl
0xa6a14:	mov    DWORD PTR [rdi],edx
0xa6a13:	mov    WORD PTR [rdi],dx
0xa6a29:	mov    BYTE PTR [rdi+0x2],dl
0xa6a32:	mov    DWORD PTR [rdi],edx
0xa6a30:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xa6a47:	mov    BYTE PTR [rdi+0x4],dl
0xa6a59:	mov    DWORD PTR [rdi+0x4],edx
0xa6a58:	mov    WORD PTR [rdi+0x4],dx
0xa6a67:	mov    DWORD PTR [rdi+0x3],edx
0xa6a74:	mov    DWORD PTR [rdi],edx
0xa6a73:	mov    QWORD PTR [rdi],rdx
0xa6a89:	mov    BYTE PTR [rdi+0x8],dl
0xa6a9b:	mov    DWORD PTR [rdi+0x8],edx
0xa6a9a:	mov    WORD PTR [rdi+0x8],dx
0xa6aa9:	mov    DWORD PTR [rdi+0x7],edx
0xa6ab9:	mov    DWORD PTR [rdi+0x8],edx
0xa6acb:	mov    DWORD PTR [rdi+0x5],edx
0xa6aca:	mov    QWORD PTR [rdi+0x5],rdx
0xa6adb:	mov    DWORD PTR [rdi+0x6],edx
0xa6ada:	mov    QWORD PTR [rdi+0x6],rdx
0xa6aeb:	mov    DWORD PTR [rdi+0x7],edx
0xa6aea:	mov    QWORD PTR [rdi+0x7],rdx
0xa6af6:	jg     0xa6aff
0xa6af5:	movq   QWORD PTR [rdi],mm0
0xa6af4:	movdqu XMMWORD PTR [rdi],xmm0
0xa6b0b:	mov    BYTE PTR [rdi+0x10],cl
0xa6b1d:	mov    DWORD PTR [rdi+0x10],ecx
0xa6b1c:	mov    WORD PTR [rdi+0x10],cx
0xa6b3b:	mov    DWORD PTR [rdi+0xf],ecx
0xa6b4b:	mov    DWORD PTR [rdi+0x10],ecx
0xa6b61:	mov    BYTE PTR [rdi+0x14],dl
0xa6b7d:	mov    DWORD PTR [rdi+0xe],ecx
0xa6b7c:	mov    QWORD PTR [rdi+0xe],rcx
0xa6b9d:	mov    DWORD PTR [rdi+0xf],ecx
0xa6b9c:	mov    QWORD PTR [rdi+0xf],rcx
0xa6bbd:	mov    DWORD PTR [rdi+0x10],ecx
0xa6bbc:	mov    QWORD PTR [rdi+0x10],rcx
0xa6be3:	mov    BYTE PTR [rdi+0x18],cl
0xa6c05:	mov    DWORD PTR [rdi+0x18],ecx
0xa6c04:	mov    WORD PTR [rdi+0x18],cx
0xa6c23:	mov    DWORD PTR [rdi+0x17],ecx
0xa6c43:	mov    DWORD PTR [rdi+0x18],ecx
0xa6c5e:	movq   QWORD PTR [rdi+0xd],mm2
0xa6c7e:	movq   QWORD PTR [rdi+0xe],mm2
0xa6c9e:	movq   QWORD PTR [rdi+0xf],mm2
0xa6cbe:	movq   QWORD PTR [rdi+0x10],mm2
0xa6ce5:	mov    BYTE PTR [rdi+0x20],cl
0xa6cee:	add    BYTE PTR [rax],al
0xa6cec:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xa6d00:	mov    BYTE PTR [rdi],dl
0xa6cfe:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dl
0xa6d11:	mov    DWORD PTR [rdi],edx
0xa6d10:	mov    WORD PTR [rdi],dx
0xa6d20:	mov    DWORD PTR [rdi-0x1],edx
0xa6d30:	mov    DWORD PTR [rdi],edx
0xa6d2e:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rdi],edx
0xa6d42:	mov    BYTE PTR [rdi+0x4],dl
0xa6d53:	mov    DWORD PTR [rdi+0x4],edx
0xa6d52:	mov    WORD PTR [rdi+0x4],dx
0xa6d61:	mov    DWORD PTR [rdi-0x1],edx
0xa6d60:	mov    QWORD PTR [rdi-0x1],rdx
0xa6d71:	mov    DWORD PTR [rdi],edx
0xa6d70:	mov    QWORD PTR [rdi],rdx
0xa6d83:	mov    BYTE PTR [rdi+0x8],dl
0xa6d94:	mov    DWORD PTR [rdi+0x8],edx
0xa6d93:	mov    WORD PTR [rdi+0x8],dx
0xa6da3:	mov    DWORD PTR [rdi+0x7],edx
0xa6db3:	mov    DWORD PTR [rdi+0x8],edx
0xa6dc4:	mov    DWORD PTR [rdi+0x5],edx
0xa6dc3:	mov    QWORD PTR [rdi+0x5],rdx
0xa6dd4:	mov    DWORD PTR [rdi+0x6],edx
0xa6dd3:	mov    QWORD PTR [rdi+0x6],rdx
0xa6de1:	movq   QWORD PTR [rdi-0x1],mm0
0xa6df2:	jg     0xa6dfb
0xa6df1:	movq   QWORD PTR [rdi],mm0
0xa6df0:	movdqu XMMWORD PTR [rdi],xmm0
0xa6f26:	jg     0xa6f58
0xa6f24:	movq   QWORD PTR [rdi+0x30],mm7
0xa6fd2:	clc    
0xa6fd1:	mov    eax,edi
0xa6fd0:	mov    rax,rdi
0xa6fcf:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xa7333:	lea    eax,[rdi]
0xa7332:	lea    rax,[rdi]
0xa7347:	lea    eax,[rdi+0x1]
0xa7346:	lea    rax,[rdi+0x1]
0xa735a:	lea    eax,[rdi+0x2]
0xa7359:	lea    rax,[rdi+0x2]
0xa7365:	lea    eax,[rdi+0x3]
0xa7364:	lea    rax,[rdi+0x3]
0xa7378:	lea    eax,[rdi+0x4]
0xa7377:	lea    rax,[rdi+0x4]
0xa738d:	lea    eax,[rdi+0x5]
0xa738c:	lea    rax,[rdi+0x5]
0xa73ab:	lea    eax,[rdi+0x6]
0xa73aa:	lea    rax,[rdi+0x6]
0xa73b7:	lea    eax,[rdi+0x7]
0xa73b6:	lea    rax,[rdi+0x7]
0xa73ca:	lea    eax,[rdi+0x8]
0xa73c9:	lea    rax,[rdi+0x8]
0xa73df:	lea    eax,[rdi+0x9]
0xa73de:	lea    rax,[rdi+0x9]
0xa73fd:	lea    eax,[rdi+0xa]
0xa73fc:	lea    rax,[rdi+0xa]
0xa741d:	lea    eax,[rdi+0xb]
0xa741c:	lea    rax,[rdi+0xb]
0xa743f:	lea    eax,[rdi+0xc]
0xa743e:	lea    rax,[rdi+0xc]
0xa745f:	lea    eax,[rdi+0xd]
0xa745e:	lea    rax,[rdi+0xd]
0xa747f:	lea    eax,[rdi+0xe]
0xa747e:	lea    rax,[rdi+0xe]
0xa7499:	lea    eax,[rdi+0xf]
0xa7498:	lea    rax,[rdi+0xf]
0xa74ac:	lea    eax,[rdi+0x10]
0xa74ab:	lea    rax,[rdi+0x10]
0xa74c1:	lea    eax,[rdi+0x11]
0xa74c0:	lea    rax,[rdi+0x11]
0xa74df:	lea    eax,[rdi+0x12]
0xa74de:	lea    rax,[rdi+0x12]
0xa74ff:	lea    eax,[rdi+0x13]
0xa74fe:	lea    rax,[rdi+0x13]
0xa7522:	lea    eax,[rdi+0x14]
0xa7521:	lea    rax,[rdi+0x14]
0xa7541:	lea    eax,[rdi+0x15]
0xa7540:	lea    rax,[rdi+0x15]
0xa7561:	lea    eax,[rdi+0x16]
0xa7560:	lea    rax,[rdi+0x16]
0xa7581:	lea    eax,[rdi+0x17]
0xa7580:	lea    rax,[rdi+0x17]
0xa75a4:	lea    eax,[rdi+0x18]
0xa75a3:	lea    rax,[rdi+0x18]
0xa75c9:	lea    eax,[rdi+0x19]
0xa75c8:	lea    rax,[rdi+0x19]
0xa75e7:	lea    eax,[rdi+0x1a]
0xa75e6:	lea    rax,[rdi+0x1a]
0xa7607:	lea    eax,[rdi+0x1b]
0xa7606:	lea    rax,[rdi+0x1b]
0xa7623:	lea    eax,[rdi+0x1c]
0xa7622:	lea    rax,[rdi+0x1c]
0xa7643:	lea    eax,[rdi+0x1d]
0xa7642:	lea    rax,[rdi+0x1d]
0xa7663:	lea    eax,[rdi+0x1e]
0xa7662:	lea    rax,[rdi+0x1e]
0xa7683:	lea    eax,[rdi+0x1f]
0xa7682:	lea    rax,[rdi+0x1f]
0xa7c21:	add    BYTE PTR [rax],al
0xa7c46:	add    BYTE PTR [rax],al
0xa7c69:	add    BYTE PTR [rax],al
0xa7c84:	add    BYTE PTR [rax],al
0xa7ca7:	add    BYTE PTR [rax],al
0xa7ccc:	add    BYTE PTR [rax],al
0xa7cca:	jb     0xa7cd5; 	add    BYTE PTR [rax],al
0xa7cea:	add    BYTE PTR [rax],al
0xa7d06:	add    BYTE PTR [rax],al
0xa7d04:	cmp    BYTE PTR [rcx],cl; 	add    BYTE PTR [rax],al
0xa7d29:	add    BYTE PTR [rax],al
0xa7d4e:	add    BYTE PTR [rax],al
0xa7d7c:	add    BYTE PTR [rax],al
0xa7d9c:	add    BYTE PTR [rax],al
0xa7dbe:	add    BYTE PTR [rax],al
0xa7dee:	add    BYTE PTR [rax],al
0xa7e1e:	add    BYTE PTR [rax],al
0xa7e1c:	and    BYTE PTR [rax],cl; 	add    BYTE PTR [rax],al
0xa7e48:	add    BYTE PTR [rax],al
0xa7e6b:	add    BYTE PTR [rax],al
0xa7e69:	rol    DWORD PTR [rdi],cl; 	add    BYTE PTR [rax],al
0xa7e90:	add    BYTE PTR [rax],al
0xa7ebe:	add    BYTE PTR [rax],al
0xa7eee:	add    BYTE PTR [rax],al
0xa7f21:	add    BYTE PTR [rax],al
0xa7f50:	add    BYTE PTR [rax],al
0xa7f80:	add    BYTE PTR [rax],al
0xa7fb0:	add    BYTE PTR [rax],al
0xa7fae:	mov    es,WORD PTR [rsi]; 	add    BYTE PTR [rax],al
0xa7fe3:	add    BYTE PTR [rax],al
0xa8018:	add    BYTE PTR [rax],al
0xa8046:	add    BYTE PTR [rax],al
0xa8076:	add    BYTE PTR [rax],al
0xa8074:	enter  0x5,0x0
0xa80a2:	add    BYTE PTR [rax],al
0xa80d2:	add    BYTE PTR [rax],al
0xa8102:	add    BYTE PTR [rax],al
0xa8100:	cmp    al,0x5; 	add    BYTE PTR [rax],al
0xa8132:	add    BYTE PTR [rax],al
0xa8130:	or     al,0x5; 	add    BYTE PTR [rax],al
0xa8142:	clc    
0xa8141:	mov    eax,edi
0xa8140:	mov    rax,rdi
0xa813f:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xa8155:	lea    eax,[rdi+0x1]
0xa8154:	lea    rax,[rdi+0x1]
0xa8167:	lea    eax,[rdi+0x2]
0xa8166:	lea    rax,[rdi+0x2]
0xa817d:	lea    eax,[rdi+0x3]
0xa817c:	lea    rax,[rdi+0x3]
0xa8195:	lea    eax,[rdi+0x4]
0xa8194:	lea    rax,[rdi+0x4]
0xa81ab:	lea    eax,[rdi+0x5]
0xa81aa:	lea    rax,[rdi+0x5]
0xa81bd:	lea    eax,[rdi+0x6]
0xa81bc:	lea    rax,[rdi+0x6]
0xa81db:	lea    eax,[rdi+0x7]
0xa81da:	lea    rax,[rdi+0x7]
0xa81e7:	lea    eax,[rdi+0x8]
0xa81e6:	lea    rax,[rdi+0x8]
0xa81fd:	lea    eax,[rdi+0x9]
0xa81fc:	lea    rax,[rdi+0x9]
0xa821f:	lea    eax,[rdi+0xa]
0xa821e:	lea    rax,[rdi+0xa]
0xa823d:	lea    eax,[rdi+0xb]
0xa823c:	lea    rax,[rdi+0xb]
0xa825d:	lea    eax,[rdi+0xc]
0xa825c:	lea    rax,[rdi+0xc]
0xa827f:	lea    eax,[rdi+0xd]
0xa827e:	lea    rax,[rdi+0xd]
0xa829f:	lea    eax,[rdi+0xe]
0xa829e:	lea    rax,[rdi+0xe]
0xa82bf:	lea    eax,[rdi+0xf]
0xa82be:	lea    rax,[rdi+0xf]
0xa82d9:	lea    eax,[rdi+0x10]
0xa82d8:	lea    rax,[rdi+0x10]
0xa82ef:	lea    eax,[rdi+0x11]
0xa82ee:	lea    rax,[rdi+0x11]
0xa8311:	lea    eax,[rdi+0x12]
0xa8310:	lea    rax,[rdi+0x12]
0xa832f:	lea    eax,[rdi+0x13]
0xa832e:	lea    rax,[rdi+0x13]
0xa834f:	lea    eax,[rdi+0x14]
0xa834e:	lea    rax,[rdi+0x14]
0xa8375:	lea    eax,[rdi+0x15]
0xa8374:	lea    rax,[rdi+0x15]
0xa8391:	lea    eax,[rdi+0x16]
0xa8390:	lea    rax,[rdi+0x16]
0xa83b1:	lea    eax,[rdi+0x17]
0xa83b0:	lea    rax,[rdi+0x17]
0xa83d1:	lea    eax,[rdi+0x18]
0xa83d0:	lea    rax,[rdi+0x18]
0xa83f7:	lea    eax,[rdi+0x19]
0xa83f6:	lea    rax,[rdi+0x19]
0xa8419:	lea    eax,[rdi+0x1a]
0xa8418:	lea    rax,[rdi+0x1a]
0xa8437:	lea    eax,[rdi+0x1b]
0xa8436:	lea    rax,[rdi+0x1b]
0xa8457:	lea    eax,[rdi+0x1c]
0xa8456:	lea    rax,[rdi+0x1c]
0xa8473:	lea    eax,[rdi+0x1d]
0xa8472:	lea    rax,[rdi+0x1d]
0xa8493:	lea    eax,[rdi+0x1e]
0xa8492:	lea    rax,[rdi+0x1e]
0xa84b3:	lea    eax,[rdi+0x1f]
0xa84b2:	lea    rax,[rdi+0x1f]
0xa84d3:	lea    eax,[rdi+0x20]
0xa84d2:	lea    rax,[rdi+0x20]
0xa84f5:	mov    BYTE PTR [rdi+0x20],cl
0xa84fe:	add    BYTE PTR [rax],al
0xa84fc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xa8510:	mov    BYTE PTR [rdi],dl
0xa850e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dl
0xa8521:	mov    DWORD PTR [rdi],edx
0xa8520:	mov    WORD PTR [rdi],dx
0xa8530:	mov    DWORD PTR [rdi-0x1],edx
0xa8540:	mov    DWORD PTR [rdi],edx
0xa853e:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rdi],edx
0xa8552:	mov    BYTE PTR [rdi+0x4],dl
0xa8563:	mov    DWORD PTR [rdi+0x4],edx
0xa8562:	mov    WORD PTR [rdi+0x4],dx
0xa8571:	mov    DWORD PTR [rdi-0x1],edx
0xa8570:	mov    QWORD PTR [rdi-0x1],rdx
0xa8581:	mov    DWORD PTR [rdi],edx
0xa8580:	mov    QWORD PTR [rdi],rdx
0xa8593:	mov    BYTE PTR [rdi+0x8],dl
0xa85a4:	mov    DWORD PTR [rdi+0x8],edx
0xa85a3:	mov    WORD PTR [rdi+0x8],dx
0xa85b3:	mov    DWORD PTR [rdi+0x7],edx
0xa85c3:	mov    DWORD PTR [rdi+0x8],edx
0xa85d4:	mov    DWORD PTR [rdi+0x5],edx
0xa85d3:	mov    QWORD PTR [rdi+0x5],rdx
0xa85e4:	mov    DWORD PTR [rdi+0x6],edx
0xa85e3:	mov    QWORD PTR [rdi+0x6],rdx
0xa85f1:	movq   QWORD PTR [rdi-0x1],mm0
0xa8602:	jg     0xa860b
0xa8601:	movq   QWORD PTR [rdi],mm0
0xa8600:	movdqu XMMWORD PTR [rdi],xmm0
0xa8739:	lea    eax,[rdi+0x40]
0xa8738:	lea    rax,[rdi+0x40]
0xa87e2:	clc    
0xa87e1:	mov    eax,edi
0xa87e0:	mov    rax,rdi
0xa87df:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xa8e10:	mov    BYTE PTR [rdi],dh
0xa8e0e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dh
0xa8e24:	mov    DWORD PTR [rdi],edx
0xa8e23:	mov    WORD PTR [rdi],dx
0xa8e37:	ja     0xa8e3b
0xa8e36:	mov    BYTE PTR [rdi+0x2],dh
0xa8e42:	mov    DWORD PTR [rdi],edx
0xa8e40:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xa8e55:	mov    DWORD PTR [rdi],ecx
0xa8e53:	ja     0xa8e59; 	mov    DWORD PTR [rdi],ecx
0xa8e69:	mov    DWORD PTR [rdi+0x4],edx
0xa8e68:	mov    WORD PTR [rdi+0x4],dx
0xa8e77:	mov    DWORD PTR [rdi+0x3],edx
0xa8e84:	mov    DWORD PTR [rdi],edx
0xa8e83:	mov    QWORD PTR [rdi],rdx
0xa8e97:	mov    DWORD PTR [rdi],ecx
0xa8e96:	mov    QWORD PTR [rdi],rcx
0xa8eab:	mov    DWORD PTR [rdi+0x8],edx
0xa8eaa:	mov    WORD PTR [rdi+0x8],dx
0xa8eb9:	mov    DWORD PTR [rdi+0x7],edx
0xa8ec9:	mov    DWORD PTR [rdi+0x8],edx
0xa8edb:	mov    DWORD PTR [rdi+0x5],edx
0xa8eda:	mov    QWORD PTR [rdi+0x5],rdx
0xa8eeb:	mov    DWORD PTR [rdi+0x6],edx
0xa8eea:	mov    QWORD PTR [rdi+0x6],rdx
0xa8efb:	mov    DWORD PTR [rdi+0x7],edx
0xa8efa:	mov    QWORD PTR [rdi+0x7],rdx
0xa8f06:	jg     0xa8f0f
0xa8f05:	movq   QWORD PTR [rdi],mm0
0xa8f04:	movdqu XMMWORD PTR [rdi],xmm0
0xa8f19:	ja     0xa8f2b
0xa8f18:	mov    BYTE PTR [rdi+0x10],dh
0xa8f2d:	mov    DWORD PTR [rdi+0x10],ecx
0xa8f2c:	mov    WORD PTR [rdi+0x10],cx
0xa8f4b:	mov    DWORD PTR [rdi+0xf],ecx
0xa8f5b:	mov    DWORD PTR [rdi+0x10],ecx
0xa8f6f:	ja     0xa8f85
0xa8f6e:	mov    BYTE PTR [rdi+0x14],dh
0xa8f8d:	mov    DWORD PTR [rdi+0xe],ecx
0xa8f8c:	mov    QWORD PTR [rdi+0xe],rcx
0xa8fad:	mov    DWORD PTR [rdi+0xf],ecx
0xa8fac:	mov    QWORD PTR [rdi+0xf],rcx
0xa8fcd:	mov    DWORD PTR [rdi+0x10],ecx
0xa8fcc:	mov    QWORD PTR [rdi+0x10],rcx
0xa8ff1:	ja     0xa900b
0xa8ff0:	mov    BYTE PTR [rdi+0x18],dh
0xa9015:	mov    DWORD PTR [rdi+0x18],ecx
0xa9014:	mov    WORD PTR [rdi+0x18],cx
0xa9033:	mov    DWORD PTR [rdi+0x17],ecx
0xa9053:	mov    DWORD PTR [rdi+0x18],ecx
0xa906e:	movq   QWORD PTR [rdi+0xd],mm2
0xa908e:	movq   QWORD PTR [rdi+0xe],mm2
0xa90ae:	movq   QWORD PTR [rdi+0xf],mm2
0xa90ce:	movq   QWORD PTR [rdi+0x10],mm2
0xa98e0:	mov    BYTE PTR [rdi],dh
0xa98de:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dh
0xa98f4:	mov    DWORD PTR [rdi],edx
0xa98f3:	mov    WORD PTR [rdi],dx
0xa9907:	ja     0xa990b
0xa9906:	mov    BYTE PTR [rdi+0x2],dh
0xa9912:	mov    DWORD PTR [rdi],edx
0xa9910:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xa9925:	mov    DWORD PTR [rdi],ecx
0xa9923:	ja     0xa9929; 	mov    DWORD PTR [rdi],ecx
0xa9939:	mov    DWORD PTR [rdi+0x4],edx
0xa9938:	mov    WORD PTR [rdi+0x4],dx
0xa9947:	mov    DWORD PTR [rdi+0x3],edx
0xa9954:	mov    DWORD PTR [rdi],edx
0xa9953:	mov    QWORD PTR [rdi],rdx
0xa9967:	mov    DWORD PTR [rdi],ecx
0xa9966:	mov    QWORD PTR [rdi],rcx
0xa997b:	mov    DWORD PTR [rdi+0x8],edx
0xa997a:	mov    WORD PTR [rdi+0x8],dx
0xa9989:	mov    DWORD PTR [rdi+0x7],edx
0xa9999:	mov    DWORD PTR [rdi+0x8],edx
0xa99ab:	mov    DWORD PTR [rdi+0x5],edx
0xa99aa:	mov    QWORD PTR [rdi+0x5],rdx
0xa99bb:	mov    DWORD PTR [rdi+0x6],edx
0xa99ba:	mov    QWORD PTR [rdi+0x6],rdx
0xa99cb:	mov    DWORD PTR [rdi+0x7],edx
0xa99ca:	mov    QWORD PTR [rdi+0x7],rdx
0xa99d6:	jg     0xa99df
0xa99d5:	movq   QWORD PTR [rdi],mm0
0xa99d4:	movdqu XMMWORD PTR [rdi],xmm0
0xa99e9:	ja     0xa99fb
0xa99e8:	mov    BYTE PTR [rdi+0x10],dh
0xa99fd:	mov    DWORD PTR [rdi+0x10],ecx
0xa99fc:	mov    WORD PTR [rdi+0x10],cx
0xa9a1b:	mov    DWORD PTR [rdi+0xf],ecx
0xa9a2b:	mov    DWORD PTR [rdi+0x10],ecx
0xa9a3f:	ja     0xa9a55
0xa9a3e:	mov    BYTE PTR [rdi+0x14],dh
0xa9a5d:	mov    DWORD PTR [rdi+0xe],ecx
0xa9a5c:	mov    QWORD PTR [rdi+0xe],rcx
0xa9a7d:	mov    DWORD PTR [rdi+0xf],ecx
0xa9a7c:	mov    QWORD PTR [rdi+0xf],rcx
0xa9a9d:	mov    DWORD PTR [rdi+0x10],ecx
0xa9a9c:	mov    QWORD PTR [rdi+0x10],rcx
0xa9ac1:	ja     0xa9adb
0xa9ac0:	mov    BYTE PTR [rdi+0x18],dh
0xa9ae5:	mov    DWORD PTR [rdi+0x18],ecx
0xa9ae4:	mov    WORD PTR [rdi+0x18],cx
0xa9b03:	mov    DWORD PTR [rdi+0x17],ecx
0xa9b23:	mov    DWORD PTR [rdi+0x18],ecx
0xa9b3e:	movq   QWORD PTR [rdi+0xd],mm2
0xa9b5e:	movq   QWORD PTR [rdi+0xe],mm2
0xa9b7e:	movq   QWORD PTR [rdi+0xf],mm2
0xa9b9e:	movq   QWORD PTR [rdi+0x10],mm2
0xa9bb2:	mov    BYTE PTR [rdi],ch
0xa9bb1:	in     eax,dx; 	mov    BYTE PTR [rdi],ch
0xa9bb0:	xor    ch,ch; 	mov    BYTE PTR [rdi],ch
0xa9bc6:	mov    BYTE PTR [rdi+0x1],ch
0xa9bc5:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1],ch
0xa9bd8:	mov    BYTE PTR [rdi+0x2],ch
0xa9bd7:	in     eax,dx; 	mov    BYTE PTR [rdi+0x2],ch
0xa9bee:	mov    BYTE PTR [rdi+0x3],ch
0xa9bed:	in     eax,dx; 	mov    BYTE PTR [rdi+0x3],ch
0xa9c06:	mov    BYTE PTR [rdi+0x4],ch
0xa9c05:	in     eax,dx; 	mov    BYTE PTR [rdi+0x4],ch
0xa9c1c:	mov    BYTE PTR [rdi+0x5],ch
0xa9c1b:	in     eax,dx; 	mov    BYTE PTR [rdi+0x5],ch
0xa9c2e:	mov    BYTE PTR [rdi+0x6],ch
0xa9c2d:	in     eax,dx; 	mov    BYTE PTR [rdi+0x6],ch
0xa9c4c:	mov    BYTE PTR [rdi+0x7],ch
0xa9c4b:	in     eax,dx; 	mov    BYTE PTR [rdi+0x7],ch
0xa9c58:	mov    BYTE PTR [rdi+0x8],ch
0xa9c57:	in     eax,dx; 	mov    BYTE PTR [rdi+0x8],ch
0xa9c6e:	mov    BYTE PTR [rdi+0x9],ch
0xa9c6d:	in     eax,dx; 	mov    BYTE PTR [rdi+0x9],ch
0xa9c90:	mov    BYTE PTR [rdi+0xa],ch
0xa9c8f:	in     eax,dx; 	mov    BYTE PTR [rdi+0xa],ch
0xa9cae:	mov    BYTE PTR [rdi+0xb],ch
0xa9cad:	in     eax,dx; 	mov    BYTE PTR [rdi+0xb],ch
0xa9cce:	mov    BYTE PTR [rdi+0xc],ch
0xa9ccd:	in     eax,dx; 	mov    BYTE PTR [rdi+0xc],ch
0xa9cf0:	mov    BYTE PTR [rdi+0xd],ch
0xa9cef:	in     eax,dx; 	mov    BYTE PTR [rdi+0xd],ch
0xa9d10:	mov    BYTE PTR [rdi+0xe],ch
0xa9d0f:	in     eax,dx; 	mov    BYTE PTR [rdi+0xe],ch
0xa9d30:	mov    BYTE PTR [rdi+0xf],ch
0xa9d2f:	in     eax,dx; 	mov    BYTE PTR [rdi+0xf],ch
0xa9d4a:	mov    BYTE PTR [rdi+0x10],ch
0xa9d49:	in     eax,dx; 	mov    BYTE PTR [rdi+0x10],ch
0xa9d60:	mov    BYTE PTR [rdi+0x11],ch
0xa9d5f:	in     eax,dx; 	mov    BYTE PTR [rdi+0x11],ch
0xa9d82:	mov    BYTE PTR [rdi+0x12],ch
0xa9d81:	in     eax,dx; 	mov    BYTE PTR [rdi+0x12],ch
0xa9da0:	mov    BYTE PTR [rdi+0x13],ch
0xa9d9f:	in     eax,dx; 	mov    BYTE PTR [rdi+0x13],ch
0xa9dc0:	mov    BYTE PTR [rdi+0x14],ch
0xa9dbf:	in     eax,dx; 	mov    BYTE PTR [rdi+0x14],ch
0xa9de6:	mov    BYTE PTR [rdi+0x15],ch
0xa9de5:	in     eax,dx; 	mov    BYTE PTR [rdi+0x15],ch
0xa9e02:	mov    BYTE PTR [rdi+0x16],ch
0xa9e01:	in     eax,dx; 	mov    BYTE PTR [rdi+0x16],ch
0xa9e22:	mov    BYTE PTR [rdi+0x17],ch
0xa9e21:	in     eax,dx; 	mov    BYTE PTR [rdi+0x17],ch
0xa9e42:	mov    BYTE PTR [rdi+0x18],ch
0xa9e41:	in     eax,dx; 	mov    BYTE PTR [rdi+0x18],ch
0xa9e68:	mov    BYTE PTR [rdi+0x19],ch
0xa9e67:	in     eax,dx; 	mov    BYTE PTR [rdi+0x19],ch
0xa9e8a:	mov    BYTE PTR [rdi+0x1a],ch
0xa9e89:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1a],ch
0xa9ea8:	mov    BYTE PTR [rdi+0x1b],ch
0xa9ea7:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1b],ch
0xa9ec8:	mov    BYTE PTR [rdi+0x1c],ch
0xa9ec7:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1c],ch
0xa9ee4:	mov    BYTE PTR [rdi+0x1d],ch
0xa9ee3:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1d],ch
0xa9f04:	mov    BYTE PTR [rdi+0x1e],ch
0xa9f03:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1e],ch
0xa9f24:	mov    BYTE PTR [rdi+0x1f],ch
0xa9f23:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1f],ch
0xa9f44:	mov    BYTE PTR [rdi+0x20],ch
0xa9f43:	in     eax,dx; 	mov    BYTE PTR [rdi+0x20],ch
0xa9f6a:	mov    BYTE PTR [rdi+0x21],ch
0xa9f69:	in     eax,dx; 	mov    BYTE PTR [rdi+0x21],ch
0xa9fba:	mov    BYTE PTR [rdi+0x40],ch
0xa9fb9:	in     eax,dx; 	mov    BYTE PTR [rdi+0x40],ch
0xaa05e:	add    BYTE PTR [rax],al
0xaa05d:	add    BYTE PTR [rax],r8b
0xaa0fb:	shl    DWORD PTR [rsi+0xf],0xda
0xaa162:	in     eax,dx
0xaa161:	jne    0xaa150
0xaa160:	leave  ; 	jne    0xaa150
0xaa15f:	test   cl,cl; 	jne    0xaa150
0xaa164:	xor    eax,eax
0xaa163:	ret    ; 	xor    eax,eax
0xaa162:	in     eax,dx; 	ret    ; 	xor    eax,eax
0xaa1bf:	shl    DWORD PTR [rsi+0xf],0xda
0xaa212:	in     eax,dx
0xaa211:	jne    0xaa200
0xaa210:	leave  ; 	jne    0xaa200
0xaa20f:	test   cl,cl; 	jne    0xaa200
0xaa214:	xor    eax,eax
0xaa213:	ret    ; 	xor    eax,eax
0xaa212:	in     eax,dx; 	ret    ; 	xor    eax,eax
0xaa219:	clc    
0xaa218:	mov    eax,edi
0xaa217:	mov    rax,rdi
0xaa216:	ret    ; 	mov    rax,rdi
0xaa24c:	outs   dx,DWORD PTR ds:[rsi]
0xaa384:	lea    eax,[rcx-0x1]
0xaa383:	lea    rax,[rcx-0x1]
0xaa38f:	add    BYTE PTR [rcx+0x1],cl
0xaa3d7:	outs   dx,DWORD PTR ds:[rsi]
0xaa4d4:	sub    eax,0x1
0xaa4d3:	sub    rax,0x1
0xaa500:	xor    eax,eax
0xaa4fe:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xaa58e:	adc    DWORD PTR [rsi-0x1],edx
0xaa58d:	adc    QWORD PTR [rsi-0x1],rdx
0xaa5af:	adc    DWORD PTR [rsi-0x1],edx
0xaa5ae:	adc    QWORD PTR [rsi-0x1],rdx
0xaa5c2:	adc    DWORD PTR [rsi-0x1],edx
0xaa5c1:	adc    QWORD PTR [rsi-0x1],rdx
0xaa5ec:	clc    
0xaa5eb:	rex.RX clc 
0xaa5fb:	cld    
0xaa5fa:	rex.WRX cld 
0xaa5f9:	mov    DWORD PTR [rsi-0x4],ecx
0xaa606:	mov    DWORD PTR [rsi-0x2],ecx
0xaa605:	mov    WORD PTR [rsi-0x2],cx
0xaa60f:	mov    BYTE PTR [rdi],cl
0xaa60d:	jb     0xaa611; 	mov    BYTE PTR [rdi],cl
0xaa697:	adc    DWORD PTR [rsi-0x1],edx
0xaa696:	adc    QWORD PTR [rsi-0x1],rdx
0xaa6ef:	adc    DWORD PTR [rsi+0x3],edx
0xaa6ee:	adc    QWORD PTR [rsi+0x3],rdx
0xaa78c:	adc    DWORD PTR [rsi+0x7],edx
0xaa78b:	adc    QWORD PTR [rsi+0x7],rdx
0xaa882:	pop    rbp
0xaa881:	pop    r13
0xaa880:	pop    rsp; 	pop    r13
0xaa87f:	pop    r12; 	pop    r13
0xaa905:	xchg   esp,eax
0xaa902:	add    BYTE PTR [rcx+0xf],al; 	xchg   esp,eax
0xaa9a1:	pop    rbp
0xaa9a0:	pop    r13
0xaa99f:	pop    rsp; 	pop    r13
0xaa99e:	pop    r12; 	pop    r13
0xaa9a3:	xor    eax,eax
0xaa9a2:	ret    ; 	xor    eax,eax
0xaa9a1:	pop    rbp; 	ret    ; 	xor    eax,eax
0xaa9d1:	pop    rbp
0xaa9d0:	pop    r13
0xaa9cf:	pop    rsp; 	pop    r13
0xaa9ce:	pop    r12; 	pop    r13
0xaab56:	pop    rdi
0xaab55:	pop    r15
0xaab54:	pop    rsi; 	pop    r15
0xaab53:	pop    r14; 	pop    r15
0xaab60:	xor    eax,eax
0xaab5e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xaab77:	pop    rdi
0xaab76:	pop    r15
0xaab75:	pop    rsi; 	pop    r15
0xaab74:	pop    r14; 	pop    r15
0xaabd2:	pop    rbx
0xaabd0:	xor    eax,eax; 	pop    rbx
0xaabea:	pop    rbx
0xaabe8:	mov    dh,0xc1; 	pop    rbx
0xaabe7:	movzx  eax,cl; 	pop    rbx
0xaac01:	pop    rbx
0xaabff:	inc    DWORD PTR [rbx]; 	pop    rbx
0xaabfe:	cld    ; 	inc    DWORD PTR [rbx]; 	pop    rbx
0xaac12:	pop    rbx
0xaac10:	mov    dh,0xc2; 	pop    rbx
0xaac0f:	movzx  eax,dl; 	pop    rbx
0xaac22:	pop    rbx
0xaac20:	add    eax,DWORD PTR [rax]; 	pop    rbx
0xaac1f:	cld    ; 	add    eax,DWORD PTR [rax]; 	pop    rbx
0xaac40:	add    eax,DWORD PTR [rax]
0xaac3f:	cld    ; 	add    eax,DWORD PTR [rax]
0xaac3e:	add    ah,bh; 	add    eax,DWORD PTR [rax]
0xaac9d:	pop    rbx
0xaac9b:	add    BYTE PTR [rax],al; 	pop    rbx
0xaaca4:	pop    rbx
0xaaca2:	add    BYTE PTR [rax],al; 	pop    rbx
0xaacab:	pop    rbx
0xaaca9:	add    BYTE PTR [rax],al; 	pop    rbx
0xaacb2:	pop    rbx
0xaacb0:	add    BYTE PTR [rax],al; 	pop    rbx
0xaacb9:	pop    rbx
0xaacb7:	add    BYTE PTR [rax],al; 	pop    rbx
0xaacc0:	pop    rbx
0xaacbe:	add    BYTE PTR [rax],al; 	pop    rbx
0xaacc7:	pop    rbx
0xaacc5:	add    BYTE PTR [rax],al; 	pop    rbx
0xaacdd:	mov    eax,eax
0xaacdc:	pop    rbx; 	mov    eax,eax
0xaacdb:	icebp  ; 	pop    rbx; 	mov    eax,eax
0xaace3:	pop    rbx
0xaace1:	mov    eax,edx; 	pop    rbx
0xaace0:	mov    rax,rdx; 	pop    rbx
0xaacf6:	mov    eax,eax
0xaacf5:	pop    rbx; 	mov    eax,eax
0xaacf4:	icebp  ; 	pop    rbx; 	mov    eax,eax
0xaad34:	xor    eax,eax
0xaad32:	je     0xaad40; 	xor    eax,eax
0xaad7e:	loope  0xaad73
0xaad7c:	mov    dh,BYTE PTR [rcx+riz*8-0xd]
0xaad88:	xor    eax,eax
0xaad86:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xaadc6:	fpatan 
0xaadd0:	xor    eax,eax
0xaadce:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xaaec7:	add    eax,ecx
0xaaec6:	add    rax,rcx
0xaaec5:	clc    ; 	add    rax,rcx
0xaaf91:	clc    
0xaaf90:	add    eax,edi
0xaaf8f:	add    rax,rdi
0xaaf8e:	adc    BYTE PTR [rax+0x1],cl; 	clc    
0xaafa1:	xor    eax,eax
0xaafa0:	xor    rax,rax
0xabaf4:	xor    eax,eax
0xabaf2:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xabb13:	add    BYTE PTR [rax],al
0xabb2a:	add    BYTE PTR [rax],al
0xabb28:	xor    al,0x1; 	add    BYTE PTR [rax],al
0xabb3f:	add    BYTE PTR [rax],al
0xabb5a:	add    BYTE PTR [rax],al
0xabb58:	add    al,0x1; 	add    BYTE PTR [rax],al
0xabb75:	add    BYTE PTR [rax],al
0xabb8a:	add    BYTE PTR [rax],al
0xabb9f:	add    BYTE PTR [rax],al
0xabbba:	add    BYTE PTR [rax],al
0xabbd5:	add    BYTE PTR [rax],al
0xabbd3:	mov    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xabbe6:	jne    0xabc60
0xabbfb:	jne    0xabc60
0xabbfa:	sub    BYTE PTR [rbp+0x63],dh
0xabbf9:	rex.RX sub BYTE PTR [rbp+0x63],r14b
0xabc07:	pop    rax
0xabc06:	jne    0xabc60
0xabc05:	sub    al,0x75; 	pop    rax
0xabc04:	rex.RX sub al,0x75; 	pop    rax
0xabc21:	jne    0xabc60
0xabc20:	xor    BYTE PTR [rbp+0x3d],dh
0xabc1f:	rex.RX xor BYTE PTR [rbp+0x3d],r14b
0xabc36:	jne    0xabc60
0xabc4b:	jne    0xabc60
0xabc4a:	cmp    BYTE PTR [rbp+0x13],dh
0xabc49:	rex.RX cmp BYTE PTR [rbp+0x13],r14b
0xabc56:	jne    0xabc60
0xabc67:	neg    eax
0xabc65:	jg     0xabc69; 	neg    eax
0xabc71:	xor    eax,eax
0xabc70:	xor    rax,rax
0xabc98:	add    BYTE PTR [rax],al
0xabc97:	cmc    ; 	add    BYTE PTR [rax],al
0xabc96:	xchg   esi,eax; 	cmc    ; 	add    BYTE PTR [rax],al
0xabca0:	or     al,0x0
0xabc9f:	and    DWORD PTR [rax+rax*1],ecx
0xabcc7:	add    BYTE PTR [rax-0x7d],cl
0xabcc6:	add    BYTE PTR [rax-0x7d],cl
0xabce7:	pop    rsp
0xabce6:	pop    r12
0xabce5:	pop    rbp; 	pop    r12
0xabce4:	pop    rbx; 	pop    rbp; 	pop    r12
0xabd37:	pop    rbp
0xabd36:	pop    rbx; 	pop    rbp
0xabd34:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xabf20:	je     0xabf40
0xabf1f:	pcmpeqb mm3,QWORD PTR [rsi]
0xabf1e:	loope  0xabf2f; 	je     0xabf40
0xabf38:	add    eax,0x2
0xabf37:	add    rax,0x2
0xabf41:	add    eax,0x1
0xabf40:	add    rax,0x1
0xabf51:	add    eax,0x3
0xabf50:	add    rax,0x3
0xabf61:	xor    eax,eax
0xabf60:	xor    rax,rax
0xabf75:	add    BYTE PTR [rax],al
0xabf73:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xabf85:	add    BYTE PTR [rax],al
0xabf83:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xabf95:	add    BYTE PTR [rax],al
0xabf93:	add    eax,DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0xabfa5:	add    BYTE PTR [rax],al
0xabfa3:	add    al,0x0; 	add    BYTE PTR [rax],al
0xabfb5:	add    BYTE PTR [rax],al
0xabfc5:	add    BYTE PTR [rax],al
0xabfd5:	add    BYTE PTR [rax],al
0xac052:	add    al,0x75
0xac051:	rex.B add al,0x75
0xac09d:	add    BYTE PTR [rax],al
0xac09b:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xac0af:	add    bl,dh
0xac180:	neg    eax
0xac17e:	mov    dh,0xc0; 	neg    eax
0xac21d:	pop    rbx
0xac21b:	mov    eax,ebx; 	pop    rbx
0xac21a:	mov    rax,rbx; 	pop    rbx
0xac258:	pop    rbx
0xac256:	mov    eax,ebx; 	pop    rbx
0xac255:	mov    rax,rbx; 	pop    rbx
0xac2a7:	add    BYTE PTR [rax-0x7d],cl
0xac2a6:	add    BYTE PTR [rax-0x7d],cl
0xac2c7:	pop    rbp
0xac2c6:	pop    rbx; 	pop    rbp
0xac2c5:	or     BYTE PTR [rbx+0x5d],bl
0xac3c3:	xlat   BYTE PTR ds:[rbx]
0xac3c0:	retf   0xf66; 	xlat   BYTE PTR ds:[rbx]
0xac43e:	lea    eax,[rdi-0x10]
0xac43d:	lea    rax,[rdi-0x10]
0xac4a0:	lea    eax,[rdi-0x10]
0xac49f:	lea    rax,[rdi-0x10]
0xac4bd:	lea    eax,[rdi-0x10]
0xac4bc:	lea    rax,[rdi-0x10]
0xac4e3:	lea    eax,[rdi-0x10]
0xac4e2:	lea    rax,[rdi-0x10]
0xac50d:	lea    eax,[rdi-0x10]
0xac50c:	lea    rax,[rdi-0x10]
0xac54e:	lea    eax,[rdi-0x10]
0xac54d:	lea    rax,[rdi-0x10]
0xac569:	lea    eax,[rdi-0x10]
0xac568:	lea    rax,[rdi-0x10]
0xac57b:	lea    eax,[rdi-0x10]
0xac57a:	lea    rax,[rdi-0x10]
0xac591:	lea    eax,[rdi-0x10]
0xac590:	lea    rax,[rdi-0x10]
0xac5a3:	hlt    
0xac5a2:	rex.RXB hlt 
0xac5a1:	lea    eax,[rdi-0xc]
0xac5a0:	lea    rax,[rdi-0xc]
0xac5b3:	clc    
0xac5b2:	rex.RXB clc 
0xac5b1:	lea    eax,[rdi-0x8]
0xac5b0:	lea    rax,[rdi-0x8]
0xac5c3:	cld    
0xac5c2:	rex.RXB cld 
0xac5c1:	lea    eax,[rdi-0x4]
0xac5c0:	lea    rax,[rdi-0x4]
0xac5d1:	xor    eax,eax
0xac5d0:	xor    rax,rax
0xac627:	xor    eax,eax
0xac626:	ret    ; 	xor    eax,eax
0xac625:	repz ret ; 	xor    eax,eax
0xac67b:	pop    rsp
0xac67a:	pop    r12
0xac679:	pop    rbp; 	pop    r12
0xac678:	pop    rbx; 	pop    rbp; 	pop    r12
0xac6de:	xor    eax,eax
0xac6dd:	repnz xor eax,eax
0xac6dc:	jne    0xac6d0; 	xor    eax,eax
0xac72f:	add    DWORD PTR [rcx+0x39],eax
0xac78f:	add    bl,dh
0xac78d:	add    BYTE PTR [rax],al; 	add    bl,dh
0xac825:	cmove  eax,ecx
0xac824:	cmove  rax,rcx
0xac839:	lea    eax,[rdi+0x4]
0xac838:	lea    rax,[rdi+0x4]
0xac841:	lea    eax,[rdi+0x8]
0xac840:	lea    rax,[rdi+0x8]
0xac849:	lea    eax,[rdi+0xc]
0xac848:	lea    rax,[rdi+0xc]
0xac868:	add    BYTE PTR [rax],al
0xac87c:	or     al,0x0
0xac87b:	xor    DWORD PTR [rax+rax*1],ecx
0xac87a:	repnz xor DWORD PTR [rax+rax*1],ecx
0xac884:	or     al,0x0
0xac883:	pop    rdx; 	or     al,0x0
0xac882:	stos   BYTE PTR es:[rdi],al; 	pop    rdx; 	or     al,0x0
0xac91a:	or     bl,dh
0xac9eb:	pop    rbx
0xac9ea:	cld    ; 	pop    rbx
0xac9e9:	rex.XB cld ; 	pop    rbx
0xac9e8:	lea    eax,[rbx-0x4]; 	pop    rbx
0xaca3d:	pop    rbx
0xaca3b:	mov    eax,ebx; 	pop    rbx
0xaca3a:	mov    rax,rbx; 	pop    rbx
0xaca5f:	add    BYTE PTR [rax-0x7d],cl
0xacc1f:	clc    
0xacc1e:	mov    eax,edi
0xacc1c:	ja     0xacc28; 	mov    eax,edi
0xacd0c:	pop    rsi
0xacd0b:	pop    r14
0xacd0a:	pop    rbp; 	pop    r14
0xacd09:	pop    r13; 	pop    r14
0xacd20:	pop    rsi
0xacd1f:	pop    r14
0xacd1e:	pop    rbp; 	pop    r14
0xacd1d:	pop    r13; 	pop    r14
0xacd6b:	sete   al
0xacd73:	add    BYTE PTR [rax],al
0xacd71:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xace05:	pop    rsi
0xace04:	pop    r14
0xace03:	pop    rbp; 	pop    r14
0xace02:	pop    r13; 	pop    r14
0xace16:	add    BYTE PTR [rax-0x77],cl
0xacf02:	pop    rsi
0xacf01:	pop    r14
0xacf00:	pop    rbp; 	pop    r14
0xaceff:	pop    r13; 	pop    r14
0xacf45:	pop    rsi
0xacf44:	pop    r14
0xacf43:	pop    rbp; 	pop    r14
0xacf42:	pop    r13; 	pop    r14
0xad0ed:	pop    rsp
0xad0ec:	pop    r12
0xad0eb:	pop    rbp; 	pop    r12
0xad0ea:	pop    rbx; 	pop    rbp; 	pop    r12
0xad15f:	pop    rsp
0xad15e:	pop    r12
0xad15d:	pop    rbp; 	pop    r12
0xad175:	add    BYTE PTR [rax+0x39],cl
0xad2f9:	pop    rdi
0xad2f8:	pop    r15
0xad2f7:	pop    rsi; 	pop    r15
0xad2f6:	pop    r14; 	pop    r15
0xad5eb:	pop    rdi
0xad5ea:	pop    r15
0xad5e9:	pop    rsi; 	pop    r15
0xad5e8:	pop    r14; 	pop    r15
0xad898:	pop    rdi
0xad897:	pop    r15
0xad896:	pop    rsi; 	pop    r15
0xad895:	pop    r14; 	pop    r15
0xada97:	add    bl,dh
0xada9a:	xor    eax,eax
0xada99:	ret    ; 	xor    eax,eax
0xada98:	repz ret ; 	xor    eax,eax
0xadaa0:	add    BYTE PTR [rax],al
0xada9e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xadaa6:	add    BYTE PTR [rax],al
0xadaa4:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xadc17:	add    BYTE PTR [rax-0x7d],cl
0xaddbd:	pop    rdi
0xaddbc:	pop    r15
0xaddbb:	pop    rsi; 	pop    r15
0xaddba:	pop    r14; 	pop    r15
0xade0e:	pop    rdi
0xade0d:	pop    r15
0xade0c:	pop    rsi; 	pop    r15
0xade0b:	pop    r14; 	pop    r15
0xadf92:	add    BYTE PTR [rax-0x7d],cl
0xadfd8:	dec    DWORD PTR [rax-0x7d]
0xae077:	add    BYTE PTR [rax-0x7d],cl
0xae21d:	pop    rdi
0xae21c:	pop    r15
0xae21b:	pop    rsi; 	pop    r15
0xae21a:	pop    r14; 	pop    r15
0xae26e:	pop    rdi
0xae26d:	pop    r15
0xae26c:	pop    rsi; 	pop    r15
0xae26b:	pop    r14; 	pop    r15
0xae311:	pop    rdi
0xae310:	pop    r15
0xae30f:	pop    rsi; 	pop    r15
0xae30e:	pop    r14; 	pop    r15
0xae37a:	add    BYTE PTR [rax-0x7d],cl
0xae3e7:	dec    DWORD PTR [rax-0x7d]
0xae467:	add    BYTE PTR [rax-0x7d],cl
0xae466:	lods   eax,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rax-0x7d],cl
0xae579:	pop    rdi
0xae578:	pop    r15
0xae577:	pop    rsi; 	pop    r15
0xae576:	pop    r14; 	pop    r15
0xae703:	pop    rsi
0xae702:	pop    r14
0xae701:	pop    rbp; 	pop    r14
0xae700:	pop    r13; 	pop    r14
0xae752:	pop    rsi
0xae751:	pop    r14
0xae750:	pop    rbp; 	pop    r14
0xae74f:	pop    r13; 	pop    r14
0xae787:	pop    rsi
0xae786:	pop    r14
0xae785:	pop    rbp; 	pop    r14
0xae784:	pop    r13; 	pop    r14
0xae827:	pop    rsi
0xae826:	pop    r14
0xae825:	pop    rbp; 	pop    r14
0xae824:	pop    r13; 	pop    r14
0xae899:	add    BYTE PTR [rax-0x39],cl
0xaea37:	add    BYTE PTR [rax-0x7d],cl
0xaecb3:	add    DWORD PTR [rax-0x7d],ecx
0xaef30:	pop    rdi
0xaef2f:	pop    r15
0xaef2e:	pop    rsi; 	pop    r15
0xaef2d:	pop    r14; 	pop    r15
0xaf423:	cmp    ecx,DWORD PTR [rax-0x7d]
0xaf6de:	add    BYTE PTR [rax-0x77],cl
0xaf764:	fisttp QWORD PTR [rax-0x77]
0xafa0c:	fisttp QWORD PTR [rax-0x77]
0xaffb9:	add    BYTE PTR [rcx-0x77],cl
0xb000f:	add    BYTE PTR [rax-0x77],cl
0xb009d:	add    BYTE PTR [rax-0x77],cl
0xb062b:	add    BYTE PTR [rax+0x63],cl
0xb07ba:	ret    0x2949
0xb0dc7:	add    BYTE PTR [rax-0x7d],cl
0xb0dc6:	lods   eax,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rax-0x7d],cl
0xb0ee1:	pop    rdi
0xb0ee0:	pop    r15
0xb0edf:	pop    rsi; 	pop    r15
0xb0ede:	pop    r14; 	pop    r15
0xb1071:	leave  
0xb1070:	fmulp  st(1),st
0xb106f:	pop    rsi; 	fmulp  st(1),st
0xb106e:	pop    r14; 	fmulp  st(1),st
0xb10c0:	pop    rsi
0xb10bf:	pop    r14
0xb10be:	pop    rbp; 	pop    r14
0xb10bd:	pop    r13; 	pop    r14
0xb10f2:	fmul   st,st(0)
0xb10f1:	pop    rsi; 	fmul   st,st(0)
0xb10f0:	pop    r14; 	fmul   st,st(0)
0xb118a:	fmul   st,st(0)
0xb1189:	pop    rsi; 	fmul   st,st(0)
0xb1188:	pop    r14; 	fmul   st,st(0)
0xb11f7:	fmul   DWORD PTR [rax-0x39]
0xb15d3:	add    DWORD PTR [rax-0x7d],ecx
0xb1b97:	pop    rdi
0xb1b96:	pop    r15
0xb1b95:	pop    rsi; 	pop    r15
0xb1b94:	pop    r14; 	pop    r15
0xb1d53:	cmp    ecx,DWORD PTR [rax-0x7d]
0xb22bd:	ror    BYTE PTR [rdi],0x84
0xb2c50:	add    BYTE PTR [rax-0x77],cl
0xb3557:	add    BYTE PTR [rax-0x7d],cl
0xb3556:	lods   eax,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rax-0x7d],cl
0xb3669:	pop    rdi
0xb3668:	pop    r15
0xb3667:	pop    rsi; 	pop    r15
0xb3666:	pop    r14; 	pop    r15
0xb37f0:	pop    rsi
0xb37ef:	pop    r14
0xb37ee:	pop    rbp; 	pop    r14
0xb37ed:	pop    r13; 	pop    r14
0xb383f:	pop    rsi
0xb383e:	pop    r14
0xb383d:	pop    rbp; 	pop    r14
0xb383c:	pop    r13; 	pop    r14
0xb3877:	pop    rsi
0xb3876:	pop    r14
0xb3875:	pop    rbp; 	pop    r14
0xb3874:	pop    r13; 	pop    r14
0xb3917:	pop    rsi
0xb3916:	pop    r14
0xb3915:	pop    rbp; 	pop    r14
0xb3914:	pop    r13; 	pop    r14
0xb3989:	add    BYTE PTR [rax-0x39],cl
0xb3b17:	add    BYTE PTR [rax-0x7d],cl
0xb3d93:	add    DWORD PTR [rax-0x7d],ecx
0xb4010:	pop    rdi
0xb400f:	pop    r15
0xb400e:	pop    rsi; 	pop    r15
0xb400d:	pop    r14; 	pop    r15
0xb452e:	cmp    ecx,DWORD PTR [rax-0x7d]
0xb47ea:	add    BYTE PTR [rax-0x77],cl
0xb4870:	fisttp QWORD PTR [rax-0x77]
0xb4b1f:	fisttp QWORD PTR [rax-0x77]
0xb517e:	add    BYTE PTR [rcx-0x77],cl
0xb51da:	add    BYTE PTR [rax-0x77],cl
0xb5261:	add    BYTE PTR [rax-0x77],cl
0xb527d:	add    BYTE PTR [rax-0x77],cl
0xb5ad3:	add    BYTE PTR [rax+0x63],cl
0xb5c16:	add    BYTE PTR [rcx-0x7d],al
0xb5c7e:	ret    0x2949
0xb6077:	add    al,ch
0xb6075:	add    eax,DWORD PTR [rax]; 	add    al,ch
0xb62ea:	pop    rbp
0xb62e9:	pop    rbx; 	pop    rbp
0xb62e8:	sub    BYTE PTR [rbx+0x5d],bl
0xb6398:	pop    rbp
0xb6397:	pop    rbx; 	pop    rbp
0xb6396:	sub    BYTE PTR [rbx+0x5d],bl
0xb643a:	pop    rbp
0xb6439:	pop    rbx; 	pop    rbp
0xb6438:	sub    BYTE PTR [rbx+0x5d],bl
0xb65da:	xor    eax,eax
0xb65d9:	ret    ; 	xor    eax,eax
0xb65d8:	repz ret ; 	xor    eax,eax
0xb67c7:	add    BYTE PTR [rax-0x77],cl
0xb6a9d:	pop    rdi
0xb6a9c:	pop    r15
0xb6a9b:	pop    rsi; 	pop    r15
0xb6a9a:	pop    r14; 	pop    r15
0xb6f94:	add    BYTE PTR [rax+0x39],cl
0xb6fc9:	adc    BYTE PTR [rax+0x39],cl
0xb7397:	pop    rbp
0xb7396:	pop    rdi; 	pop    rbp
0xb7395:	pop    r15; 	pop    rbp
0xb7394:	pop    rsi; 	pop    r15; 	pop    rbp
0xb7c1b:	mov    ah,0xe9
0xb7e28:	ror    BYTE PTR [rdi],0x84
0xb8550:	or     DWORD PTR [rcx-0x7d],ecx
0xb9193:	xchg   ebx,eax
0xb9191:	fimul  WORD PTR [rdi]; 	xchg   ebx,eax
0xb9269:	add    ecx,DWORD PTR [rcx-0x7d]
0xb965e:	xchg   ebx,eax
0xb965c:	fmul   DWORD PTR [rdi]; 	xchg   ebx,eax
0xb9933:	add    BYTE PTR [rcx-0x7d],cl
0xb9a88:	xchg   ebx,eax
0xb9a86:	fmul   DWORD PTR [rdi]; 	xchg   ebx,eax
0xb9b5c:	sbb    BYTE PTR [rcx-0x7d],cl
0xb9da9:	add    cl,ch
0xb9da7:	add    BYTE PTR [rax],al; 	add    cl,ch
0xb9df7:	add    BYTE PTR [rcx],bh
0xb9df5:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rcx],bh
0xb9e1b:	fsubr  QWORD PTR [rcx]
0xb9e23:	pop    rsp
0xb9e22:	pop    r12
0xb9e21:	pop    rbp; 	pop    r12
0xb9e20:	pop    rbx; 	pop    rbp; 	pop    r12
0xb9e25:	xor    eax,eax
0xb9e24:	ret    ; 	xor    eax,eax
0xb9e23:	pop    rsp; 	ret    ; 	xor    eax,eax
0xb9e6f:	or     bh,BYTE PTR [rcx]
0xb9e87:	pop    rbp
0xb9e86:	pop    r13
0xb9e85:	pop    rsp; 	pop    r13
0xb9e84:	pop    r12; 	pop    r13
0xb9e90:	xor    eax,eax
0xb9e8e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xb9ebf:	add    BYTE PTR [rcx],bh
0xb9eed:	or     BYTE PTR [rcx],ch
0xb9ef7:	pop    rbp
0xb9ef6:	pop    r13
0xb9ef5:	pop    rsp; 	pop    r13
0xb9ef4:	pop    r12; 	pop    r13
0xb9ef9:	xor    eax,eax
0xb9ef8:	ret    ; 	xor    eax,eax
0xb9ef7:	pop    rbp; 	ret    ; 	xor    eax,eax
0xb9f45:	or     bh,BYTE PTR [rcx]
0xb9f4f:	shr    BYTE PTR [rcx],1
0xb9f5b:	pop    rsi
0xb9f5a:	pop    r14
0xb9f59:	pop    rbp; 	pop    r14
0xb9f58:	pop    r13; 	pop    r14
0xb9f60:	xor    eax,eax
0xb9fb0:	pop    rbx
0xb9ff6:	pop    rbx
0xb9ff4:	xor    eax,eax; 	pop    rbx
0xba00c:	pop    rbx
0xba009:	add    esp,0x10; 	pop    rbx
0xba016:	pop    rbx
0xba014:	xor    eax,eax; 	pop    rbx
0xba052:	pop    rbp
0xba051:	pop    rdi; 	pop    rbp
0xba050:	pop    r15; 	pop    rbp
0xba04f:	pop    rsi; 	pop    r15; 	pop    rbp
0xba0b0:	pop    rbp
0xba0af:	pop    rdi; 	pop    rbp
0xba0ae:	pop    r15; 	pop    rbp
0xba0ad:	pop    rsi; 	pop    r15; 	pop    rbp
0xba32b:	pop    rbp
0xba32a:	pop    rbx; 	pop    rbp
0xba329:	or     BYTE PTR [rbx+0x5d],bl
0xba3bb:	pop    rbp
0xba3ba:	pop    r13
0xba3b9:	pop    rsp; 	pop    r13
0xba3b8:	pop    r12; 	pop    r13
0xba43b:	pop    rbp
0xba43a:	pop    r13
0xba439:	pop    rsp; 	pop    r13
0xba438:	pop    r12; 	pop    r13
0xba455:	pop    rbp
0xba454:	pop    r13
0xba453:	pop    rsp; 	pop    r13
0xba452:	pop    r12; 	pop    r13
0xba62c:	pop    rdi
0xba62b:	pop    r15
0xba62a:	pop    rsi; 	pop    r15
0xba629:	pop    r14; 	pop    r15
0xba935:	pop    rbx
0xba934:	lock pop rbx
0xba933:	mov    eax,esi; 	pop    rbx
0xbaa84:	pop    rbp
0xbaa83:	pop    rbx; 	pop    rbp
0xbaa82:	lock pop rbx; 	pop    rbp
0xbaa81:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0xbac3f:	pop    rbx
0xbac3e:	lock pop rbx
0xbac3d:	mov    eax,esi; 	pop    rbx
0xbad69:	pop    rbx
0xbad68:	lock pop rbx
0xbad67:	mov    eax,esi; 	pop    rbx
0xbae5c:	add    BYTE PTR [rax],al
0xbae5a:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0xbaedd:	pop    rbp
0xbaedc:	pop    r13
0xbaedb:	pop    rsp; 	pop    r13
0xbaeda:	pop    r12; 	pop    r13
0xbaf46:	pop    rdi
0xbaf45:	pop    r15
0xbaf44:	pop    rsi; 	pop    r15
0xbaf43:	pop    r14; 	pop    r15
0xbaf78:	pop    rdi
0xbaf77:	pop    r15
0xbaf76:	pop    rsi; 	pop    r15
0xbaf75:	pop    r14; 	pop    r15
0xbb1ea:	add    bh,bh
0xbb1e9:	add    dil,r15b
0xbb1e8:	lea    eax,[rax+rax*1-0x1]
0xbb206:	push   rbx
0xbb224:	fdiv   st,st(3)
0xbb56f:	pop    rsi
0xbb56e:	pop    r14
0xbb56d:	pop    rsp; 	pop    r14
0xbb56c:	pop    r12; 	pop    r14
0xbb647:	pop    rsi
0xbb646:	pop    r14
0xbb645:	pop    rsp; 	pop    r14
0xbb644:	pop    r12; 	pop    r14
0xbb6f7:	pop    rbp
0xbb6f6:	pop    rbx; 	pop    rbp
0xbb6f5:	or     BYTE PTR [rbx+0x5d],bl
0xbb725:	pop    rbp
0xbb724:	pop    rbx; 	pop    rbp
0xbb722:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xbb746:	xor    eax,eax
0xbb744:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xbb7e4:	add    esp,0x8
0xbb7e3:	add    rsp,0x8
0xbb811:	add    esp,0x8
0xbb810:	add    rsp,0x8
0xbb82e:	xor    eax,eax
0xbb82c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xbb88b:	add    esp,0x18
0xbb88a:	add    rsp,0x18
0xbb8cf:	pop    rbx
0xbb8ce:	rex pop rbx
0xbb8cc:	add    esp,0x40; 	pop    rbx
0xbb8fc:	and    al,0xf0
0xbb8fb:	rex.R and al,0xf0
0xbb8fa:	adc    BYTE PTR [rsp-0x10],al
0xbb9b2:	ror    BYTE PTR [rax-0x77],1
0xbbc84:	or     BYTE PTR [rax+0x29],cl
0xbbc83:	rex.RX or BYTE PTR [rax+0x29],r9b
0xbc07c:	pop    rdi
0xbc07b:	pop    r15
0xbc07a:	pop    rsi; 	pop    r15
0xbc079:	pop    r14; 	pop    r15
0xbc375:	syscall 
0xbc373:	add    BYTE PTR [rax],al; 	syscall 
0xbc406:	add    esp,0x28
0xbc405:	add    rsp,0x28
0xbc43e:	or     ebx,esi
0xbc4e6:	add    esp,0x28
0xbc4e5:	add    rsp,0x28
0xbc51d:	jae    0xbc520
0xbc51c:	push   QWORD PTR [rbx+0x1]
0xbc52d:	or     eax,0xffffffff
0xbc52c:	or     rax,0xffffffffffffffff
0xbc60e:	pop    rbx
0xbc60c:	mov    eax,edx; 	pop    rbx
0xbc671:	pop    rbx
0xbc66f:	mov    eax,edx; 	pop    rbx
0xbc6c7:	add    eax,esi
0xbc6f7:	add    BYTE PTR [rax-0x7d],cl
0xbc729:	pop    rdi
0xbc728:	pop    r15
0xbc727:	pop    rsi; 	pop    r15
0xbc726:	pop    r14; 	pop    r15
0xbc830:	pop    rdi
0xbc82f:	pop    r15
0xbc82e:	pop    rsi; 	pop    r15
0xbc82d:	pop    r14; 	pop    r15
0xbc91d:	pop    rsi
0xbc91c:	pop    r14
0xbc91b:	pop    rbp; 	pop    r14
0xbc91a:	pop    r13; 	pop    r14
0xbc9e3:	pop    rsi
0xbc9e2:	pop    r14
0xbc9e1:	pop    rbp; 	pop    r14
0xbc9e0:	pop    r13; 	pop    r14
0xbcbb7:	add    BYTE PTR [rax-0x77],cl
0xbcc2b:	pop    rsi
0xbcc2a:	pop    r14
0xbcc29:	pop    rbp; 	pop    r14
0xbcc28:	pop    r13; 	pop    r14
0xbcc71:	pop    rsi
0xbcc70:	pop    r14
0xbcc6f:	pop    rbp; 	pop    r14
0xbcc6e:	pop    r13; 	pop    r14
0xbce6a:	pop    rdi
0xbce69:	pop    r15
0xbce68:	pop    rsi; 	pop    r15
0xbce67:	pop    r14; 	pop    r15
0xbd091:	pop    rbp
0xbd090:	pop    rbx; 	pop    rbp
0xbd08f:	or     BYTE PTR [rbx+0x5d],bl
0xbd0d8:	add    BYTE PTR [rax-0x7d],cl
0xbd13d:	lahf   
0xbd176:	pop    rbp
0xbd339:	add    BYTE PTR [rax+0x1],cl
0xbd3ed:	fild   DWORD PTR [rcx+0x1]
0xbd75e:	add    BYTE PTR [rcx+0x1],cl
0xbd7ce:	pop    rdi
0xbd7cd:	pop    r15
0xbd7cc:	pop    rsi; 	pop    r15
0xbd7cb:	pop    r14; 	pop    r15
0xbd836:	add    BYTE PTR [rcx+0x1],cl
0xbd86f:	add    BYTE PTR [rcx-0x7f],cl
0xbd8d5:	add    BYTE PTR [rcx+0x1],cl
0xbd9f3:	add    BYTE PTR [rax-0x77],cl
0xbda10:	add    BYTE PTR [rax-0x7d],cl
0xbdb70:	pop    rbp
0xbdb6f:	pop    rbx; 	pop    rbp
0xbdb6e:	or     BYTE PTR [rbx+0x5d],bl
0xbddf7:	pop    rsi
0xbddf6:	pop    r14
0xbddf5:	pop    rbp; 	pop    r14
0xbddf4:	pop    r13; 	pop    r14
0xbdf35:	pop    rsi
0xbdf34:	pop    r14
0xbdf33:	pop    rbp; 	pop    r14
0xbdf32:	pop    r13; 	pop    r14
0xbdf96:	xor    eax,eax
0xbdf94:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xbe011:	pop    rdi
0xbe010:	pop    r15
0xbe00f:	pop    rsi; 	pop    r15
0xbe00e:	pop    r14; 	pop    r15
0xbe449:	cmp    BYTE PTR [rcx+0x1],cl
0xbe752:	fimul  DWORD PTR [rax-0x7d]
0xbea29:	fmul   DWORD PTR [rax-0x7d]
0xbea6f:	dec    DWORD PTR [rax+0x39]
0xbea6e:	sti    ; 	dec    DWORD PTR [rax+0x39]
0xbef15:	pop    rdi
0xbef14:	pop    r15
0xbef13:	pop    rsi; 	pop    r15
0xbef12:	pop    r14; 	pop    r15
0xbef2e:	pop    rdi
0xbef2d:	pop    r15
0xbef2c:	pop    rsi; 	pop    r15
0xbef2b:	pop    r14; 	pop    r15
0xbefe8:	add    BYTE PTR [rax-0x77],cl
0xbf04f:	add    BYTE PTR [rax-0x7d],cl
0xbf0b4:	add    BYTE PTR [rax-0x7d],cl
0xbf1bc:	pop    rdi
0xbf1bb:	pop    r15
0xbf1ba:	pop    rsi; 	pop    r15
0xbf1b9:	pop    r14; 	pop    r15
0xbf21c:	psubb  mm1,QWORD PTR [rax-0x77]
0xbf26f:	add    BYTE PTR [rax-0x7d],cl
0xbf363:	add    BYTE PTR [rax-0x77],cl
0xbf36f:	add    BYTE PTR [rax-0x7d],cl
0xbf53f:	add    BYTE PTR [rax-0x7d],cl
0xbf60d:	jae    0xbf610
0xbf60c:	push   QWORD PTR [rbx+0x1]
0xbf61d:	or     eax,0xffffffff
0xbf61c:	or     rax,0xffffffffffffffff
0xbf63d:	jae    0xbf640
0xbf63c:	push   QWORD PTR [rbx+0x1]
0xbf64d:	or     eax,0xffffffff
0xbf64c:	or     rax,0xffffffffffffffff
0xbf684:	add    esp,0x18
0xbf683:	add    rsp,0x18
0xbf6f4:	add    bl,dh
0xbf6f2:	add    DWORD PTR [rax],eax; 	add    bl,dh
0xbf788:	pop    rbx
0xbf785:	add    esp,0x20; 	pop    rbx
0xbf7f7:	pop    rbp
0xbf7f6:	pop    rdi; 	pop    rbp
0xbf7f5:	pop    r15; 	pop    rbp
0xbf7f4:	pop    rsi; 	pop    r15; 	pop    rbp
0xbf862:	pop    rbp
0xbf861:	pop    rdi; 	pop    rbp
0xbf860:	pop    r15; 	pop    rbp
0xbf85f:	pop    rsi; 	pop    r15; 	pop    rbp
0xbfe1f:	add    esp,0x8
0xbfe1e:	add    rsp,0x8
0xbfe38:	mov    eax,edx
0xbfe37:	mov    rax,rdx
0xc0018:	pop    rdi
0xc0017:	pop    r15
0xc0016:	pop    rsi; 	pop    r15
0xc0015:	pop    r14; 	pop    r15
0xc0130:	dec    DWORD PTR [rax-0x7d]
0xc0202:	ror    BYTE PTR [rax-0x46],1
0xc0201:	push   rax; 	ror    BYTE PTR [rax-0x46],1
0xc0240:	add    cl,BYTE PTR [rax-0x46]
0xc023f:	out    dx,eax; 	add    cl,BYTE PTR [rax-0x46]
0xc0287:	add    BYTE PTR [rax-0x7d],cl
0xc0286:	add    BYTE PTR [rax-0x7d],cl
0xc02a7:	add    BYTE PTR [rax-0x7d],cl
0xc031f:	add    BYTE PTR [rax-0x7d],cl
0xc0392:	dec    DWORD PTR [rax-0x7d]
0xc0613:	or     BYTE PTR [rax-0x77],cl
0xc0755:	or     BYTE PTR [rax-0x77],cl
0xc07ee:	or     BYTE PTR [rax-0x77],cl
0xc090b:	or     BYTE PTR [rax-0x77],cl
0xc09d8:	or     BYTE PTR [rax-0x77],cl
0xc0aba:	or     BYTE PTR [rax-0x77],cl
0xc0adf:	dec    DWORD PTR [rax-0x7d]
0xc0b13:	or     BYTE PTR [rax-0x77],cl
0xc0c1c:	or     BYTE PTR [rax-0x77],cl
0xc0cab:	or     BYTE PTR [rax-0x77],cl
0xc0db2:	or     BYTE PTR [rax-0x77],cl
0xc0e3c:	or     BYTE PTR [rax-0x77],cl
0xc0f03:	dec    DWORD PTR [rax-0x7d]
0xc0f54:	or     BYTE PTR [rax-0x77],cl
0xc0fe8:	dec    DWORD PTR [rax-0x7d]
0xc1372:	add    DWORD PTR [rax-0x7d],ecx
0xc149a:	or     BYTE PTR [rax-0x77],cl
0xc163f:	add    BYTE PTR [rax-0x7d],cl
0xc186f:	add    BYTE PTR [rax-0x7d],cl
0xc1901:	add    BYTE PTR [rax-0x7d],cl
0xc1911:	fimul  DWORD PTR [rax-0x7d]
0xc1aaf:	add    BYTE PTR [rax-0x7d],cl
0xc1cf1:	dec    DWORD PTR [rax-0x7d]
0xc2235:	add    BYTE PTR [rcx],ch
0xc2233:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],ch
0xc2552:	dec    DWORD PTR [rax-0x7d]
0xc2655:	jno    0xc264d
0xc2719:	add    DWORD PTR [rcx-0x7f],eax
0xc2bc9:	jno    0xc2bc1
0xc2c18:	jno    0xc2c10
0xc30f5:	add    DWORD PTR [rcx-0x7d],ecx
0xc3120:	ror    BYTE PTR [rax-0x7d],cl
0xc3195:	ror    BYTE PTR [rax-0x7d],1
0xc3194:	push   rax; 	ror    BYTE PTR [rax-0x7d],1
0xc3232:	pop    rdi
0xc3231:	pop    r15
0xc3230:	pop    rsi; 	pop    r15
0xc322f:	pop    r14; 	pop    r15
0xc343f:	fiadd  WORD PTR [rcx]
0xc343e:	rex.WB fiadd WORD PTR [r9]
0xc344c:	fmul   DWORD PTR [rax+0x39]
0xc39bf:	add    DWORD PTR [rax-0x77],ecx
0xc39be:	ret    ; 	add    DWORD PTR [rax-0x77],ecx
0xc3a16:	fmul   DWORD PTR [rax+0x39]
0xc40bb:	add    DWORD PTR [rbp+0x1],ecx
0xc4857:	fiadd  WORD PTR [rcx]
0xc4856:	rex.WB fiadd WORD PTR [r9]
0xc4864:	fmul   DWORD PTR [rax+0x39]
0xc4996:	fiadd  WORD PTR [rcx]
0xc4995:	rex.WB fiadd WORD PTR [r9]
0xc49a3:	fmul   DWORD PTR [rax+0x39]
0xc50a7:	add    esp,0x18
0xc50a6:	add    rsp,0x18
0xc52af:	pop    rbp
0xc52ae:	pop    rdi; 	pop    rbp
0xc52ad:	pop    r15; 	pop    rbp
0xc52ac:	pop    rsi; 	pop    r15; 	pop    rbp
0xc59d8:	fisttp DWORD PTR [rax+0x39]
0xc5a77:	fisttp DWORD PTR [rax+0x39]
0xc6108:	ror    BYTE PTR [rax-0x75],0x7c
0xc612f:	fadd   QWORD PTR [rcx]
0xc612e:	rex.WB fadd QWORD PTR [r9]
0xc6142:	fisttp DWORD PTR [rax+0x39]
0xc6269:	ror    BYTE PTR [rax-0x75],0x7c
0xc6290:	fadd   QWORD PTR [rcx]
0xc628f:	rex.WB fadd QWORD PTR [r9]
0xc62a3:	fisttp DWORD PTR [rax+0x39]
0xc6350:	ror    BYTE PTR [rdi],0x84
0xc642d:	ror    BYTE PTR [rax-0x75],0x7c
0xc6454:	fadd   QWORD PTR [rcx]
0xc6453:	rex.WB fadd QWORD PTR [r9]
0xc6467:	fisttp DWORD PTR [rax+0x39]
0xc6580:	inc    DWORD PTR [rdi+rcx*1+0x49]
0xc683c:	ror    BYTE PTR [rax-0x75],0x7c
0xc6863:	fadd   QWORD PTR [rcx]
0xc6862:	rex.WB fadd QWORD PTR [r9]
0xc6876:	fisttp DWORD PTR [rax+0x39]
0xc7080:	shr    DWORD PTR [rcx],1
0xc71fc:	add    BYTE PTR [rcx],ch
0xc71fa:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],ch
0xc7567:	add    esp,0x18
0xc7566:	add    rsp,0x18
0xc75be:	pop    rbx
0xc75bc:	mov    dh,0xc0; 	pop    rbx
0xc75bb:	movzx  eax,al; 	pop    rbx
0xc75c0:	xor    eax,eax
0xc75bf:	ret    ; 	xor    eax,eax
0xc75be:	pop    rbx; 	ret    ; 	xor    eax,eax
0xc763b:	pop    rsi
0xc763a:	pop    r14
0xc7639:	pop    rbp; 	pop    r14
0xc7638:	pop    r13; 	pop    r14
0xc76b9:	add    BYTE PTR [rax-0x77],cl
0xc76ee:	add    DWORD PTR [rax-0x7d],ecx
0xc788d:	pop    rbx
0xc788a:	add    esp,0x10; 	pop    rbx
0xc78b6:	pop    rbx
0xc78b3:	add    esp,0x10; 	pop    rbx
0xc7989:	pop    rbx
0xc7986:	add    esp,0x10; 	pop    rbx
0xc7a3d:	pop    rsi
0xc7a3c:	pop    r14
0xc7a3b:	pop    rbp; 	pop    r14
0xc7a3a:	pop    r13; 	pop    r14
0xc7ad4:	pop    rsi
0xc7ad3:	pop    r14
0xc7ad2:	pop    rbp; 	pop    r14
0xc7ad1:	pop    r13; 	pop    r14
0xc7b14:	pop    rsi
0xc7b13:	pop    r14
0xc7b12:	pop    rbp; 	pop    r14
0xc7b11:	pop    r13; 	pop    r14
0xc7c34:	pop    rbp
0xc7c33:	pop    r13
0xc7c32:	pop    rsp; 	pop    r13
0xc7c31:	pop    r12; 	pop    r13
0xc7c69:	pop    rbp
0xc7c68:	pop    r13
0xc7c67:	pop    rsp; 	pop    r13
0xc7c66:	pop    r12; 	pop    r13
0xc7ca0:	pop    rbp
0xc7c9f:	pop    r13
0xc7c9e:	pop    rsp; 	pop    r13
0xc7c9d:	pop    r12; 	pop    r13
0xc7e10:	pop    rdi
0xc7e0f:	pop    r15
0xc7e0e:	pop    rsi; 	pop    r15
0xc7e0d:	pop    r14; 	pop    r15
0xc7ef0:	pop    rbx
0xc7eed:	nop    DWORD PTR [rax]; 	pop    rbx
0xc7f44:	pop    rbx
0xc7f42:	add    BYTE PTR [rax],al; 	pop    rbx
0xc7fc0:	pop    rbx
0xc7fbe:	add    BYTE PTR [rax],al; 	pop    rbx
0xc7ff8:	dec    DWORD PTR [rax-0x77]
0xc808a:	pop    rbp
0xc8089:	pop    rbx; 	pop    rbp
0xc8088:	add    BYTE PTR [rbx+0x5d],bl
0xc8087:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0xc80ca:	pop    rbp
0xc80c9:	pop    rbx; 	pop    rbp
0xc80c7:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xc80de:	xor    eax,eax
0xc80dc:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xc8165:	dec    DWORD PTR [rax-0x77]
0xc81f7:	pop    rbp
0xc81f6:	pop    rbx; 	pop    rbp
0xc81f5:	add    BYTE PTR [rbx+0x5d],bl
0xc81f4:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0xc823a:	pop    rbp
0xc8239:	pop    rbx; 	pop    rbp
0xc8237:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xc824e:	xor    eax,eax
0xc824c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xc8339:	pop    rsp
0xc8338:	pop    r12
0xc8337:	pop    rbp; 	pop    r12
0xc8336:	pop    rbx; 	pop    rbp; 	pop    r12
0xc83df:	pop    rbx
0xc83dd:	ja     0xc83e8; 	pop    rbx
0xc83dc:	push   QWORD PTR [rdi+0x9]; 	pop    rbx
0xc83f9:	pop    rbx
0xc84bf:	shr    bl,cl
0xc850a:	pop    rbp
0xc8509:	pop    r13
0xc8508:	pop    rsp; 	pop    r13
0xc8507:	pop    r12; 	pop    r13
0xc869e:	pop    rdi
0xc869d:	pop    r15
0xc869c:	pop    rsi; 	pop    r15
0xc869b:	pop    r14; 	pop    r15
0xc87a1:	pop    rbx
0xc879f:	add    BYTE PTR [rax],al; 	pop    rbx
0xc8844:	pop    rbp
0xc8843:	pop    rbx; 	pop    rbp
0xc8842:	or     BYTE PTR [rbx+0x5d],bl
0xc8851:	mov    eax,DWORD PTR [rdi+0x20]
0xc8850:	mov    rax,QWORD PTR [rdi+0x20]
0xc8942:	pop    rdi
0xc8941:	pop    r15
0xc8940:	pop    rsi; 	pop    r15
0xc893f:	pop    r14; 	pop    r15
0xc8960:	mov    eax,DWORD PTR [rdi]
0xc89d1:	pop    rbp
0xc89d0:	pop    rbx; 	pop    rbp
0xc89cf:	add    BYTE PTR [rbx+0x5d],bl
0xc89ce:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0xc89f0:	pop    rbp
0xc89ef:	pop    rbx; 	pop    rbp
0xc89ed:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xc8a5b:	fmul   QWORD PTR [rax-0x7d]
0xc8bd6:	pop    rdi
0xc8bd5:	pop    r15
0xc8bd4:	pop    rsi; 	pop    r15
0xc8bd3:	pop    r14; 	pop    r15
0xc8cff:	pop    rdi
0xc8cfe:	pop    r15
0xc8cfd:	pop    rsi; 	pop    r15
0xc8cfc:	pop    r14; 	pop    r15
0xc8d60:	pop    rsi
0xc8d5f:	pop    r14
0xc8d5e:	pop    rbp; 	pop    r14
0xc8d5d:	pop    r13; 	pop    r14
0xc8efb:	pop    rdi
0xc8efa:	pop    r15
0xc8ef9:	pop    rsi; 	pop    r15
0xc8ef8:	pop    r14; 	pop    r15
0xc8f21:	pop    rdi
0xc8f20:	pop    r15
0xc8f1f:	pop    rsi; 	pop    r15
0xc8f1e:	pop    r14; 	pop    r15
0xc8fd2:	pop    rdi
0xc8fd1:	pop    r15
0xc8fd0:	pop    rsi; 	pop    r15
0xc8fcf:	pop    r14; 	pop    r15
0xc924d:	add    BYTE PTR [rax-0x77],cl
0xc9354:	pop    rdi
0xc9353:	pop    r15
0xc9352:	pop    rsi; 	pop    r15
0xc9351:	pop    r14; 	pop    r15
0xc9564:	pop    rsi
0xc9563:	pop    r14
0xc9562:	pop    rbp; 	pop    r14
0xc9561:	pop    r13; 	pop    r14
0xc962b:	pop    rsp
0xc962a:	pop    r12
0xc9629:	pop    rbp; 	pop    r12
0xc9628:	pop    rbx; 	pop    rbp; 	pop    r12
0xc9657:	ja     0xc9660
0xc9656:	push   QWORD PTR [rdi+0x7]
0xc96a7:	add    esp,0x38
0xc96a6:	add    rsp,0x38
0xc9768:	add    esp,0x8
0xc9767:	add    rsp,0x8
0xc989e:	pop    rbp
0xc989d:	pop    r13
0xc989c:	pop    rsp; 	pop    r13
0xc989b:	pop    r12; 	pop    r13
0xc9a0f:	pop    rbp
0xc9a0e:	pop    r13
0xc9a0d:	pop    rsp; 	pop    r13
0xc9a0c:	pop    r12; 	pop    r13
0xc9b93:	sbb    BYTE PTR [rax-0x7d],cl
0xc9b92:	sbb    BYTE PTR [r8-0x7d],r9b
0xc9be7:	pop    rsi
0xc9be6:	pop    r14
0xc9be5:	pop    rbp; 	pop    r14
0xc9be4:	pop    r13; 	pop    r14
0xc9c34:	pop    rsi
0xc9c33:	pop    r14
0xc9c32:	pop    rbp; 	pop    r14
0xc9c31:	pop    r13; 	pop    r14
0xc9cc3:	pop    rsi
0xc9cc2:	pop    r14
0xc9cc1:	pop    rbp; 	pop    r14
0xc9cc0:	pop    r13; 	pop    r14
0xc9dd6:	add    esp,0x18
0xc9dd5:	add    rsp,0x18
0xc9ea2:	or     bl,dh
0xc9f82:	add    esp,0x48
0xc9f81:	add    rsp,0x48
0xca0e0:	pop    rdi
0xca0df:	pop    r15
0xca0de:	pop    rsi; 	pop    r15
0xca0dd:	pop    r14; 	pop    r15
0xca141:	pop    rdi
0xca140:	pop    r15
0xca13f:	pop    rsi; 	pop    r15
0xca13e:	pop    r14; 	pop    r15
0xca1da:	pop    rdi
0xca1d9:	pop    r15
0xca1d8:	pop    rsi; 	pop    r15
0xca1d7:	pop    r14; 	pop    r15
0xca381:	pop    rdi
0xca380:	pop    r15
0xca37f:	pop    rsi; 	pop    r15
0xca37e:	pop    r14; 	pop    r15
0xca3e1:	pop    rdi
0xca3e0:	pop    r15
0xca3df:	pop    rsi; 	pop    r15
0xca3de:	pop    r14; 	pop    r15
0xca47a:	pop    rdi
0xca479:	pop    r15
0xca478:	pop    rsi; 	pop    r15
0xca477:	pop    r14; 	pop    r15
0xca52f:	add    BYTE PTR [rax-0x7d],cl
0xca5ab:	pop    rdi
0xca5aa:	pop    r15
0xca5a9:	pop    rsi; 	pop    r15
0xca5a8:	pop    r14; 	pop    r15
0xca689:	add    BYTE PTR [rax-0x7d],cl
0xca6b0:	pop    rdi
0xca6af:	pop    r15
0xca6ae:	pop    rsi; 	pop    r15
0xca6ad:	pop    r14; 	pop    r15
0xca7b2:	pop    rdi
0xca7b1:	pop    r15
0xca7b0:	pop    rsi; 	pop    r15
0xca7af:	pop    r14; 	pop    r15
0xca7b6:	shr    ecx,cl
0xca7bb:	dec    DWORD PTR [rax-0x7d]
0xca9ea:	pop    rdi
0xca9e9:	pop    r15
0xca9e8:	pop    rsi; 	pop    r15
0xca9e7:	pop    r14; 	pop    r15
0xcabfb:	pop    rdi
0xcabfa:	pop    r15
0xcabf9:	pop    rsi; 	pop    r15
0xcabf8:	pop    r14; 	pop    r15
0xcac21:	pop    rdi
0xcac20:	pop    r15
0xcac1f:	pop    rsi; 	pop    r15
0xcac1e:	pop    r14; 	pop    r15
0xcace3:	pop    rbp
0xcace2:	pop    rsp; 	pop    rbp
0xcace1:	pop    r12; 	pop    rbp
0xcace0:	pop    rbx; 	pop    r12; 	pop    rbp
0xcae0c:	pop    rbp
0xcae0b:	pop    rbx; 	pop    rbp
0xcae0a:	sbb    BYTE PTR [rbx+0x5d],bl
0xcae70:	pop    rbp
0xcae6f:	pop    rbx; 	pop    rbp
0xcae6e:	call   FWORD PTR [rbx+0x5d]
0xcaf38:	add    esp,0x8
0xcaf37:	add    rsp,0x8
0xcb06f:	pop    rbp
0xcb06e:	pop    r13
0xcb06d:	pop    rsp; 	pop    r13
0xcb06c:	pop    r12; 	pop    r13
0xcb1ee:	pop    rbp
0xcb1ed:	pop    r13
0xcb1ec:	pop    rsp; 	pop    r13
0xcb1eb:	pop    r12; 	pop    r13
0xcb2e6:	add    esp,0x18
0xcb2e5:	add    rsp,0x18
0xcb3b2:	or     bl,dh
0xcb492:	add    esp,0x48
0xcb491:	add    rsp,0x48
0xcb5f1:	pop    rdi
0xcb5f0:	pop    r15
0xcb5ef:	pop    rsi; 	pop    r15
0xcb5ee:	pop    r14; 	pop    r15
0xcb651:	pop    rdi
0xcb650:	pop    r15
0xcb64f:	pop    rsi; 	pop    r15
0xcb64e:	pop    r14; 	pop    r15
0xcb6ea:	pop    rdi
0xcb6e9:	pop    r15
0xcb6e8:	pop    rsi; 	pop    r15
0xcb6e7:	pop    r14; 	pop    r15
0xcb890:	pop    rdi
0xcb88f:	pop    r15
0xcb88e:	pop    rsi; 	pop    r15
0xcb88d:	pop    r14; 	pop    r15
0xcb8f1:	pop    rdi
0xcb8f0:	pop    r15
0xcb8ef:	pop    rsi; 	pop    r15
0xcb8ee:	pop    r14; 	pop    r15
0xcb98a:	pop    rdi
0xcb989:	pop    r15
0xcb988:	pop    rsi; 	pop    r15
0xcb987:	pop    r14; 	pop    r15
0xcba87:	pop    rbp
0xcba86:	pop    r13
0xcba85:	pop    rsp; 	pop    r13
0xcba84:	pop    r12; 	pop    r13
0xcbae5:	pop    rbp
0xcbae4:	pop    r13
0xcbae3:	pop    rsp; 	pop    r13
0xcbae2:	pop    r12; 	pop    r13
0xcbec2:	pop    rdi
0xcbec1:	pop    r15
0xcbec0:	pop    rsi; 	pop    r15
0xcbebf:	pop    r14; 	pop    r15
0xcbf3d:	jae    0xcbf40
0xcbf3c:	push   QWORD PTR [rbx+0x1]
0xcbf4d:	or     eax,0xffffffff
0xcbf4c:	or     rax,0xffffffffffffffff
0xcbf7f:	cmove  eax,edx
0xcbf7e:	cmove  rax,rdx
0xcbfe6:	ja     0xcbff0
0xcbfe5:	push   QWORD PTR [rdi+0x8]
0xcc04a:	pop    rbx
0xcc047:	add    esp,0x10; 	pop    rbx
0xcc080:	ja     0xcc088
0xcc07f:	push   QWORD PTR [rdi+0x6]
0xcc0ea:	pop    rsp
0xcc0e9:	pop    r12
0xcc0e8:	pop    rbp; 	pop    r12
0xcc0e7:	pop    rbx; 	pop    rbp; 	pop    r12
0xcc130:	jae    0xcc133
0xcc12f:	push   QWORD PTR [rbx+0x1]
0xcc140:	or     eax,0xffffffff
0xcc13f:	or     rax,0xffffffffffffffff
0xcc171:	ja     0xcc178
0xcc170:	push   QWORD PTR [rdi+0x5]
0xcc1e1:	pop    rbp
0xcc1e0:	pop    r13
0xcc1df:	pop    rsp; 	pop    r13
0xcc1de:	pop    r12; 	pop    r13
0xcc20d:	jae    0xcc210
0xcc20c:	push   QWORD PTR [rbx+0x1]
0xcc21d:	or     eax,0xffffffff
0xcc21c:	or     rax,0xffffffffffffffff
0xcc268:	pop    rbp
0xcc267:	pop    rbx; 	pop    rbp
0xcc265:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xcc278:	pop    rbp
0xcc277:	pop    rbx; 	pop    rbp
0xcc276:	sbb    BYTE PTR [rbx+0x5d],bl
0xcc296:	jae    0xcc2c9
0xcc295:	push   QWORD PTR [rbx+0x31]
0xcc2c6:	jae    0xcc2c9
0xcc2c5:	push   QWORD PTR [rbx+0x1]
0xcc2d6:	or     eax,0xffffffff
0xcc2d5:	or     rax,0xffffffffffffffff
0xcc2f6:	jae    0xcc329
0xcc2f5:	push   QWORD PTR [rbx+0x31]
0xcc326:	jae    0xcc329
0xcc325:	push   QWORD PTR [rbx+0x1]
0xcc336:	or     eax,0xffffffff
0xcc335:	or     rax,0xffffffffffffffff
0xcc523:	pop    rbp
0xcc522:	pop    rdi; 	pop    rbp
0xcc521:	pop    r15; 	pop    rbp
0xcc520:	pop    rsi; 	pop    r15; 	pop    rbp
0xcc6f7:	jae    0xcc6fa
0xcc6f6:	push   QWORD PTR [rbx+0x1]
0xcc707:	or     eax,0xffffffff
0xcc706:	or     rax,0xffffffffffffffff
0xcc77d:	jae    0xcc780
0xcc77c:	push   QWORD PTR [rbx+0x1]
0xcc78d:	or     eax,0xffffffff
0xcc78c:	or     rax,0xffffffffffffffff
0xcc83a:	pop    rsp
0xcc839:	pop    r12
0xcc838:	pop    rbp; 	pop    r12
0xcc837:	pop    rbx; 	pop    rbp; 	pop    r12
0xcc9cb:	pop    rdi
0xcc9ca:	pop    r15
0xcc9c9:	pop    rsi; 	pop    r15
0xcc9c8:	pop    r14; 	pop    r15
0xccb6b:	pop    rdi
0xccb6a:	pop    r15
0xccb69:	pop    rsi; 	pop    r15
0xccb68:	pop    r14; 	pop    r15
0xccd11:	pop    rdi
0xccd10:	pop    r15
0xccd0f:	pop    rsi; 	pop    r15
0xccd0e:	pop    r14; 	pop    r15
0xccdbf:	pop    rbp
0xccdbe:	pop    rdi; 	pop    rbp
0xccdbd:	pop    r15; 	pop    rbp
0xccdbc:	pop    rsi; 	pop    r15; 	pop    rbp
0xcd1fe:	or     ebx,esi
0xcd229:	add    BYTE PTR [rax],al
0xcd227:	rol    BYTE PTR [rdx],1; 	add    BYTE PTR [rax],al
0xcd235:	syscall 
0xcd233:	add    BYTE PTR [rax],al; 	syscall 
0xcd245:	syscall 
0xcd243:	add    BYTE PTR [rax],al; 	syscall 
0xcd255:	syscall 
0xcd253:	add    BYTE PTR [rax],al; 	syscall 
0xcd265:	syscall 
0xcd263:	add    BYTE PTR [rax],al; 	syscall 
0xcd275:	syscall 
0xcd273:	add    BYTE PTR [rax],al; 	syscall 
0xcd28d:	jae    0xcd290
0xcd28c:	push   QWORD PTR [rbx+0x1]
0xcd29d:	or     eax,0xffffffff
0xcd29c:	or     rax,0xffffffffffffffff
0xcd2c9:	ja     0xcd2d0
0xcd2c8:	push   QWORD PTR [rdi+0x5]
0xcd314:	add    esp,0x38
0xcd313:	add    rsp,0x38
0xcd339:	ja     0xcd340
0xcd338:	push   QWORD PTR [rdi+0x5]
0xcd370:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xcd384:	add    esp,0x38
0xcd383:	add    rsp,0x38
0xcd3b1:	ror    DWORD PTR [rax+0x63],cl
0xcd40e:	pop    rbp
0xcd40d:	pop    rbp; 	pop    rbp
0xcd40c:	pop    r13; 	pop    rbp
0xcd40b:	pop    rsp; 	pop    r13; 	pop    rbp
0xcd41e:	pop    rbp
0xcd41d:	pop    rbp; 	pop    rbp
0xcd41c:	pop    r13; 	pop    rbp
0xcd41b:	pop    rsp; 	pop    r13; 	pop    rbp
0xcd42d:	jae    0xcd430
0xcd42c:	push   QWORD PTR [rbx+0x1]
0xcd43d:	or     eax,0xffffffff
0xcd43c:	or     rax,0xffffffffffffffff
0xcd45d:	jae    0xcd460
0xcd45c:	push   QWORD PTR [rbx+0x1]
0xcd46d:	or     eax,0xffffffff
0xcd46c:	or     rax,0xffffffffffffffff
0xcd485:	syscall 
0xcd483:	add    BYTE PTR [rax],al; 	syscall 
0xcd4bd:	jae    0xcd4c0
0xcd4bc:	push   QWORD PTR [rbx+0x1]
0xcd4cd:	or     eax,0xffffffff
0xcd4cc:	or     rax,0xffffffffffffffff
0xcd4ed:	jae    0xcd4f0
0xcd4ec:	push   QWORD PTR [rbx+0x1]
0xcd4fd:	or     eax,0xffffffff
0xcd4fc:	or     rax,0xffffffffffffffff
0xcd51d:	jae    0xcd520
0xcd51c:	push   QWORD PTR [rbx+0x1]
0xcd52d:	or     eax,0xffffffff
0xcd52c:	or     rax,0xffffffffffffffff
0xcd54d:	jae    0xcd550
0xcd54c:	push   QWORD PTR [rbx+0x1]
0xcd55d:	or     eax,0xffffffff
0xcd55c:	or     rax,0xffffffffffffffff
0xcd58d:	ja     0xcd590
0xcd58c:	push   QWORD PTR [rdi+0x1]
0xcd5e2:	add    esp,0x38
0xcd5e1:	add    rsp,0x38
0xcd60d:	ja     0xcd610
0xcd60c:	push   QWORD PTR [rdi+0x1]
0xcd662:	add    esp,0x38
0xcd661:	add    rsp,0x38
0xcd6b8:	pop    rbp
0xcd6b7:	pop    rsi; 	pop    rbp
0xcd6b6:	pop    r14; 	pop    rbp
0xcd6b5:	pop    rbp; 	pop    r14; 	pop    rbp
0xcd95e:	add    BYTE PTR [rax],al
0xcd95c:	jg     0xcd95e; 	add    BYTE PTR [rax],al
0xcd9b0:	cmovne eax,edx
0xcd9af:	cmovne rax,rdx
0xcd9dc:	add    BYTE PTR [rax],al
0xcda02:	add    BYTE PTR [rax],al
0xcda0b:	add    BYTE PTR [rax],al
0xcda09:	jle    0xcda0b; 	add    BYTE PTR [rax],al
0xcda13:	add    BYTE PTR [rax],al
0xcda23:	add    BYTE PTR [rax],al
0xcda22:	cld    ; 	add    BYTE PTR [rax],al
0xcda9a:	and    al,0xf3
0xcdac2:	add    BYTE PTR [rax],al
0xcdac0:	and    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xcdae0:	cmovne eax,edx
0xcdadf:	cmovne rax,rdx
0xcdb08:	add    BYTE PTR [rax],al
0xcdb7e:	add    BYTE PTR [rax],al
0xcdb7c:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xcdba2:	xor    eax,eax
0xcdba0:	jne    0xcdb7b; 	xor    eax,eax
0xcdbbc:	add    bh,bh
0xcdbbb:	add    dil,r15b
0xcdbba:	lea    eax,[rax+rax*1-0x1]
0xcdbd3:	add    BYTE PTR [rax],al
0xcdbd1:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xcdbe9:	add    BYTE PTR [rax],al
0xcdbe7:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xcdc14:	add    bh,bh
0xcdc13:	add    dil,r15b
0xcdc12:	lea    eax,[rax+rax*1-0x1]
0xcdc5f:	pop    rsp
0xcdc5e:	pop    r12
0xcdc5d:	pop    rbp; 	pop    r12
0xcdc5c:	pop    rbx; 	pop    rbp; 	pop    r12
0xcdc84:	pop    rsp
0xcdc83:	pop    r12
0xcdc82:	pop    rbp; 	pop    r12
0xcdc81:	pop    rbx; 	pop    rbp; 	pop    r12
0xcdcb8:	pop    rsp
0xcdcb7:	pop    r12
0xcdcb6:	pop    rbp; 	pop    r12
0xcdcb5:	pop    rbx; 	pop    rbp; 	pop    r12
0xcdd04:	pop    rsp
0xcdd03:	pop    r12
0xcdd02:	pop    rbp; 	pop    r12
0xcdd01:	pop    rbx; 	pop    rbp; 	pop    r12
0xcdec1:	dec    DWORD PTR [rax-0x77]
0xcdec0:	sti    ; 	dec    DWORD PTR [rax-0x77]
0xcdf46:	pop    rbp
0xcdf45:	pop    rdi; 	pop    rbp
0xcdf44:	pop    r15; 	pop    rbp
0xcdf43:	pop    rsi; 	pop    r15; 	pop    rbp
0xce09c:	pop    rbp
0xce09b:	pop    rbx; 	pop    rbp
0xce09a:	cmp    BYTE PTR [rbx+0x5d],bl
0xce0ac:	pop    rbp
0xce0ab:	pop    rbx; 	pop    rbp
0xce0aa:	cmp    BYTE PTR [rbx+0x5d],bl
0xce6de:	pop    rsp
0xce6dd:	pop    r12
0xce6dc:	pop    rbp; 	pop    r12
0xce6db:	pop    rbx; 	pop    rbp; 	pop    r12
0xce6fc:	pop    rsp
0xce6fb:	pop    r12
0xce6fa:	pop    rbp; 	pop    r12
0xce6f9:	pop    rbx; 	pop    rbp; 	pop    r12
0xce724:	pop    rsp
0xce723:	pop    r12
0xce722:	pop    rbp; 	pop    r12
0xce721:	pop    rbx; 	pop    rbp; 	pop    r12
0xce774:	pop    rsp
0xce773:	pop    r12
0xce772:	pop    rbp; 	pop    r12
0xce771:	pop    rbx; 	pop    rbp; 	pop    r12
0xce9d4:	pop    rdi
0xce9d3:	pop    r15
0xce9d2:	pop    rsi; 	pop    r15
0xce9d1:	pop    r14; 	pop    r15
0xce9ef:	pop    rdi
0xce9ee:	pop    r15
0xce9ed:	pop    rsi; 	pop    r15
0xce9ec:	pop    r14; 	pop    r15
0xcea30:	xor    eax,eax
0xcea2e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xcea3b:	add    BYTE PTR [rax],al
0xcea39:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xceadf:	pop    rbp
0xceade:	pop    rdi; 	pop    rbp
0xceadd:	pop    r15; 	pop    rbp
0xceadc:	pop    rsi; 	pop    r15; 	pop    rbp
0xcec90:	dec    DWORD PTR [rax-0x77]
0xcece7:	pop    rbp
0xcece6:	pop    rdi; 	pop    rbp
0xcece5:	pop    r15; 	pop    rbp
0xcece4:	pop    rsi; 	pop    r15; 	pop    rbp
0xcedc5:	dec    DWORD PTR [rax-0x77]
0xceefa:	or     BYTE PTR [rax-0x77],cl
0xcf242:	pop    rbp
0xcf241:	pop    rdi; 	pop    rbp
0xcf240:	pop    r15; 	pop    rbp
0xcf23f:	pop    rsi; 	pop    r15; 	pop    rbp
0xcf328:	pop    rbp
0xcf327:	pop    rdi; 	pop    rbp
0xcf326:	pop    r15; 	pop    rbp
0xcf325:	pop    rsi; 	pop    r15; 	pop    rbp
0xcf390:	push   rsp
0xcf38d:	ror    BYTE PTR [rax-0x75],0x54
0xcf486:	adc    BYTE PTR [rax-0x7d],cl
0xcf485:	adc    BYTE PTR [r8-0x7d],r9b
0xcf4b0:	pop    rbp
0xcf4af:	pop    rbx; 	pop    rbp
0xcf4ae:	or     BYTE PTR [rbx+0x5d],bl
0xcf874:	pop    rbp
0xcf873:	pop    rdi; 	pop    rbp
0xcf872:	pop    r15; 	pop    rbp
0xcf871:	pop    rsi; 	pop    r15; 	pop    rbp
0xd01f1:	add    cl,BYTE PTR [rax-0x77]
0xd043c:	dec    DWORD PTR [rax-0x7d]
0xd0458:	dec    DWORD PTR [rax-0x7d]
0xd0b3d:	dec    DWORD PTR [rax-0x7d]
0xd0c8b:	dec    DWORD PTR [rax-0x7d]
0xd1601:	fcomip st,st(3)
0xd163d:	add    BYTE PTR [rax],al
0xd163b:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd164d:	add    BYTE PTR [rax],al
0xd164b:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd1687:	add    bl,dh
0xd168f:	add    bl,dh
0xd16d9:	sete   al
0xd1713:	add    BYTE PTR [rax],al
0xd1711:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd172b:	add    BYTE PTR [rax],al
0xd1729:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd1768:	xor    eax,eax
0xd17a6:	pop    rsp
0xd17a5:	pop    r12
0xd17a4:	pop    rbp; 	pop    r12
0xd17a3:	pop    rbx; 	pop    rbp; 	pop    r12
0xd17ed:	sub    cl,BYTE PTR [rax-0x7d]
0xd180a:	dec    DWORD PTR [rax-0x7d]
0xd1850:	dec    DWORD PTR [rax-0x77]
0xd18a6:	pop    rsp
0xd18a5:	pop    r12
0xd18a4:	pop    rbp; 	pop    r12
0xd18a3:	pop    rbx; 	pop    rbp; 	pop    r12
0xd18ee:	xor    DWORD PTR [rax-0x7d],ecx
0xd190b:	dec    DWORD PTR [rax-0x7d]
0xd1923:	add    ecx,DWORD PTR [rax-0x7d]
0xd1922:	rex.WXB add rcx,QWORD PTR [r8-0x7d]
0xd195b:	add    BYTE PTR [rax-0x77],cl
0xd1af0:	pop    rbp
0xd1aef:	pop    rdi; 	pop    rbp
0xd1aee:	pop    r15; 	pop    rbp
0xd1aed:	pop    rsi; 	pop    r15; 	pop    rbp
0xd20f2:	push   rdi
0xd2203:	add    BYTE PTR [rcx-0x77],al
0xd2268:	inc    DWORD PTR [rcx-0x77]
0xd2295:	pop    rbp
0xd2294:	pop    rdi; 	pop    rbp
0xd2293:	pop    r15; 	pop    rbp
0xd2292:	pop    rsi; 	pop    r15; 	pop    rbp
0xd266f:	add    BYTE PTR [rax-0x7d],cl
0xd38cd:	pop    rbp
0xd38cc:	pop    rdi; 	pop    rbp
0xd38cb:	pop    r15; 	pop    rbp
0xd38ca:	pop    rsi; 	pop    r15; 	pop    rbp
0xd41dc:	pop    rdi
0xd41db:	pop    r15
0xd41da:	pop    rsi; 	pop    r15
0xd41d9:	pop    r14; 	pop    r15
0xd51d7:	add    BYTE PTR [rcx-0x7d],cl
0xd5461:	add    DWORD PTR [rax-0x7d],ecx
0xd55bb:	pop    rbp
0xd55ba:	pop    rdi; 	pop    rbp
0xd55b9:	pop    r15; 	pop    rbp
0xd55b8:	pop    rsi; 	pop    r15; 	pop    rbp
0xd564c:	pop    rbp
0xd564b:	pop    rdi; 	pop    rbp
0xd564a:	pop    r15; 	pop    rbp
0xd5649:	pop    rsi; 	pop    r15; 	pop    rbp
0xd566a:	pop    rbp
0xd5669:	pop    rdi; 	pop    rbp
0xd5668:	pop    r15; 	pop    rbp
0xd5667:	pop    rsi; 	pop    r15; 	pop    rbp
0xd581c:	test   al,0x89
0xd581b:	push   rbp; 	test   al,0x89
0xd5908:	add    BYTE PTR [rax],al
0xd5906:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd5914:	xor    eax,eax
0xd5912:	or     BYTE PTR [rdx],al; 	xor    eax,eax
0xd5937:	add    BYTE PTR [rax],al
0xd5935:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd5947:	add    BYTE PTR [rax],al
0xd5945:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd5966:	add    BYTE PTR [rax],al
0xd5964:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd5977:	add    BYTE PTR [rax],al
0xd5975:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd599e:	add    BYTE PTR [rax],al
0xd599c:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xd59be:	add    BYTE PTR [rax],al
0xd59bc:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd59d4:	add    BYTE PTR [rax],al
0xd59d2:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xd59e7:	add    BYTE PTR [rax],al
0xd59e5:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xd5b89:	pop    rdi
0xd5b88:	pop    r15
0xd5b87:	pop    rsi; 	pop    r15
0xd5b86:	pop    r14; 	pop    r15
0xd5c28:	pop    rsp
0xd5c27:	pop    r12
0xd5c26:	pop    rbp; 	pop    r12
0xd5c25:	pop    rbx; 	pop    rbp; 	pop    r12
0xd5c42:	pop    rsp
0xd5c41:	pop    r12
0xd5c40:	pop    rbp; 	pop    r12
0xd5c3f:	pop    rbx; 	pop    rbp; 	pop    r12
0xd5c72:	pop    rsp
0xd5c71:	pop    r12
0xd5c70:	pop    rbp; 	pop    r12
0xd5c6f:	pop    rbx; 	pop    rbp; 	pop    r12
0xd5d23:	sbb    ebp,ecx
0xd5d32:	add    DWORD PTR [rax-0x7d],ecx
0xd5d31:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xd5ddf:	add    DWORD PTR [rax-0x7d],ecx
0xd5dde:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xd5dfb:	pop    rdi
0xd5dfa:	pop    r15
0xd5df9:	pop    rsi; 	pop    r15
0xd5df8:	pop    r14; 	pop    r15
0xd5e30:	pop    rdi
0xd5e2f:	pop    r15
0xd5e2e:	pop    rsi; 	pop    r15
0xd5e2d:	pop    r14; 	pop    r15
0xd5f9f:	pop    rdi
0xd5f9e:	pop    r15
0xd5f9d:	pop    rsi; 	pop    r15
0xd5f9c:	pop    r14; 	pop    r15
0xd64e9:	mov    cl,BYTE PTR [rax+0x39]
0xd6568:	loopne 0xd656b
0xd65b7:	pop    rdi
0xd65b6:	pop    r15
0xd65b5:	pop    rsi; 	pop    r15
0xd65b4:	pop    r14; 	pop    r15
0xd6bce:	mov    DWORD PTR [rdi+0x30],eax
0xd6bcd:	mov    DWORD PTR [rdi+0x30],r8d
0xd6c41:	cmove  eax,esi
0xd6c60:	xor    eax,eax
0xd6c5e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xd6ce8:	pop    rbx
0xd6ce5:	add    esp,0x20; 	pop    rbx
0xd6d6a:	add    DWORD PTR [rax-0x7d],ecx
0xd6da2:	add    DWORD PTR [rax-0x7d],ecx
0xd6def:	pop    rdi
0xd6dee:	pop    r15
0xd6ded:	pop    rsi; 	pop    r15
0xd6dec:	pop    r14; 	pop    r15
0xd6ef1:	or     BYTE PTR [rcx],ch
0xd6eef:	je     0xd6f15; 	or     BYTE PTR [rcx],ch
0xd6f92:	pop    rsp
0xd6f91:	pop    r12
0xd6f90:	pop    rbp; 	pop    r12
0xd6f8f:	rcr    BYTE PTR [rbp+0x41],0x5c
0xd6fd5:	pop    rsp
0xd6fd4:	pop    r12
0xd6fd3:	pop    rbp; 	pop    r12
0xd6fd2:	rcr    BYTE PTR [rbp+0x41],0x5c
0xd714b:	pop    rbp
0xd714a:	pop    r13
0xd7149:	pop    rsp; 	pop    r13
0xd7148:	pop    r12; 	pop    r13
0xd71eb:	add    eax,0x8
0xd7235:	loopne 0xd7239
0xd7234:	and    eax,0x2
0xd7240:	mov    eax,DWORD PTR [rdi+0x4c]
0xd729d:	add    bh,dh
0xd729b:	add    BYTE PTR [rax],al; 	add    bh,dh
0xd72bb:	add    esi,esi
0xd72b9:	loope  0xd72ba; 	add    esi,esi
0xd72eb:	pop    rbx
0xd72e9:	loopne 0xd72ec; 	pop    rbx
0xd72e8:	and    eax,0x1; 	pop    rbx
0xd72f2:	pop    rbx
0xd72f0:	xor    eax,eax; 	pop    rbx
0xd7302:	pop    rbx
0xd7301:	xchg   esp,eax; 	pop    rbx
0xd7300:	je     0xd7296; 	pop    rbx
0xd7323:	pop    rbx
0xd7334:	pop    rbx
0xd7333:	xchg   esi,eax; 	pop    rbx
0xd7332:	je     0xd72ca; 	pop    rbx
0xd7331:	or     BYTE PTR [rsi+rdx*4+0x5b],dh
0xd7353:	pop    rbx
0xd7442:	pop    rdi
0xd7441:	pop    r15
0xd7440:	pop    rsi; 	pop    r15
0xd743f:	pop    r14; 	pop    r15
0xd745e:	pop    rdi
0xd745d:	pop    r15
0xd745c:	pop    rsi; 	pop    r15
0xd745b:	pop    r14; 	pop    r15
0xd7cb5:	pop    rsp
0xd7cb4:	pop    r12
0xd7cb3:	pop    rbp; 	pop    r12
0xd7cb2:	pop    rbx; 	pop    rbp; 	pop    r12
0xd7fd9:	pop    rsi
0xd7fd8:	pop    r14
0xd7fd7:	pop    rbp; 	pop    r14
0xd7fd6:	pop    r13; 	pop    r14
0xd87c1:	add    DWORD PTR [rax-0x7d],ecx
0xd87c0:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xd890b:	add    DWORD PTR [rax-0x7d],ecx
0xd890a:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xd8925:	pop    rbp
0xd8924:	pop    rdi; 	pop    rbp
0xd8923:	pop    r15; 	pop    rbp
0xd8922:	pop    rsi; 	pop    r15; 	pop    rbp
0xd8c53:	pop    rbp
0xd8c52:	pop    rdi; 	pop    rbp
0xd8c51:	pop    r15; 	pop    rbp
0xd8c50:	pop    rsi; 	pop    r15; 	pop    rbp
0xd8ccc:	pop    rbp
0xd8ccb:	pop    rdi; 	pop    rbp
0xd8cca:	pop    r15; 	pop    rbp
0xd8cc9:	pop    rsi; 	pop    r15; 	pop    rbp
0xd8df0:	pop    rdi
0xd8def:	pop    r15
0xd8dee:	pop    rsi; 	pop    r15
0xd8ded:	pop    r14; 	pop    r15
0xd8e43:	add    BYTE PTR [rax],al
0xd8e41:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xd8e50:	xor    eax,eax
0xd8e4e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xd91a0:	add    BYTE PTR [rax],al
0xd91d3:	in     eax,0x89
0xd932c:	adc    BYTE PTR [rax-0x77],cl
0xd95b6:	add    BYTE PTR [rax],al
0xd95bc:	add    BYTE PTR [rax],al
0xd95ba:	add    al,0x0; 	add    BYTE PTR [rax],al
0xd95c2:	add    BYTE PTR [rax],al
0xd95c0:	add    eax,DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0xd983d:	pop    rsi
0xd983c:	pop    r14
0xd983b:	pop    rbp; 	pop    r14
0xd983a:	pop    r13; 	pop    r14
0xd98bc:	pop    rsi
0xd98bb:	pop    r14
0xd98ba:	pop    rbp; 	pop    r14
0xd98b9:	pop    r13; 	pop    r14
0xd99fd:	add    DWORD PTR [rax-0x7d],ecx
0xd9b54:	xor    eax,eax
0xd9b52:	or     BYTE PTR [rdx],al; 	xor    eax,eax
0xd9c3e:	pop    rdi
0xd9c3d:	pop    r15
0xd9c3c:	pop    rsi; 	pop    r15
0xd9c3b:	pop    r14; 	pop    r15
0xda1cd:	pop    rbx
0xda1ca:	add    esp,0x10; 	pop    rbx
0xda21f:	add    BYTE PTR [rax-0x77],cl
0xda29b:	adc    BYTE PTR [rax+0x39],cl
0xda29a:	rex.X adc BYTE PTR [rax+0x39],cl
0xda2d7:	pop    rbp
0xda2d6:	pop    rbx; 	pop    rbp
0xda2d4:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xda3c1:	pop    rsi
0xda3c0:	pop    r14
0xda3bf:	pop    rbp; 	pop    r14
0xda3be:	pop    r13; 	pop    r14
0xda3f4:	pop    rsi
0xda3f3:	pop    r14
0xda3f2:	pop    rbp; 	pop    r14
0xda3f1:	pop    r13; 	pop    r14
0xda5c2:	pop    rdi
0xda5c1:	pop    r15
0xda5c0:	pop    rsi; 	pop    r15
0xda5bf:	pop    r14; 	pop    r15
0xda881:	pop    rdi
0xda880:	pop    r15
0xda87f:	pop    rsi; 	pop    r15
0xda87e:	pop    r14; 	pop    r15
0xdaa23:	pop    rdi
0xdaa22:	pop    r15
0xdaa21:	pop    rsi; 	pop    r15
0xdaa20:	pop    r14; 	pop    r15
0xdaae8:	pop    rdi
0xdaae7:	pop    r15
0xdaae6:	pop    rsi; 	pop    r15
0xdaae5:	pop    r14; 	pop    r15
0xdab7f:	add    BYTE PTR [rax-0x7d],cl
0xdabaf:	cmp    cl,BYTE PTR [rax-0x7d]
0xdac1c:	add    DWORD PTR [rax-0x7d],ecx
0xdaeac:	pop    rdi
0xdaeab:	pop    r15
0xdaeaa:	pop    rsi; 	pop    r15
0xdaea9:	pop    r14; 	pop    r15
0xdaeee:	pop    rdi
0xdaeed:	pop    r15
0xdaeec:	pop    rsi; 	pop    r15
0xdaeeb:	pop    r14; 	pop    r15
0xdaf3b:	pop    rdi
0xdaf3a:	pop    r15
0xdaf39:	pop    rsi; 	pop    r15
0xdaf38:	pop    r14; 	pop    r15
0xdaf65:	pop    rbx
0xdaf63:	xor    eax,eax; 	pop    rbx
0xdaf7b:	pop    rbx
0xdaf79:	xor    eax,eax; 	pop    rbx
0xdb0fb:	pop    rdi
0xdb0fa:	pop    r15
0xdb0f9:	pop    rsi; 	pop    r15
0xdb0f8:	pop    r14; 	pop    r15
0xdb238:	add    DWORD PTR [rax-0x7d],ecx
0xdb237:	push   rbx; 	add    DWORD PTR [rax-0x7d],ecx
0xdb71f:	add    BYTE PTR [rax-0x7d],cl
0xdb87f:	add    BYTE PTR [rax-0x7d],cl
0xdbbba:	pop    rdi
0xdbbb9:	pop    r15
0xdbbb8:	pop    rsi; 	pop    r15
0xdbbb7:	pop    r14; 	pop    r15
0xdbe7a:	add    DWORD PTR [rax-0x7d],ecx
0xdbe79:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xdbf69:	pop    rdi
0xdbf68:	pop    r15
0xdbf67:	pop    rsi; 	pop    r15
0xdbf66:	pop    r14; 	pop    r15
0xdc0cb:	pop    rdi
0xdc0ca:	pop    r15
0xdc0c9:	pop    rsi; 	pop    r15
0xdc0c8:	pop    r14; 	pop    r15
0xdc0ed:	add    BYTE PTR [rax],al
0xdc0eb:	or     al,0x0; 	add    BYTE PTR [rax],al
0xdc128:	pop    rsp
0xdc127:	pop    r12
0xdc126:	pop    rbp; 	pop    r12
0xdc125:	pop    rbx; 	pop    rbp; 	pop    r12
0xdc371:	add    ecx,DWORD PTR [rcx-0x7d]
0xdc46e:	pop    rdi
0xdc46d:	pop    r15
0xdc46c:	pop    rsi; 	pop    r15
0xdc46b:	pop    r14; 	pop    r15
0xdc5ce:	add    dh,dh
0xdc5cc:	add    DWORD PTR [rax],eax; 	add    dh,dh
0xdc5df:	and    dh,dh
0xdc5dd:	div    BYTE PTR [rax+riz*1-0xa]
0xdc5e4:	sbb    esi,esi
0xdc612:	add    BYTE PTR [rcx-0x7d],al
0xdc694:	pop    rdi
0xdc693:	pop    r15
0xdc692:	pop    rsi; 	pop    r15
0xdc691:	pop    r14; 	pop    r15
0xdc792:	pop    rdi
0xdc791:	pop    r15
0xdc790:	pop    rsi; 	pop    r15
0xdc78f:	pop    r14; 	pop    r15
0xdc900:	pop    rdi
0xdc8ff:	pop    r15
0xdc8fe:	pop    rsi; 	pop    r15
0xdc8fd:	pop    r14; 	pop    r15
0xdc9ff:	fmul   DWORD PTR [rax-0x7d]
0xdcd9b:	sbb    BYTE PTR [rax-0x7d],cl
0xdcda2:	cmp    ecx,DWORD PTR [rax-0x7d]
0xdcdca:	pop    rbp
0xdcdc9:	pop    rdi; 	pop    rbp
0xdcdc8:	pop    r15; 	pop    rbp
0xdcdc7:	pop    rsi; 	pop    r15; 	pop    rbp
0xdcf58:	add    BYTE PTR [rax-0x77],cl
0xdd00f:	pop    rbp
0xdd00e:	pop    rdi; 	pop    rbp
0xdd00d:	pop    r15; 	pop    rbp
0xdd00c:	pop    rsi; 	pop    r15; 	pop    rbp
0xdd083:	dec    DWORD PTR [rax+0x1]
0xdd3b7:	xor    BYTE PTR [rax-0x77],cl
0xdd5fd:	cmp    ecx,DWORD PTR [rax-0x7d]
0xdd6b2:	cmp    ecx,DWORD PTR [rax-0x7d]
0xdd9f7:	add    ecx,DWORD PTR [rcx-0x7d]
0xddacc:	pop    rdi
0xddacb:	pop    r15
0xddaca:	pop    rsi; 	pop    r15
0xddac9:	pop    r14; 	pop    r15
0xddc5d:	pop    rdi
0xddc5c:	pop    r15
0xddc5b:	pop    rsi; 	pop    r15
0xddc5a:	pop    r14; 	pop    r15
0xddcef:	pop    rdi
0xddcee:	pop    r15
0xddced:	pop    rsi; 	pop    r15
0xddcec:	pop    r14; 	pop    r15
0xddd6c:	pop    rdi
0xddd6b:	pop    r15
0xddd6a:	pop    rsi; 	pop    r15
0xddd69:	pop    r14; 	pop    r15
0xddec6:	pop    rdi
0xddec5:	pop    r15
0xddec4:	pop    rsi; 	pop    r15
0xddec3:	pop    r14; 	pop    r15
0xde37e:	pop    rsi
0xde37d:	pop    r14
0xde37c:	pop    rbp; 	pop    r14
0xde37b:	pop    r13; 	pop    r14
0xde40a:	pop    rsi
0xde409:	pop    r14
0xde408:	pop    rbp; 	pop    r14
0xde407:	pop    r13; 	pop    r14
0xde45d:	pop    rsi
0xde45c:	pop    r14
0xde45b:	pop    rbp; 	pop    r14
0xde45a:	pop    r13; 	pop    r14
0xde677:	pop    rdi
0xde676:	pop    r15
0xde675:	pop    rsi; 	pop    r15
0xde674:	pop    r14; 	pop    r15
0xde6ff:	add    cl,BYTE PTR [rax-0x77]
0xde793:	fmul   DWORD PTR [rax-0x7d]
0xdea22:	add    DWORD PTR [rax-0x7d],ecx
0xdea21:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xdea75:	add    DWORD PTR [rax-0x7d],ecx
0xdea74:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xdeb6a:	adc    BYTE PTR [rax-0x77],cl
0xdf074:	inc    DWORD PTR [rcx]
0xdf11e:	add    BYTE PTR [rax+0x63],cl
0xdf25a:	add    DWORD PTR [rax-0x7d],ecx
0xdf259:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xdf3e0:	pop    rdi
0xdf3df:	pop    r15
0xdf3de:	pop    rsi; 	pop    r15
0xdf3dd:	pop    r14; 	pop    r15
0xdf432:	pop    rdi
0xdf431:	pop    r15
0xdf430:	pop    rsi; 	pop    r15
0xdf42f:	pop    r14; 	pop    r15
0xdf690:	pop    rdi
0xdf68f:	pop    r15
0xdf68e:	pop    rsi; 	pop    r15
0xdf68d:	pop    r14; 	pop    r15
0xdf6af:	pop    rdi
0xdf6ae:	pop    r15
0xdf6ad:	pop    rsi; 	pop    r15
0xdf6ac:	pop    r14; 	pop    r15
0xdf7ce:	add    BYTE PTR [rax-0x77],cl
0xdf850:	ror    BYTE PTR [rax+0x9],0x14
0xdfa0b:	pop    rdi
0xdfa0a:	pop    r15
0xdfa09:	pop    rsi; 	pop    r15
0xdfa08:	pop    r14; 	pop    r15
0xdfa85:	pop    rdi
0xdfa84:	pop    r15
0xdfa83:	pop    rsi; 	pop    r15
0xdfa82:	pop    r14; 	pop    r15
0xdfae6:	pop    rdi
0xdfae5:	pop    r15
0xdfae4:	pop    rsi; 	pop    r15
0xdfae3:	pop    r14; 	pop    r15
0xe025a:	pop    rdi
0xe0259:	pop    r15
0xe0258:	pop    rsi; 	pop    r15
0xe0257:	pop    r14; 	pop    r15
0xe03e7:	cmp    cl,ch
0xe03e6:	push   rbx; 	cmp    cl,ch
0xe05e2:	pop    rdi
0xe05e1:	pop    r15
0xe05e0:	pop    rsi; 	pop    r15
0xe05df:	pop    r14; 	pop    r15
0xe1d6d:	pop    rdi
0xe1d6c:	pop    r15
0xe1d6b:	pop    rsi; 	pop    r15
0xe1d6a:	pop    r14; 	pop    r15
0xe22f8:	xchg   esp,eax
0xe22f6:	add    BYTE PTR [rdi],cl; 	xchg   esp,eax
0xe300a:	dec    DWORD PTR [rax-0x77]
0xe34fe:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
0xe34fc:	imul   eax; 	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
0xe3ea0:	add    DWORD PTR [rcx+0x63],ecx
0xe4133:	pop    rdi
0xe4132:	pop    r15
0xe4131:	pop    rsi; 	pop    r15
0xe4130:	pop    r14; 	pop    r15
0xe41fd:	pop    rdi
0xe41fc:	pop    r15
0xe41fb:	pop    rsi; 	pop    r15
0xe41fa:	pop    r14; 	pop    r15
0xe421c:	pop    rdi
0xe421b:	pop    r15
0xe421a:	pop    rsi; 	pop    r15
0xe4219:	pop    r14; 	pop    r15
0xe44a4:	adc    BYTE PTR [rax+0x29],cl
0xe46ae:	add    DWORD PTR [rax-0x7d],ecx
0xe46ad:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xe4828:	pop    rdi
0xe4827:	pop    r15
0xe4826:	pop    rsi; 	pop    r15
0xe4825:	pop    r14; 	pop    r15
0xe4c07:	add    BYTE PTR [rcx+0x1],al
0xe4ea6:	pop    rdi
0xe4ea5:	pop    r15
0xe4ea4:	pop    rsi; 	pop    r15
0xe4ea3:	pop    r14; 	pop    r15
0xe4f7f:	pop    rdi
0xe4f7e:	pop    r15
0xe4f7d:	pop    rsi; 	pop    r15
0xe4f7c:	pop    r14; 	pop    r15
0xe513f:	or     bh,dh
0xe513e:	pop    rax; 	or     bh,dh
0xe5161:	add    esi,esi
0xe515f:	loop   0xe5160; 	add    esi,esi
0xe5553:	or     BYTE PTR [rcx],ch
0xe56f0:	xor    ch,BYTE PTR [rcx]
0xe57bf:	pop    rdi
0xe57be:	pop    r15
0xe57bd:	pop    rsi; 	pop    r15
0xe57bc:	pop    r14; 	pop    r15
0xe5a61:	dec    DWORD PTR [rcx-0x77]
0xe5b30:	pop    rdi
0xe5b2f:	pop    r15
0xe5b2e:	pop    rsi; 	pop    r15
0xe5b2d:	pop    r14; 	pop    r15
0xe5bbf:	dec    DWORD PTR [rax-0x77]
0xe5cbb:	add    BYTE PTR [rax-0x77],cl
0xe5ea0:	dec    DWORD PTR [rax+0x39]
0xe5f25:	pop    rdi
0xe5f24:	pop    r15
0xe5f23:	pop    rsi; 	pop    r15
0xe5f22:	pop    r14; 	pop    r15
0xe760b:	push   rsp
0xe7617:	push   rsp
0xe7615:	or     al,0x89; 	push   rsp
0xe7614:	ror    DWORD PTR [rcx+rcx*4],cl; 	push   rsp
0xe7ae3:	add    esp,0x8
0xe7ae2:	add    rsp,0x8
0xe7afb:	mov    DWORD PTR [rdx],edi
0xe7afa:	mov    QWORD PTR [rdx],rdi
0xe7bc1:	pop    rsp
0xe7bc0:	pop    r12
0xe7bbf:	pop    rbp; 	pop    r12
0xe7bbe:	pop    rbx; 	pop    rbp; 	pop    r12
0xe7e26:	sar    DWORD PTR [rcx],1
0xe7e24:	enter  0xd177,0x39
0xe7e53:	add    BYTE PTR [rcx],bh
0xe7e52:	std    ; 	add    BYTE PTR [rcx],bh
0xe7e51:	rex.R std ; 	add    BYTE PTR [rcx],bh
0xe7f5a:	pop    rdi
0xe7f59:	pop    r15
0xe7f58:	pop    rsi; 	pop    r15
0xe7f57:	pop    r14; 	pop    r15
0xe812b:	add    DWORD PTR [rcx],edi
0xe812a:	rol    BYTE PTR [rcx],0x39
0xe822a:	add    BYTE PTR [rdi+riz*2-0xa],dh
0xe829d:	pop    rsi
0xe829c:	pop    r14
0xe829b:	pop    rbp; 	pop    r14
0xe829a:	pop    r13; 	pop    r14
0xe82db:	pop    rsi
0xe82da:	pop    r14
0xe82d9:	pop    rbp; 	pop    r14
0xe82d8:	pop    r13; 	pop    r14
0xe8352:	pop    rbp
0xe8351:	pop    r13
0xe8350:	pop    rsp; 	pop    r13
0xe834f:	pop    r12; 	pop    r13
0xe8377:	pop    rbp
0xe8376:	pop    r13
0xe8375:	pop    rsp; 	pop    r13
0xe8374:	pop    r12; 	pop    r13
0xe83c2:	pop    rbx
0xe83c0:	add    BYTE PTR [rax],al; 	pop    rbx
0xe8485:	pop    rsp
0xe8484:	pop    r12
0xe8483:	pop    rbp; 	pop    r12
0xe8482:	rcr    BYTE PTR [rbp+0x41],0x5c
0xe849a:	xor    eax,eax
0xe8499:	ss xor eax,eax
0xe8498:	je     0xe84d0; 	xor    eax,eax
0xe84fc:	add    BYTE PTR [rax],al
0xe84fa:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xe85f3:	pop    rdi
0xe85f2:	pop    r15
0xe85f1:	pop    rsi; 	pop    r15
0xe85f0:	pop    r14; 	pop    r15
0xe8634:	add    esp,0x18
0xe8633:	add    rsp,0x18
0xe8651:	add    esp,0x18
0xe8650:	add    rsp,0x18
0xe8686:	ror    BYTE PTR [rdi],0x85
0xe8732:	pop    rdi
0xe8731:	pop    r15
0xe8730:	pop    rsi; 	pop    r15
0xe872f:	pop    r14; 	pop    r15
0xe87e7:	jmp    0xe87d1
0xe8838:	pop    rdi
0xe8837:	pop    r15
0xe8836:	pop    rsi; 	pop    r15
0xe8835:	pop    r14; 	pop    r15
0xe888c:	add    BYTE PTR [rax],al
0xe888a:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xe88a4:	mov    DWORD PTR [rsi+0x10],eax
0xe88a3:	mov    QWORD PTR [rsi+0x10],r8
0xe88d4:	mov    dh,0xc0
0xe88d3:	movzx  eax,al
0xe88d2:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0xe8a79:	pop    rbp
0xe8a78:	pop    r13
0xe8a77:	pop    rsp; 	pop    r13
0xe8a76:	pop    r12; 	pop    r13
0xe8c0e:	xor    esi,esi
0xe90b5:	popf   
0xe90b3:	fimul  DWORD PTR [rdi]; 	popf   
0xe9195:	pop    rdi
0xe9194:	pop    r15
0xe9193:	pop    rsi; 	pop    r15
0xe9192:	pop    r14; 	pop    r15
0xe91b3:	sahf   
0xe9210:	jmp    0xe9195
0xe94d3:	pop    rbp
0xe94d2:	pop    rdi; 	pop    rbp
0xe94d1:	pop    r15; 	pop    rbp
0xe94d0:	pop    rsi; 	pop    r15; 	pop    rbp
0xe9574:	pop    rbp
0xe9573:	pop    rdi; 	pop    rbp
0xe9572:	pop    r15; 	pop    rbp
0xe9571:	pop    rsi; 	pop    r15; 	pop    rbp
0xe95a4:	pop    rbp
0xe95a3:	pop    rdi; 	pop    rbp
0xe95a2:	pop    r15; 	pop    rbp
0xe95a1:	pop    rsi; 	pop    r15; 	pop    rbp
0xe961f:	lods   eax,DWORD PTR ds:[rsi]
0xe971b:	cmp    BYTE PTR [rax-0x77],cl
0xe98b9:	pop    rbp
0xe98b8:	pop    rdi; 	pop    rbp
0xe98b7:	pop    r15; 	pop    rbp
0xe98b6:	pop    rsi; 	pop    r15; 	pop    rbp
0xe9b50:	add    BYTE PTR [rax-0x7d],cl
0xea086:	add    BYTE PTR [rax-0x7d],cl
0xea69b:	pop    rbx
0xea69a:	pop    rcx; 	pop    rbx
0xea699:	pop    rdx; 	pop    rcx; 	pop    rbx
0xea698:	or     bl,BYTE PTR [rdx+0x59]; 	pop    rbx
0xea6b4:	add    esp,0x18
0xea6b3:	add    rsp,0x18
0xea6d4:	add    esp,0x18
0xea6d3:	add    rsp,0x18
0xea6ef:	add    esp,0x18
0xea6ee:	add    rsp,0x18
0xea711:	add    esp,0x18
0xea710:	add    rsp,0x18
0xea732:	add    esp,0x18
0xea731:	add    rsp,0x18
0xea754:	add    esp,0x18
0xea753:	add    rsp,0x18
0xea76d:	jae    0xea770
0xea76c:	push   QWORD PTR [rbx+0x1]
0xea77d:	or     eax,0xffffffff
0xea77c:	or     rax,0xffffffffffffffff
0xea79d:	jae    0xea7a0
0xea79c:	push   QWORD PTR [rbx+0x1]
0xea7ad:	or     eax,0xffffffff
0xea7ac:	or     rax,0xffffffffffffffff
0xea7cd:	jae    0xea7d0
0xea7cc:	push   QWORD PTR [rbx+0x1]
0xea7dd:	or     eax,0xffffffff
0xea7dc:	or     rax,0xffffffffffffffff
0xea7fd:	jae    0xea800
0xea7fc:	push   QWORD PTR [rbx+0x1]
0xea80d:	or     eax,0xffffffff
0xea80c:	or     rax,0xffffffffffffffff
0xea82d:	jae    0xea830
0xea82c:	push   QWORD PTR [rbx+0x1]
0xea83d:	or     eax,0xffffffff
0xea83c:	or     rax,0xffffffffffffffff
0xea85d:	jae    0xea860
0xea85c:	push   QWORD PTR [rbx+0x1]
0xea86d:	or     eax,0xffffffff
0xea86c:	or     rax,0xffffffffffffffff
0xea88d:	jae    0xea890
0xea88c:	push   QWORD PTR [rbx+0x1]
0xea89d:	or     eax,0xffffffff
0xea89c:	or     rax,0xffffffffffffffff
0xea8bd:	jae    0xea8c0
0xea8bc:	push   QWORD PTR [rbx+0x1]
0xea8cd:	or     eax,0xffffffff
0xea8cc:	or     rax,0xffffffffffffffff
0xea983:	add    bl,dh
0xea981:	add    BYTE PTR [rax],al; 	add    bl,dh
0xea9c4:	fdiv   st,st(3)
0xea9e1:	cmova  eax,edx
0xeaab8:	pop    rbp
0xeaab7:	pop    rdi; 	pop    rbp
0xeaab6:	pop    r15; 	pop    rbp
0xeaab5:	pop    rsi; 	pop    r15; 	pop    rbp
0xeaae2:	pop    rbp
0xeaae1:	pop    rdi; 	pop    rbp
0xeaae0:	pop    r15; 	pop    rbp
0xeaadf:	pop    rsi; 	pop    r15; 	pop    rbp
0xeab2f:	add    BYTE PTR [rax-0x7d],cl
0xeab5c:	pop    rdi
0xeab5b:	pop    r15
0xeab5a:	pop    rsi; 	pop    r15
0xeab59:	pop    r14; 	pop    r15
0xeac26:	pop    rdi
0xeac25:	pop    r15
0xeac24:	pop    rsi; 	pop    r15
0xeac23:	pop    r14; 	pop    r15
0xeadf6:	pop    rbp
0xeadf5:	pop    rdi; 	pop    rbp
0xeadf4:	pop    r15; 	pop    rbp
0xeadf3:	pop    rsi; 	pop    r15; 	pop    rbp
0xeb4d0:	fmul   QWORD PTR [rax-0x77]
0xebce2:	xchg   esp,eax
0xebcdf:	add    al,BYTE PTR [rcx+0xf]; 	xchg   esp,eax
0xec541:	mov    WORD PTR [rax-0x77],cs
0xec540:	rex.RB mov WORD PTR [r8-0x77],cs
0xec6db:	xchg   esp,eax
0xec901:	xchg   esp,eax
0xecfa5:	xchg   esp,eax
0xecfa3:	test   al,0xf; 	xchg   esp,eax
0xed4f7:	pop    rdi
0xed4f6:	pop    r15
0xed4f5:	pop    rsi; 	pop    r15
0xed4f4:	pop    r14; 	pop    r15
0xed5ba:	add    cl,ch
0xed5b9:	add    r9b,r13b
0xedbd4:	add    cl,ch
0xedbd2:	add    BYTE PTR [rax],al; 	add    cl,ch
0xedc94:	or     BYTE PTR [rax-0x77],cl
0xedf02:	pop    rdi
0xedf01:	pop    r15
0xedf00:	pop    rsi; 	pop    r15
0xedeff:	pop    r14; 	pop    r15
0xee2af:	xchg   ebp,eax
0xee2ac:	add    BYTE PTR [rcx+0xf],al; 	xchg   ebp,eax
0xeef90:	sub    BYTE PTR [rax-0x7d],cl
0xeef8f:	push   rsi; 	sub    BYTE PTR [rax-0x7d],cl
0xef2c6:	pop    rbp
0xef2c5:	pop    rdi; 	pop    rbp
0xef2c4:	pop    r15; 	pop    rbp
0xef2c3:	pop    rsi; 	pop    r15; 	pop    rbp
0xef6db:	pop    rbp
0xef6da:	pop    rdi; 	pop    rbp
0xef6d9:	pop    r15; 	pop    rbp
0xef6d8:	pop    rsi; 	pop    r15; 	pop    rbp
0xefb1a:	pop    rbp
0xefb19:	pop    r13
0xefb18:	pop    rsp; 	pop    r13
0xefb17:	pop    r12; 	pop    r13
0xefcc3:	pop    rsp
0xefcc2:	pop    r12
0xefcc1:	pop    rbp; 	pop    r12
0xefcc0:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0xefcec:	pop    rsp
0xefceb:	pop    r12
0xefcea:	pop    rbp; 	pop    r12
0xefce9:	pop    rbx; 	pop    rbp; 	pop    r12
0xefde8:	pop    rbp
0xefde7:	pop    r13
0xefde6:	pop    rsp; 	pop    r13
0xefde5:	pop    r12; 	pop    r13
0xefe03:	pop    rbp
0xefe02:	pop    r13
0xefe01:	pop    rsp; 	pop    r13
0xefe00:	pop    r12; 	pop    r13
0xefe71:	pop    rdi
0xefe70:	pop    r15
0xefe6f:	pop    rsi; 	pop    r15
0xefe6e:	pop    r14; 	pop    r15
0xf036e:	pop    rbp
0xf036d:	pop    r13
0xf036c:	pop    rsp; 	pop    r13
0xf036b:	pop    r12; 	pop    r13
0xf037e:	pop    rbp
0xf037d:	pop    r13
0xf037c:	pop    rsp; 	pop    r13
0xf037b:	pop    r12; 	pop    r13
0xf040d:	pop    rbp
0xf040c:	pop    r13
0xf040b:	pop    rsp; 	pop    r13
0xf040a:	pop    r12; 	pop    r13
0xf0454:	pop    rbp
0xf0453:	pop    r13
0xf0452:	pop    rsp; 	pop    r13
0xf0451:	pop    r12; 	pop    r13
0xf0498:	add    BYTE PTR [rax-0x77],cl
0xf053d:	add    BYTE PTR [rax-0x77],cl
0xf06d1:	pop    rdi
0xf06d0:	pop    r15
0xf06cf:	pop    rsi; 	pop    r15
0xf06ce:	pop    r14; 	pop    r15
0xf07b6:	pop    rdi
0xf07b5:	pop    r15
0xf07b4:	pop    rsi; 	pop    r15
0xf07b3:	pop    r14; 	pop    r15
0xf08b1:	pop    rdi
0xf08b0:	pop    r15
0xf08af:	pop    rsi; 	pop    r15
0xf08ae:	pop    r14; 	pop    r15
0xf0cbc:	xchg   ebp,eax
0xf0f06:	xchg   ebp,eax
0xf0f04:	fisttp DWORD PTR [rdi]; 	xchg   ebp,eax
0xf12f5:	add    BYTE PTR [rax-0x77],cl
0xf1515:	pop    rbp
0xf1514:	pop    rdi; 	pop    rbp
0xf1513:	pop    r15; 	pop    rbp
0xf1512:	pop    rsi; 	pop    r15; 	pop    rbp
0xf156f:	pop    rbp
0xf156e:	pop    rdi; 	pop    rbp
0xf156d:	pop    r15; 	pop    rbp
0xf156c:	pop    rsi; 	pop    r15; 	pop    rbp
0xf1635:	pop    rbp
0xf1634:	pop    rdi; 	pop    rbp
0xf1633:	pop    r15; 	pop    rbp
0xf1632:	pop    rsi; 	pop    r15; 	pop    rbp
0xf1730:	pop    rbp
0xf172f:	pop    rdi; 	pop    rbp
0xf172e:	pop    r15; 	pop    rbp
0xf172d:	pop    rsi; 	pop    r15; 	pop    rbp
0xf1acf:	pop    rdi
0xf1ace:	pop    r15
0xf1acd:	pop    rsi; 	pop    r15
0xf1acc:	pop    r14; 	pop    r15
0xf1ea4:	add    BYTE PTR [rax-0x77],cl
0xf247e:	add    BYTE PTR [rax-0x77],cl
0xf247d:	push   rbp; 	add    BYTE PTR [rax-0x77],cl
0xf2704:	add    BYTE PTR [rax-0x77],cl
0xf277d:	add    BYTE PTR [rax-0x7d],cl
0xf2d7b:	add    BYTE PTR [rax-0x77],cl
0xf2d7a:	push   rbp; 	add    BYTE PTR [rax-0x77],cl
0xf3279:	xor    ecx,DWORD PTR [rax-0x7d]
0xf3312:	add    BYTE PTR [rax-0x77],cl
0xf3311:	push   rbp; 	add    BYTE PTR [rax-0x77],cl
0xf38f9:	add    BYTE PTR [rax-0x77],cl
0xf38f8:	push   rbp; 	add    BYTE PTR [rax-0x77],cl
0xf3cb9:	add    BYTE PTR [rax-0x77],cl
0xf3cb8:	push   rbp; 	add    BYTE PTR [rax-0x77],cl
0xf40ad:	pop    rdi
0xf40ac:	pop    r15
0xf40ab:	pop    rsi; 	pop    r15
0xf40aa:	pop    r14; 	pop    r15
0xf4189:	cmp    ecx,DWORD PTR [rax-0x77]
0xf41d4:	add    cl,ch
0xf41d2:	add    BYTE PTR [rax],al; 	add    cl,ch
0xf4292:	dec    DWORD PTR [rax-0x77]
0xf4291:	cmc    ; 	dec    DWORD PTR [rax-0x77]
0xf4397:	sbb    BYTE PTR [rax-0x77],cl
0xf448f:	add    BYTE PTR [rax-0x7d],cl
0xf49a6:	pop    rdi
0xf49a5:	pop    r15
0xf49a4:	pop    rsi; 	pop    r15
0xf49a3:	pop    r14; 	pop    r15
0xf4cdf:	add    al,ch
0xf4cdd:	add    BYTE PTR [rax],al; 	add    al,ch
0xf4e57:	add    BYTE PTR [rax-0x7d],cl
0xf5a79:	jae    0xf5aaf
0xf5a78:	push   QWORD PTR [rbx+0x34]
0xf5aac:	jae    0xf5aaf
0xf5aab:	push   QWORD PTR [rbx+0x1]
0xf5abc:	or     eax,0xffffffff
0xf5abb:	or     rax,0xffffffffffffffff
0xf5ad9:	jae    0xf5b0f
0xf5ad8:	push   QWORD PTR [rbx+0x34]
0xf5b0c:	jae    0xf5b0f
0xf5b0b:	push   QWORD PTR [rbx+0x1]
0xf5b1c:	or     eax,0xffffffff
0xf5b1b:	or     rax,0xffffffffffffffff
0xf5b58:	pop    rbp
0xf5b57:	pop    rbx; 	pop    rbp
0xf5b56:	rcr    BYTE PTR [rbx+0x5d],1
0xf5b55:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0xf5b87:	stos   DWORD PTR es:[rdi],eax
0xf5b86:	stos   QWORD PTR es:[rdi],rax
0xf5b85:	rep stos QWORD PTR es:[rdi],rax
0xf5b84:	add    esi,ebx; 	stos   QWORD PTR es:[rdi],rax
0xf5bb2:	add    DWORD PTR [rax-0x7d],ecx
0xf5bb1:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xf5bd8:	add    DWORD PTR [rax-0x7d],ecx
0xf5bd7:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xf5bf1:	pop    rbp
0xf5bf0:	pop    rbx; 	pop    rbp
0xf5bee:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xf5c1d:	add    al,0x39
0xf5c2c:	pop    rbp
0xf5c2b:	pop    rbx; 	pop    rbp
0xf5c2a:	or     BYTE PTR [rbx+0x5d],bl
0xf5c59:	pop    rbp
0xf5c58:	pop    rbx; 	pop    rbp
0xf5c57:	or     BYTE PTR [rbx+0x5d],bl
0xf5cae:	add    al,0x39
0xf5cc7:	pop    rdi
0xf5cc6:	pop    r15
0xf5cc5:	pop    rsi; 	pop    r15
0xf5cc4:	pop    r14; 	pop    r15
0xf5d6f:	pop    rsp
0xf5d6e:	pop    r12
0xf5d6d:	pop    rbp; 	pop    r12
0xf5d6c:	pop    rbx; 	pop    rbp; 	pop    r12
0xf5d77:	add    BYTE PTR [rcx],bh
0xf5d75:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rcx],bh
0xf5dfd:	stos   DWORD PTR es:[rdi],eax
0xf5dfc:	stos   QWORD PTR es:[rdi],rax
0xf5dfb:	rep stos QWORD PTR es:[rdi],rax
0xf5dfa:	add    esi,ebx; 	stos   QWORD PTR es:[rdi],rax
0xf5e00:	xor    eax,eax
0xf5dff:	nop; 	xor    eax,eax
0xf5dfe:	ret    ; 	nop; 	xor    eax,eax
0xf5e92:	xor    eax,eax
0xf5f22:	add    BYTE PTR [rax],al
0xf5f36:	xor    eax,eax
0xf5f34:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0xf5f4b:	add    al,0xf3
0xf5f49:	add    BYTE PTR [rsp+rax*1-0xd],dh
0xf5f53:	xor    eax,eax
0xf5f51:	mov    DWORD PTR [rdi],esi; 	xor    eax,eax
0xf5f65:	xor    eax,eax
0xf5f63:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0xf5f73:	xor    eax,eax
0xf5f71:	ja     0xf5f77; 	xor    eax,eax
0xf5f8c:	add    esp,0x18
0xf5f8b:	add    rsp,0x18
0xf5f9c:	add    esp,0x18
0xf5f9b:	add    rsp,0x18
0xf6040:	pop    rbp
0xf603f:	pop    rdi; 	pop    rbp
0xf603e:	pop    r15; 	pop    rbp
0xf603d:	pop    rsi; 	pop    r15; 	pop    rbp
0xf638f:	add    BYTE PTR [rax-0x7d],cl
0xf65b6:	dec    DWORD PTR [rax+0x39]
0xf65b5:	cli    ; 	dec    DWORD PTR [rax+0x39]
0xf67df:	xor    eax,eax
0xf67f8:	xor    eax,eax
0xf67f6:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0xf6808:	xor    eax,eax
0xf6806:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0xf68bf:	add    BYTE PTR [rax],al
0xf68bd:	add    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0xf68e6:	xor    eax,eax
0xf68e4:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xf68f8:	xor    eax,eax
0xf68f6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xf690f:	neg    eax
0xf690d:	syscall ; 	neg    eax
0xf6918:	xor    eax,eax
0xf6916:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xf6940:	add    esp,0x18
0xf693f:	add    rsp,0x18
0xf6a13:	pop    rsp
0xf6a12:	pop    r12
0xf6a11:	pop    rbp; 	pop    r12
0xf6a10:	pop    rbx; 	pop    rbp; 	pop    r12
0xf6a6d:	cmove  eax,edx
0xf6a6c:	cmove  rax,rdx
0xf6aed:	add    esp,0x18
0xf6aec:	add    rsp,0x18
0xf6b10:	add    esp,0x18
0xf6b0f:	add    rsp,0x18
0xf6b4d:	jae    0xf6b50
0xf6b4c:	push   QWORD PTR [rbx+0x1]
0xf6b5d:	or     eax,0xffffffff
0xf6b5c:	or     rax,0xffffffffffffffff
0xf6b92:	add    esp,0x18
0xf6b91:	add    rsp,0x18
0xf6bc4:	add    esp,0x18
0xf6bc3:	add    rsp,0x18
0xf6bec:	add    esi,ebx
0xf6c3b:	add    al,0xf3
0xf6c8c:	add    esi,ebx
0xf6ce4:	or     esi,ebx
0xf6ded:	jae    0xf6df0
0xf6dec:	push   QWORD PTR [rbx+0x1]
0xf6dfd:	or     eax,0xffffffff
0xf6dfc:	or     rax,0xffffffffffffffff
0xf6e1d:	jae    0xf6e20
0xf6e1c:	push   QWORD PTR [rbx+0x1]
0xf6e2d:	or     eax,0xffffffff
0xf6e2c:	or     rax,0xffffffffffffffff
0xf6e76:	pop    rsp
0xf6e75:	pop    r12
0xf6e74:	pop    rbp; 	pop    r12
0xf6e73:	pop    rbx; 	pop    rbp; 	pop    r12
0xf6ec1:	pop    rsp
0xf6ec0:	pop    r12
0xf6ebf:	pop    rbp; 	pop    r12
0xf6ebe:	pop    rbx; 	pop    rbp; 	pop    r12
0xf6ed5:	syscall 
0xf6ed3:	add    BYTE PTR [rax],al; 	syscall 
0xf6eed:	jae    0xf6ef0
0xf6eec:	push   QWORD PTR [rbx+0x1]
0xf6efd:	or     eax,0xffffffff
0xf6efc:	or     rax,0xffffffffffffffff
0xf6f1d:	jae    0xf6f20
0xf6f1c:	push   QWORD PTR [rbx+0x1]
0xf6f2d:	or     eax,0xffffffff
0xf6f2c:	or     rax,0xffffffffffffffff
0xf6fdd:	jae    0xf6fe0
0xf6fdc:	push   QWORD PTR [rbx+0x1]
0xf6fed:	or     eax,0xffffffff
0xf6fec:	or     rax,0xffffffffffffffff
0xf700d:	jae    0xf7010
0xf700c:	push   QWORD PTR [rbx+0x1]
0xf701d:	or     eax,0xffffffff
0xf701c:	or     rax,0xffffffffffffffff
0xf7046:	jae    0xf7079
0xf7045:	push   QWORD PTR [rbx+0x31]
0xf7076:	jae    0xf7079
0xf7075:	push   QWORD PTR [rbx+0x1]
0xf7086:	or     eax,0xffffffff
0xf7085:	or     rax,0xffffffffffffffff
0xf713d:	pop    rsp
0xf713c:	pop    r12
0xf713b:	pop    rbp; 	pop    r12
0xf713a:	pop    rbx; 	pop    rbp; 	pop    r12
0xf71b6:	pop    rsp
0xf71b5:	pop    r12
0xf71b4:	pop    rbp; 	pop    r12
0xf71b3:	pop    rbx; 	pop    rbp; 	pop    r12
0xf7266:	jae    0xf7299
0xf7265:	push   QWORD PTR [rbx+0x31]
0xf7296:	jae    0xf7299
0xf7295:	push   QWORD PTR [rbx+0x1]
0xf72a6:	or     eax,0xffffffff
0xf72a5:	or     rax,0xffffffffffffffff
0xf72c6:	jae    0xf72f9
0xf72c5:	push   QWORD PTR [rbx+0x31]
0xf72f6:	jae    0xf72f9
0xf72f5:	push   QWORD PTR [rbx+0x1]
0xf7306:	or     eax,0xffffffff
0xf7305:	or     rax,0xffffffffffffffff
0xf731d:	jae    0xf7320
0xf731c:	push   QWORD PTR [rbx+0x1]
0xf732d:	or     eax,0xffffffff
0xf732c:	or     rax,0xffffffffffffffff
0xf738b:	pop    rdi
0xf738a:	pop    r15
0xf7389:	pop    rsi; 	pop    r15
0xf7388:	pop    r14; 	pop    r15
0xf74a6:	pop    rbp
0xf74a5:	pop    r13
0xf74a4:	pop    rsp; 	pop    r13
0xf74a3:	pop    r12; 	pop    r13
0xf7577:	add    al,ch
0xf7575:	add    BYTE PTR [rax],al; 	add    al,ch
0xf7678:	cmove  eax,edx
0xf76f3:	pop    rbx
0xf76f0:	add    esp,0x60; 	pop    rbx
0xf7727:	pop    rbx
0xf7724:	add    esp,0x60; 	pop    rbx
0xf77ad:	jae    0xf77b0
0xf77ac:	push   QWORD PTR [rbx+0x1]
0xf77bd:	or     eax,0xffffffff
0xf77bc:	or     rax,0xffffffffffffffff
0xf7849:	pop    rbx
0xf7847:	xor    eax,eax; 	pop    rbx
0xf7869:	pop    rbx
0xf7866:	add    esp,0x20; 	pop    rbx
0xf789f:	pop    rbx
0xf78f6:	jae    0xf7929
0xf78f5:	push   QWORD PTR [rbx+0x31]
0xf7926:	jae    0xf7929
0xf7925:	push   QWORD PTR [rbx+0x1]
0xf7936:	or     eax,0xffffffff
0xf7935:	or     rax,0xffffffffffffffff
0xf794d:	jae    0xf7950
0xf794c:	push   QWORD PTR [rbx+0x1]
0xf795d:	or     eax,0xffffffff
0xf795c:	or     rax,0xffffffffffffffff
0xf797d:	jae    0xf7980
0xf797c:	push   QWORD PTR [rbx+0x1]
0xf798d:	or     eax,0xffffffff
0xf798c:	or     rax,0xffffffffffffffff
0xf79ad:	jae    0xf79b0
0xf79ac:	push   QWORD PTR [rbx+0x1]
0xf79bd:	or     eax,0xffffffff
0xf79bc:	or     rax,0xffffffffffffffff
0xf79dd:	jae    0xf79e0
0xf79dc:	push   QWORD PTR [rbx+0x1]
0xf79ed:	or     eax,0xffffffff
0xf79ec:	or     rax,0xffffffffffffffff
0xf7a0d:	jae    0xf7a10
0xf7a0c:	push   QWORD PTR [rbx+0x1]
0xf7a1d:	or     eax,0xffffffff
0xf7a1c:	or     rax,0xffffffffffffffff
0xf7a46:	jae    0xf7a79
0xf7a45:	push   QWORD PTR [rbx+0x31]
0xf7a76:	jae    0xf7a79
0xf7a75:	push   QWORD PTR [rbx+0x1]
0xf7a7c:	clc    
0xf7a86:	or     eax,0xffffffff
0xf7a85:	or     rax,0xffffffffffffffff
0xf7a9d:	jae    0xf7aa0
0xf7a9c:	push   QWORD PTR [rbx+0x1]
0xf7aad:	or     eax,0xffffffff
0xf7aac:	or     rax,0xffffffffffffffff
0xf7acd:	jae    0xf7ad0
0xf7acc:	push   QWORD PTR [rbx+0x1]
0xf7add:	or     eax,0xffffffff
0xf7adc:	or     rax,0xffffffffffffffff
0xf7b5a:	pop    rdi
0xf7b59:	pop    r15
0xf7b58:	pop    rsi; 	pop    r15
0xf7b57:	pop    r14; 	pop    r15
0xf7bd5:	and    BYTE PTR [rax-0x77],cl
0xf7f6c:	dec    DWORD PTR [rax-0x77]
0xf7f6b:	repnz dec DWORD PTR [rax-0x77]
0xf7fb9:	add    BYTE PTR [rax-0x77],cl
0xf8233:	pop    rsp
0xf8232:	pop    r12
0xf8231:	pop    rbp; 	pop    r12
0xf8230:	pop    rbx; 	pop    rbp; 	pop    r12
0xf8297:	add    BYTE PTR [rax-0x77],cl
0xf82b4:	pop    rbx
0xf82b2:	add    BYTE PTR [rax],al; 	pop    rbx
0xf830d:	jae    0xf8310
0xf830c:	push   QWORD PTR [rbx+0x1]
0xf831d:	or     eax,0xffffffff
0xf831c:	or     rax,0xffffffffffffffff
0xf833d:	jae    0xf8340
0xf833c:	push   QWORD PTR [rbx+0x1]
0xf834d:	or     eax,0xffffffff
0xf834c:	or     rax,0xffffffffffffffff
0xf836d:	jae    0xf8370
0xf836c:	push   QWORD PTR [rbx+0x1]
0xf837d:	or     eax,0xffffffff
0xf837c:	or     rax,0xffffffffffffffff
0xf83a0:	jae    0xf83a3
0xf839f:	push   QWORD PTR [rbx+0x1]
0xf83b0:	or     eax,0xffffffff
0xf83af:	or     rax,0xffffffffffffffff
0xf8471:	dec    DWORD PTR [rax-0x77]
0xf8470:	clc    ; 	dec    DWORD PTR [rax-0x77]
0xf85ae:	pop    rbp
0xf85ad:	pop    r13
0xf85ac:	pop    rsp; 	pop    r13
0xf85ab:	pop    r12; 	pop    r13
0xf86c8:	pop    rdi
0xf86c7:	pop    r15
0xf86c6:	pop    rsi; 	pop    r15
0xf86c5:	pop    r14; 	pop    r15
0xf8966:	mov    dh,0xc0
0xf8965:	movzx  eax,al
0xf8964:	movzx  rax,al
0xf897d:	jae    0xf8980
0xf897c:	push   QWORD PTR [rbx+0x1]
0xf898d:	or     eax,0xffffffff
0xf898c:	or     rax,0xffffffffffffffff
0xf89b0:	jae    0xf89b3
0xf89af:	push   QWORD PTR [rbx+0x1]
0xf89c0:	or     eax,0xffffffff
0xf89bf:	or     rax,0xffffffffffffffff
0xf89dd:	jae    0xf89e0
0xf89dc:	push   QWORD PTR [rbx+0x1]
0xf89ed:	or     eax,0xffffffff
0xf89ec:	or     rax,0xffffffffffffffff
0xf8a0d:	jae    0xf8a10
0xf8a0c:	push   QWORD PTR [rbx+0x1]
0xf8a1d:	or     eax,0xffffffff
0xf8a1c:	or     rax,0xffffffffffffffff
0xf8a3d:	jae    0xf8a40
0xf8a3c:	push   QWORD PTR [rbx+0x1]
0xf8a4d:	or     eax,0xffffffff
0xf8a4c:	or     rax,0xffffffffffffffff
0xf8a70:	jae    0xf8a73
0xf8a6f:	push   QWORD PTR [rbx+0x1]
0xf8a80:	or     eax,0xffffffff
0xf8a7f:	or     rax,0xffffffffffffffff
0xf8a9d:	jae    0xf8aa0
0xf8a9c:	push   QWORD PTR [rbx+0x1]
0xf8aad:	or     eax,0xffffffff
0xf8aac:	or     rax,0xffffffffffffffff
0xf8acd:	jae    0xf8ad0
0xf8acc:	push   QWORD PTR [rbx+0x1]
0xf8add:	or     eax,0xffffffff
0xf8adc:	or     rax,0xffffffffffffffff
0xf8afd:	jae    0xf8b00
0xf8afc:	push   QWORD PTR [rbx+0x1]
0xf8b0d:	or     eax,0xffffffff
0xf8b0c:	or     rax,0xffffffffffffffff
0xf8c40:	pop    rsi
0xf8c3f:	pop    r14
0xf8c3e:	pop    rbp; 	pop    r14
0xf8c3d:	pop    r13; 	pop    r14
0xf8ca0:	pop    rsi
0xf8c9f:	pop    r14
0xf8c9e:	pop    rbp; 	pop    r14
0xf8c9d:	pop    r13; 	pop    r14
0xf8d02:	pop    rsi
0xf8d01:	pop    r14
0xf8d00:	pop    rbp; 	pop    r14
0xf8cff:	pop    r13; 	pop    r14
0xf8d07:	add    al,ch
0xf8d06:	add    al,bpl
0xf9035:	dec    DWORD PTR [rax-0x77]
0xf90bd:	dec    DWORD PTR [rax+0x39]
0xf90bc:	stc    ; 	dec    DWORD PTR [rax+0x39]
0xf91cf:	pop    rdi
0xf91ce:	pop    r15
0xf91cd:	pop    rsi; 	pop    r15
0xf91cc:	pop    r14; 	pop    r15
0xf96b2:	push   rsi
0xf9919:	pop    rbp
0xf9918:	pop    rdi; 	pop    rbp
0xf9917:	pop    r15; 	pop    rbp
0xf9916:	pop    rsi; 	pop    r15; 	pop    rbp
0xf9b6a:	pop    rbp
0xf9b69:	pop    r13
0xf9b68:	pop    rsp; 	pop    r13
0xf9b67:	pop    r12; 	pop    r13
0xf9bc2:	pop    rbp
0xf9bc1:	pop    r13
0xf9bc0:	pop    rsp; 	pop    r13
0xf9bbf:	pop    r12; 	pop    r13
0xf9e57:	add    al,ch
0xf9e55:	add    BYTE PTR [rax],al; 	add    al,ch
0xfa057:	sub    al,ch
0xfa187:	pop    rdi
0xfa186:	pop    r15
0xfa185:	pop    rsi; 	pop    r15
0xfa184:	pop    r14; 	pop    r15
0xfa853:	and    dh,dh
0xfa884:	dec    DWORD PTR [rax+0x39]
0xfa883:	stc    ; 	dec    DWORD PTR [rax+0x39]
0xfab13:	pop    rdi
0xfab12:	pop    r15
0xfab11:	pop    rsi; 	pop    r15
0xfab10:	pop    r14; 	pop    r15
0xfacc9:	shr    al,0x61
0xfaef2:	pop    rsp
0xfaef1:	pop    r12
0xfaef0:	pop    rbp; 	pop    r12
0xfaeef:	pop    rbx; 	pop    rbp; 	pop    r12
0xfb023:	pop    rdi
0xfb022:	pop    r15
0xfb021:	pop    rsi; 	pop    r15
0xfb020:	pop    r14; 	pop    r15
0xfb26a:	add    BYTE PTR [rax-0x77],cl
0xfb513:	leave  
0xfb511:	and    ebp,eax; 	leave  
0xfb5a9:	xor    eax,eax
0xfb5a8:	xor    ax,ax
0xfb5a7:	push   rsi; 	xor    ax,ax
0xfb5c1:	add    BYTE PTR [rax],al
0xfb5bf:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xfb677:	pop    rbp
0xfb676:	pop    r13
0xfb675:	pop    rsp; 	pop    r13
0xfb674:	pop    r12; 	pop    r13
0xfb68b:	pop    rbp
0xfb68a:	pop    r13
0xfb689:	pop    rsp; 	pop    r13
0xfb688:	pop    r12; 	pop    r13
0xfb6fe:	pop    rbp
0xfb6fd:	pop    r13
0xfb6fc:	pop    rsp; 	pop    r13
0xfb6fb:	pop    r12; 	pop    r13
0xfb70e:	xor    eax,eax
0xfb70c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xfb736:	jae    0xfb769
0xfb735:	push   QWORD PTR [rbx+0x31]
0xfb766:	jae    0xfb769
0xfb765:	push   QWORD PTR [rbx+0x1]
0xfb776:	or     eax,0xffffffff
0xfb775:	or     rax,0xffffffffffffffff
0xfb7cc:	pop    rsp
0xfb7cb:	pop    r12
0xfb7ca:	pop    rbp; 	pop    r12
0xfb7c9:	pop    rbx; 	pop    rbp; 	pop    r12
0xfb830:	pop    rsp
0xfb82f:	pop    r12
0xfb82e:	pop    rbp; 	pop    r12
0xfb82d:	pop    rbx; 	pop    rbp; 	pop    r12
0xfb88b:	cmova  eax,edx
0xfb8d1:	pop    rdi
0xfb8d0:	pop    r15
0xfb8cf:	pop    rsi; 	pop    r15
0xfb8ce:	pop    r14; 	pop    r15
0xfba64:	pop    rbx
0xfba62:	neg    eax; 	pop    rbx
0xfba72:	pop    rbx
0xfba70:	xor    eax,eax; 	pop    rbx
0xfbaa0:	jae    0xfbaa3
0xfba9f:	push   QWORD PTR [rbx+0x1]
0xfbab0:	or     eax,0xffffffff
0xfbaaf:	or     rax,0xffffffffffffffff
0xfbb2d:	add    dh,bl
0xfbe1a:	pop    rdi
0xfbe19:	pop    r15
0xfbe18:	pop    rsi; 	pop    r15
0xfbe17:	pop    r14; 	pop    r15
0xfc1d7:	mov    DWORD PTR [rsi+0x48],eax
0xfc1d6:	mov    QWORD PTR [rsi+0x48],rax
0xfc1f4:	pop    rbx
0xfc1f3:	rex.W pop rbx
0xfc1f2:	rex.XB; 	rex.W pop rbx
0xfc1f1:	mov    DWORD PTR [rbx+0x48],eax; 	pop    rbx
0xfc219:	jae    0xfc24f
0xfc218:	push   QWORD PTR [rbx+0x34]
0xfc24c:	jae    0xfc24f
0xfc24b:	push   QWORD PTR [rbx+0x1]
0xfc25c:	or     eax,0xffffffff
0xfc25b:	or     rax,0xffffffffffffffff
0xfc280:	ja     0xfc288
0xfc27f:	push   QWORD PTR [rdi+0x6]
0xfc2f0:	pop    rbp
0xfc2ef:	pop    r13
0xfc2ee:	pop    rsp; 	pop    r13
0xfc2ed:	pop    r12; 	pop    r13
0xfc316:	add    BYTE PTR [rax],al
0xfc32c:	add    BYTE PTR [rax],al
0xfc330:	xor    eax,eax
0xfc32f:	nop; 	xor    eax,eax
0xfc32e:	ret    ; 	nop; 	xor    eax,eax
0xfc363:	ja     0xfc36d
0xfc362:	mov    DWORD PTR [rdi+0x8],esi
0xfc3b9:	ja     0xfc3c3
0xfc3b8:	mov    DWORD PTR [rdi+0x8],esi
0xfc3cd:	xor    eax,eax
0xfc3cc:	xor    BYTE PTR [rcx],0xc0
0xfc43a:	pop    rsp
0xfc439:	pop    r12
0xfc438:	pop    rbp; 	pop    r12
0xfc437:	pop    rbx; 	pop    rbp; 	pop    r12
0xfc459:	pop    rsp
0xfc458:	pop    r12
0xfc457:	pop    rbp; 	pop    r12
0xfc456:	rcr    BYTE PTR [rbp+0x41],0x5c
0xfc479:	pop    rsp
0xfc478:	pop    r12
0xfc477:	pop    rbp; 	pop    r12
0xfc476:	rcr    BYTE PTR [rbp+0x41],0x5c
0xfc4e3:	pop    rbp
0xfc4e2:	pop    r13
0xfc4e1:	pop    rsp; 	pop    r13
0xfc4e0:	pop    r12; 	pop    r13
0xfc59f:	pop    rbp
0xfc59e:	pop    r13
0xfc59d:	pop    rsp; 	pop    r13
0xfc59c:	pop    r12; 	pop    r13
0xfc5d3:	pop    rbp
0xfc5d2:	pop    r13
0xfc5d1:	pop    rsp; 	pop    r13
0xfc5d0:	pop    r12; 	pop    r13
0xfc70a:	pop    rbx
0xfc708:	mov    eax,ebx; 	pop    rbx
0xfc727:	pop    rbx
0xfc725:	mov    eax,ebx; 	pop    rbx
0xfc74e:	add    esp,0x18
0xfc74d:	add    rsp,0x18
0xfc77a:	add    esp,0x18
0xfc779:	add    rsp,0x18
0xfc7a4:	ja     0xfc7b0
0xfc7a3:	push   QWORD PTR [rdi+0xa]
0xfc807:	pop    rbx
0xfc804:	add    esp,0x10; 	pop    rbx
0xfc8a4:	mov    DWORD PTR [rdi+0x8],eax
0xfc8f2:	pop    rsp
0xfc8f1:	pop    r12
0xfc8f0:	pop    rbp; 	pop    r12
0xfc8ef:	pop    rbx; 	pop    rbp; 	pop    r12
0xfc949:	pop    rsp
0xfc948:	pop    r12
0xfc947:	pop    rbp; 	pop    r12
0xfc946:	pop    rbx; 	pop    rbp; 	pop    r12
0xfc96d:	jae    0xfc970
0xfc96c:	push   QWORD PTR [rbx+0x1]
0xfc97d:	or     eax,0xffffffff
0xfc97c:	or     rax,0xffffffffffffffff
0xfc99d:	jae    0xfc9a0
0xfc99c:	push   QWORD PTR [rbx+0x1]
0xfc9ad:	or     eax,0xffffffff
0xfc9ac:	or     rax,0xffffffffffffffff
0xfc9cd:	jae    0xfc9d0
0xfc9cc:	push   QWORD PTR [rbx+0x1]
0xfc9dd:	or     eax,0xffffffff
0xfc9dc:	or     rax,0xffffffffffffffff
0xfca36:	add    BYTE PTR [rax-0x39],cl
0xfca45:	pop    rbx
0xfca43:	mov    eax,ebx; 	pop    rbx
0xfca42:	mov    rax,rbx; 	pop    rbx
0xfca80:	pop    rbx
0xfca7e:	mov    eax,ebx; 	pop    rbx
0xfca7d:	mov    rax,rbx; 	pop    rbx
0xfca9c:	pop    rbx
0xfca9a:	mov    eax,ebx; 	pop    rbx
0xfca99:	mov    rax,rbx; 	pop    rbx
0xfcab2:	add    BYTE PTR [rax+0x39],cl
0xfcae5:	pop    rbx
0xfcae3:	mov    eax,ebx; 	pop    rbx
0xfcae2:	mov    rax,rbx; 	pop    rbx
0xfcb4f:	pop    rsp
0xfcb4e:	pop    r12
0xfcb4d:	pop    rbp; 	pop    r12
0xfcb4c:	pop    rbx; 	pop    rbp; 	pop    r12
0xfccf7:	pop    rbp
0xfccf6:	pop    rbx; 	pop    rbp
0xfccf5:	add    BYTE PTR [rbx+0x5d],bl
0xfccf4:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0xfcd6d:	jae    0xfcd70
0xfcd6c:	push   QWORD PTR [rbx+0x1]
0xfcd7d:	or     eax,0xffffffff
0xfcd7c:	or     rax,0xffffffffffffffff
0xfcdef:	pop    rsp
0xfcdee:	pop    r12
0xfcded:	pop    rbp; 	pop    r12
0xfcdec:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0xfce0d:	pop    rsp
0xfce0c:	pop    r12
0xfce0b:	pop    rbp; 	pop    r12
0xfce0a:	pop    rbx; 	pop    rbp; 	pop    r12
0xfce34:	sub    esi,ebx
0xfce5a:	xor    eax,eax
0xfcec3:	add    BYTE PTR [rax-0x39],cl
0xfced1:	pop    rsp
0xfced0:	pop    r12
0xfcecf:	pop    rbp; 	pop    r12
0xfcece:	pop    rbx; 	pop    rbp; 	pop    r12
0xfcf03:	pop    rsp
0xfcf02:	pop    r12
0xfcf01:	pop    rbp; 	pop    r12
0xfcf00:	pop    rbx; 	pop    rbp; 	pop    r12
0xfcf0d:	fmul   DWORD PTR [rax+0x39]
0xfcf4d:	jae    0xfcf50
0xfcf4c:	push   QWORD PTR [rbx+0x1]
0xfcf5d:	or     eax,0xffffffff
0xfcf5c:	or     rax,0xffffffffffffffff
0xfcf86:	jae    0xfcfb9
0xfcf85:	push   QWORD PTR [rbx+0x31]
0xfcfb6:	jae    0xfcfb9
0xfcfb5:	push   QWORD PTR [rbx+0x1]
0xfcfc6:	or     eax,0xffffffff
0xfcfc5:	or     rax,0xffffffffffffffff
0xfcfe6:	jae    0xfd019
0xfcfe5:	push   QWORD PTR [rbx+0x31]
0xfd016:	jae    0xfd019
0xfd015:	push   QWORD PTR [rbx+0x1]
0xfd026:	or     eax,0xffffffff
0xfd025:	or     rax,0xffffffffffffffff
0xfd050:	ja     0xfd058
0xfd04f:	push   QWORD PTR [rdi+0x6]
0xfd0c3:	pop    rbp
0xfd0c2:	pop    r13
0xfd0c1:	pop    rsp; 	pop    r13
0xfd0c0:	pop    r12; 	pop    r13
0xfd100:	ja     0xfd108
0xfd0ff:	push   QWORD PTR [rdi+0x6]
0xfd173:	pop    rbp
0xfd172:	pop    r13
0xfd171:	pop    rsp; 	pop    r13
0xfd170:	pop    r12; 	pop    r13
0xfd1ab:	ja     0xfd1b0
0xfd1aa:	push   QWORD PTR [rdi+0x3]
0xfd1fb:	add    esp,0x38
0xfd1fa:	add    rsp,0x38
0xfd21b:	ja     0xfd220
0xfd21a:	push   QWORD PTR [rdi+0x3]
0xfd26b:	add    esp,0x38
0xfd26a:	add    rsp,0x38
0xfd29c:	ja     0xfd2a0
0xfd29b:	push   QWORD PTR [rdi+0x2]
0xfd2f6:	add    esp,0x38
0xfd2f5:	add    rsp,0x38
0xfd30f:	clc    
0xfd30e:	mov    eax,edi
0xfd30c:	add    BYTE PTR [rax],al; 	mov    eax,edi
0xfd34c:	ja     0xfd350
0xfd34b:	push   QWORD PTR [rdi+0x2]
0xfd3a6:	add    esp,0x38
0xfd3a5:	add    rsp,0x38
0xfd3bf:	clc    
0xfd3be:	mov    eax,edi
0xfd3bc:	add    BYTE PTR [rax],al; 	mov    eax,edi
0xfd3df:	add    dh,bl
0xfd430:	mov    eax,edx
0xfd4a8:	pop    rsi
0xfd4a7:	pop    r14
0xfd4a6:	pop    rbp; 	pop    r14
0xfd4a5:	pop    r13; 	pop    r14
0xfd4dd:	jae    0xfd4e0
0xfd4dc:	push   QWORD PTR [rbx+0x1]
0xfd4ed:	or     eax,0xffffffff
0xfd4ec:	or     rax,0xffffffffffffffff
0xfd554:	pop    rsp
0xfd553:	pop    r12
0xfd552:	pop    rbp; 	pop    r12
0xfd551:	pop    rbx; 	pop    rbp; 	pop    r12
0xfd57d:	jae    0xfd580
0xfd57c:	push   QWORD PTR [rbx+0x1]
0xfd58d:	or     eax,0xffffffff
0xfd58c:	or     rax,0xffffffffffffffff
0xfd5b9:	jae    0xfd5ef
0xfd5b8:	push   QWORD PTR [rbx+0x34]
0xfd5ec:	jae    0xfd5ef
0xfd5eb:	push   QWORD PTR [rbx+0x1]
0xfd5fc:	or     eax,0xffffffff
0xfd5fb:	or     rax,0xffffffffffffffff
0xfd664:	pop    rsi
0xfd663:	pop    r14
0xfd662:	pop    rbp; 	pop    r14
0xfd661:	pop    r13; 	pop    r14
0xfd6ce:	pop    rsi
0xfd6cd:	pop    r14
0xfd6cc:	pop    rbp; 	pop    r14
0xfd6cb:	pop    r13; 	pop    r14
0xfd70d:	jae    0xfd710
0xfd70c:	push   QWORD PTR [rbx+0x1]
0xfd71d:	or     eax,0xffffffff
0xfd71c:	or     rax,0xffffffffffffffff
0xfd73d:	jae    0xfd740
0xfd73c:	push   QWORD PTR [rbx+0x1]
0xfd74d:	or     eax,0xffffffff
0xfd74c:	or     rax,0xffffffffffffffff
0xfd776:	jae    0xfd7a9
0xfd775:	push   QWORD PTR [rbx+0x31]
0xfd7a6:	jae    0xfd7a9
0xfd7a5:	push   QWORD PTR [rbx+0x1]
0xfd7b6:	or     eax,0xffffffff
0xfd7b5:	or     rax,0xffffffffffffffff
0xfd7cd:	jae    0xfd7d0
0xfd7cc:	push   QWORD PTR [rbx+0x1]
0xfd7dd:	or     eax,0xffffffff
0xfd7dc:	or     rax,0xffffffffffffffff
0xfd806:	jae    0xfd839
0xfd805:	push   QWORD PTR [rbx+0x31]
0xfd836:	jae    0xfd839
0xfd835:	push   QWORD PTR [rbx+0x1]
0xfd846:	or     eax,0xffffffff
0xfd845:	or     rax,0xffffffffffffffff
0xfd85d:	jae    0xfd860
0xfd85c:	push   QWORD PTR [rbx+0x1]
0xfd86d:	or     eax,0xffffffff
0xfd86c:	or     rax,0xffffffffffffffff
0xfd89d:	add    dh,bl
0xfd959:	pop    rbp
0xfd958:	pop    rdi; 	pop    rbp
0xfd957:	pop    r15; 	pop    rbp
0xfd956:	pop    rsi; 	pop    r15; 	pop    rbp
0xfda24:	pop    rbp
0xfda23:	pop    rdi; 	pop    rbp
0xfda22:	pop    r15; 	pop    rbp
0xfda21:	pop    rsi; 	pop    r15; 	pop    rbp
0xfdb29:	mov    eax,edx
0xfdb27:	syscall ; 	mov    eax,edx
0xfdbcd:	jae    0xfdbd0
0xfdbcc:	push   QWORD PTR [rbx+0x1]
0xfdbdd:	or     eax,0xffffffff
0xfdbdc:	or     rax,0xffffffffffffffff
0xfdbfd:	jae    0xfdc00
0xfdbfc:	push   QWORD PTR [rbx+0x1]
0xfdc0d:	or     eax,0xffffffff
0xfdc0c:	or     rax,0xffffffffffffffff
0xfdc2d:	jae    0xfdc30
0xfdc2c:	push   QWORD PTR [rbx+0x1]
0xfdc3d:	or     eax,0xffffffff
0xfdc3c:	or     rax,0xffffffffffffffff
0xfdc6c:	pop    rbx
0xfdc6a:	mov    eax,ebx; 	pop    rbx
0xfdc69:	mov    rax,rbx; 	pop    rbx
0xfdc9d:	pop    rbx
0xfdc9c:	ret    ; 	pop    rbx
0xfdc9b:	rex.R ret ; 	pop    rbx
0xfdc9a:	cmove  eax,ebx; 	pop    rbx
0xfdd5a:	add    esp,0x48
0xfdd59:	add    rsp,0x48
0xfdd95:	add    esp,0x18
0xfdd94:	add    rsp,0x18
0xfde53:	mov    al,0xf3
0xfdea5:	add    esp,0x8
0xfdea4:	add    rsp,0x8
0xfdfa2:	add    esp,0x8
0xfdfa1:	add    rsp,0x8
0xfe105:	pop    rbx
0xfe103:	xor    eax,eax; 	pop    rbx
0xfe172:	sub    al,0x0
0xfe171:	mov    gs,WORD PTR [rax+rax*1]
0xfe170:	and    al,0x8e; 	sub    al,0x0
0xfe2c6:	pop    rbx
0xfe2c4:	xor    eax,eax; 	pop    rbx
0xfe2c3:	int3   ; 	xor    eax,eax; 	pop    rbx
0xfe332:	sub    al,0x0
0xfe331:	mov    WORD PTR [rax+rax*1],gs
0xfe330:	mov    WORD PTR fs:[rax+rax*1],gs
0xfe443:	or     bl,dh
0xfe466:	add    esp,0x8
0xfe465:	add    rsp,0x8
0xfe502:	pop    rbx
0xfe500:	xor    eax,eax; 	pop    rbx
0xfe56f:	add    bl,dh
0xfe637:	pop    rbp
0xfe636:	pop    rsp; 	pop    rbp
0xfe635:	pop    r12; 	pop    rbp
0xfe634:	pop    rbx; 	pop    r12; 	pop    rbp
0xfe654:	add    esp,0x8
0xfe653:	add    rsp,0x8
0xfe663:	add    BYTE PTR [rax],al
0xfe661:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xfe798:	pop    rsi
0xfe797:	pop    r14
0xfe796:	pop    rbp; 	pop    r14
0xfe795:	pop    r13; 	pop    r14
0xfe7e8:	pop    rsi
0xfe7e7:	pop    r14
0xfe7e6:	pop    rbp; 	pop    r14
0xfe7e5:	pop    r13; 	pop    r14
0xfe822:	adc    BYTE PTR [rcx-0x77],cl
0xfe9bf:	pop    rsi
0xfe9be:	pop    r14
0xfe9bd:	pop    rbp; 	pop    r14
0xfe9bc:	pop    r13; 	pop    r14
0xfebe3:	pop    rbp
0xfebe2:	pop    rdi; 	pop    rbp
0xfebe1:	pop    r15; 	pop    rbp
0xfebe0:	pop    rsi; 	pop    r15; 	pop    rbp
0xfebfa:	pop    rbp
0xfebf9:	pop    rdi; 	pop    rbp
0xfebf8:	pop    r15; 	pop    rbp
0xfebf7:	pop    rsi; 	pop    r15; 	pop    rbp
0xfedc4:	add    DWORD PTR [rax-0x7d],ecx
0xfef75:	sbb    ecx,DWORD PTR [rax+0x39]
0xfef9a:	pop    rbp
0xfef99:	pop    r13
0xfef98:	pop    rsp; 	pop    r13
0xfef97:	pop    r12; 	pop    r13
0xfefab:	pop    rbp
0xfefaa:	pop    r13
0xfefa9:	pop    rsp; 	pop    r13
0xfefa8:	pop    r12; 	pop    r13
0xfefbe:	or     ebx,esi
0xff146:	or     ebx,esi
0xff17d:	jae    0xff180
0xff17c:	push   QWORD PTR [rbx+0x1]
0xff18d:	or     eax,0xffffffff
0xff18c:	or     rax,0xffffffffffffffff
0xff1ad:	jae    0xff1b0
0xff1ac:	push   QWORD PTR [rbx+0x1]
0xff1bd:	or     eax,0xffffffff
0xff1bc:	or     rax,0xffffffffffffffff
0xff229:	ja     0xff233
0xff228:	mov    DWORD PTR [rdi+0x8],esi
0xff227:	mov    QWORD PTR [rdi+0x8],rsi
0xff23d:	add    BYTE PTR [rax],al
0xff23b:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xff257:	adc    bl,dh
0xff2cc:	inc    DWORD PTR [rax]
0xff2cb:	rex inc DWORD PTR [rax]
0xff2ca:	mov    BYTE PTR [rax-0x1],0x0
0xff327:	inc    DWORD PTR [rax]
0xff326:	rex inc DWORD PTR [rax]
0xff325:	mov    BYTE PTR [rax-0x1],0x0
0xff33c:	inc    DWORD PTR [rax]
0xff33b:	rex inc DWORD PTR [rax]
0xff33a:	mov    BYTE PTR [rax-0x1],0x0
0xff439:	pop    rsp
0xff438:	pop    r12
0xff437:	pop    rbp; 	pop    r12
0xff436:	pop    rbx; 	pop    rbp; 	pop    r12
0xff457:	add    BYTE PTR [rax-0x77],cl
0xff4bf:	dec    DWORD PTR [rax-0x77]
0xff5c1:	pop    rsp
0xff5c0:	pop    r12
0xff5bf:	pop    rbp; 	pop    r12
0xff5be:	pop    rbx; 	pop    rbp; 	pop    r12
0xff5f4:	add    BYTE PTR [rax-0x77],cl
0xff61d:	dec    DWORD PTR [rax-0x77]
0xff6e4:	pop    rbp
0xff6e3:	pop    rbx; 	pop    rbp
0xff6e2:	fcomp  DWORD PTR [rbx+0x5d]
0xff6e1:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0xff775:	add    esp,0x8
0xff774:	add    rsp,0x8
0xff79b:	add    esp,0x8
0xff79a:	add    rsp,0x8
0xff7cb:	add    esp,0x8
0xff7ca:	add    rsp,0x8
0xff80b:	mov    dh,0xc0
0xff80a:	movzx  eax,al
0xff809:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0xff813:	add    BYTE PTR [rax],al
0xff811:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xff8dd:	pop    rbp
0xff8dc:	pop    r13
0xff8db:	pop    rsp; 	pop    r13
0xff8da:	pop    r12; 	pop    r13
0xff95f:	add    BYTE PTR [rax-0x7d],cl
0xff9ce:	adc    cl,BYTE PTR [rax-0x7d]
0xffa1d:	pop    rbp
0xffa1c:	pop    r13
0xffa1b:	pop    rsp; 	pop    r13
0xffa1a:	pop    r12; 	pop    r13
0xffa64:	add    esp,0x8
0xffa63:	add    rsp,0x8
0xfface:	add    esp,0x8
0xffacd:	add    rsp,0x8
0xffaf1:	add    esp,0x8
0xffaf0:	add    rsp,0x8
0xffb35:	add    BYTE PTR [rax-0x77],cl
0xffbea:	pop    rdi
0xffbe9:	pop    r15
0xffbe8:	pop    rsi; 	pop    r15
0xffbe7:	pop    r14; 	pop    r15
0xffce5:	dec    DWORD PTR [rax-0x77]
0xffd53:	sbb    al,0x83
0xffd6c:	pop    rbp
0xffd6b:	pop    rbp; 	pop    rbp
0xffd6a:	pop    r13; 	pop    rbp
0xffd69:	pop    rsp; 	pop    r13; 	pop    rbp
0xffdf4:	add    BYTE PTR [rax],al
0xffe93:	pop    rbp
0xffe92:	pop    r13
0xffe91:	pop    rsp; 	pop    r13
0xffe90:	pop    r12; 	pop    r13
0xffec7:	pop    rbp
0xffec6:	pop    r13
0xffec5:	pop    rsp; 	pop    r13
0xffec4:	pop    r12; 	pop    r13
0x100305:	pop    rsi
0x100304:	pop    r14
0x100303:	pop    rbp; 	pop    r14
0x100302:	pop    r13; 	pop    r14
0x100889:	pop    rdi
0x100888:	pop    r15
0x100887:	pop    rsi; 	pop    r15
0x100886:	pop    r14; 	pop    r15
0x100be7:	add    BYTE PTR [rax],al
0x100be5:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x100ea1:	pop    rdi
0x100ea0:	pop    r15
0x100e9f:	pop    rsi; 	pop    r15
0x100e9e:	pop    r14; 	pop    r15
0x101273:	pop    rbp
0x101272:	pop    r13
0x101271:	pop    rsp; 	pop    r13
0x101270:	pop    r12; 	pop    r13
0x101488:	add    esp,0x8
0x101487:	add    rsp,0x8
0x1014af:	add    bl,dh
0x1014df:	jae    0x1014e2
0x1014de:	push   QWORD PTR [rbx+0x1]
0x1014ef:	or     eax,0xffffffff
0x1014ee:	or     rax,0xffffffffffffffff
0x1015e7:	pop    rsp
0x1015e6:	pop    r12
0x1015e5:	pop    rbp; 	pop    r12
0x1015e4:	pop    rbx; 	pop    rbp; 	pop    r12
0x1016cb:	pop    rdi
0x1016ca:	pop    r15
0x1016c9:	pop    rsi; 	pop    r15
0x1016c8:	pop    r14; 	pop    r15
0x10174d:	jae    0x101750
0x10174c:	push   QWORD PTR [rbx+0x1]
0x10175d:	or     eax,0xffffffff
0x10175c:	or     rax,0xffffffffffffffff
0x10177d:	jae    0x101780
0x10177c:	push   QWORD PTR [rbx+0x1]
0x10178d:	or     eax,0xffffffff
0x10178c:	or     rax,0xffffffffffffffff
0x1017b6:	jae    0x1017e9
0x1017b5:	push   QWORD PTR [rbx+0x31]
0x1017e6:	jae    0x1017e9
0x1017e5:	push   QWORD PTR [rbx+0x1]
0x1017f6:	or     eax,0xffffffff
0x1017f5:	or     rax,0xffffffffffffffff
0x10180d:	jae    0x101810
0x10180c:	push   QWORD PTR [rbx+0x1]
0x10181d:	or     eax,0xffffffff
0x10181c:	or     rax,0xffffffffffffffff
0x10183d:	jae    0x101840
0x10183c:	push   QWORD PTR [rbx+0x1]
0x10184d:	or     eax,0xffffffff
0x10184c:	or     rax,0xffffffffffffffff
0x101870:	jae    0x101873
0x10186f:	push   QWORD PTR [rbx+0x1]
0x101880:	or     eax,0xffffffff
0x10187f:	or     rax,0xffffffffffffffff
0x10189d:	jae    0x1018a0
0x10189c:	push   QWORD PTR [rbx+0x1]
0x1018ad:	or     eax,0xffffffff
0x1018ac:	or     rax,0xffffffffffffffff
0x1018cd:	jae    0x1018d0
0x1018cc:	push   QWORD PTR [rbx+0x1]
0x1018dd:	or     eax,0xffffffff
0x1018dc:	or     rax,0xffffffffffffffff
0x1018fd:	jae    0x101900
0x1018fc:	push   QWORD PTR [rbx+0x1]
0x10190d:	or     eax,0xffffffff
0x10190c:	or     rax,0xffffffffffffffff
0x10192d:	jae    0x101930
0x10192c:	push   QWORD PTR [rbx+0x1]
0x10193d:	or     eax,0xffffffff
0x10193c:	or     rax,0xffffffffffffffff
0x101995:	pop    rsp
0x101994:	pop    r12
0x101993:	pop    rbp; 	pop    r12
0x101992:	pop    rbx; 	pop    rbp; 	pop    r12
0x1019d1:	pop    rsp
0x1019d0:	pop    r12
0x1019cf:	pop    rbp; 	pop    r12
0x1019ce:	pop    rbx; 	pop    rbp; 	pop    r12
0x101a2e:	add    esp,0x8
0x101a2d:	add    rsp,0x8
0x101a66:	pop    rbx
0x101a64:	mov    eax,ebx; 	pop    rbx
0x101a63:	mov    rax,rbx; 	pop    rbx
0x101b30:	add    BYTE PTR [rax-0x7d],cl
0x101b90:	pop    rdi
0x101b8f:	pop    r15
0x101b8e:	pop    rsi; 	pop    r15
0x101b8d:	pop    r14; 	pop    r15
0x101c17:	pop    rdi
0x101c16:	pop    r15
0x101c15:	pop    rsi; 	pop    r15
0x101c14:	pop    r14; 	pop    r15
0x101e33:	pop    rbp
0x101e32:	pop    rbx; 	pop    rbp
0x101e31:	or     BYTE PTR [rbx+0x5d],bl
0x101e61:	add    ebx,ebp
0x101f3f:	pop    rsp
0x101f3e:	pop    r12
0x101f3d:	pop    rbp; 	pop    r12
0x101f3c:	pop    rbx; 	pop    rbp; 	pop    r12
0x101f73:	pop    rsp
0x101f72:	pop    r12
0x101f71:	pop    rbp; 	pop    r12
0x101f70:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x101fc6:	add    esp,0x18
0x101fc5:	add    rsp,0x18
0x101ffd:	pop    rbx
0x101ffc:	pop    rdx; 	pop    rbx
0x101ffb:	fcomp  DWORD PTR [rdx+0x5b]
0x101ffa:	mov    eax,ebx; 	pop    rdx; 	pop    rbx
0x1020b0:	add    BYTE PTR [rax-0x7d],cl
0x102110:	pop    rdi
0x10210f:	pop    r15
0x10210e:	pop    rsi; 	pop    r15
0x10210d:	pop    r14; 	pop    r15
0x102193:	pop    rdi
0x102192:	pop    r15
0x102191:	pop    rsi; 	pop    r15
0x102190:	pop    r14; 	pop    r15
0x1023b5:	pop    rbp
0x1023b4:	pop    rbx; 	pop    rbp
0x1023b3:	or     BYTE PTR [rbx+0x5d],bl
0x102454:	add    ecx,ebx
0x1024cb:	add    esp,0x18
0x1024ca:	add    rsp,0x18
0x1024f2:	pop    rbx
0x1024f0:	je     0x1024f8; 	pop    rbx
0x1024ef:	add    BYTE PTR [rsi+rax*1+0x5b],dh
0x10257a:	pop    rbx
0x102578:	mov    dh,0xc0; 	pop    rbx
0x102577:	movzx  eax,al; 	pop    rbx
0x1025d8:	pop    rbx
0x1025d6:	add    BYTE PTR [rax],al; 	pop    rbx
0x1025ec:	add    BYTE PTR [rax],al
0x1026c4:	and    al,0x39
0x102702:	pop    rdi
0x102701:	pop    r15
0x102700:	pop    rsi; 	pop    r15
0x1026ff:	pop    r14; 	pop    r15
0x102797:	pop    rdi
0x102796:	pop    r15
0x102795:	pop    rsi; 	pop    r15
0x102794:	pop    r14; 	pop    r15
0x102ea8:	lahf   
0x102ea5:	add    BYTE PTR [rcx+0xf],al; 	lahf   
0x102f95:	lahf   
0x102f92:	add    BYTE PTR [rcx+0xf],al; 	lahf   
0x102fec:	pop    rdi
0x102feb:	pop    r15
0x102fea:	pop    rsi; 	pop    r15
0x102fe9:	pop    r14; 	pop    r15
0x10307c:	pop    rdi
0x10307b:	pop    r15
0x10307a:	pop    rsi; 	pop    r15
0x103079:	pop    r14; 	pop    r15
0x103090:	pop    rdi
0x10308f:	pop    r15
0x10308e:	pop    rsi; 	pop    r15
0x10308d:	pop    r14; 	pop    r15
0x103137:	or     BYTE PTR [rax-0x7d],cl
0x10314f:	pop    rsp
0x10314e:	pop    r12
0x10314d:	pop    rbp; 	pop    r12
0x10314c:	rcr    BYTE PTR [rbp+0x41],0x5c
0x10315e:	pop    rsp
0x10315d:	pop    r12
0x10315c:	pop    rbp; 	pop    r12
0x10315b:	pop    rbx; 	pop    rbp; 	pop    r12
0x103160:	xor    eax,eax
0x10315f:	ret    ; 	xor    eax,eax
0x10315e:	pop    rsp; 	ret    ; 	xor    eax,eax
0x1031c3:	adc    BYTE PTR [rax-0x7d],cl
0x1031c2:	rex.RXB adc BYTE PTR [r8-0x7d],r9b
0x103208:	or     BYTE PTR [rax-0x7d],cl
0x103207:	rex.RXB or BYTE PTR [r8-0x7d],r9b
0x103225:	pop    rbp
0x103224:	pop    rdi; 	pop    rbp
0x103223:	pop    r15; 	pop    rbp
0x103222:	pop    rsi; 	pop    r15; 	pop    rbp
0x103411:	pop    rbp
0x103410:	pop    rdi; 	pop    rbp
0x10340f:	pop    r15; 	pop    rbp
0x10340e:	pop    rsi; 	pop    r15; 	pop    rbp
0x104065:	pop    rdi
0x104064:	pop    r15
0x104063:	pop    rsi; 	pop    r15
0x104062:	pop    r14; 	pop    r15
0x104937:	add    bl,dh
0x1049ab:	pop    rdi
0x1049aa:	pop    r15
0x1049a9:	pop    rsi; 	pop    r15
0x1049a8:	pop    r14; 	pop    r15
0x1049cb:	add    DWORD PTR [rax-0x77],ecx
0x104a40:	pop    rdi
0x104a3f:	pop    r15
0x104a3e:	pop    rsi; 	pop    r15
0x104a3d:	pop    r14; 	pop    r15
0x104a57:	pop    rdi
0x104a56:	pop    r15
0x104a55:	pop    rsi; 	pop    r15
0x104a54:	pop    r14; 	pop    r15
0x104a59:	xor    eax,eax
0x104a58:	ret    ; 	xor    eax,eax
0x104a57:	pop    rdi; 	ret    ; 	xor    eax,eax
0x104acd:	dec    DWORD PTR [rax+0x39]
0x104acc:	cli    ; 	dec    DWORD PTR [rax+0x39]
0x104b6c:	dec    DWORD PTR [rax+0x39]
0x104b6b:	cli    ; 	dec    DWORD PTR [rax+0x39]
0x104c34:	pop    rsp
0x104c33:	pop    r12
0x104c32:	pop    rbp; 	pop    r12
0x104c31:	pop    rbx; 	pop    rbp; 	pop    r12
0x104e36:	pop    rbp
0x104e35:	pop    r13
0x104e34:	pop    rsp; 	pop    r13
0x104e33:	pop    r12; 	pop    r13
0x104e9e:	pop    rbp
0x104e9d:	pop    r13
0x104e9c:	pop    rsp; 	pop    r13
0x104e9b:	pop    r12; 	pop    r13
0x104f75:	pop    rbp
0x104f74:	pop    rbx; 	pop    rbp
0x104f73:	add    BYTE PTR [rbx+0x5d],bl
0x104f72:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x104fc3:	pop    rbp
0x104fc2:	pop    rbx; 	pop    rbp
0x104fc1:	add    BYTE PTR [rbx+0x5d],bl
0x104fc0:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x10516c:	add    BYTE PTR [rax],al
0x1052da:	pop    rbp
0x1052d9:	pop    rdi; 	pop    rbp
0x1052d8:	pop    r15; 	pop    rbp
0x1052d7:	pop    rsi; 	pop    r15; 	pop    rbp
0x10537b:	pop    rbp
0x10537a:	pop    rdi; 	pop    rbp
0x105379:	pop    r15; 	pop    rbp
0x105378:	pop    rsi; 	pop    r15; 	pop    rbp
0x10548e:	pop    rsp
0x10548d:	pop    r12
0x10548c:	pop    rbp; 	pop    r12
0x10548b:	pop    rbx; 	pop    rbp; 	pop    r12
0x10562e:	pop    rsi
0x10562d:	pop    r14
0x10562c:	pop    rbp; 	pop    r14
0x10562b:	pop    r13; 	pop    r14
0x1056c5:	or     dh,bl
0x105768:	pop    rdi
0x105767:	pop    r15
0x105766:	pop    rsi; 	pop    r15
0x105765:	pop    r14; 	pop    r15
0x105a7b:	pop    rbp
0x105a7a:	pop    rdi; 	pop    rbp
0x105a79:	pop    r15; 	pop    rbp
0x105a78:	pop    rsi; 	pop    r15; 	pop    rbp
0x105ba4:	pop    rbp
0x105ba3:	pop    rdi; 	pop    rbp
0x105ba2:	pop    r15; 	pop    rbp
0x105ba1:	pop    rsi; 	pop    r15; 	pop    rbp
0x105ca5:	or     BYTE PTR [rax+0x39],cl
0x105cd4:	pop    rbp
0x105cd3:	pop    r13
0x105cd2:	pop    rsp; 	pop    r13
0x105cd1:	pop    r12; 	pop    r13
0x105d41:	pop    rbp
0x105d40:	pop    rbx; 	pop    rbp
0x105d3f:	js     0x105d9c; 	pop    rbp
0x105db1:	pop    rbp
0x105db0:	pop    rbx; 	pop    rbp
0x105daf:	js     0x105e0c; 	pop    rbp
0x105e34:	pop    rbx
0x105e32:	add    al,BYTE PTR [rax]; 	pop    rbx
0x105e31:	mov    BYTE PTR [rdx],0x0; 	pop    rbx
0x105e72:	pop    rbx
0x105e70:	mov    eax,ebx; 	pop    rbx
0x105e6f:	mov    rax,rbx; 	pop    rbx
0x105f23:	add    DWORD PTR [rax-0x7d],ecx
0x105f60:	pop    rsi
0x105f5f:	pop    r14
0x105f5e:	pop    rbp; 	pop    r14
0x105f5d:	pop    r13; 	pop    r14
0x105f76:	pop    rsi
0x105f75:	pop    r14
0x105f74:	pop    rbp; 	pop    r14
0x105f73:	pop    r13; 	pop    r14
0x105f9c:	pop    rsi
0x105f9b:	pop    r14
0x105f9a:	pop    rbp; 	pop    r14
0x105f99:	pop    r13; 	pop    r14
0x105fd1:	cmove  eax,edx
0x105ff0:	jae    0x105ff3
0x105fef:	push   QWORD PTR [rbx+0x1]
0x106000:	or     eax,0xffffffff
0x105fff:	or     rax,0xffffffffffffffff
0x10601d:	jae    0x106020
0x10601c:	push   QWORD PTR [rbx+0x1]
0x10602d:	or     eax,0xffffffff
0x10602c:	or     rax,0xffffffffffffffff
0x10604d:	jae    0x106050
0x10604c:	push   QWORD PTR [rbx+0x1]
0x10605d:	or     eax,0xffffffff
0x10605c:	or     rax,0xffffffffffffffff
0x106080:	jae    0x106083
0x10607f:	push   QWORD PTR [rbx+0x1]
0x106090:	or     eax,0xffffffff
0x10608f:	or     rax,0xffffffffffffffff
0x1060b0:	jae    0x1060b3
0x1060af:	push   QWORD PTR [rbx+0x1]
0x1060c0:	or     eax,0xffffffff
0x1060bf:	or     rax,0xffffffffffffffff
0x1060dd:	jae    0x1060e0
0x1060dc:	push   QWORD PTR [rbx+0x1]
0x1060ed:	or     eax,0xffffffff
0x1060ec:	or     rax,0xffffffffffffffff
0x106110:	jae    0x106113
0x10610f:	push   QWORD PTR [rbx+0x1]
0x106120:	or     eax,0xffffffff
0x10611f:	or     rax,0xffffffffffffffff
0x10613d:	jae    0x106140
0x10613c:	push   QWORD PTR [rbx+0x1]
0x10614d:	or     eax,0xffffffff
0x10614c:	or     rax,0xffffffffffffffff
0x10616d:	jae    0x106170
0x10616c:	push   QWORD PTR [rbx+0x1]
0x10617d:	or     eax,0xffffffff
0x10617c:	or     rax,0xffffffffffffffff
0x1061a0:	jae    0x1061a3
0x10619f:	push   QWORD PTR [rbx+0x1]
0x1061b0:	or     eax,0xffffffff
0x1061af:	or     rax,0xffffffffffffffff
0x1061cd:	jae    0x1061d0
0x1061cc:	push   QWORD PTR [rbx+0x1]
0x1061dd:	or     eax,0xffffffff
0x1061dc:	or     rax,0xffffffffffffffff
0x106200:	jae    0x106203
0x1061ff:	push   QWORD PTR [rbx+0x1]
0x106210:	or     eax,0xffffffff
0x10620f:	or     rax,0xffffffffffffffff
0x10625f:	xor    eax,eax
0x10625d:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x106269:	mov    eax,DWORD PTR [rax+0x8]
0x106268:	mov    rax,QWORD PTR [rax+0x8]
0x106273:	pop    rax
0x106272:	rex pop rax
0x106271:	mov    eax,DWORD PTR [rax+0x58]
0x106270:	mov    rax,QWORD PTR [rax+0x58]
0x10627d:	add    BYTE PTR [rax],al
0x10627b:	or     BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x106319:	pop    rbp
0x106318:	pop    rbx; 	pop    rbp
0x106317:	or     BYTE PTR [rbx+0x5d],bl
0x1063e5:	pop    rbp
0x1063e4:	pop    rbx; 	pop    rbp
0x1063e3:	add    BYTE PTR [rbx+0x5d],bl
0x1063e2:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x1072ed:	jae    0x1072f0
0x1072ec:	push   QWORD PTR [rbx+0x1]
0x1072fd:	or     eax,0xffffffff
0x1072fc:	or     rax,0xffffffffffffffff
0x10731d:	jae    0x107320
0x10731c:	push   QWORD PTR [rbx+0x1]
0x10732d:	or     eax,0xffffffff
0x10732c:	or     rax,0xffffffffffffffff
0x107385:	or     dh,bl
0x1073e6:	je     0x1073e9
0x1073e4:	jl     0x107425; 	je     0x1073e9
0x107432:	or     eax,0xffffffff
0x107431:	or     rax,0xffffffffffffffff
0x10744d:	jae    0x107450
0x10744c:	push   QWORD PTR [rbx+0x1]
0x10745d:	or     eax,0xffffffff
0x10745c:	or     rax,0xffffffffffffffff
0x10748d:	jae    0x107490
0x10748c:	push   QWORD PTR [rbx+0x1]
0x10749d:	or     eax,0xffffffff
0x10749c:	or     rax,0xffffffffffffffff
0x1074bd:	jae    0x1074c0
0x1074bc:	push   QWORD PTR [rbx+0x1]
0x1074cd:	or     eax,0xffffffff
0x1074cc:	or     rax,0xffffffffffffffff
0x1074ed:	jae    0x1074f0
0x1074ec:	push   QWORD PTR [rbx+0x1]
0x1074fd:	or     eax,0xffffffff
0x1074fc:	or     rax,0xffffffffffffffff
0x10751d:	jae    0x107520
0x10751c:	push   QWORD PTR [rbx+0x1]
0x10752d:	or     eax,0xffffffff
0x10752c:	or     rax,0xffffffffffffffff
0x107557:	clc    
0x107556:	or     eax,edi
0x107555:	add    BYTE PTR [rcx],cl; 	clc    
0x107554:	add    BYTE PTR [rax],al; 	or     eax,edi
0x10756e:	clc    
0x10756d:	or     eax,edi
0x10756c:	ror    BYTE PTR [rcx],0xf8
0x10756b:	xor    al,al; 	or     eax,edi
0x107599:	clc    
0x107598:	or     eax,edi
0x107597:	or     rax,rdi
0x107596:	lock or rax,rdi
0x1075c6:	ja     0x1075d0
0x1075c5:	push   QWORD PTR [rdi+0x8]
0x10764b:	pop    rdi
0x10764a:	pop    r15
0x107649:	pop    rsi; 	pop    r15
0x107648:	pop    r14; 	pop    r15
0x1076b3:	or     al,0xf3
0x1076fc:	neg    eax
0x1076fa:	mov    dh,0xc0; 	neg    eax
0x107726:	neg    eax
0x107724:	mov    dh,0xc0; 	neg    eax
0x107740:	jae    0x107743
0x10773f:	push   QWORD PTR [rbx+0x1]
0x107750:	or     eax,0xffffffff
0x10774f:	or     rax,0xffffffffffffffff
0x10776d:	jae    0x107770
0x10776c:	push   QWORD PTR [rbx+0x1]
0x10777d:	or     eax,0xffffffff
0x10777c:	or     rax,0xffffffffffffffff
0x10779d:	jae    0x1077a0
0x10779c:	push   QWORD PTR [rbx+0x1]
0x1077ad:	or     eax,0xffffffff
0x1077ac:	or     rax,0xffffffffffffffff
0x1077cd:	jae    0x1077d0
0x1077cc:	push   QWORD PTR [rbx+0x1]
0x1077dd:	or     eax,0xffffffff
0x1077dc:	or     rax,0xffffffffffffffff
0x1077f5:	syscall 
0x1077f3:	add    BYTE PTR [rax],al; 	syscall 
0x107810:	jae    0x107813
0x10780f:	push   QWORD PTR [rbx+0x1]
0x107820:	or     eax,0xffffffff
0x10781f:	or     rax,0xffffffffffffffff
0x10783d:	jae    0x107840
0x10783c:	push   QWORD PTR [rbx+0x1]
0x10784d:	or     eax,0xffffffff
0x10784c:	or     rax,0xffffffffffffffff
0x10786d:	jae    0x107870
0x10786c:	push   QWORD PTR [rbx+0x1]
0x10787d:	or     eax,0xffffffff
0x10787c:	or     rax,0xffffffffffffffff
0x10789d:	jae    0x1078a0
0x10789c:	push   QWORD PTR [rbx+0x1]
0x1078ad:	or     eax,0xffffffff
0x1078ac:	or     rax,0xffffffffffffffff
0x1078cd:	jae    0x1078d0
0x1078cc:	push   QWORD PTR [rbx+0x1]
0x1078dd:	or     eax,0xffffffff
0x1078dc:	or     rax,0xffffffffffffffff
0x1078fd:	jae    0x107900
0x1078fc:	push   QWORD PTR [rbx+0x1]
0x10790d:	or     eax,0xffffffff
0x10790c:	or     rax,0xffffffffffffffff
0x10792d:	jae    0x107930
0x10792c:	push   QWORD PTR [rbx+0x1]
0x10793d:	or     eax,0xffffffff
0x10793c:	or     rax,0xffffffffffffffff
0x10795d:	jae    0x107960
0x10795c:	push   QWORD PTR [rbx+0x1]
0x10796d:	or     eax,0xffffffff
0x10796c:	or     rax,0xffffffffffffffff
0x10798d:	jae    0x107990
0x10798c:	push   QWORD PTR [rbx+0x1]
0x10799d:	or     eax,0xffffffff
0x10799c:	or     rax,0xffffffffffffffff
0x1079c0:	jae    0x1079c3
0x1079bf:	push   QWORD PTR [rbx+0x1]
0x1079d0:	or     eax,0xffffffff
0x1079cf:	or     rax,0xffffffffffffffff
0x1079f9:	jae    0x107a2f
0x1079f8:	push   QWORD PTR [rbx+0x34]
0x107a2c:	jae    0x107a2f
0x107a2b:	push   QWORD PTR [rbx+0x1]
0x107a3c:	or     eax,0xffffffff
0x107a3b:	or     rax,0xffffffffffffffff
0x107a4d:	jae    0x107a50
0x107a4c:	push   QWORD PTR [rbx+0x1]
0x107a5d:	or     eax,0xffffffff
0x107a5c:	or     rax,0xffffffffffffffff
0x107a80:	jae    0x107a83
0x107a7f:	push   QWORD PTR [rbx+0x1]
0x107a86:	out    dx,al
0x107a90:	or     eax,0xffffffff
0x107a8f:	or     rax,0xffffffffffffffff
0x107aad:	jae    0x107ab0
0x107aac:	push   QWORD PTR [rbx+0x1]
0x107abd:	or     eax,0xffffffff
0x107abc:	or     rax,0xffffffffffffffff
0x107add:	jae    0x107ae0
0x107adc:	push   QWORD PTR [rbx+0x1]
0x107ae3:	xchg   ecx,eax
0x107aed:	or     eax,0xffffffff
0x107aec:	or     rax,0xffffffffffffffff
0x107b0d:	jae    0x107b10
0x107b0c:	push   QWORD PTR [rbx+0x1]
0x107b1d:	or     eax,0xffffffff
0x107b1c:	or     rax,0xffffffffffffffff
0x107b3d:	jae    0x107b40
0x107b3c:	push   QWORD PTR [rbx+0x1]
0x107b4d:	or     eax,0xffffffff
0x107b4c:	or     rax,0xffffffffffffffff
0x107b6d:	jae    0x107b70
0x107b6c:	push   QWORD PTR [rbx+0x1]
0x107b7d:	or     eax,0xffffffff
0x107b7c:	or     rax,0xffffffffffffffff
0x107ba0:	jae    0x107ba3
0x107b9f:	push   QWORD PTR [rbx+0x1]
0x107bb0:	or     eax,0xffffffff
0x107baf:	or     rax,0xffffffffffffffff
0x107bd0:	jae    0x107bd3
0x107bcf:	push   QWORD PTR [rbx+0x1]
0x107be0:	or     eax,0xffffffff
0x107bdf:	or     rax,0xffffffffffffffff
0x107bfd:	jae    0x107c00
0x107bfc:	push   QWORD PTR [rbx+0x1]
0x107c0d:	or     eax,0xffffffff
0x107c0c:	or     rax,0xffffffffffffffff
0x107c2d:	jae    0x107c30
0x107c2c:	push   QWORD PTR [rbx+0x1]
0x107c3d:	or     eax,0xffffffff
0x107c3c:	or     rax,0xffffffffffffffff
0x107c60:	jae    0x107c63
0x107c5f:	push   QWORD PTR [rbx+0x1]
0x107c70:	or     eax,0xffffffff
0x107c6f:	or     rax,0xffffffffffffffff
0x107c90:	jae    0x107c93
0x107c8f:	push   QWORD PTR [rbx+0x1]
0x107ca0:	or     eax,0xffffffff
0x107c9f:	or     rax,0xffffffffffffffff
0x107cc0:	jae    0x107cc3
0x107cbf:	push   QWORD PTR [rbx+0x1]
0x107cd0:	or     eax,0xffffffff
0x107ccf:	or     rax,0xffffffffffffffff
0x107cf9:	jae    0x107d2f
0x107cf8:	push   QWORD PTR [rbx+0x34]
0x107d2c:	jae    0x107d2f
0x107d2b:	push   QWORD PTR [rbx+0x1]
0x107d3c:	or     eax,0xffffffff
0x107d3b:	or     rax,0xffffffffffffffff
0x107d4d:	jae    0x107d50
0x107d4c:	push   QWORD PTR [rbx+0x1]
0x107d5d:	or     eax,0xffffffff
0x107d5c:	or     rax,0xffffffffffffffff
0x107d89:	jae    0x107dbf
0x107d88:	push   QWORD PTR [rbx+0x34]
0x107dbc:	jae    0x107dbf
0x107dbb:	push   QWORD PTR [rbx+0x1]
0x107dcc:	or     eax,0xffffffff
0x107dcb:	or     rax,0xffffffffffffffff
0x107ddd:	jae    0x107de0
0x107ddc:	push   QWORD PTR [rbx+0x1]
0x107ded:	or     eax,0xffffffff
0x107dec:	or     rax,0xffffffffffffffff
0x107e0d:	jae    0x107e10
0x107e0c:	push   QWORD PTR [rbx+0x1]
0x107e1d:	or     eax,0xffffffff
0x107e1c:	or     rax,0xffffffffffffffff
0x107e49:	jae    0x107e7f
0x107e48:	push   QWORD PTR [rbx+0x34]
0x107e7c:	jae    0x107e7f
0x107e7b:	push   QWORD PTR [rbx+0x1]
0x107e8c:	or     eax,0xffffffff
0x107e8b:	or     rax,0xffffffffffffffff
0x107e9d:	jae    0x107ea0
0x107e9c:	push   QWORD PTR [rbx+0x1]
0x107ead:	or     eax,0xffffffff
0x107eac:	or     rax,0xffffffffffffffff
0x107ed0:	jae    0x107ed3
0x107ecf:	push   QWORD PTR [rbx+0x1]
0x107ee0:	or     eax,0xffffffff
0x107edf:	or     rax,0xffffffffffffffff
0x107efd:	jae    0x107f00
0x107efc:	push   QWORD PTR [rbx+0x1]
0x107f0d:	or     eax,0xffffffff
0x107f0c:	or     rax,0xffffffffffffffff
0x107f2d:	jae    0x107f30
0x107f2c:	push   QWORD PTR [rbx+0x1]
0x107f3d:	or     eax,0xffffffff
0x107f3c:	or     rax,0xffffffffffffffff
0x107f60:	jae    0x107f63
0x107f5f:	push   QWORD PTR [rbx+0x1]
0x107f70:	or     eax,0xffffffff
0x107f6f:	or     rax,0xffffffffffffffff
0x107f96:	jae    0x107fc9
0x107f95:	push   QWORD PTR [rbx+0x31]
0x107fc6:	jae    0x107fc9
0x107fc5:	push   QWORD PTR [rbx+0x1]
0x107fd6:	or     eax,0xffffffff
0x107fd5:	or     rax,0xffffffffffffffff
0x107fed:	jae    0x107ff0
0x107fec:	push   QWORD PTR [rbx+0x1]
0x107ffd:	or     eax,0xffffffff
0x107ffc:	or     rax,0xffffffffffffffff
0x108020:	jae    0x108023
0x10801f:	push   QWORD PTR [rbx+0x1]
0x108030:	or     eax,0xffffffff
0x10802f:	or     rax,0xffffffffffffffff
0x108050:	jae    0x108053
0x10804f:	push   QWORD PTR [rbx+0x1]
0x108060:	or     eax,0xffffffff
0x10805f:	or     rax,0xffffffffffffffff
0x1080a6:	jae    0x1080d9
0x1080a5:	push   QWORD PTR [rbx+0x31]
0x1080d6:	jae    0x1080d9
0x1080d5:	push   QWORD PTR [rbx+0x1]
0x1080e6:	or     eax,0xffffffff
0x1080e5:	or     rax,0xffffffffffffffff
0x1080fd:	jae    0x108100
0x1080fc:	push   QWORD PTR [rbx+0x1]
0x10810d:	or     eax,0xffffffff
0x10810c:	or     rax,0xffffffffffffffff
0x108136:	jae    0x108169
0x108135:	push   QWORD PTR [rbx+0x31]
0x108166:	jae    0x108169
0x108165:	push   QWORD PTR [rbx+0x1]
0x108176:	or     eax,0xffffffff
0x108175:	or     rax,0xffffffffffffffff
0x10818d:	jae    0x108190
0x10818c:	push   QWORD PTR [rbx+0x1]
0x10819d:	or     eax,0xffffffff
0x10819c:	or     rax,0xffffffffffffffff
0x1081bd:	jae    0x1081c0
0x1081bc:	push   QWORD PTR [rbx+0x1]
0x1081cd:	or     eax,0xffffffff
0x1081cc:	or     rax,0xffffffffffffffff
0x1081f0:	jae    0x1081f3
0x1081ef:	push   QWORD PTR [rbx+0x1]
0x108200:	or     eax,0xffffffff
0x1081ff:	or     rax,0xffffffffffffffff
0x10821d:	jae    0x108220
0x10821c:	push   QWORD PTR [rbx+0x1]
0x10822d:	or     eax,0xffffffff
0x10822c:	or     rax,0xffffffffffffffff
0x108263:	ja     0x108270
0x108262:	push   QWORD PTR [rdi+0xb]
0x1082e3:	pop    rsi
0x1082e2:	pop    r14
0x1082e1:	pop    rbp; 	pop    r14
0x1082e0:	pop    r13; 	pop    r14
0x108319:	jae    0x10834f
0x108318:	push   QWORD PTR [rbx+0x34]
0x10834c:	jae    0x10834f
0x10834b:	push   QWORD PTR [rbx+0x1]
0x10835c:	or     eax,0xffffffff
0x10835b:	or     rax,0xffffffffffffffff
0x108376:	jae    0x1083a9
0x108375:	push   QWORD PTR [rbx+0x31]
0x1083a6:	jae    0x1083a9
0x1083a5:	push   QWORD PTR [rbx+0x1]
0x1083b6:	or     eax,0xffffffff
0x1083b5:	or     rax,0xffffffffffffffff
0x1083e3:	ja     0x1083f0
0x1083e2:	push   QWORD PTR [rdi+0xb]
0x108463:	pop    rsi
0x108462:	pop    r14
0x108461:	pop    rbp; 	pop    r14
0x108460:	pop    r13; 	pop    r14
0x108496:	jae    0x1084c9
0x108495:	push   QWORD PTR [rbx+0x31]
0x1084c6:	jae    0x1084c9
0x1084c5:	push   QWORD PTR [rbx+0x1]
0x1084d6:	or     eax,0xffffffff
0x1084d5:	or     rax,0xffffffffffffffff
0x1084f9:	jae    0x10852f
0x1084f8:	push   QWORD PTR [rbx+0x34]
0x10852c:	jae    0x10852f
0x10852b:	push   QWORD PTR [rbx+0x1]
0x10853c:	or     eax,0xffffffff
0x10853b:	or     rax,0xffffffffffffffff
0x108550:	jae    0x108553
0x10854f:	push   QWORD PTR [rbx+0x1]
0x108560:	or     eax,0xffffffff
0x10855f:	or     rax,0xffffffffffffffff
0x10857d:	jae    0x108580
0x10857c:	push   QWORD PTR [rbx+0x1]
0x10858d:	or     eax,0xffffffff
0x10858c:	or     rax,0xffffffffffffffff
0x1085ad:	jae    0x1085b0
0x1085ac:	push   QWORD PTR [rbx+0x1]
0x1085bd:	or     eax,0xffffffff
0x1085bc:	or     rax,0xffffffffffffffff
0x1085e0:	jae    0x1085e3
0x1085df:	push   QWORD PTR [rbx+0x1]
0x1085f0:	or     eax,0xffffffff
0x1085ef:	or     rax,0xffffffffffffffff
0x10864a:	pop    rsp
0x108649:	pop    r12
0x108648:	pop    rbp; 	pop    r12
0x108647:	pop    rbx; 	pop    rbp; 	pop    r12
0x108699:	pop    rdi
0x108698:	pop    r15
0x108697:	pop    rsi; 	pop    r15
0x108696:	pop    r14; 	pop    r15
0x10884f:	add    esp,0x18
0x10884e:	add    rsp,0x18
0x10887d:	ja     0x108880
0x10887c:	push   QWORD PTR [rdi+0x1]
0x1088e9:	pop    rbp
0x1088e8:	pop    r13
0x1088e7:	pop    rsp; 	pop    r13
0x1088e6:	pop    r12; 	pop    r13
0x10891f:	ja     0x108928
0x10891e:	push   QWORD PTR [rdi+0x7]
0x108999:	pop    rsi
0x108998:	pop    r14
0x108997:	pop    rbp; 	pop    r14
0x108996:	pop    r13; 	pop    r14
0x1089cf:	ja     0x1089d8
0x1089ce:	push   QWORD PTR [rdi+0x7]
0x108a3f:	pop    rbp
0x108a3e:	pop    r13
0x108a3d:	pop    rsp; 	pop    r13
0x108a3c:	pop    r12; 	pop    r13
0x108abc:	cmovae eax,esi
0x108abb:	cmovae rax,rsi
0x108ac0:	xor    eax,eax
0x108abf:	ret    ; 	xor    eax,eax
0x108b08:	pop    rbx
0x108b06:	add    BYTE PTR [rax],al; 	pop    rbx
0x108b39:	jae    0x108b6f
0x108b38:	push   QWORD PTR [rbx+0x34]
0x108b6c:	jae    0x108b6f
0x108b6b:	push   QWORD PTR [rbx+0x1]
0x108b7c:	or     eax,0xffffffff
0x108b7b:	or     rax,0xffffffffffffffff
0x108b99:	jae    0x108bcf
0x108b98:	push   QWORD PTR [rbx+0x34]
0x108bcc:	jae    0x108bcf
0x108bcb:	push   QWORD PTR [rbx+0x1]
0x108bdc:	or     eax,0xffffffff
0x108bdb:	or     rax,0xffffffffffffffff
0x108bed:	jae    0x108bf0
0x108bec:	push   QWORD PTR [rbx+0x1]
0x108bfd:	or     eax,0xffffffff
0x108bfc:	or     rax,0xffffffffffffffff
0x108c1d:	jae    0x108c20
0x108c1c:	push   QWORD PTR [rbx+0x1]
0x108c2d:	or     eax,0xffffffff
0x108c2c:	or     rax,0xffffffffffffffff
0x108c4d:	jae    0x108c50
0x108c4c:	push   QWORD PTR [rbx+0x1]
0x108c5d:	or     eax,0xffffffff
0x108c5c:	or     rax,0xffffffffffffffff
0x108c7d:	jae    0x108c80
0x108c7c:	push   QWORD PTR [rbx+0x1]
0x108c8d:	or     eax,0xffffffff
0x108c8c:	or     rax,0xffffffffffffffff
0x108cb0:	jae    0x108cb3
0x108caf:	push   QWORD PTR [rbx+0x1]
0x108cc0:	or     eax,0xffffffff
0x108cbf:	or     rax,0xffffffffffffffff
0x108ce0:	jae    0x108ce3
0x108cdf:	push   QWORD PTR [rbx+0x1]
0x108cf0:	or     eax,0xffffffff
0x108cef:	or     rax,0xffffffffffffffff
0x108d0d:	jae    0x108d10
0x108d0c:	push   QWORD PTR [rbx+0x1]
0x108d1d:	or     eax,0xffffffff
0x108d1c:	or     rax,0xffffffffffffffff
0x108d3d:	jae    0x108d40
0x108d3c:	push   QWORD PTR [rbx+0x1]
0x108d4d:	or     eax,0xffffffff
0x108d4c:	or     rax,0xffffffffffffffff
0x108d6d:	jae    0x108d70
0x108d6c:	push   QWORD PTR [rbx+0x1]
0x108d7d:	or     eax,0xffffffff
0x108d7c:	or     rax,0xffffffffffffffff
0x108d9d:	jae    0x108da0
0x108d9c:	push   QWORD PTR [rbx+0x1]
0x108dad:	or     eax,0xffffffff
0x108dac:	or     rax,0xffffffffffffffff
0x10920f:	pop    rbp
0x10920e:	pop    rdi; 	pop    rbp
0x10920d:	pop    r15; 	pop    rbp
0x10920c:	pop    rsi; 	pop    r15; 	pop    rbp
0x10931d:	or     bl,dh
0x10935d:	add    ecx,DWORD PTR [rax-0x42]
0x10935c:	pop    rsi; 	add    ecx,DWORD PTR [rax-0x42]
0x109507:	pop    rbp
0x109506:	pop    r13
0x109505:	pop    rsp; 	pop    r13
0x109504:	pop    r12; 	pop    r13
0x109566:	pop    rbx
0x109564:	sub    eax,DWORD PTR [rax]; 	pop    rbx
0x109563:	lods   al,BYTE PTR ds:[rsi]; 	sub    eax,DWORD PTR [rax]; 	pop    rbx
0x1095b6:	pop    rbp
0x1095b4:	je     0x1095b8; 	pop    rbp
0x1095b3:	add    BYTE PTR [rdx+rax*1+0x5d],dh
0x10962c:	pop    rbp
0x10962a:	add    BYTE PTR [rax],al; 	pop    rbp
0x109639:	pop    rbp
0x109637:	add    BYTE PTR [rax],al; 	pop    rbp
0x10971b:	add    DWORD PTR [rdx+rax*2],0x1
0x1098ac:	pop    rbp
0x1098ab:	pop    r13
0x1098aa:	pop    rsp; 	pop    r13
0x1098a9:	pop    r12; 	pop    r13
0x1098fd:	pop    rbp
0x1098fc:	pop    r13
0x1098fb:	pop    rsp; 	pop    r13
0x1098fa:	pop    r12; 	pop    r13
0x1099c0:	mov    DWORD PTR [rdx],eax
0x1099bf:	mov    WORD PTR [rdx],ax
0x1099d5:	add    BYTE PTR [rcx],al
0x1099d4:	add    DWORD PTR [rax],0x1
0x1099d3:	add    WORD PTR [rax],0x1
0x109a0c:	fdiv   st,st(3)
0x109ad6:	pop    rdi
0x109ad5:	pop    r15
0x109ad4:	pop    rsi; 	pop    r15
0x109ad3:	pop    r14; 	pop    r15
0x109aef:	pop    rdi
0x109aee:	pop    r15
0x109aed:	pop    rsi; 	pop    r15
0x109aec:	pop    r14; 	pop    r15
0x109c0e:	mov    DWORD PTR [rdx],eax
0x109c24:	add    BYTE PTR [rcx],al
0x109c23:	add    DWORD PTR [rax],0x1
0x109d9f:	add    BYTE PTR [rcx],bh
0x109d9d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rcx],bh
0x109e88:	add    DWORD PTR [rcx],edi
0x109e87:	rex.X add DWORD PTR [rcx],edi
0x109e9f:	add    bh,BYTE PTR [rcx]
0x109e9e:	rex.X add dil,BYTE PTR [rcx]
0x10a093:	pop    rbp
0x10a092:	pop    rdi; 	pop    rbp
0x10a091:	pop    r15; 	pop    rbp
0x10a090:	pop    rsi; 	pop    r15; 	pop    rbp
0x10a20c:	pop    rbp
0x10a20b:	pop    rdi; 	pop    rbp
0x10a20a:	pop    r15; 	pop    rbp
0x10a209:	pop    rsi; 	pop    r15; 	pop    rbp
0x10a2e4:	pop    rbp
0x10a2e3:	pop    rdi; 	pop    rbp
0x10a2e2:	pop    r15; 	pop    rbp
0x10a2e1:	pop    rsi; 	pop    r15; 	pop    rbp
0x10a347:	mov    eax,DWORD PTR [rax+0x38]
0x10a3a7:	add    esp,0x38
0x10a3a6:	add    rsp,0x38
0x10a408:	add    esp,0x40
0x10a407:	add    rsp,0x40
0x10a47f:	add    ebx,esi
0x10a49d:	mov    bh,0xc0
0x10a49c:	movzx  eax,ax
0x10a49b:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x10a50f:	add    ebx,esi
0x10a52e:	mov    bh,0xc0
0x10a52d:	movzx  eax,ax
0x10a52c:	add    al,0xf; 	mov    bh,0xc0
0x10a5af:	add    ebx,esi
0x10a5ca:	loopne 0x10a5cd
0x10a5c9:	and    eax,0x1
0x10a5c8:	js     0x10a54d; 	loopne 0x10a5cd
0x10a63f:	add    ebx,esi
0x10a65d:	mov    bh,0xc0
0x10a65c:	movzx  eax,ax
0x10a65b:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x10a6cf:	add    ebx,esi
0x10a6e0:	setbe  al
0x10a75f:	add    ebx,esi
0x10a77e:	mov    bh,0xc0
0x10a77d:	movzx  eax,ax
0x10a77c:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x10a7ff:	add    ebx,esi
0x10a81e:	mov    bh,0xc0
0x10a81d:	movzx  eax,ax
0x10a89f:	add    ebx,esi
0x10a8be:	mov    bh,0xc0
0x10a8bd:	movzx  eax,ax
0x10a8bc:	rex movzx eax,ax
0x10a93f:	add    ebx,esi
0x10a95d:	mov    bh,0xc0
0x10a95c:	movzx  eax,ax
0x10a95b:	add    al,0xf; 	mov    bh,0xc0
0x10a9cf:	add    ebx,esi
0x10a9ee:	mov    bh,0xc0
0x10a9ed:	movzx  eax,ax
0x10a9ec:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x10aa6a:	add    ebx,esi
0x10aa86:	mov    bh,0xc0
0x10aa85:	movzx  eax,ax
0x10aa84:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x10aaff:	add    ebx,esi
0x10ab1e:	mov    bh,0xc0
0x10ab1d:	movzx  eax,ax
0x10ab1c:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x10ab88:	or     dh,bl
0x10abe3:	or     dh,bl
0x10ac71:	pop    rdi
0x10ac70:	pop    r15
0x10ac6f:	pop    rsi; 	pop    r15
0x10ac6e:	pop    r14; 	pop    r15
0x10ac87:	pop    rdi
0x10ac86:	pop    r15
0x10ac85:	pop    rsi; 	pop    r15
0x10ac84:	pop    r14; 	pop    r15
0x10acdb:	add    ebx,esi
0x10ad51:	pop    rbp
0x10ad50:	pop    r13
0x10ad4f:	pop    rsp; 	pop    r13
0x10ad4e:	pop    r12; 	pop    r13
0x10ad63:	pop    rbp
0x10ad62:	pop    r13
0x10ad61:	pop    rsp; 	pop    r13
0x10ad60:	pop    r12; 	pop    r13
0x10adab:	add    al,0x11
0x10adaa:	add    eax,DWORD PTR [rcx+rdx*1]
0x10ada9:	mov    es,WORD PTR [rbx]; 	add    al,0x11
0x10ae21:	add    ebx,esi
0x10ae36:	mov    bh,0xc0
0x10ae35:	movzx  eax,ax
0x10ae34:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x10aea1:	add    ebx,esi
0x10aeb7:	mov    bh,0xc0
0x10aeb6:	movzx  eax,ax
0x10aeb5:	add    al,0xf; 	mov    bh,0xc0
0x10af21:	add    ebx,esi
0x10af33:	loopne 0x10af36
0x10af32:	and    eax,0x1
0x10af31:	js     0x10aeb6; 	loopne 0x10af36
0x10afa1:	add    ebx,esi
0x10afb6:	mov    bh,0xc0
0x10afb5:	movzx  eax,ax
0x10afb4:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x10b021:	add    ebx,esi
0x10b030:	setbe  al
0x10b0a1:	add    ebx,esi
0x10b0b7:	mov    bh,0xc0
0x10b0b6:	movzx  eax,ax
0x10b0b5:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x10b121:	add    ebx,esi
0x10b137:	mov    bh,0xc0
0x10b136:	movzx  eax,ax
0x10b1a1:	add    ebx,esi
0x10b1b7:	mov    bh,0xc0
0x10b1b6:	movzx  eax,ax
0x10b1b5:	rex movzx eax,ax
0x10b221:	add    ebx,esi
0x10b236:	mov    bh,0xc0
0x10b235:	movzx  eax,ax
0x10b234:	add    al,0xf; 	mov    bh,0xc0
0x10b2a1:	add    ebx,esi
0x10b2b7:	mov    bh,0xc0
0x10b2b6:	movzx  eax,ax
0x10b2b5:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x10b31e:	add    ebx,esi
0x10b337:	mov    bh,0xc0
0x10b336:	movzx  eax,ax
0x10b335:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x10b3a1:	add    ebx,esi
0x10b3b7:	mov    bh,0xc0
0x10b3b6:	movzx  eax,ax
0x10b3b5:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x10b40a:	or     dh,bl
0x10b457:	or     dh,bl
0x10b4d9:	pop    rdi
0x10b4d8:	pop    r15
0x10b4d7:	pop    rsi; 	pop    r15
0x10b4d6:	pop    r14; 	pop    r15
0x10b4ef:	pop    rdi
0x10b4ee:	pop    r15
0x10b4ed:	pop    rsi; 	pop    r15
0x10b4ec:	pop    r14; 	pop    r15
0x10b54b:	add    ebx,esi
0x10b5b1:	pop    rbp
0x10b5b0:	pop    r13
0x10b5af:	pop    rsp; 	pop    r13
0x10b5ae:	pop    r12; 	pop    r13
0x10b5c3:	pop    rbp
0x10b5c2:	pop    r13
0x10b5c1:	pop    rsp; 	pop    r13
0x10b5c0:	pop    r12; 	pop    r13
0x10b60b:	add    al,0x11
0x10b60a:	add    eax,DWORD PTR [rcx+rdx*1]
0x10b609:	mov    es,WORD PTR [rbx]; 	add    al,0x11
0x10b6d8:	add    esp,0x8
0x10b6d7:	add    rsp,0x8
0x10b80f:	pop    rbp
0x10b80e:	pop    r13
0x10b80d:	pop    rsp; 	pop    r13
0x10b80c:	pop    r12; 	pop    r13
0x10b999:	pop    rbp
0x10b998:	pop    r13
0x10b997:	pop    rsp; 	pop    r13
0x10b996:	pop    r12; 	pop    r13
0x10bb8b:	pop    rdi
0x10bb8a:	pop    r15
0x10bb89:	pop    rsi; 	pop    r15
0x10bb88:	pop    r14; 	pop    r15
0x10bbb1:	pop    rdi
0x10bbb0:	pop    r15
0x10bbaf:	pop    rsi; 	pop    r15
0x10bbae:	pop    r14; 	pop    r15
0x10bdfd:	pop    rbp
0x10bdfc:	pop    r13
0x10bdfb:	pop    rsp; 	pop    r13
0x10bdfa:	pop    r12; 	pop    r13
0x10c057:	fucomip st,st(0)
0x10c0cc:	pop    rbp
0x10c0cb:	pop    r13
0x10c0ca:	pop    rsp; 	pop    r13
0x10c0c9:	pop    r12; 	pop    r13
0x10c186:	add    esp,0x18
0x10c185:	add    rsp,0x18
0x10c252:	or     bl,dh
0x10c332:	add    esp,0x48
0x10c331:	add    rsp,0x48
0x10c469:	pop    rdi
0x10c468:	pop    r15
0x10c467:	pop    rsi; 	pop    r15
0x10c466:	pop    r14; 	pop    r15
0x10c48a:	pop    rdi
0x10c489:	pop    r15
0x10c488:	pop    rsi; 	pop    r15
0x10c487:	pop    r14; 	pop    r15
0x10c4a9:	pop    rdi
0x10c4a8:	pop    r15
0x10c4a7:	pop    rsi; 	pop    r15
0x10c4a6:	pop    r14; 	pop    r15
0x10c5ab:	or     ecx,DWORD PTR [rax-0x7d]
0x10c701:	add    BYTE PTR [rax-0x77],cl
0x10c71d:	adc    cl,BYTE PTR [rax-0x7d]
0x10c87d:	pop    rsi
0x10c87c:	pop    r14
0x10c87b:	pop    rbp; 	pop    r14
0x10c87a:	pop    r13; 	pop    r14
0x10c8f1:	pop    rsi
0x10c8f0:	pop    r14
0x10c8ef:	pop    rbp; 	pop    r14
0x10c8ee:	pop    r13; 	pop    r14
0x10c908:	dec    DWORD PTR [rax-0x7d]
0x10c938:	dec    DWORD PTR [rax-0x7d]
0x10c9a2:	pop    rsp
0x10c9a1:	pop    r12
0x10c9a0:	pop    rbp; 	pop    r12
0x10c99f:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x10c9de:	pop    rsp
0x10c9dd:	pop    r12
0x10c9dc:	pop    rbp; 	pop    r12
0x10c9db:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x10cbc2:	pop    rdi
0x10cbc1:	pop    r15
0x10cbc0:	pop    rsi; 	pop    r15
0x10cbbf:	pop    r14; 	pop    r15
0x10cc2f:	add    bl,dh
0x10cc2d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x10ce88:	pop    rbp
0x10ce87:	pop    r13
0x10ce86:	pop    rsp; 	pop    r13
0x10ce85:	pop    r12; 	pop    r13
0x10cea3:	pop    rbp
0x10cea2:	pop    r13
0x10cea1:	pop    rsp; 	pop    r13
0x10cea0:	pop    r12; 	pop    r13
0x10cfc0:	add    esp,0x8
0x10cfbf:	add    rsp,0x8
0x10cfcd:	mov    eax,edx
0x10d088:	add    esp,0x8
0x10d087:	add    rsp,0x8
0x10d1bf:	pop    rbp
0x10d1be:	pop    r13
0x10d1bd:	pop    rsp; 	pop    r13
0x10d1bc:	pop    r12; 	pop    r13
0x10d358:	pop    rsi
0x10d357:	pop    r14
0x10d356:	pop    rbp; 	pop    r14
0x10d355:	pop    r13; 	pop    r14
0x10d3dd:	pop    rsi
0x10d53b:	pop    rdi
0x10d53a:	pop    r15
0x10d539:	pop    rsi; 	pop    r15
0x10d538:	pop    r14; 	pop    r15
0x10d561:	pop    rdi
0x10d560:	pop    r15
0x10d55f:	pop    rsi; 	pop    r15
0x10d55e:	pop    r14; 	pop    r15
0x10d775:	pop    rdi
0x10d774:	pop    r15
0x10d773:	pop    rsi; 	pop    r15
0x10d772:	pop    r14; 	pop    r15
0x10d808:	pop    rdi
0x10d807:	pop    r15
0x10d806:	pop    rsi; 	pop    r15
0x10d805:	pop    r14; 	pop    r15
0x10d906:	add    esp,0x18
0x10d905:	add    rsp,0x18
0x10d9d2:	or     bl,dh
0x10dab2:	add    esp,0x48
0x10dab1:	add    rsp,0x48
0x10dbe9:	pop    rdi
0x10dbe8:	pop    r15
0x10dbe7:	pop    rsi; 	pop    r15
0x10dbe6:	pop    r14; 	pop    r15
0x10dc0a:	pop    rdi
0x10dc09:	pop    r15
0x10dc08:	pop    rsi; 	pop    r15
0x10dc07:	pop    r14; 	pop    r15
0x10dc29:	pop    rdi
0x10dc28:	pop    r15
0x10dc27:	pop    rsi; 	pop    r15
0x10dc26:	pop    r14; 	pop    r15
0x10dd9b:	or     ecx,DWORD PTR [rax-0x7d]
0x10de7b:	add    BYTE PTR [rax-0x77],cl
0x10df61:	add    BYTE PTR [rax-0x7d],cl
0x10df8c:	pop    rdi
0x10df8b:	pop    r15
0x10df8a:	pop    rsi; 	pop    r15
0x10df89:	pop    r14; 	pop    r15
0x10dfbe:	pop    rdi
0x10dfbd:	pop    r15
0x10dfbc:	pop    rsi; 	pop    r15
0x10dfbb:	pop    r14; 	pop    r15
0x10e022:	add    BYTE PTR [rax-0x7d],cl
0x10e03b:	dec    DWORD PTR [rax-0x7d]
0x10e0ae:	pop    rsi
0x10e0ad:	pop    r14
0x10e0ac:	pop    rbp; 	pop    r14
0x10e0ab:	pop    r13; 	pop    r14
0x10e0e7:	pop    rsi
0x10e0e6:	pop    r14
0x10e0e5:	pop    rbp; 	pop    r14
0x10e0e4:	pop    r13; 	pop    r14
0x10e103:	pop    rsi
0x10e102:	pop    r14
0x10e101:	pop    rbp; 	pop    r14
0x10e100:	pop    r13; 	pop    r14
0x10e2f2:	pop    rdi
0x10e2f1:	pop    r15
0x10e2f0:	pop    rsi; 	pop    r15
0x10e2ef:	pop    r14; 	pop    r15
0x10e3d0:	pop    rsi
0x10e3cf:	pop    r14
0x10e3ce:	pop    rbp; 	pop    r14
0x10e3cd:	pop    r13; 	pop    r14
0x10e501:	pop    rdi
0x10e500:	pop    r15
0x10e4ff:	pop    rsi; 	pop    r15
0x10e4fe:	pop    r14; 	pop    r15
0x10e561:	add    DWORD PTR [rax+0x39],ecx
0x10e638:	ret    0x8948
0x10e6c8:	fisttp WORD PTR [rax-0x77]
0x10e74f:	and    bl,ch
0x10e7fd:	add    DWORD PTR [rax+0x39],ecx
0x10e9d0:	add    BYTE PTR [rax],al
0x10e9ce:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x10ea3b:	pop    rbp
0x10ea3a:	pop    rbx; 	pop    rbp
0x10ea38:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x10ea66:	pop    rbp
0x10ea65:	pop    rbx; 	pop    rbp
0x10ea64:	add    BYTE PTR [rbx+0x5d],bl
0x10ea63:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x10eb5d:	pop    rbp
0x10eb5c:	pop    r13
0x10eb5b:	pop    rsp; 	pop    r13
0x10eb5a:	pop    r12; 	pop    r13
0x10eb73:	pop    rbp
0x10eb72:	pop    r13
0x10eb71:	pop    rsp; 	pop    r13
0x10eb70:	pop    r12; 	pop    r13
0x10ebc7:	pop    rsp
0x10ebc6:	pop    r12
0x10ebc5:	pop    rbp; 	pop    r12
0x10ebc4:	pop    rbx; 	pop    rbp; 	pop    r12
0x10ebe1:	dec    DWORD PTR [rax-0x77]
0x10ebf9:	dec    DWORD PTR [rax+0x39]
0x10ec08:	pop    rsp
0x10ec07:	pop    r12
0x10ec06:	pop    rbp; 	pop    r12
0x10ec05:	pop    rbx; 	pop    rbp; 	pop    r12
0x10ec37:	pop    rbp
0x10ec36:	pop    rbx; 	pop    rbp
0x10ec35:	or     BYTE PTR [rbx+0x5d],bl
0x10ec8c:	pop    rbp
0x10ec8b:	pop    rbx; 	pop    rbp
0x10ec8a:	or     BYTE PTR [rbx+0x5d],bl
0x10ecbc:	pop    rbp
0x10ecbb:	pop    rbx; 	pop    rbp
0x10ecba:	or     BYTE PTR [rbx+0x5d],bl
0x10ecec:	pop    rbp
0x10eceb:	pop    rbx; 	pop    rbp
0x10ecea:	or     BYTE PTR [rbx+0x5d],bl
0x10ed16:	pop    rbx
0x10eff8:	pop    rdi
0x10eff7:	pop    r15
0x10eff6:	pop    rsi; 	pop    r15
0x10eff5:	pop    r14; 	pop    r15
0x10f057:	and    al,ch
0x10f1c2:	cmp    cl,ch
0x10f1c1:	cmp    r9b,r13b
0x10f497:	add    BYTE PTR [rax-0x7d],cl
0x10f577:	sbb    BYTE PTR [rax-0x77],cl
0x10f576:	push   rdi; 	sbb    BYTE PTR [rax-0x77],cl
0x10f5f3:	pop    rdi
0x10f5f2:	pop    r15
0x10f5f1:	pop    rsi; 	pop    r15
0x10f5f0:	pop    r14; 	pop    r15
0x10f711:	fmul   DWORD PTR [rax-0x77]
0x10f7af:	add    BYTE PTR [rcx-0x7d],cl
0x10fbd5:	xchg   ebp,eax
0x10fbd3:	ror    BYTE PTR [rdi],0x95
0x10fbf0:	dec    DWORD PTR [rax+0x1]
0x10fd09:	pop    rdi
0x10fd08:	pop    r15
0x10fd07:	pop    rsi; 	pop    r15
0x10fd06:	pop    r14; 	pop    r15
0x10fe97:	dec    DWORD PTR [rax-0x7d]
0x10feee:	pop    rdi
0x10feed:	pop    r15
0x10feec:	pop    rsi; 	pop    r15
0x10feeb:	pop    r14; 	pop    r15
0x10ff96:	pop    rdi
0x10ff95:	pop    r15
0x10ff94:	pop    rsi; 	pop    r15
0x10ff93:	pop    r14; 	pop    r15
0x10ffd5:	pop    rdi
0x10ffd4:	pop    r15
0x10ffd3:	pop    rsi; 	pop    r15
0x10ffd2:	pop    r14; 	pop    r15
0x110057:	pop    rbp
0x110056:	pop    rdi; 	pop    rbp
0x110055:	pop    r15; 	pop    rbp
0x110054:	pop    rsi; 	pop    r15; 	pop    rbp
0x11018f:	add    BYTE PTR [rax-0x7d],cl
0x1101d2:	add    BYTE PTR [rax-0x7d],cl
0x11024f:	add    BYTE PTR [rax-0x7d],cl
0x1102db:	pop    rbp
0x1102da:	pop    rdi; 	pop    rbp
0x1102d9:	pop    r15; 	pop    rbp
0x1102d8:	pop    rsi; 	pop    r15; 	pop    rbp
0x110799:	pop    rdi
0x110798:	pop    r15
0x110797:	pop    rsi; 	pop    r15
0x110796:	pop    r14; 	pop    r15
0x110901:	and    BYTE PTR [rax+0x39],cl
0x110900:	and    BYTE PTR [r8+0x39],r9b
0x110a67:	pop    rsi
0x110a66:	pop    r14
0x110a65:	pop    rbp; 	pop    r14
0x110a64:	pop    r13; 	pop    r14
0x110a81:	xor    cl,ch
0x110a80:	rex.XB xor r9b,bpl
0x110b5e:	cmove  eax,ecx
0x110b94:	cmovne eax,esi
0x110b93:	iret   ; 	cmovne eax,esi
0x110bd7:	cmove  eax,ecx
0x110c01:	cmovne eax,ecx
0x110c09:	clc    
0x110c08:	sub    eax,edi
0x110c07:	add    BYTE PTR [rcx],ch; 	clc    
0x110c13:	add    BYTE PTR [rax],al
0x110c11:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x110cf1:	add    BYTE PTR [rcx],bh
0x110cef:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],bh
0x110ea9:	xchg   ebp,eax
0x1110cf:	pop    rsi
0x1110ce:	pop    r14
0x1110cd:	pop    rbp; 	pop    r14
0x1110cc:	pop    r13; 	pop    r14
0x111407:	add    BYTE PTR [rax-0x7d],cl
0x11144b:	add    BYTE PTR [rax-0x7d],cl
0x1116a9:	sub    BYTE PTR [rax-0x77],cl
0x1116a8:	push   rbp; 	sub    BYTE PTR [rax-0x77],cl
0x11182c:	pop    rbp
0x11182b:	pop    rdi; 	pop    rbp
0x11182a:	pop    r15; 	pop    rbp
0x111829:	pop    rsi; 	pop    r15; 	pop    rbp
0x111895:	adc    cl,BYTE PTR [rax-0x7d]
0x111c57:	ror    BYTE PTR [rdi],0x85
0x111dff:	add    BYTE PTR [rax-0x7d],cl
0x111dfe:	add    BYTE PTR [rax-0x7d],cl
0x111e57:	add    BYTE PTR [rax-0x7d],cl
0x111eb0:	cmp    BYTE PTR [rax-0x77],cl
0x112044:	cwde   
0x112042:	out    0xe8,eax; 	cwde   
0x11207e:	pop    rsi
0x11229b:	dec    DWORD PTR [rcx]
0x1122c5:	push   rdi
0x1122c3:	xor    al,ch; 	push   rdi
0x112301:	dec    DWORD PTR [rcx]
0x1123da:	dec    DWORD PTR [rax-0x77]
0x112425:	sub    BYTE PTR [rax-0x77],cl
0x112424:	push   rdx; 	sub    BYTE PTR [rax-0x77],cl
0x11257f:	dec    DWORD PTR [rax-0x77]
0x1126b3:	shr    al,0xb7
0x112705:	shr    al,0x65
0x1128f3:	dec    DWORD PTR [rax-0x77]
0x112b98:	cmp    bl,ch
0x112d35:	pop    rbp
0x112d34:	pop    rbx; 	pop    rbp
0x112d33:	or     BYTE PTR [rbx+0x5d],bl
0x112e8c:	pop    rsp
0x112e8b:	pop    r12
0x112e8a:	pop    rbp; 	pop    r12
0x112e89:	pop    rbx; 	pop    rbp; 	pop    r12
0x112efd:	pop    rbp
0x112efc:	pop    rbx; 	pop    rbp
0x112efa:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x112f49:	pop    rbp
0x112f48:	pop    rbx; 	pop    rbp
0x112f47:	or     BYTE PTR [rbx+0x5d],bl
0x112fb2:	pop    rbp
0x112fb1:	pop    rbx; 	pop    rbp
0x112fb0:	add    BYTE PTR [rbx+0x5d],bl
0x112faf:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x112fd0:	pop    rbp
0x112fcf:	pop    rbx; 	pop    rbp
0x112fcd:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x11318f:	add    BYTE PTR [rax-0x7d],cl
0x11318e:	add    BYTE PTR [rax-0x7d],cl
0x1131c1:	dec    DWORD PTR [rax-0x7d]
0x1132ed:	pop    rdi
0x1132ec:	pop    r15
0x1132eb:	pop    rsi; 	pop    r15
0x1132ea:	pop    r14; 	pop    r15
0x113308:	add    BYTE PTR [rax],al
0x113334:	pop    rbx
0x113332:	xor    eax,eax; 	pop    rbx
0x113331:	pop    rbp; 	xor    eax,eax; 	pop    rbx
0x113356:	cwde   
0x11371f:	pop    rdi
0x11371e:	pop    r15
0x11371d:	pop    rsi; 	pop    r15
0x11371c:	pop    r14; 	pop    r15
0x113e63:	pop    rbp
0x113e62:	pop    rdi; 	pop    rbp
0x113e61:	pop    r15; 	pop    rbp
0x113e60:	pop    rsi; 	pop    r15; 	pop    rbp
0x1142cd:	dec    DWORD PTR [rax+0x39]
0x1149cf:	xor    eax,eax
0x1149ce:	icebp  ; 	xor    eax,eax
0x1149cd:	jb     0x1149c0; 	xor    eax,eax
0x1149d9:	mov    eax,DWORD PTR [rax+0x30]
0x1149d8:	mov    rax,QWORD PTR [rax+0x30]
0x114a2b:	loopne 0x114a2e
0x114a2a:	and    eax,0x1
0x114a4c:	or     esi,ebx
0x114a4a:	add    BYTE PTR [rbx+rcx*1-0xd],dh
0x114a50:	xor    eax,eax
0x114a4f:	nop; 	xor    eax,eax
0x114a4e:	ret    ; 	nop; 	xor    eax,eax
0x114a66:	sete   al
0x114aac:	setae  al
0x114aab:	cli    ; 	setae  al
0x114abd:	add    BYTE PTR [rax],al
0x114abb:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x114aea:	xor    eax,eax
0x114ae8:	jne    0x114af0; 	xor    eax,eax
0x114b1a:	xor    eax,eax
0x114b18:	jne    0x114b20; 	xor    eax,eax
0x114b4a:	xor    eax,eax
0x114b48:	jne    0x114b50; 	xor    eax,eax
0x114b7a:	xor    eax,eax
0x114b78:	jne    0x114b80; 	xor    eax,eax
0x114baa:	xor    eax,eax
0x114ba8:	jne    0x114bb0; 	xor    eax,eax
0x114bda:	xor    eax,eax
0x114bd8:	jne    0x114be0; 	xor    eax,eax
0x114c0a:	xor    eax,eax
0x114c08:	jne    0x114c10; 	xor    eax,eax
0x114c3a:	xor    eax,eax
0x114c38:	jne    0x114c40; 	xor    eax,eax
0x114c6a:	xor    eax,eax
0x114c68:	jne    0x114c70; 	xor    eax,eax
0x114c9a:	xor    eax,eax
0x114c98:	jne    0x114ca0; 	xor    eax,eax
0x114cca:	xor    eax,eax
0x114cc8:	jne    0x114cd0; 	xor    eax,eax
0x114cfa:	xor    eax,eax
0x114cf8:	jne    0x114d00; 	xor    eax,eax
0x114d2a:	xor    eax,eax
0x114d28:	jne    0x114d30; 	xor    eax,eax
0x114d5a:	xor    eax,eax
0x114d58:	jne    0x114d60; 	xor    eax,eax
0x114d8a:	xor    eax,eax
0x114d88:	jne    0x114d90; 	xor    eax,eax
0x114dba:	xor    eax,eax
0x114db8:	jne    0x114dc0; 	xor    eax,eax
0x114dea:	xor    eax,eax
0x114de8:	jne    0x114df0; 	xor    eax,eax
0x114e1a:	xor    eax,eax
0x114e18:	jne    0x114e20; 	xor    eax,eax
0x114e4a:	xor    eax,eax
0x114e48:	jne    0x114e50; 	xor    eax,eax
0x114e7a:	xor    eax,eax
0x114e78:	jne    0x114e80; 	xor    eax,eax
0x114eda:	xor    eax,eax
0x114ed8:	jne    0x114ee0; 	xor    eax,eax
0x114f0a:	xor    eax,eax
0x114f08:	jne    0x114f10; 	xor    eax,eax
0x114f3a:	xor    eax,eax
0x114f38:	jne    0x114f40; 	xor    eax,eax
0x114f6a:	xor    eax,eax
0x114f68:	jne    0x114f70; 	xor    eax,eax
0x114f9a:	xor    eax,eax
0x114f98:	jne    0x114fa0; 	xor    eax,eax
0x114fca:	xor    eax,eax
0x114fc8:	jne    0x114fd0; 	xor    eax,eax
0x114ffa:	xor    eax,eax
0x114ff8:	jne    0x115000; 	xor    eax,eax
0x11502a:	xor    eax,eax
0x115028:	jne    0x115030; 	xor    eax,eax
0x11505a:	xor    eax,eax
0x115058:	jne    0x115060; 	xor    eax,eax
0x1150a6:	pop    rdx
0x1150a5:	pop    r10
0x1150a4:	pop    rdx; 	pop    r10
0x1150a3:	lock pop rdx; 	pop    r10
0x1150ca:	pop    rsi
0x1150c9:	pop    rdx; 	pop    rsi
0x1150c7:	syscall ; 	pop    rdx; 	pop    rsi
0x1150d7:	add    BYTE PTR [rcx-0x77],al
0x1150de:	add    al,BYTE PTR [rcx+0x39]
0x1150dd:	retf   ; 	add    al,BYTE PTR [rcx+0x39]
0x1150f9:	je     0x1150fc
0x11513f:	add    BYTE PTR [rcx-0x77],al
0x11515d:	je     0x115160
0x115196:	or     ebx,esi
0x115208:	pop    rbx
0x115206:	add    BYTE PTR [rax],al; 	pop    rbx
0x11532d:	pop    rsp
0x11532c:	pop    r12
0x11532b:	pop    rbp; 	pop    r12
0x11532a:	or     al,0x5d; 	pop    r12
0x1153e5:	leave  
0x1153e4:	clc    ; 	leave  
0x1153e3:	pop    rbp; 	clc    ; 	leave  
0x1153e2:	mov    ebx,DWORD PTR [rbp-0x8]; 	leave  
0x11553d:	leave  
0x11553c:	clc    ; 	leave  
0x11553b:	pop    rbp; 	clc    ; 	leave  
0x11553a:	mov    ebx,DWORD PTR [rbp-0x8]; 	leave  
0x11557a:	je     0x115580
0x115578:	test   eax,eax; 	je     0x115580
0x115737:	pop    rsp
0x115736:	pop    r12
0x115735:	pop    rbp; 	pop    r12
0x115734:	pop    rbx; 	pop    rbp; 	pop    r12
0x11580b:	cmovne eax,edx
0x115813:	xor    eax,eax
0x115811:	mov    DWORD PTR [rax],edx; 	xor    eax,eax
0x11589a:	pop    rbp
0x115899:	pop    rbx; 	pop    rbp
0x115898:	or     BYTE PTR [rbx+0x5d],bl
0x1158bc:	pop    rbp
0x1158bb:	pop    rbx; 	pop    rbp
0x1158ba:	or     BYTE PTR [rbx+0x5d],bl
0x1158de:	sbb    esi,ebx
0x115980:	pop    rsp
0x11597f:	pop    r12
0x11597e:	pop    rbp; 	pop    r12
0x11597d:	pop    rbx; 	pop    rbp; 	pop    r12
0x11598b:	add    BYTE PTR [rax],al
0x1159d6:	pop    rbp
0x1159d5:	in     eax,0x5d
0x1159d4:	mov    ebp,esp; 	pop    rbp
0x1159d3:	mov    rbp,rsp; 	pop    rbp
0x115a48:	pop    rbp
0x115a47:	pop    rbp; 	pop    rbp
0x115a46:	pop    r13; 	pop    rbp
0x115a45:	pop    rsp; 	pop    r13; 	pop    rbp
0x115a64:	pop    rbp
0x115a63:	pop    rbp; 	pop    rbp
0x115a62:	pop    r13; 	pop    rbp
0x115a61:	pop    rsp; 	pop    r13; 	pop    rbp
0x115aee:	pop    rbp
0x115aec:	sub    eax,DWORD PTR [rax]; 	pop    rbp
0x115aeb:	sub    eax,DWORD PTR es:[rax]; 	pop    rbp
0x115b67:	leave  
0x115b66:	add    cl,cl
0x115b65:	fadd   DWORD PTR [rax]; 	leave  
0x115b64:	sbb    eax,0x0; 	leave  
0x115b77:	leave  
0x115b75:	xor    eax,eax; 	leave  
0x115b74:	repnz xor eax,eax; 	leave  
0x115cf4:	sub    ecx,DWORD PTR [rax-0x7d]
0x115e68:	pop    rbp
0x115e67:	pop    rdi; 	pop    rbp
0x115e66:	pop    r15; 	pop    rbp
0x115e65:	pop    rsi; 	pop    r15; 	pop    rbp
0x1161ff:	add    bl,dh
0x1161fe:	add    bl,sil
0x116275:	add    eax,DWORD PTR [rax]
0x116273:	sbb    DWORD PTR [rbx+rax*1+0x0],edi
0x116365:	add    eax,DWORD PTR [rax]
0x1163fe:	pop    rbp
0x1163fd:	pop    r13
0x1163fc:	pop    rsp; 	pop    r13
0x1163fb:	pop    r12; 	pop    r13
0x116474:	add    esp,0x8
0x116473:	add    rsp,0x8
0x11657a:	add    esp,0x8
0x116579:	add    rsp,0x8
0x1166b2:	add    BYTE PTR [rax],al
0x1166b0:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x11676c:	pop    rdi
0x11676b:	pop    r15
0x11676a:	pop    rsi; 	pop    r15
0x116769:	pop    r14; 	pop    r15
0x1167fd:	add    BYTE PTR [rax],al
0x1167fb:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x116895:	dec    DWORD PTR [rax-0x7f]
0x116894:	repz dec DWORD PTR [rax-0x7f]
0x1168bc:	pop    rdi
0x1168bb:	pop    r15
0x1168ba:	pop    rsi; 	pop    r15
0x1168b9:	pop    r14; 	pop    r15
0x116a16:	pop    rsp
0x116a15:	pop    r12
0x116a14:	pop    rbp; 	pop    r12
0x116a13:	pop    rbx; 	pop    rbp; 	pop    r12
0x116a6b:	pop    rsp
0x116a6a:	pop    r12
0x116a69:	pop    rbp; 	pop    r12
0x116a68:	pop    rbx; 	pop    rbp; 	pop    r12
0x116bed:	pop    rbp
0x116bec:	pop    rbx; 	pop    rbp
0x116beb:	lock pop rbx; 	pop    rbp
0x116bea:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x116c39:	pop    rbp
0x116c38:	pop    rbx; 	pop    rbp
0x116c37:	lock pop rbx; 	pop    rbp
0x116c36:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x116d53:	pop    rsp
0x116d52:	pop    r12
0x116d51:	pop    rbp; 	pop    r12
0x116d50:	lock pop rbp; 	pop    r12
0x116d9c:	pop    rsp
0x116d9b:	pop    r12
0x116d9a:	pop    rbp; 	pop    r12
0x116d99:	lock pop rbp; 	pop    r12
0x116ea7:	pop    rbp
0x116ea6:	pop    rbx; 	pop    rbp
0x116ea5:	lock pop rbx; 	pop    rbp
0x116ea4:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x116ef6:	pop    rbp
0x116ef5:	pop    rbx; 	pop    rbp
0x116ef4:	lock pop rbx; 	pop    rbp
0x116ef3:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x11706e:	pop    rbp
0x11706d:	pop    r13
0x11706c:	pop    rsp; 	pop    r13
0x11706b:	pop    r12; 	pop    r13
0x1170c3:	pop    rbp
0x1170c2:	pop    r13
0x1170c1:	pop    rsp; 	pop    r13
0x1170c0:	pop    r12; 	pop    r13
0x117193:	add    BYTE PTR [rax-0x77],cl
0x1172f9:	pop    rdi
0x1172f8:	pop    r15
0x1172f7:	pop    rsi; 	pop    r15
0x1172f6:	pop    r14; 	pop    r15
0x117405:	pop    rbp
0x117404:	pop    r13
0x117403:	pop    rsp; 	pop    r13
0x117402:	pop    r12; 	pop    r13
0x117488:	pop    rbp
0x117487:	pop    r13
0x117486:	pop    rsp; 	pop    r13
0x117485:	pop    r12; 	pop    r13
0x117555:	pop    rbp
0x117554:	pop    r13
0x117553:	pop    rsp; 	pop    r13
0x117552:	pop    r12; 	pop    r13
0x117580:	xor    eax,eax
0x11757e:	jmp    0x117545; 	xor    eax,eax
0x1175a3:	or     al,0xf3
0x117653:	or     al,0xf3
0x11769f:	add    esp,0x8
0x11769e:	add    rsp,0x8
0x117826:	pop    rbp
0x117825:	pop    r13
0x117824:	pop    rsp; 	pop    r13
0x117823:	pop    r12; 	pop    r13
0x11783b:	pop    rbp
0x11783a:	pop    r13
0x117839:	pop    rsp; 	pop    r13
0x117838:	pop    r12; 	pop    r13
0x11784c:	pop    rbp
0x11784b:	pop    r13
0x11784a:	pop    rsp; 	pop    r13
0x117849:	pop    r12; 	pop    r13
0x1178f1:	pop    rbp
0x1178f0:	pop    rbx; 	pop    rbp
0x1178ef:	sbb    BYTE PTR [rbx+0x5d],bl
0x11791f:	pop    rbp
0x11791e:	pop    rbx; 	pop    rbp
0x11791d:	repz pop rbx; 	pop    rbp
0x11791c:	div    ebx; 	pop    rbx; 	pop    rbp
0x11796a:	add    esp,0x8
0x117969:	add    rsp,0x8
0x1179c2:	clc    
0x1179c1:	mov    eax,edi
0x1179c0:	mov    rax,rdi
0x1179bf:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x117b04:	add    esp,0x8
0x117b03:	add    rsp,0x8
0x117bbc:	add    esp,0x8
0x117bbb:	add    rsp,0x8
0x117ced:	add    BYTE PTR [rax],al
0x117ceb:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x117d98:	add    BYTE PTR [rax-0x7f],cl
0x117dc0:	pop    rdi
0x117dbf:	pop    r15
0x117dbe:	pop    rsi; 	pop    r15
0x117dbd:	pop    r14; 	pop    r15
0x117f16:	pop    rsp
0x117f15:	pop    r12
0x117f14:	pop    rbp; 	pop    r12
0x117f13:	pop    rbx; 	pop    rbp; 	pop    r12
0x117f6b:	pop    rsp
0x117f6a:	pop    r12
0x117f69:	pop    rbp; 	pop    r12
0x117f68:	pop    rbx; 	pop    rbp; 	pop    r12
0x1180ed:	pop    rbp
0x1180ec:	pop    rbx; 	pop    rbp
0x1180eb:	lock pop rbx; 	pop    rbp
0x1180ea:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x118139:	pop    rbp
0x118138:	pop    rbx; 	pop    rbp
0x118137:	lock pop rbx; 	pop    rbp
0x118136:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x118253:	pop    rsp
0x118252:	pop    r12
0x118251:	pop    rbp; 	pop    r12
0x118250:	lock pop rbp; 	pop    r12
0x11829c:	pop    rsp
0x11829b:	pop    r12
0x11829a:	pop    rbp; 	pop    r12
0x118299:	lock pop rbp; 	pop    r12
0x1183a7:	pop    rbp
0x1183a6:	pop    rbx; 	pop    rbp
0x1183a5:	lock pop rbx; 	pop    rbp
0x1183a4:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x1183f6:	pop    rbp
0x1183f5:	pop    rbx; 	pop    rbp
0x1183f4:	lock pop rbx; 	pop    rbp
0x1183f3:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x118525:	pop    rbp
0x118524:	pop    r13
0x118523:	pop    rsp; 	pop    r13
0x118522:	pop    r12; 	pop    r13
0x1185ab:	pop    rbp
0x1185aa:	pop    r13
0x1185a9:	pop    rsp; 	pop    r13
0x1185a8:	pop    r12; 	pop    r13
0x118675:	pop    rbp
0x118674:	pop    r13
0x118673:	pop    rsp; 	pop    r13
0x118672:	pop    r12; 	pop    r13
0x1186a8:	xor    eax,eax
0x1186a6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x118817:	add    esp,0x28
0x118816:	add    rsp,0x28
0x118857:	add    esp,0x28
0x118856:	add    rsp,0x28
0x1188f7:	add    BYTE PTR [rax],al
0x1188f5:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x118a0c:	pop    rdi
0x118a0b:	pop    r15
0x118a0a:	pop    rsi; 	pop    r15
0x118a09:	pop    r14; 	pop    r15
0x118af7:	add    BYTE PTR [rax],al
0x118af5:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x118bb7:	pop    rsi
0x118bb6:	pop    r14
0x118bb5:	pop    rbp; 	pop    r14
0x118bb4:	pop    r13; 	pop    r14
0x118ce1:	pop    rdi
0x118ce0:	pop    r15
0x118cdf:	pop    rsi; 	pop    r15
0x118cde:	pop    r14; 	pop    r15
0x118f02:	pop    rdi
0x118f01:	pop    r15
0x118f00:	pop    rsi; 	pop    r15
0x118eff:	pop    r14; 	pop    r15
0x11909d:	sar    eax,0x6
0x11909c:	sar    rax,0x6
0x1191e4:	add    esp,0x8
0x1191e3:	add    rsp,0x8
0x1192bd:	pop    rsp
0x1192bc:	pop    r12
0x1192bb:	pop    rbp; 	pop    r12
0x1192ba:	pop    rbx; 	pop    rbp; 	pop    r12
0x1192f0:	pop    rsp
0x1192ef:	pop    r12
0x1192ee:	pop    rbp; 	pop    r12
0x1192ed:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x119356:	add    esp,0x28
0x119355:	add    rsp,0x28
0x119363:	xor    eax,eax
0x119362:	ds xor eax,eax
0x119361:	mov    DWORD PTR [rsi],edi; 	xor    eax,eax
0x119392:	bswap  eax
0x119391:	clc    ; 	bswap  eax
0x119390:	mov    eax,edi; 	bswap  eax
0x1193a3:	ror    eax,0x8
0x1193a2:	ror    ax,0x8
0x1193bb:	inc    DWORD PTR [rax]
0x1193d5:	cmovne eax,edi
0x119402:	bswap  eax
0x119401:	clc    ; 	bswap  eax
0x119400:	or     eax,edi; 	bswap  eax
0x119410:	bswap  eax
0x11940f:	clc    ; 	bswap  eax
0x11940e:	or     eax,edi; 	bswap  eax
0x119424:	bswap  eax
0x119423:	clc    ; 	bswap  eax
0x119422:	or     eax,edi; 	bswap  eax
0x119438:	shr    eax,0x18
0x119437:	clc    ; 	shr    eax,0x18
0x119456:	cmovne eax,edi
0x1194ac:	pop    rbx
0x1194ab:	pop    rdx; 	pop    rbx
0x1194aa:	fcomp  DWORD PTR [rdx+0x5b]
0x1194a9:	mov    eax,ebx; 	pop    rdx; 	pop    rbx
0x119592:	pop    rbp
0x119591:	pop    rbx; 	pop    rbp
0x119590:	call   FWORD PTR [rbx+0x5d]
0x1196de:	add    BYTE PTR [rax],al
0x1196dc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x119863:	pop    rdi
0x119862:	pop    r15
0x119861:	pop    rsi; 	pop    r15
0x119860:	pop    r14; 	pop    r15
0x119adf:	pop    rdi
0x119ade:	pop    r15
0x119add:	pop    rsi; 	pop    r15
0x119adc:	pop    r14; 	pop    r15
0x119bec:	pop    rdi
0x119beb:	pop    r15
0x119bea:	pop    rsi; 	pop    r15
0x119be9:	pop    r14; 	pop    r15
0x119e1c:	pop    rsp
0x119e1b:	pop    r12
0x119e1a:	pop    rbp; 	pop    r12
0x119e19:	pop    rbx; 	pop    rbp; 	pop    r12
0x11a00e:	pop    rbp
0x11a00d:	pop    r13
0x11a00c:	pop    rsp; 	pop    r13
0x11a00b:	pop    r12; 	pop    r13
0x11a123:	pop    rdi
0x11a122:	pop    r15
0x11a121:	pop    rsi; 	pop    r15
0x11a120:	pop    r14; 	pop    r15
0x11a267:	pop    rdi
0x11a266:	pop    r15
0x11a265:	pop    rsi; 	pop    r15
0x11a264:	pop    r14; 	pop    r15
0x11a2f0:	pop    rdi
0x11a2ef:	pop    r15
0x11a2ee:	pop    rsi; 	pop    r15
0x11a2ed:	pop    r14; 	pop    r15
0x11a331:	ror    BYTE PTR [rdi],0x85
0x11a4f0:	pop    rdi
0x11a4ef:	pop    r15
0x11a4ee:	pop    rsi; 	pop    r15
0x11a4ed:	pop    r14; 	pop    r15
0x11a627:	pop    rdi
0x11a626:	pop    r15
0x11a625:	pop    rsi; 	pop    r15
0x11a624:	pop    r14; 	pop    r15
0x11a6a8:	pop    rdi
0x11a6a7:	pop    r15
0x11a6a6:	pop    rsi; 	pop    r15
0x11a6a5:	pop    r14; 	pop    r15
0x11a8a5:	add    esp,0x8
0x11a8a4:	add    rsp,0x8
0x11a96c:	add    esp,0x18
0x11a96b:	add    rsp,0x18
0x11aa35:	or     bl,dh
0x11ab27:	add    esp,0x48
0x11ab26:	add    rsp,0x48
0x11ac99:	pop    rdi
0x11ac98:	pop    r15
0x11ac97:	pop    rsi; 	pop    r15
0x11ac96:	pop    r14; 	pop    r15
0x11ae58:	pop    rdi
0x11ae57:	pop    r15
0x11ae56:	pop    rsi; 	pop    r15
0x11ae55:	pop    r14; 	pop    r15
0x11ae9c:	pop    rdi
0x11ae9b:	pop    r15
0x11ae9a:	pop    rsi; 	pop    r15
0x11ae99:	pop    r14; 	pop    r15
0x11af4c:	pop    rdi
0x11af4b:	pop    r15
0x11af4a:	pop    rsi; 	pop    r15
0x11af49:	pop    r14; 	pop    r15
0x11b121:	pop    rsi
0x11b120:	pop    r14
0x11b11f:	pop    rbp; 	pop    r14
0x11b11e:	pop    r13; 	pop    r14
0x11b235:	add    esp,0x8
0x11b234:	add    rsp,0x8
0x11b2fc:	add    esp,0x18
0x11b2fb:	add    rsp,0x18
0x11b3c5:	or     bl,dh
0x11b466:	add    DWORD PTR [rax-0x18],edx
0x11b4b7:	add    esp,0x48
0x11b4b6:	add    rsp,0x48
0x11b618:	pop    rdi
0x11b617:	pop    r15
0x11b616:	pop    rsi; 	pop    r15
0x11b615:	pop    r14; 	pop    r15
0x11b65c:	pop    rdi
0x11b65b:	pop    r15
0x11b65a:	pop    rsi; 	pop    r15
0x11b659:	pop    r14; 	pop    r15
0x11b70c:	pop    rdi
0x11b70b:	pop    r15
0x11b70a:	pop    rsi; 	pop    r15
0x11b709:	pop    r14; 	pop    r15
0x11b8ae:	pop    rbp
0x11b8ad:	pop    r13
0x11b8ac:	pop    rsp; 	pop    r13
0x11b8ab:	pop    r12; 	pop    r13
0x11ba18:	pop    rdi
0x11ba17:	pop    r15
0x11ba16:	pop    rsi; 	pop    r15
0x11ba15:	pop    r14; 	pop    r15
0x11ba3a:	pop    rdi
0x11ba39:	pop    r15
0x11ba38:	pop    rsi; 	pop    r15
0x11ba37:	pop    r14; 	pop    r15
0x11ba59:	pop    rdi
0x11ba58:	pop    r15
0x11ba57:	pop    rsi; 	pop    r15
0x11ba56:	pop    r14; 	pop    r15
0x11bbd8:	add    esp,0x8
0x11bbd7:	add    rsp,0x8
0x11bc9c:	add    esp,0x18
0x11bc9b:	add    rsp,0x18
0x11bd62:	or     bl,dh
0x11be48:	add    esp,0x48
0x11be47:	add    rsp,0x48
0x11bf7f:	pop    rbp
0x11bf7e:	pop    r13
0x11bf7d:	pop    rsp; 	pop    r13
0x11bf7c:	pop    r12; 	pop    r13
0x11c0f9:	pop    rdi
0x11c0f8:	pop    r15
0x11c0f7:	pop    rsi; 	pop    r15
0x11c0f6:	pop    r14; 	pop    r15
0x11c11a:	pop    rdi
0x11c119:	pop    r15
0x11c118:	pop    rsi; 	pop    r15
0x11c117:	pop    r14; 	pop    r15
0x11c139:	pop    rdi
0x11c138:	pop    r15
0x11c137:	pop    rsi; 	pop    r15
0x11c136:	pop    r14; 	pop    r15
0x11c334:	pop    rsi
0x11c333:	pop    r14
0x11c332:	pop    rbp; 	pop    r14
0x11c331:	pop    r13; 	pop    r14
0x11c4ed:	pop    rdi
0x11c4ec:	pop    r15
0x11c4eb:	pop    rsi; 	pop    r15
0x11c4ea:	pop    r14; 	pop    r15
0x11c549:	pop    rdi
0x11c548:	pop    r15
0x11c547:	pop    rsi; 	pop    r15
0x11c546:	pop    r14; 	pop    r15
0x11c5da:	pop    rdi
0x11c5d9:	pop    r15
0x11c5d8:	pop    rsi; 	pop    r15
0x11c5d7:	pop    r14; 	pop    r15
0x11c763:	pop    rsi
0x11c762:	pop    r14
0x11c761:	pop    rbp; 	pop    r14
0x11c760:	pop    r13; 	pop    r14
0x11c90c:	pop    rdi
0x11c90b:	pop    r15
0x11c90a:	pop    rsi; 	pop    r15
0x11c909:	pop    r14; 	pop    r15
0x11c969:	pop    rdi
0x11c968:	pop    r15
0x11c967:	pop    rsi; 	pop    r15
0x11c966:	pop    r14; 	pop    r15
0x11c9fa:	pop    rdi
0x11c9f9:	pop    r15
0x11c9f8:	pop    rsi; 	pop    r15
0x11c9f7:	pop    r14; 	pop    r15
0x11cb08:	add    esp,0x8
0x11cb07:	add    rsp,0x8
0x11cbcc:	add    esp,0x18
0x11cbcb:	add    rsp,0x18
0x11cc92:	or     bl,dh
0x11ccbf:	mov    cl,0x35
0x11cd78:	add    esp,0x48
0x11cd77:	add    rsp,0x48
0x11cde4:	xchg   esi,eax
0x11ce44:	pop    rbx
0x11ce43:	lock pop rbx
0x11ce42:	mov    eax,esi; 	pop    rbx
0x11ce41:	mov    rax,rsi; 	pop    rbx
0x11ce6a:	pop    rbx
0x11ce68:	xor    eax,eax; 	pop    rbx
0x11cf0d:	out    0x89,eax
0x11cf33:	pop    rdi
0x11cf32:	pop    r15
0x11cf31:	pop    rsi; 	pop    r15
0x11cf30:	pop    r14; 	pop    r15
0x11d0df:	pop    rbp
0x11d0de:	pop    r13
0x11d0dd:	pop    rsp; 	pop    r13
0x11d0dc:	pop    r12; 	pop    r13
0x11d12a:	pop    rbp
0x11d129:	pop    r13
0x11d128:	pop    rsp; 	pop    r13
0x11d127:	pop    r12; 	pop    r13
0x11d175:	pop    rbx
0x11d174:	pop    rdx; 	pop    rbx
0x11d173:	fcomp  DWORD PTR [rdx+0x5b]
0x11d172:	mov    eax,ebx; 	pop    rdx; 	pop    rbx
0x11d21d:	out    0x89,eax
0x11d243:	pop    rdi
0x11d242:	pop    r15
0x11d241:	pop    rsi; 	pop    r15
0x11d240:	pop    r14; 	pop    r15
0x11d343:	pop    rsp
0x11d342:	pop    r12
0x11d341:	pop    rbp; 	pop    r12
0x11d340:	pop    rbx; 	pop    rbp; 	pop    r12
0x11d3ca:	pop    rsp
0x11d3c9:	pop    r12
0x11d3c8:	pop    rbp; 	pop    r12
0x11d3c7:	pop    rbx; 	pop    rbp; 	pop    r12
0x11d3f2:	pop    rsp
0x11d3f1:	pop    r12
0x11d3f0:	pop    rbp; 	pop    r12
0x11d3ef:	pop    rbx; 	pop    rbp; 	pop    r12
0x11d6be:	pop    rdi
0x11d6bd:	pop    r15
0x11d6bc:	pop    rsi; 	pop    r15
0x11d6bb:	pop    r14; 	pop    r15
0x11db27:	pop    rbp
0x11db26:	pop    rdi; 	pop    rbp
0x11db25:	pop    r15; 	pop    rbp
0x11db24:	pop    rsi; 	pop    r15; 	pop    rbp
0x11dc81:	pop    rdi
0x11dc80:	pop    r15
0x11dc7f:	pop    rsi; 	pop    r15
0x11dc7e:	pop    r14; 	pop    r15
0x11dca8:	pop    rdi
0x11dca7:	pop    r15
0x11dca6:	pop    rsi; 	pop    r15
0x11dca5:	pop    r14; 	pop    r15
0x11dd01:	pop    rdi
0x11dd00:	pop    r15
0x11dcff:	pop    rsi; 	pop    r15
0x11dcfe:	pop    r14; 	pop    r15
0x11dd2f:	pop    rdi
0x11dd2e:	pop    r15
0x11dd2d:	pop    rsi; 	pop    r15
0x11dd2c:	pop    r14; 	pop    r15
0x11e05a:	pop    rdi
0x11e059:	pop    r15
0x11e058:	pop    rsi; 	pop    r15
0x11e057:	pop    r14; 	pop    r15
0x11e79f:	add    esp,0x18
0x11e79e:	add    rsp,0x18
0x11e887:	pop    rdi
0x11e886:	pop    r15
0x11e885:	pop    rsi; 	pop    r15
0x11e884:	pop    r14; 	pop    r15
0x11e8b9:	pop    rdi
0x11e8b8:	pop    r15
0x11e8b7:	pop    rsi; 	pop    r15
0x11e8b6:	pop    r14; 	pop    r15
0x11e8e1:	pop    rdi
0x11e8e0:	pop    r15
0x11e8df:	pop    rsi; 	pop    r15
0x11e8de:	pop    r14; 	pop    r15
0x11e986:	pop    rsi
0x11e985:	pop    r14
0x11e984:	pop    rbp; 	pop    r14
0x11e983:	pop    r13; 	pop    r14
0x11ea46:	pop    rsi
0x11ea45:	pop    r14
0x11ea44:	pop    rbp; 	pop    r14
0x11ea43:	pop    r13; 	pop    r14
0x11eadd:	add    esp,0x28
0x11eadc:	add    rsp,0x28
0x11eaeb:	add    esp,0x28
0x11eaea:	add    rsp,0x28
0x11eb60:	add    esp,0x28
0x11eb5f:	add    rsp,0x28
0x11ebad:	add    esp,0x18
0x11ebac:	add    rsp,0x18
0x11ed43:	pop    rdi
0x11ed42:	pop    r15
0x11ed41:	pop    rsi; 	pop    r15
0x11ed40:	pop    r14; 	pop    r15
0x11f11c:	add    esp,0x18
0x11f11b:	add    rsp,0x18
0x11f197:	add    BYTE PTR [rax-0x7d],cl
0x11f20f:	add    BYTE PTR [rax-0x7d],cl
0x11f2fa:	pop    rbp
0x11f2f9:	pop    rbx; 	pop    rbp
0x11f2f8:	or     BYTE PTR [rbx+0x5d],bl
0x11f337:	pop    rbp
0x11f336:	pop    rbx; 	pop    rbp
0x11f334:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x11f39b:	pop    rbp
0x11f39a:	pop    rbx; 	pop    rbp
0x11f399:	or     BYTE PTR [rbx+0x5d],bl
0x11f596:	pop    rbp
0x11f595:	pop    rdi; 	pop    rbp
0x11f594:	pop    r15; 	pop    rbp
0x11f593:	pop    rsi; 	pop    r15; 	pop    rbp
0x11f932:	pop    rbp
0x11f931:	pop    rbx; 	pop    rbp
0x11f930:	or     BYTE PTR [rbx+0x5d],bl
0x11fa63:	pop    rdi
0x11fa62:	pop    r15
0x11fa61:	pop    rsi; 	pop    r15
0x11fa60:	pop    r14; 	pop    r15
0x11fb30:	pop    rdi
0x11fb2f:	pop    r15
0x11fb2e:	pop    rsi; 	pop    r15
0x11fb2d:	pop    r14; 	pop    r15
0x11fc9e:	pop    rbx
0x11fc9c:	mov    eax,edx; 	pop    rbx
0x11fd85:	pop    rbx
0x11fd84:	jmp    0x11fde1
0x11fd83:	jne    0x11fd70; 	pop    rbx
0x11fd82:	push   QWORD PTR [rbp-0x15]; 	pop    rbx
0x11fe92:	add    esp,0x8
0x11fe91:	add    rsp,0x8
0x1200de:	pop    rdi
0x1200dd:	pop    r15
0x1200dc:	pop    rsi; 	pop    r15
0x1200db:	pop    r14; 	pop    r15
0x1200ef:	pop    rdi
0x1200ee:	pop    r15
0x1200ed:	pop    rsi; 	pop    r15
0x1200ec:	pop    r14; 	pop    r15
0x1201b6:	pop    rbp
0x1201b5:	pop    rbx; 	pop    rbp
0x1201b4:	rcr    BYTE PTR [rbx+0x5d],1
0x1201b3:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x12046f:	pop    rdi
0x12046e:	pop    r15
0x12046d:	pop    rsi; 	pop    r15
0x12046c:	pop    r14; 	pop    r15
0x1204f3:	xor    BYTE PTR [rax-0x77],cl
0x120696:	add    esp,0x8
0x120695:	add    rsp,0x8
0x120778:	pop    rbp
0x120777:	pop    rbx; 	pop    rbp
0x120776:	call   FWORD PTR [rbx+0x5d]
0x120836:	add    esp,0x18
0x120835:	add    rsp,0x18
0x120902:	or     bl,dh
0x1209e2:	add    esp,0x48
0x1209e1:	add    rsp,0x48
0x120aa8:	add    esp,0x8
0x120aa7:	add    rsp,0x8
0x120bdf:	pop    rbp
0x120bde:	pop    r13
0x120bdd:	pop    rsp; 	pop    r13
0x120bdc:	pop    r12; 	pop    r13
0x120d59:	pop    rdi
0x120d58:	pop    r15
0x120d57:	pop    rsi; 	pop    r15
0x120d56:	pop    r14; 	pop    r15
0x120d7a:	pop    rdi
0x120d79:	pop    r15
0x120d78:	pop    rsi; 	pop    r15
0x120d77:	pop    r14; 	pop    r15
0x120d99:	pop    rdi
0x120d98:	pop    r15
0x120d97:	pop    rsi; 	pop    r15
0x120d96:	pop    r14; 	pop    r15
0x120f73:	dec    DWORD PTR [rax-0x7d]
0x120fcc:	pop    rbp
0x120fcb:	pop    rdi; 	pop    rbp
0x120fca:	pop    r15; 	pop    rbp
0x120fc9:	pop    rsi; 	pop    r15; 	pop    rbp
0x120fd5:	sub    al,BYTE PTR [rax]
0x120fd4:	rex.W sub al,BYTE PTR [rax]
0x12124a:	pop    rbp
0x121249:	pop    rdi; 	pop    rbp
0x121248:	pop    r15; 	pop    rbp
0x121247:	pop    rsi; 	pop    r15; 	pop    rbp
0x1213b1:	pop    rbp
0x1213b0:	pop    rdi; 	pop    rbp
0x1213af:	pop    r15; 	pop    rbp
0x1213ae:	pop    rsi; 	pop    r15; 	pop    rbp
0x12142c:	dec    DWORD PTR [rax+0x39]
0x121511:	pop    rdi
0x121510:	pop    r15
0x12150f:	pop    rsi; 	pop    r15
0x12150e:	pop    r14; 	pop    r15
0x121694:	dec    DWORD PTR [rax-0x7d]
0x121a01:	sar    BYTE PTR [rax+0x64],0x89
0x121a40:	pop    rsp
0x121a3f:	pop    r12
0x121a3e:	pop    rbp; 	pop    r12
0x121a3d:	pop    rbx; 	pop    rbp; 	pop    r12
0x121a71:	pop    rsp
0x121a70:	pop    r12
0x121a6f:	pop    rbp; 	pop    r12
0x121a6e:	pop    rbx; 	pop    rbp; 	pop    r12
0x121d15:	pop    rdi
0x121d14:	pop    r15
0x121d13:	pop    rsi; 	pop    r15
0x121d12:	pop    r14; 	pop    r15
0x121d96:	pop    rdi
0x121d95:	pop    r15
0x121d94:	pop    rsi; 	pop    r15
0x121d93:	pop    r14; 	pop    r15
0x121dd3:	sar    BYTE PTR [rax+0x5e],0x89
0x121e14:	pop    rsp
0x121e13:	pop    r12
0x121e12:	pop    rbp; 	pop    r12
0x121e11:	pop    rbx; 	pop    rbp; 	pop    r12
0x121e3d:	pop    rsp
0x121e3c:	pop    r12
0x121e3b:	pop    rbp; 	pop    r12
0x121e3a:	pop    rbx; 	pop    rbp; 	pop    r12
0x121e78:	pop    rsp
0x121e77:	pop    r12
0x121e76:	pop    rbp; 	pop    r12
0x121e75:	pop    rbx; 	pop    rbp; 	pop    r12
0x1220ac:	pop    rbp
0x1220ab:	pop    rdi; 	pop    rbp
0x1220aa:	pop    r15; 	pop    rbp
0x1220a9:	pop    rsi; 	pop    r15; 	pop    rbp
0x1220d0:	pop    rbp
0x1220cf:	pop    rdi; 	pop    rbp
0x1220ce:	pop    r15; 	pop    rbp
0x1220cd:	pop    rsi; 	pop    r15; 	pop    rbp
0x122198:	syscall 
0x122196:	add    BYTE PTR [rax],al; 	syscall 
0x12221c:	pop    rbp
0x12221b:	pop    rbx; 	pop    rbp
0x12221a:	sub    BYTE PTR [rbx+0x5d],bl
0x122298:	ror    BYTE PTR [rdi],0x88
0x1223a3:	pop    rbp
0x1223a2:	pop    rdi; 	pop    rbp
0x1223a1:	pop    r15; 	pop    rbp
0x1223a0:	pop    rsi; 	pop    r15; 	pop    rbp
0x1223b9:	jmp    0x12242f
0x122b0c:	add    BYTE PTR [rax+0x29],cl
0x123005:	pop    rbx
0x123004:	repz pop rbx
0x123003:	je     0x122ff8; 	pop    rbx
0x123002:	cmc    ; 	je     0x122ff8; 	pop    rbx
0x123026:	add    eax,0x10
0x123025:	clc    ; 	add    eax,0x10
0x12316d:	pop    rsi
0x12316c:	pop    r14
0x12316b:	pop    rbp; 	pop    r14
0x12316a:	pop    r13; 	pop    r14
0x12320c:	pop    rsi
0x12320b:	pop    r14
0x12320a:	pop    rbp; 	pop    r14
0x123209:	pop    r13; 	pop    r14
0x12336d:	pop    rbp
0x12336c:	pop    r13
0x12336b:	pop    rsp; 	pop    r13
0x12336a:	pop    r12; 	pop    r13
0x1233c8:	xor    eax,eax
0x1233c6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1235c1:	xor    eax,eax
0x1235bf:	mov    DWORD PTR [rsi],ecx; 	xor    eax,eax
0x1235c7:	add    bl,dh
0x1235c6:	add    bl,sil
0x123625:	add    BYTE PTR [rax-0x7d],cl
0x12366d:	pop    rbp
0x12366c:	pop    rdi; 	pop    rbp
0x12366b:	pop    r15; 	pop    rbp
0x12366a:	pop    rsi; 	pop    r15; 	pop    rbp
0x1236cb:	pop    rbp
0x1236ca:	pop    rdi; 	pop    rbp
0x1236c9:	pop    r15; 	pop    rbp
0x1236c8:	pop    rsi; 	pop    r15; 	pop    rbp
0x1237e7:	pop    rbp
0x1237e6:	pop    rdi; 	pop    rbp
0x1237e5:	pop    r15; 	pop    rbp
0x1237e4:	pop    rsi; 	pop    r15; 	pop    rbp
0x12387f:	pop    rbp
0x12387e:	pop    rdi; 	pop    rbp
0x12387d:	pop    r15; 	pop    rbp
0x12387c:	pop    rsi; 	pop    r15; 	pop    rbp
0x1238b1:	cmove  eax,edx
0x1238cf:	cmove  eax,edx
0x12390c:	cmove  eax,edx
0x12390e:	ret    0xf3c3
0x12390d:	rex.R ret 0xf3c3
0x123915:	add    BYTE PTR [rax],al
0x123913:	add    al,0x1; 	add    BYTE PTR [rax],al
0x12391d:	add    BYTE PTR [rax],al
0x12391b:	add    DWORD PTR [rcx],eax; 	add    BYTE PTR [rax],al
0x123923:	add    BYTE PTR [rax],al
0x123921:	add    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x123929:	add    BYTE PTR [rax],al
0x123927:	add    al,BYTE PTR [rcx]; 	add    BYTE PTR [rax],al
0x1239fc:	pop    rbp
0x1239fb:	pop    rdi; 	pop    rbp
0x1239fa:	pop    r15; 	pop    rbp
0x1239f9:	pop    rsi; 	pop    r15; 	pop    rbp
0x123b80:	pop    rbp
0x123b7f:	pop    rdi; 	pop    rbp
0x123b7e:	pop    r15; 	pop    rbp
0x123b7d:	pop    rsi; 	pop    r15; 	pop    rbp
0x123c13:	ja     0x123c16
0x123c12:	mov    BYTE PTR [rdi+0x1],dh
0x123c11:	mov    BYTE PTR [rdi+0x1],sil
0x123c24:	push   rbx
0x123d11:	pop    rbx
0x123d0f:	add    DWORD PTR [rdx],eax; 	pop    rbx
0x123d0e:	add    DWORD PTR [rdx],r8d; 	pop    rbx
0x123d17:	add    BYTE PTR [rax+0x63],cl
0x123d55:	pop    rbx
0x123de7:	mov    eax,eax
0x123de6:	mov    eax,r8d
0x123de5:	rex.WB; 	mov    eax,r8d
0x123df6:	mov    BYTE PTR [rdi+rdx*1],0x0
0x123e2c:	mov    eax,eax
0x123e2b:	mov    eax,r8d
0x123e2a:	stos   DWORD PTR es:[rdi],eax; 	mov    eax,r8d
0x123e95:	pop    rbp
0x123e94:	pop    rbx; 	pop    rbp
0x123e93:	add    BYTE PTR [rbx+0x5d],bl
0x123f08:	mov    DWORD PTR [rcx],edx
0x123f07:	mov    QWORD PTR [r9],r10
0x123f78:	mov    DWORD PTR [rcx],edi
0x123f77:	mov    QWORD PTR [r9],rdi
0x123f76:	xlat   BYTE PTR ds:[rbx]; 	mov    QWORD PTR [r9],rdi
0x123fa4:	mov    DWORD PTR [rcx],ecx
0x123fa3:	mov    QWORD PTR [r9],rcx
0x123fd8:	pop    rbp
0x123fd7:	pop    rbx; 	pop    rbp
0x123fd6:	add    BYTE PTR [rbx+0x5d],bl
0x123fee:	lea    eax,[rsi+0x8]
0x123ff7:	add    bl,dh
0x124042:	pop    rbp
0x124041:	pop    rbx; 	pop    rbp
0x124040:	or     BYTE PTR [rbx+0x5d],bl
0x124048:	xor    eax,eax
0x124088:	mov    DWORD PTR [rdi+rdx*1+0x10],edx
0x124116:	and    DWORD PTR [rcx-0xa],eax
0x12413e:	pop    rbx
0x12413b:	mov    BYTE PTR [rsi+0x3],bl; 	pop    rbx
0x124160:	shr    eax,0x4
0x12415f:	shr    rax,0x4
0x124190:	lea    eax,[rdi+rsi*1+0x8]
0x124198:	xor    eax,eax
0x12435b:	pop    rbp
0x12435a:	pop    rdi; 	pop    rbp
0x124359:	pop    r15; 	pop    rbp
0x124358:	pop    rsi; 	pop    r15; 	pop    rbp
0x124395:	pop    rbp
0x124394:	pop    rdi; 	pop    rbp
0x124393:	pop    r15; 	pop    rbp
0x124392:	pop    rsi; 	pop    r15; 	pop    rbp
0x124639:	pop    rbp
0x124638:	pop    rdi; 	pop    rbp
0x124637:	pop    r15; 	pop    rbp
0x124636:	pop    rsi; 	pop    r15; 	pop    rbp
0x124a03:	or     bl,dh
0x124ab6:	pop    rbp
0x124ab5:	pop    rdi; 	pop    rbp
0x124ab4:	pop    r15; 	pop    rbp
0x124ab3:	pop    rsi; 	pop    r15; 	pop    rbp
0x124d37:	pop    rbp
0x124d36:	pop    rdi; 	pop    rbp
0x124d35:	pop    r15; 	pop    rbp
0x124d34:	pop    rsi; 	pop    r15; 	pop    rbp
0x124edb:	pop    rsi
0x124eda:	pop    r14
0x124ed9:	pop    rbp; 	pop    r14
0x124ed8:	pop    r13; 	pop    r14
0x124f21:	pop    rsi
0x124f20:	pop    r14
0x124f1f:	pop    rbp; 	pop    r14
0x124f1e:	pop    r13; 	pop    r14
0x124f71:	pop    rsi
0x124f70:	pop    r14
0x124f6f:	pop    rbp; 	pop    r14
0x124f6e:	pop    r13; 	pop    r14
0x125008:	pop    rsi
0x125007:	pop    r14
0x125006:	pop    rbp; 	pop    r14
0x125005:	pop    r13; 	pop    r14
0x125178:	pop    rbp
0x125177:	pop    rbx; 	pop    rbp
0x125176:	rex.W pop rbx; 	pop    rbp
0x12530b:	pop    rdi
0x12530a:	pop    r15
0x125309:	pop    rsi; 	pop    r15
0x125308:	pop    r14; 	pop    r15
0x12534d:	pop    rdi
0x12534c:	pop    r15
0x12534b:	pop    rsi; 	pop    r15
0x12534a:	pop    r14; 	pop    r15
0x12542f:	pop    rdi
0x12542e:	pop    r15
0x12542d:	pop    rsi; 	pop    r15
0x12542c:	pop    r14; 	pop    r15
0x1254e7:	pop    rdi
0x1254e6:	pop    r15
0x1254e5:	pop    rsi; 	pop    r15
0x1254e4:	pop    r14; 	pop    r15
0x1255c7:	add    BYTE PTR [rcx],bh
0x1255c5:	add    eax,DWORD PTR [rax]; 	add    BYTE PTR [rcx],bh
0x1256d0:	add    BYTE PTR [rcx],bh
0x1256ce:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rcx],bh
0x125954:	sbb    edi,DWORD PTR [rcx]
0x1262f0:	pop    rdi
0x1262ef:	pop    r15
0x1262ee:	pop    rsi; 	pop    r15
0x1262ed:	pop    r14; 	pop    r15
0x12630c:	pop    rdi
0x12630b:	pop    r15
0x12630a:	pop    rsi; 	pop    r15
0x126309:	pop    r14; 	pop    r15
0x126692:	push   rbx
0x1266a8:	xor    eax,eax
0x1266a6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1266af:	add    bl,dh
0x126753:	add    eax,DWORD PTR [rax]
0x126752:	mov    BYTE PTR [rbx],0x0
0x126751:	mov    BYTE PTR [r11],0x0
0x126787:	add    BYTE PTR [rax-0x7d],cl
0x126860:	ror    BYTE PTR [rdi],0x84
0x126898:	ror    BYTE PTR [rdi],0x84
0x126959:	dec    DWORD PTR [rax-0x7d]
0x126973:	pop    rsp
0x126972:	pop    r12
0x126971:	pop    rbp; 	pop    r12
0x126970:	pop    rbx; 	pop    rbp; 	pop    r12
0x126bf8:	add    BYTE PTR [rax-0x7d],cl
0x126d67:	add    BYTE PTR [rax-0x7d],cl
0x126fb0:	or     BYTE PTR [rax-0x7d],cl
0x1270d3:	add    BYTE PTR [rax-0x7d],cl
0x1271a0:	pop    rdi
0x12719f:	pop    r15
0x12719e:	pop    rsi; 	pop    r15
0x12719d:	pop    r14; 	pop    r15
0x1274aa:	dec    DWORD PTR [rax-0x7d]
0x1274c3:	or     ecx,DWORD PTR [rax-0x7d]
0x1275de:	mov    bh,0xc0
0x1275dd:	movzx  eax,ax
0x1275dc:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x127733:	pop    rsi
0x127732:	pop    r14
0x127731:	pop    rbp; 	pop    r14
0x127730:	pop    r13; 	pop    r14
0x1277ca:	add    DWORD PTR [rax-0x7d],ecx
0x1277df:	pop    rsi
0x1277de:	pop    r14
0x1277dd:	pop    rbp; 	pop    r14
0x1277dc:	pop    r13; 	pop    r14
0x12787a:	or     ecx,DWORD PTR [rax-0x7d]
0x12794e:	pop    rdi
0x12794d:	pop    r15
0x12794c:	pop    rsi; 	pop    r15
0x12794b:	pop    r14; 	pop    r15
0x1279b5:	pop    rdi
0x1279b4:	pop    r15
0x1279b3:	pop    rsi; 	pop    r15
0x1279b2:	pop    r14; 	pop    r15
0x127a58:	or     ecx,DWORD PTR [rax-0x7d]
0x127a73:	leave  
0x127ab9:	pop    rsp
0x127ab8:	pop    r12
0x127ab7:	pop    rbp; 	pop    r12
0x127ab6:	pop    rbx; 	pop    rbp; 	pop    r12
0x127aeb:	push   rcx
0x127af9:	pop    rsp
0x127af8:	pop    r12
0x127af7:	pop    rbp; 	pop    r12
0x127af6:	pop    rbx; 	pop    rbp; 	pop    r12
0x127bd9:	and    BYTE PTR [rax-0x77],cl
0x127bed:	and    BYTE PTR [rax-0x77],cl
0x1280ad:	pop    rdi
0x1280ac:	pop    r15
0x1280ab:	pop    rsi; 	pop    r15
0x1280aa:	pop    r14; 	pop    r15
0x128342:	je     0x128348
0x128340:	test   eax,eax; 	je     0x128348
0x128359:	add    esp,0x8
0x128358:	add    rsp,0x8
0x1283a1:	je     0x1283a8
0x12839f:	adc    BYTE PTR [rdx],al; 	je     0x1283a8
0x128415:	pop    rdi
0x128414:	pop    r15
0x128413:	pop    rsi; 	pop    r15
0x128412:	pop    r14; 	pop    r15
0x12866b:	and    BYTE PTR [rax-0x77],cl
0x128676:	dec    DWORD PTR [rax+0x39]
0x128692:	dec    DWORD PTR [rax+0x39]
0x1286ae:	dec    DWORD PTR [rax+0x39]
0x1286c6:	dec    DWORD PTR [rax+0x39]
0x1286ef:	pop    rdi
0x1286ee:	pop    r15
0x1286ed:	pop    rsi; 	pop    r15
0x1286ec:	pop    r14; 	pop    r15
0x128721:	pop    rdi
0x128720:	pop    r15
0x12871f:	pop    rsi; 	pop    r15
0x12871e:	pop    r14; 	pop    r15
0x12877c:	jne    0x128780
0x12877a:	test   eax,eax; 	jne    0x128780
0x1287b4:	sbb    BYTE PTR [rax-0x7d],cl
0x1287c3:	pop    rbp
0x1287c2:	pop    rbx; 	pop    rbp
0x1287c1:	or     BYTE PTR [rbx+0x5d],bl
0x1288ca:	pop    rbx
0x1288c8:	add    BYTE PTR [rax],al; 	pop    rbx
0x1289c4:	pop    rbx
0x1289c2:	add    BYTE PTR [rax],al; 	pop    rbx
0x1289f9:	mov    eax,DWORD PTR [rax]
0x1289f8:	mov    rax,QWORD PTR [rax]
0x1289f7:	mov    rax,QWORD PTR fs:[rax]
0x128a58:	pop    rsp
0x128a57:	pop    r12
0x128a56:	pop    rbp; 	pop    r12
0x128a55:	pop    rbx; 	pop    rbp; 	pop    r12
0x128a78:	pop    rsp
0x128a77:	pop    r12
0x128a76:	pop    rbp; 	pop    r12
0x128a75:	pop    rbx; 	pop    rbp; 	pop    r12
0x128a90:	xor    eax,eax
0x128a8e:	idiv   bh; 	xor    eax,eax
0x128bb7:	add    BYTE PTR [rax-0x7d],cl
0x128be9:	add    DWORD PTR [rax-0x7d],ecx
0x128be8:	push   rbx; 	add    DWORD PTR [rax-0x7d],ecx
0x128d32:	or     ecx,DWORD PTR [rax-0x7d]
0x128d8f:	add    BYTE PTR [rax-0x7d],cl
0x128daf:	add    DWORD PTR [rax-0x7d],ecx
0x128dae:	push   rbx; 	add    DWORD PTR [rax-0x7d],ecx
0x128e0a:	pop    rdi
0x128e09:	pop    r15
0x128e08:	pop    rsi; 	pop    r15
0x128e07:	pop    r14; 	pop    r15
0x128e13:	add    DWORD PTR [rax-0x7d],ecx
0x128e12:	rex.XB add DWORD PTR [r8-0x7d],ecx
0x128ef3:	pop    rbp
0x128ef2:	pop    rdi; 	pop    rbp
0x128ef1:	pop    r15; 	pop    rbp
0x128ef0:	pop    rsi; 	pop    r15; 	pop    rbp
0x128fdc:	pop    rbp
0x128fdb:	pop    rdi; 	pop    rbp
0x128fda:	pop    r15; 	pop    rbp
0x128fd9:	pop    rsi; 	pop    r15; 	pop    rbp
0x1291e1:	pop    rdi
0x1291e0:	pop    r15
0x1291df:	pop    rsi; 	pop    r15
0x1291de:	pop    r14; 	pop    r15
0x1292b6:	pop    rdi
0x1292b5:	pop    r15
0x1292b4:	pop    rsi; 	pop    r15
0x1292b3:	pop    r14; 	pop    r15
0x12957b:	pop    rsi
0x12957a:	pop    r14
0x129579:	pop    rbp; 	pop    r14
0x129578:	pop    r13; 	pop    r14
0x129633:	pop    rsi
0x129632:	pop    r14
0x129631:	pop    rbp; 	pop    r14
0x129630:	pop    r13; 	pop    r14
0x1296ba:	add    BYTE PTR [rax-0x77],cl
0x12971d:	pop    rbp
0x12971c:	pop    rdi; 	pop    rbp
0x12971b:	pop    r15; 	pop    rbp
0x12971a:	pop    rsi; 	pop    r15; 	pop    rbp
0x129992:	pop    rbp
0x129991:	pop    rdi; 	pop    rbp
0x129990:	pop    r15; 	pop    rbp
0x12998f:	pop    rsi; 	pop    r15; 	pop    rbp
0x129aa9:	pop    rbp
0x129aa8:	pop    rdi; 	pop    rbp
0x129aa7:	pop    r15; 	pop    rbp
0x129aa6:	pop    rsi; 	pop    r15; 	pop    rbp
0x129ac2:	pop    rbp
0x129ac1:	pop    rdi; 	pop    rbp
0x129ac0:	pop    r15; 	pop    rbp
0x129abf:	pop    rsi; 	pop    r15; 	pop    rbp
0x129ca9:	pop    rbp
0x129ca8:	pop    rdi; 	pop    rbp
0x129ca7:	pop    r15; 	pop    rbp
0x129ca6:	pop    rsi; 	pop    r15; 	pop    rbp
0x129db2:	pop    rbp
0x129db1:	pop    rdi; 	pop    rbp
0x129db0:	pop    r15; 	pop    rbp
0x129daf:	pop    rsi; 	pop    r15; 	pop    rbp
0x129dea:	pop    rbp
0x129de9:	pop    rdi; 	pop    rbp
0x129de8:	pop    r15; 	pop    rbp
0x129de7:	pop    rsi; 	pop    r15; 	pop    rbp
0x12a0fc:	pop    rbp
0x12a0fb:	pop    rdi; 	pop    rbp
0x12a0fa:	pop    r15; 	pop    rbp
0x12a0f9:	pop    rsi; 	pop    r15; 	pop    rbp
0x12a30e:	pop    rdi
0x12a30d:	pop    r15
0x12a30c:	pop    rsi; 	pop    r15
0x12a30b:	pop    r14; 	pop    r15
0x12a360:	pop    rdi
0x12a35f:	pop    r15
0x12a35e:	pop    rsi; 	pop    r15
0x12a35d:	pop    r14; 	pop    r15
0x12a47c:	pop    rdi
0x12a47b:	pop    r15
0x12a47a:	pop    rsi; 	pop    r15
0x12a479:	pop    r14; 	pop    r15
0x12a4e7:	pop    rdi
0x12a4e6:	pop    r15
0x12a4e5:	pop    rsi; 	pop    r15
0x12a4e4:	pop    r14; 	pop    r15
0x12a5ee:	pop    rdi
0x12a5ed:	pop    r15
0x12a5ec:	pop    rsi; 	pop    r15
0x12a5eb:	pop    r14; 	pop    r15
0x12a607:	pop    rdi
0x12a606:	pop    r15
0x12a605:	pop    rsi; 	pop    r15
0x12a604:	pop    r14; 	pop    r15
0x12a7a5:	pop    rdi
0x12a7a4:	pop    r15
0x12a7a3:	pop    rsi; 	pop    r15
0x12a7a2:	pop    r14; 	pop    r15
0x12a828:	pop    rdi
0x12a827:	pop    r15
0x12a826:	pop    rsi; 	pop    r15
0x12a825:	pop    r14; 	pop    r15
0x12a9f4:	pop    rdi
0x12a9f3:	pop    r15
0x12a9f2:	pop    rsi; 	pop    r15
0x12a9f1:	pop    r14; 	pop    r15
0x12aab6:	pop    rdi
0x12aab5:	pop    r15
0x12aab4:	pop    rsi; 	pop    r15
0x12aab3:	pop    r14; 	pop    r15
0x12acaa:	pop    rdi
0x12aca9:	pop    r15
0x12aca8:	pop    rsi; 	pop    r15
0x12aca7:	pop    r14; 	pop    r15
0x12ad68:	pop    rdi
0x12ad67:	pop    r15
0x12ad66:	pop    rsi; 	pop    r15
0x12ad65:	pop    r14; 	pop    r15
0x12afb9:	add    cl,ch
0x12afb7:	add    BYTE PTR [rax],al; 	add    cl,ch
0x12affc:	add    esp,0x8
0x12affb:	add    rsp,0x8
0x12b003:	add    BYTE PTR [rax],al
0x12b001:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x12b027:	add    BYTE PTR [rax-0x7d],cl
0x12b047:	pop    rbx
0x12b045:	xor    eax,eax; 	pop    rbx
0x12b055:	pop    rbx
0x12b053:	add    BYTE PTR [rax],al; 	pop    rbx
0x12b063:	add    BYTE PTR [rax],al
0x12b061:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x12b097:	dec    DWORD PTR [rax-0x77]
0x12b096:	out    dx,eax; 	dec    DWORD PTR [rax-0x77]
0x12b0e4:	pop    rbp
0x12b0e3:	pop    r13
0x12b0e2:	pop    rsp; 	pop    r13
0x12b0e1:	pop    r12; 	pop    r13
0x12b172:	pop    rbp
0x12b171:	pop    r13
0x12b170:	pop    rsp; 	pop    r13
0x12b16f:	pop    r12; 	pop    r13
0x12b1f2:	pop    rbp
0x12b1f1:	pop    r13
0x12b1f0:	pop    rsp; 	pop    r13
0x12b1ef:	pop    r12; 	pop    r13
0x12b277:	pop    rbp
0x12b276:	pop    r13
0x12b275:	pop    rsp; 	pop    r13
0x12b274:	pop    r12; 	pop    r13
0x12b2f7:	pop    rbp
0x12b2f6:	pop    r13
0x12b2f5:	pop    rsp; 	pop    r13
0x12b2f4:	pop    r12; 	pop    r13
0x12b377:	pop    rbp
0x12b376:	pop    r13
0x12b375:	pop    rsp; 	pop    r13
0x12b374:	pop    r12; 	pop    r13
0x12b3f7:	pop    rbp
0x12b3f6:	pop    r13
0x12b3f5:	pop    rsp; 	pop    r13
0x12b3f4:	pop    r12; 	pop    r13
0x12b472:	pop    rbp
0x12b471:	pop    r13
0x12b470:	pop    rsp; 	pop    r13
0x12b46f:	pop    r12; 	pop    r13
0x12b4fc:	pop    rbp
0x12b4fb:	pop    r13
0x12b4fa:	pop    rsp; 	pop    r13
0x12b4f9:	pop    r12; 	pop    r13
0x12b572:	pop    rbp
0x12b571:	pop    r13
0x12b570:	pop    rsp; 	pop    r13
0x12b56f:	pop    r12; 	pop    r13
0x12b5f2:	pop    rbp
0x12b5f1:	pop    r13
0x12b5f0:	pop    rsp; 	pop    r13
0x12b5ef:	pop    r12; 	pop    r13
0x12b67c:	pop    rbp
0x12b67b:	pop    r13
0x12b67a:	pop    rsp; 	pop    r13
0x12b679:	pop    r12; 	pop    r13
0x12b6f7:	pop    rbp
0x12b6f6:	pop    r13
0x12b6f5:	pop    rsp; 	pop    r13
0x12b6f4:	pop    r12; 	pop    r13
0x12b772:	pop    rbp
0x12b771:	pop    r13
0x12b770:	pop    rsp; 	pop    r13
0x12b76f:	pop    r12; 	pop    r13
0x12b7a0:	xor    eax,eax
0x12b7b3:	add    BYTE PTR [rax],al
0x12b7b1:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x12b7c0:	xor    eax,eax
0x12b7be:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x12b7cf:	add    bl,dh
0x12b7cd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x12b88e:	pop    rbx
0x12b88b:	add    esp,0x30; 	pop    rbx
0x12b8c8:	pop    rbx
0x12b8c6:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x12b987:	pop    rbx
0x12b985:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x12b9bf:	pop    rbx
0x12b9bd:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x12b9ec:	pop    rbp
0x12b9eb:	pop    rbx; 	pop    rbp
0x12b9ea:	or     BYTE PTR [rbx+0x5d],bl
0x12bc67:	pop    rdi
0x12bc66:	pop    r15
0x12bc65:	pop    rsi; 	pop    r15
0x12bc64:	pop    r14; 	pop    r15
0x12beeb:	pop    rdi
0x12beea:	pop    r15
0x12bee9:	pop    rsi; 	pop    r15
0x12bee8:	pop    r14; 	pop    r15
0x12beef:	add    bl,dh
0x12beff:	add    bl,dh
0x12befd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x12bf10:	xor    eax,eax
0x12bf0e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x12bf1f:	add    bl,dh
0x12bf1d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x12bf7a:	pop    rbp
0x12bf79:	pop    rbx; 	pop    rbp
0x12bf78:	add    BYTE PTR [rbx+0x5d],bl
0x12bf77:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x12c12f:	pop    rdi
0x12c12e:	pop    r15
0x12c12d:	pop    rsi; 	pop    r15
0x12c12c:	pop    r14; 	pop    r15
0x12c260:	pop    rbp
0x12c25f:	pop    r13
0x12c25e:	pop    rsp; 	pop    r13
0x12c25d:	pop    r12; 	pop    r13
0x12c3ed:	pop    rbp
0x12c3ec:	pop    rdi; 	pop    rbp
0x12c3eb:	pop    r15; 	pop    rbp
0x12c3ea:	pop    rsi; 	pop    r15; 	pop    rbp
0x12c590:	pop    rbx
0x12c58e:	add    BYTE PTR [rax],al; 	pop    rbx
0x12c58d:	add    BYTE PTR [rax],r8b; 	pop    rbx
0x12c5a8:	je     0x12c5b0
0x12c5a6:	test   eax,eax; 	je     0x12c5b0
0x12c5c0:	add    esp,0x8
0x12c5bf:	add    rsp,0x8
0x12c67a:	pop    rbp
0x12c679:	pop    rdi; 	pop    rbp
0x12c678:	pop    r15; 	pop    rbp
0x12c677:	pop    rsi; 	pop    r15; 	pop    rbp
0x12c6cd:	pop    rbp
0x12c6cc:	pop    rdi; 	pop    rbp
0x12c6cb:	pop    r15; 	pop    rbp
0x12c6ca:	pop    rsi; 	pop    r15; 	pop    rbp
0x12c82c:	pop    rdi
0x12c82b:	pop    r15
0x12c82a:	pop    rsi; 	pop    r15
0x12c829:	pop    r14; 	pop    r15
0x12c9fb:	pop    rsi
0x12c9fa:	pop    r14
0x12c9f9:	pop    rbp; 	pop    r14
0x12c9f8:	pop    r13; 	pop    r14
0x12ca21:	pop    rsi
0x12ca20:	pop    r14
0x12ca1f:	pop    rbp; 	pop    r14
0x12ca1e:	pop    r13; 	pop    r14
0x12cb0a:	pop    rsi
0x12cb09:	pop    r14
0x12cb08:	pop    rbp; 	pop    r14
0x12cb07:	pop    r13; 	pop    r14
0x12cbfc:	pop    rbp
0x12cbfb:	pop    rbx; 	pop    rbp
0x12cbf9:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12cc91:	sbb    ecx,DWORD PTR [rax-0x7d]
0x12ccbb:	pop    rsp
0x12ccba:	pop    r12
0x12ccb9:	pop    rbp; 	pop    r12
0x12ccb8:	pop    rbx; 	pop    rbp; 	pop    r12
0x12cd24:	pop    rsp
0x12cd23:	pop    r12
0x12cd22:	pop    rbp; 	pop    r12
0x12cd21:	pop    rbx; 	pop    rbp; 	pop    r12
0x12cd65:	pop    rbp
0x12cd64:	pop    rbx; 	pop    rbp
0x12cd62:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12cd99:	pop    rbp
0x12cd98:	pop    rbx; 	pop    rbp
0x12cd97:	sbb    BYTE PTR [rbx+0x5d],bl
0x12cdc8:	pop    rsi
0x12cdc7:	pop    r14
0x12cdc6:	pop    rbp; 	pop    r14
0x12cdc5:	pop    r13; 	pop    r14
0x12cee6:	add    BYTE PTR [rax-0x77],cl
0x12cf98:	pop    rdi
0x12cf97:	pop    r15
0x12cf96:	pop    rsi; 	pop    r15
0x12cf95:	pop    r14; 	pop    r15
0x12cfda:	add    BYTE PTR [rax-0x77],cl
0x12d279:	pop    rdi
0x12d278:	pop    r15
0x12d277:	pop    rsi; 	pop    r15
0x12d276:	pop    r14; 	pop    r15
0x12d337:	add    BYTE PTR [rax-0x7d],cl
0x12d69f:	pop    rbp
0x12d69e:	pop    rbx; 	pop    rbp
0x12d69c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12d6dc:	pop    rbp
0x12d6db:	pop    rbx; 	pop    rbp
0x12d6da:	or     BYTE PTR [rbx+0x5d],bl
0x12d78c:	pop    rbp
0x12d78b:	pop    rbx; 	pop    rbp
0x12d789:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12d7dc:	pop    rbp
0x12d7db:	pop    rbx; 	pop    rbp
0x12d7d9:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12d835:	xor    eax,eax
0x12d833:	je     0x12d840; 	xor    eax,eax
0x12d85c:	pop    rbp
0x12d85b:	pop    rbx; 	pop    rbp
0x12d859:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12d8d1:	mov    DWORD PTR [rsi+0x8],eax
0x12d8df:	mov    DWORD PTR [rsi+0x8],eax
0x12d8de:	mov    QWORD PTR [rsi+0x8],rax
0x12d8f3:	add    BYTE PTR [rax],al
0x12d8f1:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x12d90f:	mov    DWORD PTR [rsi+0x10],eax
0x12d90e:	mov    QWORD PTR [rsi+0x10],rax
0x12d92b:	mov    DWORD PTR [rsi+0x10],eax
0x12d92a:	mov    QWORD PTR [rsi+0x10],rax
0x12d963:	mov    DWORD PTR [rsi+0x10],eax
0x12d962:	mov    QWORD PTR [rsi+0x10],rax
0x12d974:	add    BYTE PTR [rax],al
0x12d972:	or     eax,DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x12d984:	add    BYTE PTR [rax],al
0x12d982:	or     al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x12d994:	add    BYTE PTR [rax],al
0x12d992:	or     BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x12d9a4:	add    BYTE PTR [rax],al
0x12d9a2:	or     al,0x0; 	add    BYTE PTR [rax],al
0x12d9bf:	mov    DWORD PTR [rsi+0x10],eax
0x12d9be:	mov    QWORD PTR [rsi+0x10],rax
0x12da05:	pop    rsp
0x12da04:	pop    r12
0x12da03:	pop    rbp; 	pop    r12
0x12da02:	pop    rbx; 	pop    rbp; 	pop    r12
0x12dd60:	xor    eax,eax
0x12dd5f:	nop; 	xor    eax,eax
0x12dd5e:	xchg   ax,ax; 	xor    eax,eax
0x12dda8:	add    BYTE PTR [rax],al
0x12dda6:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x12de56:	pop    rsi
0x12de55:	pop    r14
0x12de54:	pop    rbp; 	pop    r14
0x12de53:	pop    r13; 	pop    r14
0x12e093:	add    BYTE PTR [rax],al
0x12e091:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x12e0a3:	add    BYTE PTR [rax],al
0x12e0a1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x12e0af:	add    bl,dh
0x12e0ad:	add    BYTE PTR [rax],al; 	add    bl,dh
0x12e107:	pop    rbp
0x12e106:	pop    rbx; 	pop    rbp
0x12e104:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12e14f:	pop    rbp
0x12e14e:	pop    rbx; 	pop    rbp
0x12e14c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12e1ac:	pop    rsp
0x12e1ab:	pop    r12
0x12e1aa:	pop    rbp; 	pop    r12
0x12e1a9:	rcr    BYTE PTR [rbp+0x41],0x5c
0x12e1c5:	pop    rsp
0x12e1c4:	pop    r12
0x12e1c3:	pop    rbp; 	pop    r12
0x12e1c2:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x12e224:	pop    rbp
0x12e223:	pop    rbx; 	pop    rbp
0x12e222:	or     BYTE PTR [rbx+0x5d],bl
0x12e291:	pop    rbx
0x12e28f:	add    BYTE PTR [rax],al; 	pop    rbx
0x12e2b1:	pop    rbx
0x12e2af:	xor    eax,eax; 	pop    rbx
0x12e2ae:	xchg   ebx,eax; 	xor    eax,eax; 	pop    rbx
0x12e423:	pop    rsi
0x12e422:	pop    r14
0x12e421:	pop    rbp; 	pop    r14
0x12e420:	pop    r13; 	pop    r14
0x12e56f:	pop    rdi
0x12e56e:	pop    r15
0x12e56d:	pop    rsi; 	pop    r15
0x12e56c:	pop    r14; 	pop    r15
0x12e5c4:	pop    rdi
0x12e5c3:	pop    r15
0x12e5c2:	pop    rsi; 	pop    r15
0x12e5c1:	pop    r14; 	pop    r15
0x12e613:	pop    rdi
0x12e612:	pop    r15
0x12e611:	pop    rsi; 	pop    r15
0x12e610:	pop    r14; 	pop    r15
0x12e69e:	pop    rbx
0x12e69b:	add    esp,0x10; 	pop    rbx
0x12e6d8:	pop    rbx
0x12e6d5:	add    esp,0x10; 	pop    rbx
0x12e707:	pop    rsp
0x12e706:	pop    r12
0x12e705:	pop    rbp; 	pop    r12
0x12e704:	pop    rbx; 	pop    rbp; 	pop    r12
0x12e728:	pop    rsp
0x12e727:	pop    r12
0x12e726:	pop    rbp; 	pop    r12
0x12e725:	pop    rbx; 	pop    rbp; 	pop    r12
0x12e7d0:	mov    DWORD PTR [rdx+0x68],ecx
0x12e7cf:	mov    QWORD PTR [rdx+0x68],rcx
0x12e7d8:	xor    eax,eax
0x12e7f1:	jb     0x12e813
0x12e7f0:	mov    DWORD PTR [rdx+0x20],esi
0x12e7ef:	mov    QWORD PTR [rdx+0x20],rsi
0x12e868:	pop    rbp
0x12e867:	pop    rbx; 	pop    rbp
0x12e866:	or     BYTE PTR [rbx+0x5d],bl
0x12e87e:	add    eax,edx
0x12e87d:	pop    rbp; 	add    eax,edx
0x12e87c:	pop    rbx; 	pop    rbp; 	add    eax,edx
0x12e8bd:	pop    rsp
0x12e8bc:	pop    r12
0x12e8bb:	pop    rbp; 	pop    r12
0x12e8ba:	pop    rbx; 	pop    rbp; 	pop    r12
0x12eaf4:	pop    rdi
0x12eaf3:	pop    r15
0x12eaf2:	pop    rsi; 	pop    r15
0x12eaf1:	pop    r14; 	pop    r15
0x12eb5b:	pop    rbx
0x12eb58:	add    esp,0x10; 	pop    rbx
0x12eb80:	pop    rbx
0x12eb7e:	add    BYTE PTR [rax],al; 	pop    rbx
0x12ebdb:	pop    rbx
0x12ebd8:	add    esp,0x10; 	pop    rbx
0x12ec00:	pop    rbx
0x12ebfe:	add    BYTE PTR [rax],al; 	pop    rbx
0x12ec95:	pop    rsp
0x12ec94:	pop    r12
0x12ec93:	pop    rbp; 	pop    r12
0x12ec92:	pop    rbx; 	pop    rbp; 	pop    r12
0x12ed45:	pop    rsi
0x12ed44:	pop    r14
0x12ed43:	pop    rbp; 	pop    r14
0x12ed42:	pop    r13; 	pop    r14
0x12ed7d:	adc    BYTE PTR [rcx],bh
0x12ed7c:	push   rbp; 	adc    BYTE PTR [rcx],bh
0x12ed8b:	pop    rsi
0x12ed8a:	pop    r14
0x12ed89:	pop    rbp; 	pop    r14
0x12ed88:	pop    r13; 	pop    r14
0x12eddd:	pop    rsp
0x12eddc:	pop    r12
0x12eddb:	pop    rbp; 	pop    r12
0x12edda:	pop    rbx; 	pop    rbp; 	pop    r12
0x12ee5f:	movsxd ecx,DWORD PTR [rax-0x77]
0x12ef27:	pop    rdi
0x12ef26:	pop    r15
0x12ef25:	pop    rsi; 	pop    r15
0x12ef24:	pop    r14; 	pop    r15
0x12f0da:	add    BYTE PTR [rax-0x77],cl
0x12f117:	pop    rdi
0x12f116:	pop    r15
0x12f115:	pop    rsi; 	pop    r15
0x12f114:	pop    r14; 	pop    r15
0x12f133:	pop    rdi
0x12f132:	pop    r15
0x12f131:	pop    rsi; 	pop    r15
0x12f130:	pop    r14; 	pop    r15
0x12f2a7:	pop    rdi
0x12f2a6:	pop    r15
0x12f2a5:	pop    rsi; 	pop    r15
0x12f2a4:	pop    r14; 	pop    r15
0x12f2fa:	pop    rdi
0x12f2f9:	pop    r15
0x12f2f8:	pop    rsi; 	pop    r15
0x12f2f7:	pop    r14; 	pop    r15
0x12f34e:	pop    rbp
0x12f34d:	pop    rbx; 	pop    rbp
0x12f34c:	rcr    BYTE PTR [rbx+0x5d],1
0x12f34b:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x12f3a4:	pop    rbp
0x12f3a3:	pop    rbx; 	pop    rbp
0x12f3a2:	rcr    BYTE PTR [rbx+0x5d],1
0x12f3a1:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x12f446:	pop    rdi
0x12f445:	pop    r15
0x12f444:	pop    rsi; 	pop    r15
0x12f443:	pop    r14; 	pop    r15
0x12f552:	pop    rdi
0x12f551:	pop    r15
0x12f550:	pop    rsi; 	pop    r15
0x12f54f:	pop    r14; 	pop    r15
0x12f5ee:	pop    rbp
0x12f5ed:	pop    rbx; 	pop    rbp
0x12f5eb:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x12f60c:	pop    rbp
0x12f60b:	pop    rbx; 	pop    rbp
0x12f609:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12f668:	pop    rbp
0x12f667:	pop    rbx; 	pop    rbp
0x12f666:	or     BYTE PTR [rbx+0x5d],bl
0x12f70f:	pop    rbp
0x12f70e:	pop    r13
0x12f70d:	pop    rsp; 	pop    r13
0x12f70c:	pop    r12; 	pop    r13
0x12f823:	pop    rbx
0x12f820:	add    esp,0x30; 	pop    rbx
0x12fae1:	adc    BYTE PTR [rcx-0x7d],cl
0x12fed8:	pop    rdi
0x12fed7:	pop    r15
0x12fed6:	pop    rsi; 	pop    r15
0x12fed5:	pop    r14; 	pop    r15
0x130342:	mov    BYTE PTR [rdi+0x7],al
0x130363:	mov    dh,0xc0
0x130362:	movzx  eax,al
0x130361:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x130388:	mov    dh,0xc0
0x130387:	movzx  eax,al
0x130386:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x1303a8:	mov    dh,0xc0
0x1303a7:	movzx  eax,al
0x1303a6:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x1303e3:	pop    rbp
0x1303e2:	pop    rbx; 	pop    rbp
0x1303e1:	or     BYTE PTR [rbx+0x5d],bl
0x130421:	pop    rbp
0x130420:	pop    rbx; 	pop    rbp
0x13041e:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x130441:	pop    rbp
0x130440:	pop    rbx; 	pop    rbp
0x13043e:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x130475:	pop    rbp
0x130474:	pop    rbx; 	pop    rbp
0x130473:	or     BYTE PTR [rbx+0x5d],bl
0x130499:	pop    rbp
0x130498:	pop    rbx; 	pop    rbp
0x130496:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x1304bc:	pop    rbp
0x1304bb:	pop    rbx; 	pop    rbp
0x1304b9:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x1304ff:	pop    rbp
0x1304fe:	pop    rbx; 	pop    rbp
0x1304fc:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x130535:	pop    rbp
0x130534:	pop    rbx; 	pop    rbp
0x130533:	add    BYTE PTR [rbx+0x5d],bl
0x130532:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x130557:	pop    rbp
0x130556:	pop    rbx; 	pop    rbp
0x130554:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x1305d6:	pop    rbp
0x1305d5:	pop    rbx; 	pop    rbp
0x1305d3:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x1305fe:	pop    rbp
0x1305fd:	pop    rbx; 	pop    rbp
0x1305fb:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x130625:	pop    rbp
0x130624:	pop    rbx; 	pop    rbp
0x130623:	or     BYTE PTR [rbx+0x5d],bl
0x13067f:	pop    rbp
0x13067e:	pop    rbx; 	pop    rbp
0x13067c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x1307a4:	pop    rbp
0x1307a3:	pop    r13
0x1307a2:	pop    rsp; 	pop    r13
0x1307a1:	pop    r12; 	pop    r13
0x1307e1:	pop    rbp
0x1307e0:	pop    r13
0x1307df:	pop    rsp; 	pop    r13
0x1307de:	pop    r12; 	pop    r13
0x13083a:	pop    rdi
0x130839:	pop    r15
0x130838:	pop    rsi; 	pop    r15
0x130837:	pop    r14; 	pop    r15
0x130944:	pop    rdi
0x130943:	pop    r15
0x130942:	pop    rsi; 	pop    r15
0x130941:	pop    r14; 	pop    r15
0x130c65:	pop    rdi
0x130c64:	pop    r15
0x130c63:	pop    rsi; 	pop    r15
0x130c62:	pop    r14; 	pop    r15
0x1314bb:	pop    rdi
0x1314ba:	pop    r15
0x1314b9:	pop    rsi; 	pop    r15
0x1314b8:	pop    r14; 	pop    r15
0x1314cf:	pop    rdi
0x1314ce:	pop    r15
0x1314cd:	pop    rsi; 	pop    r15
0x1314cc:	pop    r14; 	pop    r15
0x1316b7:	and    al,0xe8
0x131848:	add    esp,0x8
0x131847:	add    rsp,0x8
0x13197f:	pop    rbp
0x13197e:	pop    r13
0x13197d:	pop    rsp; 	pop    r13
0x13197c:	pop    r12; 	pop    r13
0x131afe:	pop    rbp
0x131afd:	pop    r13
0x131afc:	pop    rsp; 	pop    r13
0x131afb:	pop    r12; 	pop    r13
0x131bfc:	add    esp,0x18
0x131bfb:	add    rsp,0x18
0x131cc2:	or     bl,dh
0x131da8:	add    esp,0x48
0x131da7:	add    rsp,0x48
0x131ed9:	pop    rdi
0x131ed8:	pop    r15
0x131ed7:	pop    rsi; 	pop    r15
0x131ed6:	pop    r14; 	pop    r15
0x131efa:	pop    rdi
0x131ef9:	pop    r15
0x131ef8:	pop    rsi; 	pop    r15
0x131ef7:	pop    r14; 	pop    r15
0x131f19:	pop    rdi
0x131f18:	pop    r15
0x131f17:	pop    rsi; 	pop    r15
0x131f16:	pop    r14; 	pop    r15
0x132108:	pop    rdi
0x132107:	pop    r15
0x132106:	pop    rsi; 	pop    r15
0x132105:	pop    r14; 	pop    r15
0x13212a:	pop    rdi
0x132129:	pop    r15
0x132128:	pop    rsi; 	pop    r15
0x132127:	pop    r14; 	pop    r15
0x132149:	pop    rdi
0x132148:	pop    r15
0x132147:	pop    rsi; 	pop    r15
0x132146:	pop    r14; 	pop    r15
0x132231:	mov    DWORD PTR [rsi+0x10],eax
0x132230:	mov    QWORD PTR [rsi+0x10],rax
0x1322fe:	add    BYTE PTR [rax],al
0x1322fc:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13231a:	add    BYTE PTR [rax],al
0x132318:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x132332:	jp     0x13233c
0x132331:	mov    DWORD PTR [rdx+0x8],edi
0x132330:	mov    QWORD PTR [rdx+0x8],rdi
0x1323b6:	add    BYTE PTR [rax],al
0x1323b4:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1323c7:	add    BYTE PTR [rax],al
0x1323c5:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1323da:	add    BYTE PTR [rax],al
0x1323d8:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1323ea:	add    BYTE PTR [rax],al
0x1323e8:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x132400:	add    BYTE PTR [rax],al
0x1323fe:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x132419:	add    BYTE PTR [rax],al
0x132417:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x132430:	add    BYTE PTR [rax],al
0x13242e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x132446:	add    BYTE PTR [rax],al
0x132444:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x132460:	add    BYTE PTR [rax],al
0x13245e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x132468:	xor    eax,eax
0x132466:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x132640:	pop    rdi
0x13263f:	pop    r15
0x13263e:	pop    rsi; 	pop    r15
0x13263d:	pop    r14; 	pop    r15
0x132883:	pop    rbp
0x132882:	pop    rdi; 	pop    rbp
0x132881:	pop    r15; 	pop    rbp
0x132880:	pop    rsi; 	pop    r15; 	pop    rbp
0x13289a:	pop    rbp
0x132899:	pop    rdi; 	pop    rbp
0x132898:	pop    r15; 	pop    rbp
0x132897:	pop    rsi; 	pop    r15; 	pop    rbp
0x1328bf:	add    BYTE PTR [rcx],ch
0x132906:	pop    rbp
0x132905:	pop    r13
0x132904:	pop    rsp; 	pop    r13
0x132903:	pop    r12; 	pop    r13
0x13291c:	pop    rbp
0x13291b:	pop    r13
0x13291a:	pop    rsp; 	pop    r13
0x132919:	pop    r12; 	pop    r13
0x132c99:	pop    rdi
0x132c98:	pop    r15
0x132c97:	pop    rsi; 	pop    r15
0x132c96:	pop    r14; 	pop    r15
0x132cc7:	pop    rdi
0x132cc6:	pop    r15
0x132cc5:	pop    rsi; 	pop    r15
0x132cc4:	pop    r14; 	pop    r15
0x132db3:	add    BYTE PTR [rax],al
0x132db1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x132f8c:	pop    rdi
0x132f8b:	pop    r15
0x132f8a:	pop    rsi; 	pop    r15
0x132f89:	pop    r14; 	pop    r15
0x13303a:	pop    rbp
0x133039:	pop    rbx; 	pop    rbp
0x133037:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x133048:	jne    0x133050
0x133046:	test   eax,eax; 	jne    0x133050
0x133066:	add    eax,0x2
0x1330a6:	pop    rsp
0x1330a5:	pop    r12
0x1330a4:	pop    rbp; 	pop    r12
0x1330a3:	pop    rbx; 	pop    rbp; 	pop    r12
0x1330d9:	pop    rsp
0x1330d8:	pop    r12
0x1330d7:	pop    rbp; 	pop    r12
0x1330d6:	pop    rbx; 	pop    rbp; 	pop    r12
0x133200:	pop    rdi
0x1331ff:	pop    r15
0x1331fe:	pop    rsi; 	pop    r15
0x1331fd:	pop    r14; 	pop    r15
0x133229:	pop    rdi
0x133228:	pop    r15
0x133227:	pop    rsi; 	pop    r15
0x133226:	pop    r14; 	pop    r15
0x133276:	ror    BYTE PTR [rdi],0x84
0x13335b:	pop    rsi
0x13335a:	pop    r14
0x133359:	pop    rbp; 	pop    r14
0x133358:	pop    r13; 	pop    r14
0x133453:	pop    rdi
0x133452:	pop    r15
0x133451:	pop    rsi; 	pop    r15
0x133450:	pop    r14; 	pop    r15
0x1335bf:	add    BYTE PTR [rax-0x77],cl
0x13363c:	pop    rsi
0x13363b:	pop    r14
0x13363a:	pop    rbp; 	pop    r14
0x133639:	pop    r13; 	pop    r14
0x13368b:	pop    rsi
0x13368a:	pop    r14
0x133689:	pop    rbp; 	pop    r14
0x133688:	pop    r13; 	pop    r14
0x1336e9:	out    0x89,eax
0x1336f9:	or     BYTE PTR [rax+0x63],cl
0x133760:	pop    rbp
0x13375f:	pop    rbx; 	pop    rbp
0x13375e:	sbb    BYTE PTR [rbx+0x5d],bl
0x13376f:	add    bl,dh
0x13376e:	add    bl,sil
0x1337c6:	xor    eax,eax
0x1337c4:	je     0x1337d0; 	xor    eax,eax
0x133813:	pop    rbp
0x133812:	pop    rbx; 	pop    rbp
0x133811:	sbb    BYTE PTR [rbx+0x5d],bl
0x1338fd:	pop    rsp
0x1338fc:	pop    r12
0x1338fb:	pop    rbp; 	pop    r12
0x1338fa:	pop    rbx; 	pop    rbp; 	pop    r12
0x1339ca:	pop    rsp
0x1339c9:	pop    r12
0x1339c8:	pop    rbp; 	pop    r12
0x1339c7:	rcr    BYTE PTR [rbp+0x41],0x5c
0x133ae5:	pop    rsp
0x133ae4:	pop    r12
0x133ae3:	pop    rbp; 	pop    r12
0x133ae2:	pop    rbx; 	pop    rbp; 	pop    r12
0x133b17:	out    0xe8,eax
0x133b71:	pop    rsp
0x133b70:	pop    r12
0x133b6f:	pop    rbp; 	pop    r12
0x133b6e:	pop    rbx; 	pop    rbp; 	pop    r12
0x133bbd:	adc    ecx,DWORD PTR [rax-0x7d]
0x133c6a:	pop    rdi
0x133c69:	pop    r15
0x133c68:	pop    rsi; 	pop    r15
0x133c67:	pop    r14; 	pop    r15
0x133e2f:	dec    DWORD PTR [rax-0x77]
0x133e85:	pop    rdi
0x133e84:	pop    r15
0x133e83:	pop    rsi; 	pop    r15
0x133e82:	pop    r14; 	pop    r15
0x133fff:	add    bl,dh
0x13411e:	pop    rdi
0x13411d:	pop    r15
0x13411c:	pop    rsi; 	pop    r15
0x13411b:	pop    r14; 	pop    r15
0x134218:	add    BYTE PTR [rax],al
0x134216:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13430d:	pop    rbp
0x13430c:	pop    r13
0x13430b:	pop    rsp; 	pop    r13
0x13430a:	pop    r12; 	pop    r13
0x13439f:	add    BYTE PTR [rax-0x77],cl
0x134532:	pop    rdi
0x134531:	pop    r15
0x134530:	pop    rsi; 	pop    r15
0x13452f:	pop    r14; 	pop    r15
0x1345ff:	add    BYTE PTR [rax+0x63],cl
0x134693:	pop    rbp
0x134692:	pop    rdi; 	pop    rbp
0x134691:	pop    r15; 	pop    rbp
0x134690:	pop    rsi; 	pop    r15; 	pop    rbp
0x1346df:	pop    rbp
0x1346de:	pop    rdi; 	pop    rbp
0x1346dd:	pop    r15; 	pop    rbp
0x1346dc:	pop    rsi; 	pop    r15; 	pop    rbp
0x1347b3:	pop    rbp
0x1347b2:	pop    rdi; 	pop    rbp
0x1347b1:	pop    r15; 	pop    rbp
0x1347b0:	pop    rsi; 	pop    r15; 	pop    rbp
0x134853:	pop    rbp
0x134852:	pop    rdi; 	pop    rbp
0x134851:	pop    r15; 	pop    rbp
0x134850:	pop    rsi; 	pop    r15; 	pop    rbp
0x134ac3:	pop    rbp
0x134ac2:	pop    r13
0x134ac1:	pop    rsp; 	pop    r13
0x134ac0:	pop    r12; 	pop    r13
0x134ed0:	pop    rbp
0x134ecf:	pop    r13
0x134ece:	pop    rsp; 	pop    r13
0x134ecd:	pop    r12; 	pop    r13
0x134fb8:	mov    DWORD PTR [rsi+0x10],eax
0x134fb7:	mov    QWORD PTR [rsi+0x10],rax
0x134fdf:	add    bl,dh
0x134fdd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x13506b:	add    BYTE PTR [rax],al
0x135069:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x135089:	add    BYTE PTR [rax],al
0x135087:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1350a2:	jp     0x1350ac
0x1350a1:	mov    DWORD PTR [rdx+0x8],edi
0x1350a0:	mov    QWORD PTR [rdx+0x8],rdi
0x1350ba:	jp     0x1350c4
0x1350b9:	mov    DWORD PTR [rdx+0x8],edi
0x1350b8:	mov    QWORD PTR [rdx+0x8],rdi
0x1350c7:	add    BYTE PTR [rax],al
0x1350c5:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1350da:	add    BYTE PTR [rax],al
0x1350d8:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1350ea:	add    BYTE PTR [rax],al
0x1350e8:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1350fd:	add    BYTE PTR [rax],al
0x1350fb:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13510e:	add    BYTE PTR [rax],al
0x13510c:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x135125:	add    BYTE PTR [rax],al
0x135123:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13513b:	add    BYTE PTR [rax],al
0x135139:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13514d:	add    BYTE PTR [rax],al
0x13514b:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x135150:	xor    eax,eax
0x13514f:	ret    ; 	xor    eax,eax
0x13514e:	add    bl,al; 	xor    eax,eax
0x135309:	pop    rdi
0x135308:	pop    r15
0x135307:	pop    rsi; 	pop    r15
0x135306:	pop    r14; 	pop    r15
0x13545f:	add    BYTE PTR [rcx],ch
0x1354a0:	pop    rbp
0x13549f:	pop    r13
0x13549e:	pop    rsp; 	pop    r13
0x13549d:	pop    r12; 	pop    r13
0x1354b4:	pop    rbp
0x1354b3:	pop    r13
0x1354b2:	pop    rsp; 	pop    r13
0x1354b1:	pop    r12; 	pop    r13
0x1355f2:	add    BYTE PTR [rax-0x77],cl
0x135687:	sub    al,ch
0x13570a:	pop    rdi
0x135709:	pop    r15
0x135708:	pop    rsi; 	pop    r15
0x135707:	pop    r14; 	pop    r15
0x1357bf:	pop    rdi
0x1357be:	pop    r15
0x1357bd:	pop    rsi; 	pop    r15
0x1357bc:	pop    r14; 	pop    r15
0x135858:	mov    DWORD PTR [rsi+0x10],eax
0x135857:	mov    QWORD PTR [rsi+0x10],rax
0x13587f:	add    bl,dh
0x13587d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x1358c2:	add    BYTE PTR [rax],al
0x1358c0:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1358da:	add    BYTE PTR [rax],al
0x1358d8:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1358f2:	jp     0x1358fc
0x1358f1:	mov    DWORD PTR [rdx+0x8],edi
0x1358f0:	mov    QWORD PTR [rdx+0x8],rdi
0x13590a:	jp     0x135914
0x135909:	mov    DWORD PTR [rdx+0x8],edi
0x135908:	mov    QWORD PTR [rdx+0x8],rdi
0x135922:	add    BYTE PTR [rax],al
0x135920:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13593a:	jp     0x135944
0x135939:	mov    DWORD PTR [rdx+0x8],edi
0x135938:	mov    QWORD PTR [rdx+0x8],rdi
0x135947:	add    BYTE PTR [rax],al
0x135945:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13595a:	add    BYTE PTR [rax],al
0x135958:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13596a:	add    BYTE PTR [rax],al
0x135968:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x135983:	add    BYTE PTR [rax],al
0x135981:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1359a4:	add    BYTE PTR [rax],al
0x1359a2:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1359c4:	add    BYTE PTR [rax],al
0x1359c2:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1359e2:	add    BYTE PTR [rax],al
0x1359e0:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1359fc:	add    BYTE PTR [rax],al
0x1359fa:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x135a00:	xor    eax,eax
0x1359ff:	nop; 	xor    eax,eax
0x1359fe:	ret    ; 	nop; 	xor    eax,eax
0x135d2e:	pop    rdi
0x135d2d:	pop    r15
0x135d2c:	pop    rsi; 	pop    r15
0x135d2b:	pop    r14; 	pop    r15
0x136298:	pop    rdi
0x136297:	pop    r15
0x136296:	pop    rsi; 	pop    r15
0x136295:	pop    r14; 	pop    r15
0x1363af:	add    BYTE PTR [rax-0x77],cl
0x136558:	pop    rdi
0x136557:	pop    r15
0x136556:	pop    rsi; 	pop    r15
0x136555:	pop    r14; 	pop    r15
0x13666f:	add    BYTE PTR [rax-0x77],cl
0x136764:	add    BYTE PTR [rax-0x77],cl
0x1367da:	pop    rdi
0x1367d9:	pop    r15
0x1367d8:	pop    rsi; 	pop    r15
0x1367d7:	pop    r14; 	pop    r15
0x136a29:	pop    rbx
0x136a26:	add    esp,0x10; 	pop    rbx
0x136b6b:	pop    rbp
0x136b6a:	pop    rbx; 	pop    rbp
0x136b69:	add    BYTE PTR [rbx+0x5d],bl
0x136b68:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x136c16:	pop    rbp
0x136c15:	pop    rbx; 	pop    rbp
0x136c14:	add    BYTE PTR [rbx+0x5d],bl
0x136c13:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x136d65:	pop    rbx
0x136d62:	add    esp,0x10; 	pop    rbx
0x136e63:	pop    rbx
0x136e62:	jo     0x136ebf
0x136e60:	add    esp,0x70; 	pop    rbx
0x136eb7:	add    al,ch
0x136eb5:	add    BYTE PTR [rax],al; 	add    al,ch
0x136f58:	pop    rbx
0x136f55:	add    esp,0x20; 	pop    rbx
0x136fb7:	add    al,ch
0x136fb5:	add    BYTE PTR [rax],al; 	add    al,ch
0x137058:	pop    rbx
0x137055:	add    esp,0x20; 	pop    rbx
0x1370dc:	pop    rbp
0x1370db:	pop    rbx; 	pop    rbp
0x1370da:	cmp    BYTE PTR [rbx+0x5d],bl
0x13721c:	pop    rbp
0x13721b:	pop    rbx; 	pop    rbp
0x13721a:	cmp    BYTE PTR [rbx+0x5d],bl
0x1373b1:	pop    rbp
0x1373b0:	pop    rbx; 	pop    rbp
0x1373af:	sub    BYTE PTR [rbx+0x5d],bl
0x137495:	pop    rbx
0x137492:	add    esp,0x10; 	pop    rbx
0x13758e:	pop    rbp
0x13758d:	pop    rbx; 	pop    rbp
0x13758c:	sbb    BYTE PTR [rbx+0x5d],bl
0x1375e0:	pop    rbx
0x1375df:	nop; 	pop    rbx
0x137678:	pop    rsp
0x137677:	pop    r12
0x137676:	pop    rbp; 	pop    r12
0x137675:	pop    rbx; 	pop    rbp; 	pop    r12
0x1376c1:	pop    rsp
0x1376c0:	pop    r12
0x1376bf:	pop    rbp; 	pop    r12
0x1376be:	pop    rbx; 	pop    rbp; 	pop    r12
0x13786b:	pop    rsi
0x13786a:	pop    r14
0x137869:	pop    rbp; 	pop    r14
0x137868:	pop    r13; 	pop    r14
0x137880:	pop    rsi
0x13787f:	pop    r14
0x13787e:	pop    rbp; 	pop    r14
0x13787d:	pop    r13; 	pop    r14
0x137990:	pop    rbp
0x13798f:	pop    r13
0x13798e:	pop    rsp; 	pop    r13
0x13798d:	pop    r12; 	pop    r13
0x137ad0:	pop    rbp
0x137acf:	pop    r13
0x137ace:	pop    rsp; 	pop    r13
0x137acd:	pop    r12; 	pop    r13
0x137c2e:	pop    rdi
0x137c2d:	pop    r15
0x137c2c:	pop    rsi; 	pop    r15
0x137c2b:	pop    r14; 	pop    r15
0x137ccf:	pop    rsp
0x137cce:	pop    r12
0x137ccd:	pop    rbp; 	pop    r12
0x137ccc:	rcr    BYTE PTR [rbp+0x41],0x5c
0x137cf3:	pop    rsp
0x137cf2:	pop    r12
0x137cf1:	pop    rbp; 	pop    r12
0x137cf0:	pop    rbx; 	pop    rbp; 	pop    r12
0x137d57:	fucomip st,st(0)
0x137d68:	pop    rbp
0x137d67:	pop    rbx; 	pop    rbp
0x137d66:	sbb    BYTE PTR [rbx+0x5d],bl
0x137d81:	pop    rbp
0x137d80:	pop    rbx; 	pop    rbp
0x137d7f:	call   FWORD PTR [rbx+0x5d]
0x137eb5:	pop    rdi
0x137eb4:	pop    r15
0x137eb3:	pop    rsi; 	pop    r15
0x137eb2:	pop    r14; 	pop    r15
0x1380f3:	pop    rdi
0x1380f2:	pop    r15
0x1380f1:	pop    rsi; 	pop    r15
0x1380f0:	pop    r14; 	pop    r15
0x138220:	mov    DWORD PTR [rax],edx
0x13821f:	mov    QWORD PTR [rax],rdx
0x13821e:	mov    QWORD PTR fs:[rax],rdx
0x138241:	pop    rbx
0x13823f:	je     0x138248; 	pop    rbx
0x138271:	pop    rbx
0x13826f:	mov    DWORD PTR [rbx],eax; 	pop    rbx
0x13826e:	mov    QWORD PTR [rbx],rax; 	pop    rbx
0x1382c0:	pop    rbx
0x1382be:	mov    DWORD PTR [rbx],eax; 	pop    rbx
0x1382bd:	mov    QWORD PTR [rbx],rax; 	pop    rbx
0x1382e6:	add    esp,0x8
0x1382e5:	add    rsp,0x8
0x1382f8:	add    esp,0x8
0x1382f7:	add    rsp,0x8
0x13831a:	add    esp,0x8
0x138319:	add    rsp,0x8
0x138328:	add    esp,0x8
0x138327:	add    rsp,0x8
0x13834c:	add    esp,0x8
0x13834b:	add    rsp,0x8
0x138358:	add    esp,0x8
0x138357:	add    rsp,0x8
0x13837c:	add    esp,0x8
0x13837b:	add    rsp,0x8
0x138388:	add    esp,0x8
0x138387:	add    rsp,0x8
0x1383ab:	add    BYTE PTR [rax-0x77],cl
0x138459:	pop    rbp
0x138458:	pop    r13
0x138457:	pop    rsp; 	pop    r13
0x138456:	pop    r12; 	pop    r13
0x1384ac:	pop    rbp
0x1384ab:	pop    r13
0x1384aa:	pop    rsp; 	pop    r13
0x1384a9:	pop    r12; 	pop    r13
0x138519:	pop    rbp
0x138518:	pop    r13
0x138517:	pop    rsp; 	pop    r13
0x138516:	pop    r12; 	pop    r13
0x13860d:	pop    rdi
0x13860c:	pop    r15
0x13860b:	pop    rsi; 	pop    r15
0x13860a:	pop    r14; 	pop    r15
0x1386f6:	pop    rsp
0x1386f5:	pop    r12
0x1386f4:	pop    rbp; 	pop    r12
0x1386f3:	pop    rbx; 	pop    rbp; 	pop    r12
0x13876c:	add    esp,0x68
0x13876b:	add    rsp,0x68
0x1387b2:	add    esp,0x68
0x1387b1:	add    rsp,0x68
0x138802:	add    esp,0x68
0x138801:	add    rsp,0x68
0x138852:	add    esp,0x68
0x138851:	add    rsp,0x68
0x13888b:	add    esp,0x68
0x13888a:	add    rsp,0x68
0x1388bf:	add    esp,0x68
0x1388be:	add    rsp,0x68
0x138912:	add    esp,0x68
0x138911:	add    rsp,0x68
0x13896c:	add    esp,0x68
0x13896b:	add    rsp,0x68
0x138b4b:	pop    rdi
0x138b4a:	pop    r15
0x138b49:	pop    rsi; 	pop    r15
0x138b48:	pop    r14; 	pop    r15
0x138c96:	fmul   QWORD PTR [rax-0x7d]
0x138c95:	rex.R fmul QWORD PTR [rax-0x7d]
0x138cb4:	pop    rdi
0x138cb3:	pop    r15
0x138cb2:	pop    rsi; 	pop    r15
0x138cb1:	pop    r14; 	pop    r15
0x138d3e:	add    DWORD PTR [rax-0x7d],ecx
0x138e8e:	fmul   QWORD PTR [rax-0x7d]
0x138e8d:	rex.R fmul QWORD PTR [rax-0x7d]
0x138eaf:	pop    rdi
0x138eae:	pop    r15
0x138ead:	pop    rsi; 	pop    r15
0x138eac:	pop    r14; 	pop    r15
0x138ecb:	je     0x138ed0
0x138ec9:	cmp    BYTE PTR [rax],bl; 	je     0x138ed0
0x138ef0:	add    esp,0x18
0x138eef:	add    rsp,0x18
0x138f05:	dec    DWORD PTR [rax-0x77]
0x138f29:	pop    rbx
0x138f28:	out    0x5b,eax
0x138f27:	jne    0x138f10; 	pop    rbx
0x138f33:	add    BYTE PTR [rax],al
0x138f31:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x1390ed:	pop    rdi
0x1390ec:	pop    r15
0x1390eb:	pop    rsi; 	pop    r15
0x1390ea:	pop    r14; 	pop    r15
0x13919a:	pop    rbp
0x139199:	pop    rbx; 	pop    rbp
0x139197:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x1391a8:	jne    0x1391b0
0x1391a6:	test   eax,eax; 	jne    0x1391b0
0x1391c6:	add    eax,0x2
0x139206:	pop    rsp
0x139205:	pop    r12
0x139204:	pop    rbp; 	pop    r12
0x139203:	pop    rbx; 	pop    rbp; 	pop    r12
0x139220:	pop    rsp
0x13921f:	pop    r12
0x13921e:	pop    rbp; 	pop    r12
0x13921d:	pop    rbx; 	pop    rbp; 	pop    r12
0x13924f:	add    BYTE PTR [rcx],ch
0x139287:	pop    rbp
0x139286:	pop    r13
0x139285:	pop    rsp; 	pop    r13
0x139284:	pop    r12; 	pop    r13
0x13929c:	pop    rbp
0x13929b:	pop    r13
0x13929a:	pop    rsp; 	pop    r13
0x139299:	pop    r12; 	pop    r13
0x13931b:	pop    rsi
0x13931a:	pop    r14
0x139319:	pop    rbp; 	pop    r14
0x139318:	pop    r13; 	pop    r14
0x1393e4:	pop    rsi
0x1393e3:	pop    r14
0x1393e2:	pop    rbp; 	pop    r14
0x1393e1:	pop    r13; 	pop    r14
0x139493:	pop    rsi
0x139492:	pop    r14
0x139491:	pop    rbp; 	pop    r14
0x139490:	pop    r13; 	pop    r14
0x13957f:	add    BYTE PTR [rax-0x77],cl
0x1395fc:	pop    rsi
0x1395fb:	pop    r14
0x1395fa:	pop    rbp; 	pop    r14
0x1395f9:	pop    r13; 	pop    r14
0x13964b:	pop    rsi
0x13964a:	pop    r14
0x139649:	pop    rbp; 	pop    r14
0x139648:	pop    r13; 	pop    r14
0x139653:	add    BYTE PTR [rax],al
0x139651:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x1399a2:	pop    rdi
0x1399a1:	pop    r15
0x1399a0:	pop    rsi; 	pop    r15
0x13999f:	pop    r14; 	pop    r15
0x1399b7:	pop    rdi
0x1399b6:	pop    r15
0x1399b5:	pop    rsi; 	pop    r15
0x1399b4:	pop    r14; 	pop    r15
0x139a01:	pop    rdi
0x139a00:	pop    r15
0x1399ff:	pop    rsi; 	pop    r15
0x1399fe:	pop    r14; 	pop    r15
0x139a85:	pop    rdi
0x139a84:	pop    r15
0x139a83:	pop    rsi; 	pop    r15
0x139a82:	pop    r14; 	pop    r15
0x139d35:	add    BYTE PTR [rax-0x77],cl
0x139e2e:	pop    rdi
0x139e2d:	pop    r15
0x139e2c:	pop    rsi; 	pop    r15
0x139e2b:	pop    r14; 	pop    r15
0x139f9d:	add    BYTE PTR [rax-0x77],cl
0x13a08e:	pop    rsi
0x13a08d:	pop    r14
0x13a08c:	pop    rbp; 	pop    r14
0x13a08b:	pop    r13; 	pop    r14
0x13a0cc:	pop    rsi
0x13a0cb:	pop    r14
0x13a0ca:	pop    rbp; 	pop    r14
0x13a0c9:	pop    r13; 	pop    r14
0x13a1de:	pop    rbp
0x13a1dd:	pop    r13
0x13a1dc:	pop    rsp; 	pop    r13
0x13a1db:	pop    r12; 	pop    r13
0x13a24b:	pop    rbp
0x13a24a:	pop    r13
0x13a249:	pop    rsp; 	pop    r13
0x13a248:	pop    r12; 	pop    r13
0x13a4cd:	pop    rsi
0x13a4cc:	pop    r14
0x13a4cb:	pop    rbp; 	pop    r14
0x13a4ca:	pop    r13; 	pop    r14
0x13a4e5:	pop    rsi
0x13a4e4:	pop    r14
0x13a4e3:	pop    rbp; 	pop    r14
0x13a4e2:	pop    r13; 	pop    r14
0x13a51d:	imul   ecx,DWORD PTR [rax-0x75],0x5
0x13a695:	pop    rsi
0x13a694:	pop    r14
0x13a693:	pop    rbp; 	pop    r14
0x13a692:	pop    r13; 	pop    r14
0x13a6b5:	pop    rsi
0x13a6b4:	pop    r14
0x13a6b3:	pop    rbp; 	pop    r14
0x13a6b2:	pop    r13; 	pop    r14
0x13a70e:	pop    rdi
0x13a70d:	pop    r15
0x13a70c:	pop    rsi; 	pop    r15
0x13a70b:	pop    r14; 	pop    r15
0x13a7e3:	dec    DWORD PTR [rax-0x77]
0x13a7e2:	out    dx,al; 	dec    DWORD PTR [rax-0x77]
0x13a884:	pop    rdi
0x13a883:	pop    r15
0x13a882:	pop    rsi; 	pop    r15
0x13a881:	pop    r14; 	pop    r15
0x13a8a2:	pop    rdi
0x13a8a1:	pop    r15
0x13a8a0:	pop    rsi; 	pop    r15
0x13a89f:	pop    r14; 	pop    r15
0x13a8a7:	add    BYTE PTR [rax],al
0x13a8a5:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13a8e0:	pop    rbp
0x13a8df:	pop    rbx; 	pop    rbp
0x13a8dd:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x13a93c:	pop    rbp
0x13a93b:	pop    rbx; 	pop    rbp
0x13a93a:	add    BYTE PTR [rbx+0x5d],bl
0x13a939:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x13a947:	pop    rbp
0x13a946:	pop    rbx; 	pop    rbp
0x13a944:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13a986:	add    esp,0x38
0x13a985:	add    rsp,0x38
0x13a993:	add    BYTE PTR [rax],al
0x13a991:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13a9be:	pop    rbx
0x13a9bb:	add    esp,0x10; 	pop    rbx
0x13a9df:	pop    rbx
0x13a9dd:	add    BYTE PTR [rax],al; 	pop    rbx
0x13aa00:	pop    rbx
0x13a9fd:	add    esp,0x10; 	pop    rbx
0x13aa2e:	pop    rbx
0x13aa2b:	add    esp,0x10; 	pop    rbx
0x13aa4f:	pop    rbx
0x13aa4d:	add    BYTE PTR [rax],al; 	pop    rbx
0x13aa6f:	pop    rbx
0x13aa6c:	add    esp,0x10; 	pop    rbx
0x13aa98:	mov    dh,0xc0
0x13aa97:	movzx  eax,al
0x13aade:	pop    rbx
0x13aadb:	add    esp,0x10; 	pop    rbx
0x13aaff:	pop    rbx
0x13aafd:	add    BYTE PTR [rax],al; 	pop    rbx
0x13ab44:	pop    rbp
0x13ab43:	pop    rbx; 	pop    rbp
0x13ab42:	sbb    BYTE PTR [rbx+0x5d],bl
0x13ab8d:	pop    rbp
0x13ab8c:	pop    rbx; 	pop    rbp
0x13ab8a:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x13ac04:	pop    rbp
0x13ac03:	pop    rbx; 	pop    rbp
0x13ac02:	sbb    BYTE PTR [rbx+0x5d],bl
0x13ac4d:	pop    rbp
0x13ac4c:	pop    rbx; 	pop    rbp
0x13ac4a:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x13acc4:	pop    rbp
0x13acc3:	pop    rbx; 	pop    rbp
0x13acc2:	sbb    BYTE PTR [rbx+0x5d],bl
0x13ad0d:	pop    rbp
0x13ad0c:	pop    rbx; 	pop    rbp
0x13ad0a:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x13ad84:	pop    rbp
0x13ad83:	pop    rbx; 	pop    rbp
0x13ad82:	sbb    BYTE PTR [rbx+0x5d],bl
0x13adcd:	pop    rbp
0x13adcc:	pop    rbx; 	pop    rbp
0x13adca:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x13ae3e:	pop    rbx
0x13ae3b:	add    esp,0x10; 	pop    rbx
0x13ae60:	pop    rbx
0x13ae5e:	add    BYTE PTR [rax],al; 	pop    rbx
0x13ae81:	pop    rbx
0x13ae7e:	add    esp,0x10; 	pop    rbx
0x13aeae:	pop    rbx
0x13aeab:	add    esp,0x10; 	pop    rbx
0x13aed0:	pop    rbx
0x13aece:	add    BYTE PTR [rax],al; 	pop    rbx
0x13aef0:	pop    rbx
0x13aeed:	add    esp,0x10; 	pop    rbx
0x13af28:	pop    rbp
0x13af27:	pop    rbx; 	pop    rbp
0x13af26:	sbb    BYTE PTR [rbx+0x5d],bl
0x13af37:	pop    rbp
0x13af36:	pop    rbx; 	pop    rbp
0x13af34:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13afa7:	pop    rbp
0x13afa6:	pop    rbx; 	pop    rbp
0x13afa5:	sbb    BYTE PTR [rbx+0x5d],bl
0x13afb7:	pop    rbp
0x13afb6:	pop    rbx; 	pop    rbp
0x13afb4:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13b01e:	pop    rbx
0x13b01b:	add    esp,0x10; 	pop    rbx
0x13b045:	pop    rbx
0x13b043:	add    BYTE PTR [rax],al; 	pop    rbx
0x13b06e:	pop    rbx
0x13b06b:	add    esp,0x10; 	pop    rbx
0x13b08e:	pop    rbx
0x13b08b:	add    esp,0x10; 	pop    rbx
0x13b0af:	pop    rbx
0x13b0ad:	add    BYTE PTR [rax],al; 	pop    rbx
0x13b0d0:	pop    rbx
0x13b0cd:	add    esp,0x10; 	pop    rbx
0x13b114:	pop    rbp
0x13b113:	pop    rbx; 	pop    rbp
0x13b111:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x13b123:	add    BYTE PTR [rax],al
0x13b121:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13b149:	pop    rbp
0x13b148:	pop    rbx; 	pop    rbp
0x13b147:	add    BYTE PTR [rbx+0x5d],bl
0x13b146:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x13b187:	pop    rbp
0x13b186:	pop    rbx; 	pop    rbp
0x13b184:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13b1e6:	pop    rsi
0x13b1e5:	pop    r14
0x13b1e4:	pop    rbp; 	pop    r14
0x13b1e3:	pop    r13; 	pop    r14
0x13b329:	pop    rsp
0x13b328:	pop    r12
0x13b327:	pop    rbp; 	pop    r12
0x13b326:	pop    rbx; 	pop    rbp; 	pop    r12
0x13b3d7:	or     al,0xe8
0x13b49f:	pop    rbp
0x13b49e:	pop    r13
0x13b49d:	pop    rsp; 	pop    r13
0x13b49c:	pop    r12; 	pop    r13
0x13b4c7:	pop    rbp
0x13b4c6:	pop    r13
0x13b4c5:	pop    rsp; 	pop    r13
0x13b4c4:	pop    r12; 	pop    r13
0x13b4e8:	pop    rbp
0x13b4e7:	pop    r13
0x13b4e6:	pop    rsp; 	pop    r13
0x13b4e5:	pop    r12; 	pop    r13
0x13b5c4:	pop    rdi
0x13b5c3:	pop    r15
0x13b5c2:	pop    rsi; 	pop    r15
0x13b5c1:	pop    r14; 	pop    r15
0x13b60f:	pop    rdi
0x13b60e:	pop    r15
0x13b60d:	pop    rsi; 	pop    r15
0x13b60c:	pop    r14; 	pop    r15
0x13b704:	pop    rsi
0x13b703:	pop    r14
0x13b702:	pop    rbp; 	pop    r14
0x13b701:	pop    r13; 	pop    r14
0x13b7af:	pop    rsi
0x13b7ae:	pop    r14
0x13b7ad:	pop    rbp; 	pop    r14
0x13b7ac:	pop    r13; 	pop    r14
0x13b853:	pop    rbp
0x13b852:	pop    rbx; 	pop    rbp
0x13b851:	sbb    BYTE PTR [rbx+0x5d],bl
0x13b86f:	pop    rbp
0x13b86e:	pop    rbx; 	pop    rbp
0x13b86c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13b913:	pop    rbp
0x13b912:	pop    rbx; 	pop    rbp
0x13b911:	sbb    BYTE PTR [rbx+0x5d],bl
0x13b92f:	pop    rbp
0x13b92e:	pop    rbx; 	pop    rbp
0x13b92c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13b9d3:	pop    rbp
0x13b9d2:	pop    rbx; 	pop    rbp
0x13b9d1:	sbb    BYTE PTR [rbx+0x5d],bl
0x13b9ef:	pop    rbp
0x13b9ee:	pop    rbx; 	pop    rbp
0x13b9ec:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13ba93:	pop    rbp
0x13ba92:	pop    rbx; 	pop    rbp
0x13ba91:	sbb    BYTE PTR [rbx+0x5d],bl
0x13baaf:	pop    rbp
0x13baae:	pop    rbx; 	pop    rbp
0x13baac:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13bb40:	mov    dh,0xc0
0x13bb3f:	movzx  eax,al
0x13bb80:	mov    dh,0xc0
0x13bb7f:	movzx  eax,al
0x13bbce:	pop    rbx
0x13bbcb:	add    esp,0x10; 	pop    rbx
0x13bbf0:	pop    rbx
0x13bbee:	add    BYTE PTR [rax],al; 	pop    rbx
0x13bc0f:	pop    rbx
0x13bc0c:	add    esp,0x10; 	pop    rbx
0x13bc3e:	pop    rbx
0x13bc3b:	add    esp,0x10; 	pop    rbx
0x13bc60:	pop    rbx
0x13bc5e:	add    BYTE PTR [rax],al; 	pop    rbx
0x13bc7f:	pop    rbx
0x13bc7c:	add    esp,0x10; 	pop    rbx
0x13bcae:	pop    rbx
0x13bcab:	add    esp,0x10; 	pop    rbx
0x13bccf:	pop    rbx
0x13bccd:	add    BYTE PTR [rax],al; 	pop    rbx
0x13bcef:	pop    rbx
0x13bcec:	add    esp,0x10; 	pop    rbx
0x13bd1e:	pop    rbx
0x13bd1b:	add    esp,0x10; 	pop    rbx
0x13bd3f:	pop    rbx
0x13bd3d:	add    BYTE PTR [rax],al; 	pop    rbx
0x13bd5f:	pop    rbx
0x13bd5c:	add    esp,0x10; 	pop    rbx
0x13bd6f:	add    bl,dh
0x13bd85:	sub    eax,DWORD PTR [rdi+0x20]
0x13bd84:	sub    rax,QWORD PTR [rdi+0x20]
0x13bdb8:	xor    eax,eax
0x13bdca:	add    BYTE PTR [rax],al
0x13bdc8:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13bde7:	ja     0x13be01
0x13bde6:	mov    DWORD PTR [rdi+0x18],esi
0x13bde5:	mov    QWORD PTR [rdi+0x18],rsi
0x13bdf0:	xor    eax,eax
0x13bdee:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x13be27:	add    bl,dh
0x13be25:	add    BYTE PTR [rax],al; 	add    bl,dh
0x13be56:	add    bl,dh
0x13be54:	add    BYTE PTR [rax],al; 	add    bl,dh
0x13be88:	add    bl,dh
0x13be86:	add    BYTE PTR [rax],al; 	add    bl,dh
0x13beb9:	add    bl,dh
0x13beb7:	add    BYTE PTR [rax],al; 	add    bl,dh
0x13bec7:	xor    eax,eax
0x13bec5:	jae    0x13bed0; 	xor    eax,eax
0x13befa:	pop    rbp
0x13bef9:	pop    rbx; 	pop    rbp
0x13bef8:	add    BYTE PTR [rbx+0x5d],bl
0x13bef7:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x13bf07:	xor    eax,eax
0x13bf05:	jae    0x13bf10; 	xor    eax,eax
0x13bf40:	pop    rbp
0x13bf3f:	pop    rbx; 	pop    rbp
0x13bf3e:	add    BYTE PTR [rbx+0x5d],bl
0x13bf3d:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x13bf65:	mov    DWORD PTR [rdi+0x8],eax
0x13bf64:	mov    QWORD PTR [rdi+0x8],rax
0x13bfa2:	pop    rsp
0x13bfa1:	pop    r12
0x13bfa0:	pop    rbp; 	pop    r12
0x13bf9f:	pop    rbx; 	pop    rbp; 	pop    r12
0x13bfc0:	pop    rsp
0x13bfbf:	pop    r12
0x13bfbe:	pop    rbp; 	pop    r12
0x13bfbd:	pop    rbx; 	pop    rbp; 	pop    r12
0x13bfe7:	pop    rsp
0x13bfe6:	pop    r12
0x13bfe5:	pop    rbp; 	pop    r12
0x13bfe4:	pop    rbx; 	pop    rbp; 	pop    r12
0x13c0a2:	pop    rsi
0x13c0a1:	pop    r14
0x13c0a0:	pop    rbp; 	pop    r14
0x13c09f:	pop    r13; 	pop    r14
0x13c156:	add    BYTE PTR [rax],al
0x13c154:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13c160:	mov    eax,DWORD PTR [rdi+0x28]
0x13c170:	xor    eax,eax
0x13c16e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x13c180:	xor    eax,eax
0x13c17e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x13c197:	add    BYTE PTR [rax],al
0x13c195:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13c1cb:	add    BYTE PTR [rbx-0xd],bl
0x13c1e3:	mov    eax,DWORD PTR [rdi+0x18]
0x13c1e2:	mov    rax,QWORD PTR [rdi+0x18]
0x13c21f:	pop    rsp
0x13c21e:	pop    r12
0x13c21d:	pop    rbp; 	pop    r12
0x13c21c:	pop    rbx; 	pop    rbp; 	pop    r12
0x13c228:	xor    eax,eax
0x13c226:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x13c247:	add    BYTE PTR [rax],al
0x13c245:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13c311:	pop    rbx
0x13c30e:	sub    esp,0xffffff80; 	pop    rbx
0x13c320:	xor    eax,eax
0x13c360:	mov    dh,0xc0
0x13c35f:	movzx  eax,al
0x13c35e:	sbb    BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x13c3a1:	mov    dh,0xc0
0x13c3a0:	movzx  eax,al
0x13c39f:	sbb    BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x13c3eb:	pop    rbx
0x13c3e9:	mov    eax,edx; 	pop    rbx
0x13c42e:	pop    rbx
0x13c42c:	mov    eax,edx; 	pop    rbx
0x13c457:	shr    eax,0x1f
0x13c46e:	add    esp,0x8
0x13c46d:	add    rsp,0x8
0x13c487:	add    BYTE PTR [rax],al
0x13c485:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13c4b7:	mov    dh,0xc0
0x13c4b6:	movzx  eax,al
0x13c4b5:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x13c4c7:	add    BYTE PTR [rax],al
0x13c4c5:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x13c4f7:	mov    dh,0xc0
0x13c4f6:	movzx  eax,al
0x13c4f5:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x13c51d:	mov    DWORD PTR [rdi+0x8],eax
0x13c51c:	mov    QWORD PTR [rdi+0x8],rax
0x13c538:	cmp    BYTE PTR [rax-0x77],cl
0x13c553:	pop    rbx
0x13c551:	add    BYTE PTR [rax],al; 	pop    rbx
0x13c707:	add    bl,dh
0x13c84f:	add    BYTE PTR [rax-0x77],cl
0x13c950:	pop    rdi
0x13c94f:	pop    r15
0x13c94e:	pop    rsi; 	pop    r15
0x13c94d:	pop    r14; 	pop    r15
0x13c998:	add    BYTE PTR [rax-0x39],cl
0x13cc17:	pop    rsi
0x13cc16:	pop    r14
0x13cc15:	pop    rbp; 	pop    r14
0x13cc14:	pop    r13; 	pop    r14
0x13cc8f:	pop    rsi
0x13cc8e:	pop    r14
0x13cc8d:	pop    rbp; 	pop    r14
0x13cc8c:	pop    r13; 	pop    r14
0x13cd13:	add    BYTE PTR [rax-0x77],cl
0x13ce80:	pop    rdi
0x13ce7f:	pop    r15
0x13ce7e:	pop    rsi; 	pop    r15
0x13ce7d:	pop    r14; 	pop    r15
0x13cec5:	mov    WORD PTR [rax-0x39],cs
0x13cfcc:	sbb    BYTE PTR [rcx+0x63],cl
0x13cfcb:	push   rdi; 	sbb    BYTE PTR [rcx+0x63],cl
0x13d345:	pop    rsi
0x13d344:	pop    r14
0x13d343:	pop    rbp; 	pop    r14
0x13d342:	pop    r13; 	pop    r14
0x13d3af:	pop    rsi
0x13d3ae:	pop    r14
0x13d3ad:	pop    rbp; 	pop    r14
0x13d3ac:	pop    r13; 	pop    r14
0x13d51a:	pop    rbp
0x13d519:	pop    rdi; 	pop    rbp
0x13d518:	pop    r15; 	pop    rbp
0x13d517:	pop    rsi; 	pop    r15; 	pop    rbp
0x13d6b0:	sbb    BYTE PTR [rax-0x77],cl
0x13d6be:	adc    ecx,DWORD PTR [rax+0x39]
0x13d82d:	sbb    BYTE PTR [rax+0x1],cl
0x13d90e:	dec    DWORD PTR [rax+0x39]
0x13dcb1:	pop    rdi
0x13dcb0:	pop    r15
0x13dcaf:	pop    rsi; 	pop    r15
0x13dcae:	pop    r14; 	pop    r15
0x13dce3:	xchg   esp,eax
0x13dce1:	or     cl,BYTE PTR [rdi]; 	xchg   esp,eax
0x13dd17:	pop    rdi
0x13dd16:	pop    r15
0x13dd15:	pop    rsi; 	pop    r15
0x13dd14:	pop    r14; 	pop    r15
0x13dd7a:	xor    eax,eax
0x13dd78:	je     0x13dd80; 	xor    eax,eax
0x13ddd2:	pop    rbp
0x13ddd1:	pop    rbx; 	pop    rbp
0x13ddd0:	or     BYTE PTR [rbx+0x5d],bl
0x13de94:	add    BYTE PTR [rax-0x77],cl
0x13df24:	pop    rdi
0x13df23:	pop    r15
0x13df22:	pop    rsi; 	pop    r15
0x13df21:	pop    r14; 	pop    r15
0x13e00f:	add    BYTE PTR [rax-0x39],cl
0x13e05f:	or     cl,BYTE PTR [rcx+0x39]
0x13e242:	pop    rdi
0x13e241:	pop    r15
0x13e240:	pop    rsi; 	pop    r15
0x13e23f:	pop    r14; 	pop    r15
0x13e3f2:	pop    rdi
0x13e3f1:	pop    r15
0x13e3f0:	pop    rsi; 	pop    r15
0x13e3ef:	pop    r14; 	pop    r15
0x13e500:	add    DWORD PTR [rcx],edi
0x13e4ff:	rol    BYTE PTR [rcx],0x39
0x13e836:	pop    rbp
0x13e835:	pop    rdi; 	pop    rbp
0x13e834:	pop    r15; 	pop    rbp
0x13e833:	pop    rsi; 	pop    r15; 	pop    rbp
0x13e934:	dec    DWORD PTR [rax-0x39]
0x13e958:	sbb    BYTE PTR [rbp+0x39],cl
0x13ef4f:	pop    rdi
0x13ef4e:	pop    r15
0x13ef4d:	pop    rsi; 	pop    r15
0x13ef4c:	pop    r14; 	pop    r15
0x13efc6:	pop    rdi
0x13efc5:	pop    r15
0x13efc4:	pop    rsi; 	pop    r15
0x13efc3:	pop    r14; 	pop    r15
0x13f00b:	add    BYTE PTR [rax-0x77],cl
0x13f0d4:	pop    rdi
0x13f0d3:	pop    r15
0x13f0d2:	pop    rsi; 	pop    r15
0x13f0d1:	pop    r14; 	pop    r15
0x13f307:	ror    DWORD PTR [rax+0x1],cl
0x13f317:	add    BYTE PTR [rax-0x7d],cl
0x13f446:	pop    rbp
0x13f445:	pop    rdi; 	pop    rbp
0x13f444:	pop    r15; 	pop    rbp
0x13f443:	pop    rsi; 	pop    r15; 	pop    rbp
0x13f5ac:	ror    DWORD PTR [rax+0x1],cl
0x13f71d:	pop    rbp
0x13f71c:	pop    rdi; 	pop    rbp
0x13f71b:	pop    r15; 	pop    rbp
0x13f71a:	pop    rsi; 	pop    r15; 	pop    rbp
0x13f87a:	pop    rdi
0x13f879:	pop    r15
0x13f878:	pop    rsi; 	pop    r15
0x13f877:	pop    r14; 	pop    r15
0x13f917:	adc    al,ch
0x13fa74:	pop    rbp
0x13fa73:	pop    rdi; 	pop    rbp
0x13fa72:	pop    r15; 	pop    rbp
0x13fa71:	pop    rsi; 	pop    r15; 	pop    rbp
0x13ff2f:	pop    rbp
0x13ff2e:	pop    rdi; 	pop    rbp
0x13ff2d:	pop    r15; 	pop    rbp
0x13ff2c:	pop    rsi; 	pop    r15; 	pop    rbp
0x140226:	ror    BYTE PTR [rdi],0x85
0x140290:	pop    rdi
0x14028f:	pop    r15
0x14028e:	pop    rsi; 	pop    r15
0x14028d:	pop    r14; 	pop    r15
0x1402aa:	dec    DWORD PTR [rax-0x77]
0x1402a9:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x1403b4:	sbb    DWORD PTR [rax-0x7d],ecx
0x14048f:	pop    rdi
0x14048e:	pop    r15
0x14048d:	pop    rsi; 	pop    r15
0x14048c:	pop    r14; 	pop    r15
0x140553:	pop    rdi
0x140552:	pop    r15
0x140551:	pop    rsi; 	pop    r15
0x140550:	pop    r14; 	pop    r15
0x140578:	mov    eax,ecx
0x140577:	mov    eax,r9d
0x140576:	int3   ; 	mov    eax,r9d
0x140664:	sar    eax,0x1f
0x1406a0:	jae    0x1406a3
0x14069f:	push   QWORD PTR [rbx+0x1]
0x1406b0:	or     eax,0xffffffff
0x1406af:	or     rax,0xffffffffffffffff
0x1406f0:	jae    0x1406f3
0x1406ef:	push   QWORD PTR [rbx+0x1]
0x140700:	or     eax,0xffffffff
0x1406ff:	or     rax,0xffffffffffffffff
0x1407e4:	pop    rbx
0x1407e2:	mov    eax,ebx; 	pop    rbx
0x1407e1:	mov    rax,rbx; 	pop    rbx
0x140823:	pop    rbx
0x140821:	xor    eax,eax; 	pop    rbx
0x14085a:	add    esp,0x8
0x140859:	add    rsp,0x8
0x1408b2:	pop    rsi
0x1408b1:	pop    r14
0x1408b0:	pop    rbp; 	pop    r14
0x1408af:	pop    r13; 	pop    r14
0x140b38:	dec    DWORD PTR [rax-0x77]
0x140bb2:	pop    rbp
0x140bb1:	pop    rdi; 	pop    rbp
0x140bb0:	pop    r15; 	pop    rbp
0x140baf:	pop    rsi; 	pop    r15; 	pop    rbp
0x140c4c:	pop    rbp
0x140c4b:	pop    rdi; 	pop    rbp
0x140c4a:	pop    r15; 	pop    rbp
0x140c49:	pop    rsi; 	pop    r15; 	pop    rbp
0x140caa:	pop    rbp
0x140ca9:	pop    rbx; 	pop    rbp
0x140ca8:	or     BYTE PTR [rbx+0x5d],bl
0x140d24:	add    esp,0x18
0x140d23:	add    rsp,0x18
0x140d7d:	add    esp,0x8
0x140d7c:	add    rsp,0x8
0x140db7:	pop    rbp
0x140db6:	pop    rbx; 	pop    rbp
0x140db5:	call   FWORD PTR [rbx+0x5d]
0x140e06:	pop    rsp
0x140e05:	pop    r12
0x140e04:	pop    rbp; 	pop    r12
0x140e03:	pop    rbx; 	pop    rbp; 	pop    r12
0x140e66:	pop    rsp
0x140e65:	pop    r12
0x140e64:	pop    rbp; 	pop    r12
0x140e63:	pop    rbx; 	pop    rbp; 	pop    r12
0x140eb0:	pop    rbx
0x140eae:	xor    eax,eax; 	pop    rbx
0x140ecf:	add    bl,dh
0x140ecd:	sbb    ch,BYTE PTR [rax]; 	add    bl,dh
0x140f63:	add    esp,0x8
0x140f62:	add    rsp,0x8
0x141004:	add    esp,0x8
0x141003:	add    rsp,0x8
0x1410a0:	add    esp,0x8
0x14109f:	add    rsp,0x8
0x141142:	add    esp,0x8
0x141141:	add    rsp,0x8
0x14117e:	pop    rbx
0x14117b:	add    esp,0x10; 	pop    rbx
0x1411de:	pop    rbx
0x1411db:	add    esp,0x10; 	pop    rbx
0x1412b4:	add    esp,0x8
0x1412b3:	add    rsp,0x8
0x141374:	add    esp,0x8
0x141373:	add    rsp,0x8
0x14137f:	add    bl,dh
0x14137d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x1413b7:	dec    DWORD PTR [rax-0x77]
0x141525:	pop    rdi
0x141524:	pop    r15
0x141523:	pop    rsi; 	pop    r15
0x141522:	pop    r14; 	pop    r15
0x141624:	add    esp,0x8
0x141623:	add    rsp,0x8
0x141818:	dec    DWORD PTR [rax-0x7d]
0x141997:	pop    rdi
0x141996:	pop    r15
0x141995:	pop    rsi; 	pop    r15
0x141994:	pop    r14; 	pop    r15
0x141b88:	pop    rdi
0x141b87:	pop    r15
0x141b86:	pop    rsi; 	pop    r15
0x141b85:	pop    r14; 	pop    r15
0x141e58:	pop    rdi
0x141e57:	pop    r15
0x141e56:	pop    rsi; 	pop    r15
0x141e55:	pop    r14; 	pop    r15
0x141f85:	pop    rbp
0x141f84:	pop    rbx; 	pop    rbp
0x141f83:	sbb    BYTE PTR [rbx+0x5d],bl
0x142281:	pop    rsi
0x142280:	pop    r14
0x14227f:	pop    rbp; 	pop    r14
0x14227e:	pop    r13; 	pop    r14
0x1426bd:	pop    rbp
0x1426bc:	pop    r13
0x1426bb:	pop    rsp; 	pop    r13
0x1426ba:	pop    r12; 	pop    r13
0x142830:	pop    rbp
0x14282f:	pop    rbx; 	pop    rbp
0x14282e:	add    BYTE PTR [rbx+0x5d],bl
0x14282d:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x1428d1:	pop    rbp
0x1428d0:	pop    rbx; 	pop    rbp
0x1428cf:	call   FWORD PTR [rbx+0x5d]
0x142944:	and    cl,BYTE PTR [rax-0x7d]
0x142970:	pop    rbp
0x14296f:	pop    r13
0x14296e:	pop    rsp; 	pop    r13
0x14296d:	pop    r12; 	pop    r13
0x1429a4:	add    esp,0x8
0x1429a3:	add    rsp,0x8
0x142aa7:	pop    rbp
0x142aa6:	pop    rdi; 	pop    rbp
0x142aa5:	pop    r15; 	pop    rbp
0x142aa4:	pop    rsi; 	pop    r15; 	pop    rbp
0x142b31:	pop    rbp
0x142b30:	pop    rdi; 	pop    rbp
0x142b2f:	pop    r15; 	pop    rbp
0x142b2e:	pop    rsi; 	pop    r15; 	pop    rbp
0x142c42:	pop    rbp
0x142c41:	pop    rbx; 	pop    rbp
0x142c40:	sbb    BYTE PTR [rbx+0x5d],bl
0x142c9c:	pop    rdi
0x142c9b:	pop    r15
0x142c9a:	pop    rsi; 	pop    r15
0x142c99:	pop    r14; 	pop    r15
0x142cb1:	add    BYTE PTR [rax],al
0x142ee4:	add    BYTE PTR [rax],al
0x142f18:	add    esp,0x8
0x142f17:	add    rsp,0x8
0x142fe6:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x142fe5:	movs   QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
0x142fe4:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
0x142fe3:	add    esi,ebx; 	movs   QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
0x1431b7:	pop    rdi
0x1431b6:	pop    r15
0x1431b5:	pop    rsi; 	pop    r15
0x1431b4:	pop    r14; 	pop    r15
0x14339a:	pop    rdi
0x143399:	pop    r15
0x143398:	pop    rsi; 	pop    r15
0x143397:	pop    r14; 	pop    r15
0x1433c7:	add    BYTE PTR [rcx-0x7d],cl
0x1433c6:	add    BYTE PTR [rcx-0x7d],cl
0x1434f9:	add    BYTE PTR [rax],al
0x1434f7:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x143500:	xor    eax,eax
0x14355f:	add    bl,dh
0x14355d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x1435b3:	pop    rbx
0x1435b2:	pop    rdx; 	pop    rbx
0x1435b1:	pop    rax; 	pop    rdx; 	pop    rbx
0x1435b0:	sbb    BYTE PTR [rax+0x5a],bl; 	pop    rbx
0x1435fb:	pop    rbx
0x1435fa:	pop    rdx; 	pop    rbx
0x1435f9:	pop    rax; 	pop    rdx; 	pop    rbx
0x1435f8:	adc    BYTE PTR [rax+0x5a],bl; 	pop    rbx
0x143672:	add    esp,0x48
0x143671:	add    rsp,0x48
0x14368e:	add    esp,0x48
0x14368d:	add    rsp,0x48
0x1436ab:	add    esp,0x48
0x1436aa:	add    rsp,0x48
0x143722:	add    esp,0x48
0x143721:	add    rsp,0x48
0x14373a:	add    esp,0x48
0x143739:	add    rsp,0x48
0x143754:	add    esp,0x48
0x143753:	add    rsp,0x48
0x1437ab:	add    esp,0x38
0x1437aa:	add    rsp,0x38
0x1437d3:	add    esp,0x38
0x1437d2:	add    rsp,0x38
0x1437e4:	add    esp,0x38
0x1437e3:	add    rsp,0x38
0x143825:	pop    rbx
0x143824:	pop    rdx; 	pop    rbx
0x143823:	pop    rax; 	pop    rdx; 	pop    rbx
0x143822:	add    ebx,DWORD PTR [rax+0x5a]; 	pop    rbx
0x1438b2:	add    BYTE PTR [rax-0x77],cl
0x14390d:	pop    rbp
0x14390c:	pop    rdi; 	pop    rbp
0x14390b:	pop    r15; 	pop    rbp
0x14390a:	pop    rsi; 	pop    r15; 	pop    rbp
0x143a31:	add    BYTE PTR [rax-0x7f],cl
0x143afc:	adc    BYTE PTR [rax-0x7d],cl
0x143d44:	add    esp,0x28
0x143d43:	add    rsp,0x28
0x143d6e:	add    BYTE PTR [rax],al
0x143d6c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x143dfe:	add    esp,0x38
0x143dfd:	add    rsp,0x38
0x143e0b:	add    esp,0x38
0x143e0a:	add    rsp,0x38
0x143e18:	xor    eax,eax
0x143e3e:	xor    eax,eax
0x143e3c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x143eec:	add    esp,0x18
0x143eeb:	add    rsp,0x18
0x143efc:	add    esp,0x18
0x143efb:	add    rsp,0x18
0x143f4d:	add    BYTE PTR [rax-0x77],cl
0x1440c8:	pop    rdi
0x1440c7:	pop    r15
0x1440c6:	pop    rsi; 	pop    r15
0x1440c5:	pop    r14; 	pop    r15
0x144146:	dec    DWORD PTR [rax-0x77]
0x144145:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x14427d:	pop    rdi
0x14427c:	pop    r15
0x14427b:	pop    rsi; 	pop    r15
0x14427a:	pop    r14; 	pop    r15
0x144337:	pop    rbx
0x144335:	add    BYTE PTR [rax],al; 	pop    rbx
0x144346:	pop    rbx
0x144344:	xor    eax,eax; 	pop    rbx
0x1443a2:	pop    rbx
0x14439f:	add    esp,0x10; 	pop    rbx
0x1443ba:	xor    eax,eax
0x1443b8:	jne    0x1443c0; 	xor    eax,eax
0x1443ea:	xor    eax,eax
0x1443e8:	jne    0x1443f0; 	xor    eax,eax
0x14441a:	xor    eax,eax
0x144418:	jne    0x144420; 	xor    eax,eax
0x14444a:	xor    eax,eax
0x144448:	jne    0x144450; 	xor    eax,eax
0x14447a:	xor    eax,eax
0x144478:	jne    0x144480; 	xor    eax,eax
0x1444aa:	xor    eax,eax
0x1444a8:	jne    0x1444b0; 	xor    eax,eax
0x14473a:	pop    rbp
0x144739:	pop    rdi; 	pop    rbp
0x144738:	pop    r15; 	pop    rbp
0x144737:	pop    rsi; 	pop    r15; 	pop    rbp
0x14476f:	pop    rbp
0x14476e:	pop    rdi; 	pop    rbp
0x14476d:	pop    r15; 	pop    rbp
0x14476c:	pop    rsi; 	pop    r15; 	pop    rbp
0x144787:	pop    rbp
0x144786:	pop    rdi; 	pop    rbp
0x144785:	pop    r15; 	pop    rbp
0x144784:	pop    rsi; 	pop    r15; 	pop    rbp
0x14484c:	pop    rsp
0x14484b:	pop    r12
0x14484a:	pop    rbp; 	pop    r12
0x144849:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x1448b1:	pop    rsp
0x1448b0:	pop    r12
0x1448af:	pop    rbp; 	pop    r12
0x1448ae:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144921:	pop    rsp
0x144920:	pop    r12
0x14491f:	pop    rbp; 	pop    r12
0x14491e:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144991:	pop    rsp
0x144990:	pop    r12
0x14498f:	pop    rbp; 	pop    r12
0x14498e:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144a01:	pop    rsp
0x144a00:	pop    r12
0x1449ff:	pop    rbp; 	pop    r12
0x1449fe:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144a6c:	pop    rsp
0x144a6b:	pop    r12
0x144a6a:	pop    rbp; 	pop    r12
0x144a69:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144ad6:	pop    rsp
0x144ad5:	pop    r12
0x144ad4:	pop    rbp; 	pop    r12
0x144ad3:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144b3c:	pop    rsp
0x144b3b:	pop    r12
0x144b3a:	pop    rbp; 	pop    r12
0x144b39:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144b9c:	pop    rsp
0x144b9b:	pop    r12
0x144b9a:	pop    rbp; 	pop    r12
0x144b99:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144c06:	pop    rsp
0x144c05:	pop    r12
0x144c04:	pop    rbp; 	pop    r12
0x144c03:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144c71:	pop    rsp
0x144c70:	pop    r12
0x144c6f:	pop    rbp; 	pop    r12
0x144c6e:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144cdc:	pop    rsp
0x144cdb:	pop    r12
0x144cda:	pop    rbp; 	pop    r12
0x144cd9:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x144e03:	sub    eax,edx
0x144e01:	adc    al,0xe; 	sub    eax,edx
0x145a48:	sub    eax,edx
0x145a47:	xchg   edx,eax; 	sub    eax,edx
0x145a6c:	sub    eax,ecx
0x145a6a:	add    al,0x17; 	sub    eax,ecx
0x145a6f:	xor    eax,eax
0x145a6e:	ret    ; 	xor    eax,eax
0x145a6d:	enter  0x31c3,0xc0
0x145a86:	sub    eax,ecx
0x145a84:	mov    dh,0x7; 	sub    eax,ecx
0x145bfc:	sub    eax,edx
0x145bfa:	adc    al,0xe; 	sub    eax,edx
0x146a2d:	sub    eax,edx
0x146a2c:	xchg   edx,eax; 	sub    eax,edx
0x146a51:	sub    eax,ecx
0x146a4f:	add    al,0x17; 	sub    eax,ecx
0x146a54:	xor    eax,eax
0x146a53:	ret    ; 	xor    eax,eax
0x146a52:	enter  0x31c3,0xc0
0x146a66:	sub    eax,ecx
0x146a64:	mov    dh,0x7; 	sub    eax,ecx
0x146cf0:	sub    eax,edx
0x146cef:	xchg   ecx,eax; 	sub    eax,edx
0x146cee:	adc    al,0x91; 	sub    eax,edx
0x1485c5:	sub    eax,edx
0x1485c3:	add    al,0x81; 	sub    eax,edx
0x1485f9:	sub    eax,ecx
0x1485f7:	add    al,0x82; 	sub    eax,ecx
0x1485fc:	xor    eax,eax
0x1485fb:	ret    ; 	xor    eax,eax
0x1485fa:	enter  0x31c3,0xc0
0x148613:	sub    eax,ecx
0x148611:	add    al,0x82; 	sub    eax,ecx
0x1488f9:	sub    eax,edx
0x1488f8:	xchg   ecx,eax; 	sub    eax,edx
0x1488f7:	adc    al,0x91; 	sub    eax,edx
0x14a58a:	sub    eax,edx
0x14a588:	add    al,0x81; 	sub    eax,edx
0x14a5be:	sub    eax,ecx
0x14a5bc:	add    al,0x82; 	sub    eax,ecx
0x14a5c1:	xor    eax,eax
0x14a5c0:	ret    ; 	xor    eax,eax
0x14a5bf:	enter  0x31c3,0xc0
0x14a5e3:	sub    eax,ecx
0x14a5e1:	add    al,0x82; 	sub    eax,ecx
0x14a64e:	sub    eax,eax
0x14a64d:	sub    rax,r8
0x14a64c:	clc    ; 	sub    rax,r8
0x14a657:	add    cl,ch
0x14a655:	add    BYTE PTR [rax],al; 	add    cl,ch
0x14a66e:	sub    eax,eax
0x14a66d:	sub    rax,r8
0x14a71d:	movsxd eax,ecx
0x14a71c:	movsxd rax,ecx
0x14a788:	clc    
0x14a787:	add    eax,edi
0x14a786:	add    rax,rdi
0x14a785:	ror    DWORD PTR [rax+0x1],0xf8
0x14a790:	xor    eax,eax
0x14a78e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x14a8a3:	sub    eax,edx
0x14a8a2:	sub    rax,rdx
0x14a8a1:	clc    ; 	sub    rax,rdx
0x14a95f:	push   rbx
0x14ab80:	sub    eax,edx
0x14ab7f:	xchg   ecx,eax; 	sub    eax,edx
0x14ab7e:	adc    al,0x91; 	sub    eax,edx
0x14bf95:	sub    eax,edx
0x14bf93:	add    al,0x81; 	sub    eax,edx
0x14bfc9:	sub    eax,ecx
0x14bfc7:	add    al,0x82; 	sub    eax,ecx
0x14bfcc:	xor    eax,eax
0x14bfcb:	ret    ; 	xor    eax,eax
0x14bfca:	enter  0x31c3,0xc0
0x14bfe3:	sub    eax,ecx
0x14bfe1:	add    al,0x82; 	sub    eax,ecx
0x14c259:	sub    eax,edx
0x14c258:	xchg   ecx,eax; 	sub    eax,edx
0x14c257:	adc    al,0x91; 	sub    eax,edx
0x14d93a:	sub    eax,edx
0x14d938:	add    al,0x81; 	sub    eax,edx
0x14d96e:	sub    eax,ecx
0x14d96c:	add    al,0x82; 	sub    eax,ecx
0x14d971:	xor    eax,eax
0x14d970:	ret    ; 	xor    eax,eax
0x14d96f:	enter  0x31c3,0xc0
0x14d993:	sub    eax,ecx
0x14d991:	add    al,0x82; 	sub    eax,ecx
0x14da76:	jp     0x14da68
0x14da74:	jp     0x14daf5; 	jp     0x14da68
0x14dad9:	jp     0x14dacb
0x14db44:	clc    
0x14db41:	mov    DWORD PTR [rdi+rdx*1-0x8],ecx
0x14db60:	cld    
0x14db5d:	mov    DWORD PTR [rdi+rdx*1-0x4],ecx
0x14db73:	mov    DWORD PTR [rdi+rdx*1-0x2],ecx
0x14db7c:	mov    BYTE PTR [rdi],cl
0x14db7a:	mov    cl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],cl
0x14dc55:	mov    eax,eax
0x14dc54:	mov    rax,r8
0x14dc53:	lock mov rax,r8
0x14dc77:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14dc76:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14dc74:	mov    ecx,edx; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14df66:	jp     0x14df58
0x14df64:	jp     0x14dfe5; 	jp     0x14df58
0x14dfc9:	jp     0x14dfbb
0x14e034:	clc    
0x14e031:	mov    DWORD PTR [rdi+rdx*1-0x8],ecx
0x14e050:	cld    
0x14e04d:	mov    DWORD PTR [rdi+rdx*1-0x4],ecx
0x14e063:	mov    DWORD PTR [rdi+rdx*1-0x2],ecx
0x14e06c:	mov    BYTE PTR [rdi],cl
0x14e06a:	mov    cl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],cl
0x14e136:	mov    eax,eax
0x14e135:	mov    rax,r8
0x14e134:	lock mov rax,r8
0x14e157:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14e156:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14e154:	mov    ecx,edx; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14e309:	jp     0x14e2fb
0x14e307:	jp     0x14e388; 	jp     0x14e2fb
0x14e369:	jp     0x14e35b
0x14e3d4:	clc    
0x14e3d1:	mov    DWORD PTR [rdi+rdx*1-0x8],ecx
0x14e3f0:	cld    
0x14e3ed:	mov    DWORD PTR [rdi+rdx*1-0x4],ecx
0x14e403:	mov    DWORD PTR [rdi+rdx*1-0x2],ecx
0x14e40c:	mov    BYTE PTR [rdi],cl
0x14e40a:	mov    cl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],cl
0x14e4d6:	mov    eax,eax
0x14e4d5:	mov    rax,r8
0x14e4d4:	lock mov rax,r8
0x14e4f7:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14e4f6:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14e4f4:	mov    ecx,edx; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x14f80c:	sub    eax,ecx
0x14f80a:	add    al,0x17; 	sub    eax,ecx
0x14f80f:	xor    eax,eax
0x14f80e:	ret    ; 	xor    eax,eax
0x14f80d:	enter  0x31c3,0xc0
0x14f826:	sub    eax,ecx
0x14f824:	mov    dh,0x7; 	sub    eax,ecx
0x150f71:	sub    eax,ecx
0x150f6f:	add    al,0x17; 	sub    eax,ecx
0x150f74:	xor    eax,eax
0x150f73:	ret    ; 	xor    eax,eax
0x150f72:	enter  0x31c3,0xc0
0x150f86:	sub    eax,ecx
0x150f84:	mov    dh,0x7; 	sub    eax,ecx
0x1528bb:	clc    
0x1528ba:	rex.WRXB clc 
0x1528b9:	mov    DWORD PTR [rdi-0x8],ecx
0x1528b8:	mov    QWORD PTR [rdi-0x8],rcx
0x1528f9:	clc    
0x1528f8:	push   rdi; 	clc    
0x1528f7:	mov    DWORD PTR [rdi-0x8],edx
0x1528f6:	mov    QWORD PTR [rdi-0x8],rdx
0x152931:	clc    
0x152930:	rex.WRXB clc 
0x15292f:	mov    DWORD PTR [rdi-0x8],ecx
0x15292e:	mov    QWORD PTR [rdi-0x8],rcx
0x15296f:	clc    
0x15296e:	push   rdi; 	clc    
0x15296d:	mov    DWORD PTR [rdi-0x8],edx
0x15296c:	mov    QWORD PTR [rdi-0x8],rdx
0x1529a7:	clc    
0x1529a6:	push   rdi; 	clc    
0x1529a5:	mov    DWORD PTR [rdi-0x8],edx
0x1529a4:	mov    QWORD PTR [rdi-0x8],rdx
0x1529cf:	clc    
0x1529ce:	push   rdi; 	clc    
0x1529cd:	mov    DWORD PTR [rdi-0x8],edx
0x1529cc:	mov    QWORD PTR [rdi-0x8],rdx
0x1529f7:	clc    
0x1529f6:	push   rdi; 	clc    
0x1529f5:	mov    DWORD PTR [rdi-0x8],edx
0x1529f4:	mov    QWORD PTR [rdi-0x8],rdx
0x152a0f:	clc    
0x152a0e:	push   rdi; 	clc    
0x152a0d:	mov    DWORD PTR [rdi-0x8],edx
0x152a0c:	mov    QWORD PTR [rdi-0x8],rdx
0x152a27:	clc    
0x152a26:	push   rdi; 	clc    
0x152a25:	mov    DWORD PTR [rdi-0x8],edx
0x152a24:	mov    QWORD PTR [rdi-0x8],rdx
0x152a71:	cld    
0x152a70:	push   rdi; 	cld    
0x152a6f:	mov    DWORD PTR [rdi-0x4],edx
0x152ab9:	cld    
0x152ab8:	push   rdi; 	cld    
0x152ab7:	mov    DWORD PTR [rdi-0x4],edx
0x152af7:	cld    
0x152af6:	push   rdi; 	cld    
0x152af5:	mov    DWORD PTR [rdi-0x4],edx
0x152b2f:	cld    
0x152b2e:	push   rdi; 	cld    
0x152b2d:	mov    DWORD PTR [rdi-0x4],edx
0x152b6b:	mov    BYTE PTR [rdi-0x1],dl
0x152b93:	mov    BYTE PTR [rdi-0x1],dl
0x152bbb:	mov    BYTE PTR [rdi-0x1],dl
0x152bd5:	cld    
0x152bd4:	push   rdi; 	cld    
0x152bd3:	mov    DWORD PTR [rdi-0x4],edx
0x152bed:	cld    
0x152bec:	push   rdi; 	cld    
0x152beb:	mov    DWORD PTR [rdi-0x4],edx
0x152bf3:	mov    BYTE PTR [rdi-0x1],dl
0x152c41:	cld    
0x152c40:	push   rdi; 	cld    
0x152c3f:	mov    DWORD PTR [rdi-0x4],edx
0x152c91:	cld    
0x152c90:	push   rdi; 	cld    
0x152c8f:	mov    DWORD PTR [rdi-0x4],edx
0x152cd7:	cld    
0x152cd6:	push   rdi; 	cld    
0x152cd5:	mov    DWORD PTR [rdi-0x4],edx
0x152d0f:	cld    
0x152d0e:	push   rdi; 	cld    
0x152d0d:	mov    DWORD PTR [rdi-0x4],edx
0x152d4d:	cld    
0x152d4c:	push   rdi; 	cld    
0x152d4b:	mov    DWORD PTR [rdi-0x4],edx
0x152d75:	cld    
0x152d74:	push   rdi; 	cld    
0x152d73:	mov    DWORD PTR [rdi-0x4],edx
0x152d9d:	cld    
0x152d9c:	push   rdi; 	cld    
0x152d9b:	mov    DWORD PTR [rdi-0x4],edx
0x152db5:	cld    
0x152db4:	push   rdi; 	cld    
0x152db3:	mov    DWORD PTR [rdi-0x4],edx
0x152dcd:	cld    
0x152dcc:	push   rdi; 	cld    
0x152dcb:	mov    DWORD PTR [rdi-0x4],edx
0x152dd5:	mov    DWORD PTR [rdi-0x2],edx
0x152dd4:	mov    WORD PTR [rdi-0x2],dx
0x152e21:	cld    
0x152e20:	push   rdi; 	cld    
0x152e1f:	mov    DWORD PTR [rdi-0x4],edx
0x152e1e:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152e71:	cld    
0x152e70:	push   rdi; 	cld    
0x152e6f:	mov    DWORD PTR [rdi-0x4],edx
0x152e6e:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152eb7:	cld    
0x152eb6:	push   rdi; 	cld    
0x152eb5:	mov    DWORD PTR [rdi-0x4],edx
0x152eb4:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152eef:	cld    
0x152eee:	push   rdi; 	cld    
0x152eed:	mov    DWORD PTR [rdi-0x4],edx
0x152eec:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152f2d:	cld    
0x152f2c:	push   rdi; 	cld    
0x152f2b:	mov    DWORD PTR [rdi-0x4],edx
0x152f2a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152f55:	cld    
0x152f54:	push   rdi; 	cld    
0x152f53:	mov    DWORD PTR [rdi-0x4],edx
0x152f52:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152f7d:	cld    
0x152f7c:	push   rdi; 	cld    
0x152f7b:	mov    DWORD PTR [rdi-0x4],edx
0x152f7a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152f95:	cld    
0x152f94:	push   rdi; 	cld    
0x152f93:	mov    DWORD PTR [rdi-0x4],edx
0x152f92:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152fad:	cld    
0x152fac:	push   rdi; 	cld    
0x152fab:	mov    DWORD PTR [rdi-0x4],edx
0x152faa:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x152fbd:	mov    DWORD PTR [rdi-0x2],ecx
0x152fbc:	mov    WORD PTR [rdi-0x2],cx
0x153011:	cld    
0x153010:	push   rdi; 	cld    
0x15300f:	mov    DWORD PTR [rdi-0x4],edx
0x15300e:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x153059:	cld    
0x153058:	push   rdi; 	cld    
0x153057:	mov    DWORD PTR [rdi-0x4],edx
0x153056:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x153097:	cld    
0x153096:	push   rdi; 	cld    
0x153095:	mov    DWORD PTR [rdi-0x4],edx
0x153094:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1530cf:	cld    
0x1530ce:	push   rdi; 	cld    
0x1530cd:	mov    DWORD PTR [rdi-0x4],edx
0x1530cc:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15310d:	cld    
0x15310c:	push   rdi; 	cld    
0x15310b:	mov    DWORD PTR [rdi-0x4],edx
0x15310a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x153135:	cld    
0x153134:	push   rdi; 	cld    
0x153133:	mov    DWORD PTR [rdi-0x4],edx
0x153132:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15315d:	cld    
0x15315c:	push   rdi; 	cld    
0x15315b:	mov    DWORD PTR [rdi-0x4],edx
0x15315a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x153175:	cld    
0x153174:	push   rdi; 	cld    
0x153173:	mov    DWORD PTR [rdi-0x4],edx
0x153172:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15318d:	cld    
0x15318c:	push   rdi; 	cld    
0x15318b:	mov    DWORD PTR [rdi-0x4],edx
0x15318a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x153195:	cld    
0x153194:	push   rdi; 	cld    
0x153193:	mov    DWORD PTR [rdi-0x4],edx
0x153192:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1531c9:	jg     0x15321a
0x1531e3:	clc    
0x1531e2:	push   rdi; 	clc    
0x1531e1:	mov    DWORD PTR [rdi-0x8],edx
0x1531e0:	mov    QWORD PTR [rdi-0x8],rdx
0x15322b:	clc    
0x15322a:	push   rdi; 	clc    
0x153229:	mov    DWORD PTR [rdi-0x8],edx
0x153228:	mov    QWORD PTR [rdi-0x8],rdx
0x15324f:	jg     0x153298
0x153269:	clc    
0x153268:	push   rdi; 	clc    
0x153267:	mov    DWORD PTR [rdi-0x8],edx
0x153266:	mov    QWORD PTR [rdi-0x8],rdx
0x1532a5:	clc    
0x1532a4:	push   rdi; 	clc    
0x1532a3:	mov    DWORD PTR [rdi-0x8],edx
0x1532a2:	mov    QWORD PTR [rdi-0x8],rdx
0x1532df:	clc    
0x1532de:	push   rdi; 	clc    
0x1532dd:	mov    DWORD PTR [rdi-0x8],edx
0x1532dc:	mov    QWORD PTR [rdi-0x8],rdx
0x153317:	clc    
0x153316:	push   rdi; 	clc    
0x153315:	mov    DWORD PTR [rdi-0x8],edx
0x153314:	mov    QWORD PTR [rdi-0x8],rdx
0x15333f:	clc    
0x15333e:	push   rdi; 	clc    
0x15333d:	mov    DWORD PTR [rdi-0x8],edx
0x15333c:	mov    QWORD PTR [rdi-0x8],rdx
0x153367:	clc    
0x153366:	push   rdi; 	clc    
0x153365:	mov    DWORD PTR [rdi-0x8],edx
0x153364:	mov    QWORD PTR [rdi-0x8],rdx
0x15337f:	clc    
0x15337e:	push   rdi; 	clc    
0x15337d:	mov    DWORD PTR [rdi-0x8],edx
0x15337c:	mov    QWORD PTR [rdi-0x8],rdx
0x15339b:	cld    
0x15339a:	rex.WRXB cld 
0x153399:	mov    DWORD PTR [rdi-0x4],ecx
0x153398:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x1533e3:	clc    
0x1533e2:	push   rdi; 	clc    
0x1533e1:	mov    DWORD PTR [rdi-0x8],edx
0x1533e0:	mov    QWORD PTR [rdi-0x8],rdx
0x15342b:	clc    
0x15342a:	push   rdi; 	clc    
0x153429:	mov    DWORD PTR [rdi-0x8],edx
0x153428:	mov    QWORD PTR [rdi-0x8],rdx
0x153469:	clc    
0x153468:	push   rdi; 	clc    
0x153467:	mov    DWORD PTR [rdi-0x8],edx
0x153466:	mov    QWORD PTR [rdi-0x8],rdx
0x1534a1:	clc    
0x1534a0:	push   rdi; 	clc    
0x15349f:	mov    DWORD PTR [rdi-0x8],edx
0x15349e:	mov    QWORD PTR [rdi-0x8],rdx
0x1534df:	clc    
0x1534de:	push   rdi; 	clc    
0x1534dd:	mov    DWORD PTR [rdi-0x8],edx
0x1534dc:	mov    QWORD PTR [rdi-0x8],rdx
0x153517:	clc    
0x153516:	push   rdi; 	clc    
0x153515:	mov    DWORD PTR [rdi-0x8],edx
0x153514:	mov    QWORD PTR [rdi-0x8],rdx
0x15353f:	clc    
0x15353e:	push   rdi; 	clc    
0x15353d:	mov    DWORD PTR [rdi-0x8],edx
0x15353c:	mov    QWORD PTR [rdi-0x8],rdx
0x153567:	clc    
0x153566:	push   rdi; 	clc    
0x153565:	mov    DWORD PTR [rdi-0x8],edx
0x153564:	mov    QWORD PTR [rdi-0x8],rdx
0x15357f:	clc    
0x15357e:	push   rdi; 	clc    
0x15357d:	mov    DWORD PTR [rdi-0x8],edx
0x15357c:	mov    QWORD PTR [rdi-0x8],rdx
0x15359b:	cld    
0x15359a:	rex.WRXB cld 
0x153599:	mov    DWORD PTR [rdi-0x4],ecx
0x153598:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x1535e3:	clc    
0x1535e2:	push   rdi; 	clc    
0x1535e1:	mov    DWORD PTR [rdi-0x8],edx
0x1535e0:	mov    QWORD PTR [rdi-0x8],rdx
0x15362b:	clc    
0x15362a:	push   rdi; 	clc    
0x153629:	mov    DWORD PTR [rdi-0x8],edx
0x153628:	mov    QWORD PTR [rdi-0x8],rdx
0x153669:	clc    
0x153668:	push   rdi; 	clc    
0x153667:	mov    DWORD PTR [rdi-0x8],edx
0x153666:	mov    QWORD PTR [rdi-0x8],rdx
0x1536a1:	clc    
0x1536a0:	push   rdi; 	clc    
0x15369f:	mov    DWORD PTR [rdi-0x8],edx
0x15369e:	mov    QWORD PTR [rdi-0x8],rdx
0x1536df:	clc    
0x1536de:	push   rdi; 	clc    
0x1536dd:	mov    DWORD PTR [rdi-0x8],edx
0x1536dc:	mov    QWORD PTR [rdi-0x8],rdx
0x153717:	clc    
0x153716:	push   rdi; 	clc    
0x153715:	mov    DWORD PTR [rdi-0x8],edx
0x153714:	mov    QWORD PTR [rdi-0x8],rdx
0x15373f:	clc    
0x15373e:	push   rdi; 	clc    
0x15373d:	mov    DWORD PTR [rdi-0x8],edx
0x15373c:	mov    QWORD PTR [rdi-0x8],rdx
0x153767:	clc    
0x153766:	push   rdi; 	clc    
0x153765:	mov    DWORD PTR [rdi-0x8],edx
0x153764:	mov    QWORD PTR [rdi-0x8],rdx
0x15377f:	clc    
0x15377e:	push   rdi; 	clc    
0x15377d:	mov    DWORD PTR [rdi-0x8],edx
0x15377c:	mov    QWORD PTR [rdi-0x8],rdx
0x15379b:	cld    
0x15379a:	rex.WRXB cld 
0x153799:	mov    DWORD PTR [rdi-0x4],ecx
0x153798:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15528b:	clc    
0x15528a:	rex.WRXB clc 
0x155289:	mov    DWORD PTR [rdi-0x8],ecx
0x155288:	mov    QWORD PTR [rdi-0x8],rcx
0x1552c9:	clc    
0x1552c8:	push   rdi; 	clc    
0x1552c7:	mov    DWORD PTR [rdi-0x8],edx
0x1552c6:	mov    QWORD PTR [rdi-0x8],rdx
0x155301:	clc    
0x155300:	rex.WRXB clc 
0x1552ff:	mov    DWORD PTR [rdi-0x8],ecx
0x1552fe:	mov    QWORD PTR [rdi-0x8],rcx
0x15533f:	clc    
0x15533e:	push   rdi; 	clc    
0x15533d:	mov    DWORD PTR [rdi-0x8],edx
0x15533c:	mov    QWORD PTR [rdi-0x8],rdx
0x155377:	clc    
0x155376:	push   rdi; 	clc    
0x155375:	mov    DWORD PTR [rdi-0x8],edx
0x155374:	mov    QWORD PTR [rdi-0x8],rdx
0x15539f:	clc    
0x15539e:	push   rdi; 	clc    
0x15539d:	mov    DWORD PTR [rdi-0x8],edx
0x15539c:	mov    QWORD PTR [rdi-0x8],rdx
0x1553c7:	clc    
0x1553c6:	push   rdi; 	clc    
0x1553c5:	mov    DWORD PTR [rdi-0x8],edx
0x1553c4:	mov    QWORD PTR [rdi-0x8],rdx
0x1553df:	clc    
0x1553de:	push   rdi; 	clc    
0x1553dd:	mov    DWORD PTR [rdi-0x8],edx
0x1553dc:	mov    QWORD PTR [rdi-0x8],rdx
0x1553f7:	clc    
0x1553f6:	push   rdi; 	clc    
0x1553f5:	mov    DWORD PTR [rdi-0x8],edx
0x1553f4:	mov    QWORD PTR [rdi-0x8],rdx
0x155441:	cld    
0x155440:	push   rdi; 	cld    
0x15543f:	mov    DWORD PTR [rdi-0x4],edx
0x155489:	cld    
0x155488:	push   rdi; 	cld    
0x155487:	mov    DWORD PTR [rdi-0x4],edx
0x1554c7:	cld    
0x1554c6:	push   rdi; 	cld    
0x1554c5:	mov    DWORD PTR [rdi-0x4],edx
0x1554ff:	cld    
0x1554fe:	push   rdi; 	cld    
0x1554fd:	mov    DWORD PTR [rdi-0x4],edx
0x15553b:	mov    BYTE PTR [rdi-0x1],dl
0x155563:	mov    BYTE PTR [rdi-0x1],dl
0x15558b:	mov    BYTE PTR [rdi-0x1],dl
0x1555a5:	cld    
0x1555a4:	push   rdi; 	cld    
0x1555a3:	mov    DWORD PTR [rdi-0x4],edx
0x1555bd:	cld    
0x1555bc:	push   rdi; 	cld    
0x1555bb:	mov    DWORD PTR [rdi-0x4],edx
0x1555c3:	mov    BYTE PTR [rdi-0x1],dl
0x155611:	cld    
0x155610:	push   rdi; 	cld    
0x15560f:	mov    DWORD PTR [rdi-0x4],edx
0x155661:	cld    
0x155660:	push   rdi; 	cld    
0x15565f:	mov    DWORD PTR [rdi-0x4],edx
0x1556a7:	cld    
0x1556a6:	push   rdi; 	cld    
0x1556a5:	mov    DWORD PTR [rdi-0x4],edx
0x1556df:	cld    
0x1556de:	push   rdi; 	cld    
0x1556dd:	mov    DWORD PTR [rdi-0x4],edx
0x15571d:	cld    
0x15571c:	push   rdi; 	cld    
0x15571b:	mov    DWORD PTR [rdi-0x4],edx
0x155745:	cld    
0x155744:	push   rdi; 	cld    
0x155743:	mov    DWORD PTR [rdi-0x4],edx
0x15576d:	cld    
0x15576c:	push   rdi; 	cld    
0x15576b:	mov    DWORD PTR [rdi-0x4],edx
0x155785:	cld    
0x155784:	push   rdi; 	cld    
0x155783:	mov    DWORD PTR [rdi-0x4],edx
0x15579d:	cld    
0x15579c:	push   rdi; 	cld    
0x15579b:	mov    DWORD PTR [rdi-0x4],edx
0x1557a5:	mov    DWORD PTR [rdi-0x2],edx
0x1557a4:	mov    WORD PTR [rdi-0x2],dx
0x1557f1:	cld    
0x1557f0:	push   rdi; 	cld    
0x1557ef:	mov    DWORD PTR [rdi-0x4],edx
0x1557ee:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155841:	cld    
0x155840:	push   rdi; 	cld    
0x15583f:	mov    DWORD PTR [rdi-0x4],edx
0x15583e:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155887:	cld    
0x155886:	push   rdi; 	cld    
0x155885:	mov    DWORD PTR [rdi-0x4],edx
0x155884:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1558bf:	cld    
0x1558be:	push   rdi; 	cld    
0x1558bd:	mov    DWORD PTR [rdi-0x4],edx
0x1558bc:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1558fd:	cld    
0x1558fc:	push   rdi; 	cld    
0x1558fb:	mov    DWORD PTR [rdi-0x4],edx
0x1558fa:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155925:	cld    
0x155924:	push   rdi; 	cld    
0x155923:	mov    DWORD PTR [rdi-0x4],edx
0x155922:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15594d:	cld    
0x15594c:	push   rdi; 	cld    
0x15594b:	mov    DWORD PTR [rdi-0x4],edx
0x15594a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155965:	cld    
0x155964:	push   rdi; 	cld    
0x155963:	mov    DWORD PTR [rdi-0x4],edx
0x155962:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15597d:	cld    
0x15597c:	push   rdi; 	cld    
0x15597b:	mov    DWORD PTR [rdi-0x4],edx
0x15597a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15598d:	mov    DWORD PTR [rdi-0x2],ecx
0x15598c:	mov    WORD PTR [rdi-0x2],cx
0x1559e1:	cld    
0x1559e0:	push   rdi; 	cld    
0x1559df:	mov    DWORD PTR [rdi-0x4],edx
0x1559de:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155a29:	cld    
0x155a28:	push   rdi; 	cld    
0x155a27:	mov    DWORD PTR [rdi-0x4],edx
0x155a26:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155a67:	cld    
0x155a66:	push   rdi; 	cld    
0x155a65:	mov    DWORD PTR [rdi-0x4],edx
0x155a64:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155a9f:	cld    
0x155a9e:	push   rdi; 	cld    
0x155a9d:	mov    DWORD PTR [rdi-0x4],edx
0x155a9c:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155add:	cld    
0x155adc:	push   rdi; 	cld    
0x155adb:	mov    DWORD PTR [rdi-0x4],edx
0x155ada:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155b05:	cld    
0x155b04:	push   rdi; 	cld    
0x155b03:	mov    DWORD PTR [rdi-0x4],edx
0x155b02:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155b2d:	cld    
0x155b2c:	push   rdi; 	cld    
0x155b2b:	mov    DWORD PTR [rdi-0x4],edx
0x155b2a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155b45:	cld    
0x155b44:	push   rdi; 	cld    
0x155b43:	mov    DWORD PTR [rdi-0x4],edx
0x155b42:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155b5d:	cld    
0x155b5c:	push   rdi; 	cld    
0x155b5b:	mov    DWORD PTR [rdi-0x4],edx
0x155b5a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155b65:	cld    
0x155b64:	push   rdi; 	cld    
0x155b63:	mov    DWORD PTR [rdi-0x4],edx
0x155b62:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x155b99:	jg     0x155bea
0x155bb3:	clc    
0x155bb2:	push   rdi; 	clc    
0x155bb1:	mov    DWORD PTR [rdi-0x8],edx
0x155bb0:	mov    QWORD PTR [rdi-0x8],rdx
0x155bfb:	clc    
0x155bfa:	push   rdi; 	clc    
0x155bf9:	mov    DWORD PTR [rdi-0x8],edx
0x155bf8:	mov    QWORD PTR [rdi-0x8],rdx
0x155c1f:	jg     0x155c68
0x155c39:	clc    
0x155c38:	push   rdi; 	clc    
0x155c37:	mov    DWORD PTR [rdi-0x8],edx
0x155c36:	mov    QWORD PTR [rdi-0x8],rdx
0x155c75:	clc    
0x155c74:	push   rdi; 	clc    
0x155c73:	mov    DWORD PTR [rdi-0x8],edx
0x155c72:	mov    QWORD PTR [rdi-0x8],rdx
0x155caf:	clc    
0x155cae:	push   rdi; 	clc    
0x155cad:	mov    DWORD PTR [rdi-0x8],edx
0x155cac:	mov    QWORD PTR [rdi-0x8],rdx
0x155ce7:	clc    
0x155ce6:	push   rdi; 	clc    
0x155ce5:	mov    DWORD PTR [rdi-0x8],edx
0x155ce4:	mov    QWORD PTR [rdi-0x8],rdx
0x155d0f:	clc    
0x155d0e:	push   rdi; 	clc    
0x155d0d:	mov    DWORD PTR [rdi-0x8],edx
0x155d0c:	mov    QWORD PTR [rdi-0x8],rdx
0x155d37:	clc    
0x155d36:	push   rdi; 	clc    
0x155d35:	mov    DWORD PTR [rdi-0x8],edx
0x155d34:	mov    QWORD PTR [rdi-0x8],rdx
0x155d4f:	clc    
0x155d4e:	push   rdi; 	clc    
0x155d4d:	mov    DWORD PTR [rdi-0x8],edx
0x155d4c:	mov    QWORD PTR [rdi-0x8],rdx
0x155d6b:	cld    
0x155d6a:	rex.WRXB cld 
0x155d69:	mov    DWORD PTR [rdi-0x4],ecx
0x155d68:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x155db3:	clc    
0x155db2:	push   rdi; 	clc    
0x155db1:	mov    DWORD PTR [rdi-0x8],edx
0x155db0:	mov    QWORD PTR [rdi-0x8],rdx
0x155dfb:	clc    
0x155dfa:	push   rdi; 	clc    
0x155df9:	mov    DWORD PTR [rdi-0x8],edx
0x155df8:	mov    QWORD PTR [rdi-0x8],rdx
0x155e39:	clc    
0x155e38:	push   rdi; 	clc    
0x155e37:	mov    DWORD PTR [rdi-0x8],edx
0x155e36:	mov    QWORD PTR [rdi-0x8],rdx
0x155e71:	clc    
0x155e70:	push   rdi; 	clc    
0x155e6f:	mov    DWORD PTR [rdi-0x8],edx
0x155e6e:	mov    QWORD PTR [rdi-0x8],rdx
0x155eaf:	clc    
0x155eae:	push   rdi; 	clc    
0x155ead:	mov    DWORD PTR [rdi-0x8],edx
0x155eac:	mov    QWORD PTR [rdi-0x8],rdx
0x155ee7:	clc    
0x155ee6:	push   rdi; 	clc    
0x155ee5:	mov    DWORD PTR [rdi-0x8],edx
0x155ee4:	mov    QWORD PTR [rdi-0x8],rdx
0x155f0f:	clc    
0x155f0e:	push   rdi; 	clc    
0x155f0d:	mov    DWORD PTR [rdi-0x8],edx
0x155f0c:	mov    QWORD PTR [rdi-0x8],rdx
0x155f37:	clc    
0x155f36:	push   rdi; 	clc    
0x155f35:	mov    DWORD PTR [rdi-0x8],edx
0x155f34:	mov    QWORD PTR [rdi-0x8],rdx
0x155f4f:	clc    
0x155f4e:	push   rdi; 	clc    
0x155f4d:	mov    DWORD PTR [rdi-0x8],edx
0x155f4c:	mov    QWORD PTR [rdi-0x8],rdx
0x155f6b:	cld    
0x155f6a:	rex.WRXB cld 
0x155f69:	mov    DWORD PTR [rdi-0x4],ecx
0x155f68:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x155fb3:	clc    
0x155fb2:	push   rdi; 	clc    
0x155fb1:	mov    DWORD PTR [rdi-0x8],edx
0x155fb0:	mov    QWORD PTR [rdi-0x8],rdx
0x155ffb:	clc    
0x155ffa:	push   rdi; 	clc    
0x155ff9:	mov    DWORD PTR [rdi-0x8],edx
0x155ff8:	mov    QWORD PTR [rdi-0x8],rdx
0x156039:	clc    
0x156038:	push   rdi; 	clc    
0x156037:	mov    DWORD PTR [rdi-0x8],edx
0x156036:	mov    QWORD PTR [rdi-0x8],rdx
0x156071:	clc    
0x156070:	push   rdi; 	clc    
0x15606f:	mov    DWORD PTR [rdi-0x8],edx
0x15606e:	mov    QWORD PTR [rdi-0x8],rdx
0x1560af:	clc    
0x1560ae:	push   rdi; 	clc    
0x1560ad:	mov    DWORD PTR [rdi-0x8],edx
0x1560ac:	mov    QWORD PTR [rdi-0x8],rdx
0x1560e7:	clc    
0x1560e6:	push   rdi; 	clc    
0x1560e5:	mov    DWORD PTR [rdi-0x8],edx
0x1560e4:	mov    QWORD PTR [rdi-0x8],rdx
0x15610f:	clc    
0x15610e:	push   rdi; 	clc    
0x15610d:	mov    DWORD PTR [rdi-0x8],edx
0x15610c:	mov    QWORD PTR [rdi-0x8],rdx
0x156137:	clc    
0x156136:	push   rdi; 	clc    
0x156135:	mov    DWORD PTR [rdi-0x8],edx
0x156134:	mov    QWORD PTR [rdi-0x8],rdx
0x15614f:	clc    
0x15614e:	push   rdi; 	clc    
0x15614d:	mov    DWORD PTR [rdi-0x8],edx
0x15614c:	mov    QWORD PTR [rdi-0x8],rdx
0x15616b:	cld    
0x15616a:	rex.WRXB cld 
0x156169:	mov    DWORD PTR [rdi-0x4],ecx
0x156168:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x157c5b:	clc    
0x157c5a:	rex.WRXB clc 
0x157c59:	mov    DWORD PTR [rdi-0x8],ecx
0x157c58:	mov    QWORD PTR [rdi-0x8],rcx
0x157c99:	clc    
0x157c98:	push   rdi; 	clc    
0x157c97:	mov    DWORD PTR [rdi-0x8],edx
0x157c96:	mov    QWORD PTR [rdi-0x8],rdx
0x157cd1:	clc    
0x157cd0:	rex.WRXB clc 
0x157ccf:	mov    DWORD PTR [rdi-0x8],ecx
0x157cce:	mov    QWORD PTR [rdi-0x8],rcx
0x157d0f:	clc    
0x157d0e:	push   rdi; 	clc    
0x157d0d:	mov    DWORD PTR [rdi-0x8],edx
0x157d0c:	mov    QWORD PTR [rdi-0x8],rdx
0x157d47:	clc    
0x157d46:	push   rdi; 	clc    
0x157d45:	mov    DWORD PTR [rdi-0x8],edx
0x157d44:	mov    QWORD PTR [rdi-0x8],rdx
0x157d6f:	clc    
0x157d6e:	push   rdi; 	clc    
0x157d6d:	mov    DWORD PTR [rdi-0x8],edx
0x157d6c:	mov    QWORD PTR [rdi-0x8],rdx
0x157d97:	clc    
0x157d96:	push   rdi; 	clc    
0x157d95:	mov    DWORD PTR [rdi-0x8],edx
0x157d94:	mov    QWORD PTR [rdi-0x8],rdx
0x157daf:	clc    
0x157dae:	push   rdi; 	clc    
0x157dad:	mov    DWORD PTR [rdi-0x8],edx
0x157dac:	mov    QWORD PTR [rdi-0x8],rdx
0x157dc7:	clc    
0x157dc6:	push   rdi; 	clc    
0x157dc5:	mov    DWORD PTR [rdi-0x8],edx
0x157dc4:	mov    QWORD PTR [rdi-0x8],rdx
0x157e11:	cld    
0x157e10:	push   rdi; 	cld    
0x157e0f:	mov    DWORD PTR [rdi-0x4],edx
0x157e59:	cld    
0x157e58:	push   rdi; 	cld    
0x157e57:	mov    DWORD PTR [rdi-0x4],edx
0x157e97:	cld    
0x157e96:	push   rdi; 	cld    
0x157e95:	mov    DWORD PTR [rdi-0x4],edx
0x157ecf:	cld    
0x157ece:	push   rdi; 	cld    
0x157ecd:	mov    DWORD PTR [rdi-0x4],edx
0x157f0b:	mov    BYTE PTR [rdi-0x1],dl
0x157f33:	mov    BYTE PTR [rdi-0x1],dl
0x157f5b:	mov    BYTE PTR [rdi-0x1],dl
0x157f75:	cld    
0x157f74:	push   rdi; 	cld    
0x157f73:	mov    DWORD PTR [rdi-0x4],edx
0x157f8d:	cld    
0x157f8c:	push   rdi; 	cld    
0x157f8b:	mov    DWORD PTR [rdi-0x4],edx
0x157f93:	mov    BYTE PTR [rdi-0x1],dl
0x157fe1:	cld    
0x157fe0:	push   rdi; 	cld    
0x157fdf:	mov    DWORD PTR [rdi-0x4],edx
0x158031:	cld    
0x158030:	push   rdi; 	cld    
0x15802f:	mov    DWORD PTR [rdi-0x4],edx
0x158077:	cld    
0x158076:	push   rdi; 	cld    
0x158075:	mov    DWORD PTR [rdi-0x4],edx
0x1580af:	cld    
0x1580ae:	push   rdi; 	cld    
0x1580ad:	mov    DWORD PTR [rdi-0x4],edx
0x1580ed:	cld    
0x1580ec:	push   rdi; 	cld    
0x1580eb:	mov    DWORD PTR [rdi-0x4],edx
0x158115:	cld    
0x158114:	push   rdi; 	cld    
0x158113:	mov    DWORD PTR [rdi-0x4],edx
0x15813d:	cld    
0x15813c:	push   rdi; 	cld    
0x15813b:	mov    DWORD PTR [rdi-0x4],edx
0x158155:	cld    
0x158154:	push   rdi; 	cld    
0x158153:	mov    DWORD PTR [rdi-0x4],edx
0x15816d:	cld    
0x15816c:	push   rdi; 	cld    
0x15816b:	mov    DWORD PTR [rdi-0x4],edx
0x158175:	mov    DWORD PTR [rdi-0x2],edx
0x158174:	mov    WORD PTR [rdi-0x2],dx
0x1581c1:	cld    
0x1581c0:	push   rdi; 	cld    
0x1581bf:	mov    DWORD PTR [rdi-0x4],edx
0x1581be:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x158211:	cld    
0x158210:	push   rdi; 	cld    
0x15820f:	mov    DWORD PTR [rdi-0x4],edx
0x15820e:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x158257:	cld    
0x158256:	push   rdi; 	cld    
0x158255:	mov    DWORD PTR [rdi-0x4],edx
0x158254:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15828f:	cld    
0x15828e:	push   rdi; 	cld    
0x15828d:	mov    DWORD PTR [rdi-0x4],edx
0x15828c:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1582cd:	cld    
0x1582cc:	push   rdi; 	cld    
0x1582cb:	mov    DWORD PTR [rdi-0x4],edx
0x1582ca:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1582f5:	cld    
0x1582f4:	push   rdi; 	cld    
0x1582f3:	mov    DWORD PTR [rdi-0x4],edx
0x1582f2:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15831d:	cld    
0x15831c:	push   rdi; 	cld    
0x15831b:	mov    DWORD PTR [rdi-0x4],edx
0x15831a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x158335:	cld    
0x158334:	push   rdi; 	cld    
0x158333:	mov    DWORD PTR [rdi-0x4],edx
0x158332:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15834d:	cld    
0x15834c:	push   rdi; 	cld    
0x15834b:	mov    DWORD PTR [rdi-0x4],edx
0x15834a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15835d:	mov    DWORD PTR [rdi-0x2],ecx
0x15835c:	mov    WORD PTR [rdi-0x2],cx
0x1583b1:	cld    
0x1583b0:	push   rdi; 	cld    
0x1583af:	mov    DWORD PTR [rdi-0x4],edx
0x1583ae:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1583f9:	cld    
0x1583f8:	push   rdi; 	cld    
0x1583f7:	mov    DWORD PTR [rdi-0x4],edx
0x1583f6:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x158437:	cld    
0x158436:	push   rdi; 	cld    
0x158435:	mov    DWORD PTR [rdi-0x4],edx
0x158434:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15846f:	cld    
0x15846e:	push   rdi; 	cld    
0x15846d:	mov    DWORD PTR [rdi-0x4],edx
0x15846c:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1584ad:	cld    
0x1584ac:	push   rdi; 	cld    
0x1584ab:	mov    DWORD PTR [rdi-0x4],edx
0x1584aa:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1584d5:	cld    
0x1584d4:	push   rdi; 	cld    
0x1584d3:	mov    DWORD PTR [rdi-0x4],edx
0x1584d2:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1584fd:	cld    
0x1584fc:	push   rdi; 	cld    
0x1584fb:	mov    DWORD PTR [rdi-0x4],edx
0x1584fa:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x158515:	cld    
0x158514:	push   rdi; 	cld    
0x158513:	mov    DWORD PTR [rdi-0x4],edx
0x158512:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15852d:	cld    
0x15852c:	push   rdi; 	cld    
0x15852b:	mov    DWORD PTR [rdi-0x4],edx
0x15852a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x158535:	cld    
0x158534:	push   rdi; 	cld    
0x158533:	mov    DWORD PTR [rdi-0x4],edx
0x158532:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x158569:	jg     0x1585ba
0x158583:	clc    
0x158582:	push   rdi; 	clc    
0x158581:	mov    DWORD PTR [rdi-0x8],edx
0x158580:	mov    QWORD PTR [rdi-0x8],rdx
0x1585cb:	clc    
0x1585ca:	push   rdi; 	clc    
0x1585c9:	mov    DWORD PTR [rdi-0x8],edx
0x1585c8:	mov    QWORD PTR [rdi-0x8],rdx
0x1585ef:	jg     0x158638
0x158609:	clc    
0x158608:	push   rdi; 	clc    
0x158607:	mov    DWORD PTR [rdi-0x8],edx
0x158606:	mov    QWORD PTR [rdi-0x8],rdx
0x158645:	clc    
0x158644:	push   rdi; 	clc    
0x158643:	mov    DWORD PTR [rdi-0x8],edx
0x158642:	mov    QWORD PTR [rdi-0x8],rdx
0x15867f:	clc    
0x15867e:	push   rdi; 	clc    
0x15867d:	mov    DWORD PTR [rdi-0x8],edx
0x15867c:	mov    QWORD PTR [rdi-0x8],rdx
0x1586b7:	clc    
0x1586b6:	push   rdi; 	clc    
0x1586b5:	mov    DWORD PTR [rdi-0x8],edx
0x1586b4:	mov    QWORD PTR [rdi-0x8],rdx
0x1586df:	clc    
0x1586de:	push   rdi; 	clc    
0x1586dd:	mov    DWORD PTR [rdi-0x8],edx
0x1586dc:	mov    QWORD PTR [rdi-0x8],rdx
0x158707:	clc    
0x158706:	push   rdi; 	clc    
0x158705:	mov    DWORD PTR [rdi-0x8],edx
0x158704:	mov    QWORD PTR [rdi-0x8],rdx
0x15871f:	clc    
0x15871e:	push   rdi; 	clc    
0x15871d:	mov    DWORD PTR [rdi-0x8],edx
0x15871c:	mov    QWORD PTR [rdi-0x8],rdx
0x15873b:	cld    
0x15873a:	rex.WRXB cld 
0x158739:	mov    DWORD PTR [rdi-0x4],ecx
0x158738:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x158783:	clc    
0x158782:	push   rdi; 	clc    
0x158781:	mov    DWORD PTR [rdi-0x8],edx
0x158780:	mov    QWORD PTR [rdi-0x8],rdx
0x1587cb:	clc    
0x1587ca:	push   rdi; 	clc    
0x1587c9:	mov    DWORD PTR [rdi-0x8],edx
0x1587c8:	mov    QWORD PTR [rdi-0x8],rdx
0x158809:	clc    
0x158808:	push   rdi; 	clc    
0x158807:	mov    DWORD PTR [rdi-0x8],edx
0x158806:	mov    QWORD PTR [rdi-0x8],rdx
0x158841:	clc    
0x158840:	push   rdi; 	clc    
0x15883f:	mov    DWORD PTR [rdi-0x8],edx
0x15883e:	mov    QWORD PTR [rdi-0x8],rdx
0x15887f:	clc    
0x15887e:	push   rdi; 	clc    
0x15887d:	mov    DWORD PTR [rdi-0x8],edx
0x15887c:	mov    QWORD PTR [rdi-0x8],rdx
0x1588b7:	clc    
0x1588b6:	push   rdi; 	clc    
0x1588b5:	mov    DWORD PTR [rdi-0x8],edx
0x1588b4:	mov    QWORD PTR [rdi-0x8],rdx
0x1588df:	clc    
0x1588de:	push   rdi; 	clc    
0x1588dd:	mov    DWORD PTR [rdi-0x8],edx
0x1588dc:	mov    QWORD PTR [rdi-0x8],rdx
0x158907:	clc    
0x158906:	push   rdi; 	clc    
0x158905:	mov    DWORD PTR [rdi-0x8],edx
0x158904:	mov    QWORD PTR [rdi-0x8],rdx
0x15891f:	clc    
0x15891e:	push   rdi; 	clc    
0x15891d:	mov    DWORD PTR [rdi-0x8],edx
0x15891c:	mov    QWORD PTR [rdi-0x8],rdx
0x15893b:	cld    
0x15893a:	rex.WRXB cld 
0x158939:	mov    DWORD PTR [rdi-0x4],ecx
0x158938:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x158983:	clc    
0x158982:	push   rdi; 	clc    
0x158981:	mov    DWORD PTR [rdi-0x8],edx
0x158980:	mov    QWORD PTR [rdi-0x8],rdx
0x1589cb:	clc    
0x1589ca:	push   rdi; 	clc    
0x1589c9:	mov    DWORD PTR [rdi-0x8],edx
0x1589c8:	mov    QWORD PTR [rdi-0x8],rdx
0x158a09:	clc    
0x158a08:	push   rdi; 	clc    
0x158a07:	mov    DWORD PTR [rdi-0x8],edx
0x158a06:	mov    QWORD PTR [rdi-0x8],rdx
0x158a41:	clc    
0x158a40:	push   rdi; 	clc    
0x158a3f:	mov    DWORD PTR [rdi-0x8],edx
0x158a3e:	mov    QWORD PTR [rdi-0x8],rdx
0x158a7f:	clc    
0x158a7e:	push   rdi; 	clc    
0x158a7d:	mov    DWORD PTR [rdi-0x8],edx
0x158a7c:	mov    QWORD PTR [rdi-0x8],rdx
0x158ab7:	clc    
0x158ab6:	push   rdi; 	clc    
0x158ab5:	mov    DWORD PTR [rdi-0x8],edx
0x158ab4:	mov    QWORD PTR [rdi-0x8],rdx
0x158adf:	clc    
0x158ade:	push   rdi; 	clc    
0x158add:	mov    DWORD PTR [rdi-0x8],edx
0x158adc:	mov    QWORD PTR [rdi-0x8],rdx
0x158b07:	clc    
0x158b06:	push   rdi; 	clc    
0x158b05:	mov    DWORD PTR [rdi-0x8],edx
0x158b04:	mov    QWORD PTR [rdi-0x8],rdx
0x158b1f:	clc    
0x158b1e:	push   rdi; 	clc    
0x158b1d:	mov    DWORD PTR [rdi-0x8],edx
0x158b1c:	mov    QWORD PTR [rdi-0x8],rdx
0x158b3b:	cld    
0x158b3a:	rex.WRXB cld 
0x158b39:	mov    DWORD PTR [rdi-0x4],ecx
0x158b38:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15aacc:	movq   QWORD PTR [rdi-0x10],mm0
0x15ab3c:	movq   QWORD PTR [rdi-0x10],mm1
0x15ab5f:	clc    
0x15ab5e:	rex.WRXB clc 
0x15ab5d:	mov    DWORD PTR [rdi-0x8],ecx
0x15ab5c:	mov    QWORD PTR [rdi-0x8],rcx
0x15abcc:	movq   QWORD PTR [rdi-0x10],mm1
0x15abef:	clc    
0x15abee:	rex.WRXB clc 
0x15abed:	mov    DWORD PTR [rdi-0x8],ecx
0x15abec:	mov    QWORD PTR [rdi-0x8],rcx
0x15ac3f:	jg     0x15ac88
0x15ac5c:	movq   QWORD PTR [rdi-0x10],mm1
0x15ac7f:	clc    
0x15ac7e:	rex.WRXB clc 
0x15ac7d:	mov    DWORD PTR [rdi-0x8],ecx
0x15ac7c:	mov    QWORD PTR [rdi-0x8],rcx
0x15acec:	movq   QWORD PTR [rdi-0x10],mm1
0x15ad0d:	cld    
0x15ad0c:	rex.WRXB cld 
0x15ad0b:	mov    DWORD PTR [rdi-0x4],ecx
0x15ad0a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15ad6c:	movq   QWORD PTR [rdi-0x10],mm1
0x15ad8d:	cld    
0x15ad8c:	rex.WRXB cld 
0x15ad8b:	mov    DWORD PTR [rdi-0x4],ecx
0x15ad8a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15adec:	movq   QWORD PTR [rdi-0x10],mm1
0x15ae0d:	cld    
0x15ae0c:	rex.WRXB cld 
0x15ae0b:	mov    DWORD PTR [rdi-0x4],ecx
0x15ae6c:	movq   QWORD PTR [rdi-0x10],mm1
0x15ae8d:	cld    
0x15ae8c:	rex.WRXB cld 
0x15ae8b:	mov    DWORD PTR [rdi-0x4],ecx
0x15aeec:	movq   QWORD PTR [rdi-0x10],mm1
0x15af07:	clc    
0x15af06:	push   rdi; 	clc    
0x15af05:	mov    DWORD PTR [rdi-0x8],edx
0x15af04:	mov    QWORD PTR [rdi-0x8],rdx
0x15af6c:	movq   QWORD PTR [rdi-0x10],mm1
0x15af8b:	cld    
0x15af8a:	rex.WRXB cld 
0x15af89:	mov    DWORD PTR [rdi-0x4],ecx
0x15af88:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15afec:	movq   QWORD PTR [rdi-0x10],mm1
0x15b00b:	cld    
0x15b00a:	rex.WRXB cld 
0x15b009:	mov    DWORD PTR [rdi-0x4],ecx
0x15b008:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15b06c:	movq   QWORD PTR [rdi-0x10],mm1
0x15b08b:	cld    
0x15b08a:	rex.WRXB cld 
0x15b089:	mov    DWORD PTR [rdi-0x4],ecx
0x15b088:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15b0ec:	movq   QWORD PTR [rdi-0x10],mm1
0x15b105:	cld    
0x15b104:	push   rdi; 	cld    
0x15b103:	mov    DWORD PTR [rdi-0x4],edx
0x15b102:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15b16c:	movq   QWORD PTR [rdi-0x10],mm1
0x15b18d:	mov    DWORD PTR [rdi-0x2],ecx
0x15b18c:	mov    WORD PTR [rdi-0x2],cx
0x15b1fc:	movq   QWORD PTR [rdi-0x10],mm1
0x15b215:	mov    DWORD PTR [rdi-0x2],edx
0x15b214:	mov    WORD PTR [rdi-0x2],dx
0x15b27c:	movq   QWORD PTR [rdi-0x10],mm1
0x15b294:	mov    BYTE PTR [rdi-0x1],dl
0x15b2ec:	jg     0x15b2f5
0x15b2eb:	movq   QWORD PTR [rdi],mm0
0x15b2ea:	movdqu XMMWORD PTR [rdi],xmm0
0x15b346:	jg     0x15b357
0x15b345:	movq   QWORD PTR [rdi],mm1
0x15b344:	movdqu XMMWORD PTR [rdi],xmm1
0x15b35c:	mov    DWORD PTR [rdi],ecx
0x15b35b:	mov    QWORD PTR [rdi],rcx
0x15b3b6:	jg     0x15b3c7
0x15b3b5:	movq   QWORD PTR [rdi],mm1
0x15b3b4:	movdqu XMMWORD PTR [rdi],xmm1
0x15b3cc:	mov    DWORD PTR [rdi],ecx
0x15b3cb:	mov    QWORD PTR [rdi],rcx
0x15b426:	jg     0x15b437
0x15b425:	movq   QWORD PTR [rdi],mm1
0x15b424:	movdqu XMMWORD PTR [rdi],xmm1
0x15b43c:	mov    DWORD PTR [rdi],ecx
0x15b43b:	mov    QWORD PTR [rdi],rcx
0x15b496:	jg     0x15b4a7
0x15b495:	movq   QWORD PTR [rdi],mm1
0x15b494:	movdqu XMMWORD PTR [rdi],xmm1
0x15b4ac:	mov    DWORD PTR [rdi],ecx
0x15b4ab:	mov    QWORD PTR [rdi],rcx
0x15b4aa:	add    al,0x48; 	mov    DWORD PTR [rdi],ecx
0x15b506:	jg     0x15b517
0x15b505:	movq   QWORD PTR [rdi],mm1
0x15b504:	movdqu XMMWORD PTR [rdi],xmm1
0x15b51c:	mov    DWORD PTR [rdi],ecx
0x15b51b:	mov    QWORD PTR [rdi],rcx
0x15b576:	jg     0x15b587
0x15b575:	movq   QWORD PTR [rdi],mm1
0x15b574:	movdqu XMMWORD PTR [rdi],xmm1
0x15b58c:	mov    DWORD PTR [rdi],ecx
0x15b58b:	mov    QWORD PTR [rdi],rcx
0x15b5e6:	jg     0x15b5f7
0x15b5e5:	movq   QWORD PTR [rdi],mm1
0x15b5e4:	movdqu XMMWORD PTR [rdi],xmm1
0x15b5fc:	mov    DWORD PTR [rdi],ecx
0x15b5fb:	mov    QWORD PTR [rdi],rcx
0x15b656:	jg     0x15b667
0x15b655:	movq   QWORD PTR [rdi],mm1
0x15b654:	movdqu XMMWORD PTR [rdi],xmm1
0x15b664:	mov    DWORD PTR [rdi],edx
0x15b663:	mov    QWORD PTR [rdi],rdx
0x15b6c6:	jg     0x15b6d7
0x15b6c5:	movq   QWORD PTR [rdi],mm1
0x15b6c4:	movdqu XMMWORD PTR [rdi],xmm1
0x15b6d8:	mov    DWORD PTR [rdi],ecx
0x15b736:	jg     0x15b747
0x15b735:	movq   QWORD PTR [rdi],mm1
0x15b734:	movdqu XMMWORD PTR [rdi],xmm1
0x15b748:	mov    DWORD PTR [rdi],ecx
0x15b7a6:	jg     0x15b7b7
0x15b7a5:	movq   QWORD PTR [rdi],mm1
0x15b7a4:	movdqu XMMWORD PTR [rdi],xmm1
0x15b7b8:	mov    DWORD PTR [rdi],ecx
0x15b816:	jg     0x15b827
0x15b815:	movq   QWORD PTR [rdi],mm1
0x15b814:	movdqu XMMWORD PTR [rdi],xmm1
0x15b822:	mov    DWORD PTR [rdi],edx
0x15b820:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0x15b886:	jg     0x15b897
0x15b885:	movq   QWORD PTR [rdi],mm1
0x15b884:	movdqu XMMWORD PTR [rdi],xmm1
0x15b89c:	mov    DWORD PTR [rdi],ecx
0x15b89b:	mov    WORD PTR [rdi],cx
0x15b8f6:	jg     0x15b907
0x15b8f5:	movq   QWORD PTR [rdi],mm1
0x15b8f4:	movdqu XMMWORD PTR [rdi],xmm1
0x15b904:	mov    DWORD PTR [rdi],edx
0x15b903:	mov    WORD PTR [rdi],dx
0x15b966:	jg     0x15b977
0x15b965:	movq   QWORD PTR [rdi],mm1
0x15b964:	movdqu XMMWORD PTR [rdi],xmm1
0x15b973:	mov    BYTE PTR [rdi],dl
0x15b971:	mov    dh,0x16; 	mov    BYTE PTR [rdi],dl
0x15d59c:	movq   QWORD PTR [rdi-0x10],mm0
0x15d60c:	movq   QWORD PTR [rdi-0x10],mm1
0x15d62f:	clc    
0x15d62e:	rex.WRXB clc 
0x15d62d:	mov    DWORD PTR [rdi-0x8],ecx
0x15d62c:	mov    QWORD PTR [rdi-0x8],rcx
0x15d69c:	movq   QWORD PTR [rdi-0x10],mm1
0x15d6bf:	clc    
0x15d6be:	rex.WRXB clc 
0x15d6bd:	mov    DWORD PTR [rdi-0x8],ecx
0x15d6bc:	mov    QWORD PTR [rdi-0x8],rcx
0x15d70f:	jg     0x15d758
0x15d72c:	movq   QWORD PTR [rdi-0x10],mm1
0x15d74f:	clc    
0x15d74e:	rex.WRXB clc 
0x15d74d:	mov    DWORD PTR [rdi-0x8],ecx
0x15d74c:	mov    QWORD PTR [rdi-0x8],rcx
0x15d7bc:	movq   QWORD PTR [rdi-0x10],mm1
0x15d7dd:	cld    
0x15d7dc:	rex.WRXB cld 
0x15d7db:	mov    DWORD PTR [rdi-0x4],ecx
0x15d7da:	hlt    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15d83c:	movq   QWORD PTR [rdi-0x10],mm1
0x15d85d:	cld    
0x15d85c:	rex.WRXB cld 
0x15d85b:	mov    DWORD PTR [rdi-0x4],ecx
0x15d85a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15d8bc:	movq   QWORD PTR [rdi-0x10],mm1
0x15d8dd:	cld    
0x15d8dc:	rex.WRXB cld 
0x15d8db:	mov    DWORD PTR [rdi-0x4],ecx
0x15d93c:	movq   QWORD PTR [rdi-0x10],mm1
0x15d95d:	cld    
0x15d95c:	rex.WRXB cld 
0x15d95b:	mov    DWORD PTR [rdi-0x4],ecx
0x15d9bc:	movq   QWORD PTR [rdi-0x10],mm1
0x15d9d7:	clc    
0x15d9d6:	push   rdi; 	clc    
0x15d9d5:	mov    DWORD PTR [rdi-0x8],edx
0x15d9d4:	mov    QWORD PTR [rdi-0x8],rdx
0x15da3c:	movq   QWORD PTR [rdi-0x10],mm1
0x15da5b:	cld    
0x15da5a:	rex.WRXB cld 
0x15da59:	mov    DWORD PTR [rdi-0x4],ecx
0x15da58:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15dabc:	movq   QWORD PTR [rdi-0x10],mm1
0x15dadb:	cld    
0x15dada:	rex.WRXB cld 
0x15dad9:	mov    DWORD PTR [rdi-0x4],ecx
0x15dad8:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15db3c:	movq   QWORD PTR [rdi-0x10],mm1
0x15db5b:	cld    
0x15db5a:	rex.WRXB cld 
0x15db59:	mov    DWORD PTR [rdi-0x4],ecx
0x15db58:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x15dbbc:	movq   QWORD PTR [rdi-0x10],mm1
0x15dbd5:	cld    
0x15dbd4:	push   rdi; 	cld    
0x15dbd3:	mov    DWORD PTR [rdi-0x4],edx
0x15dbd2:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x15dc3c:	movq   QWORD PTR [rdi-0x10],mm1
0x15dc5d:	mov    DWORD PTR [rdi-0x2],ecx
0x15dc5c:	mov    WORD PTR [rdi-0x2],cx
0x15dccc:	movq   QWORD PTR [rdi-0x10],mm1
0x15dce5:	mov    DWORD PTR [rdi-0x2],edx
0x15dce4:	mov    WORD PTR [rdi-0x2],dx
0x15dd4c:	movq   QWORD PTR [rdi-0x10],mm1
0x15dd64:	mov    BYTE PTR [rdi-0x1],dl
0x15ddbc:	jg     0x15ddc5
0x15ddbb:	movq   QWORD PTR [rdi],mm0
0x15ddba:	movdqu XMMWORD PTR [rdi],xmm0
0x15de16:	jg     0x15de27
0x15de15:	movq   QWORD PTR [rdi],mm1
0x15de14:	movdqu XMMWORD PTR [rdi],xmm1
0x15de2c:	mov    DWORD PTR [rdi],ecx
0x15de2b:	mov    QWORD PTR [rdi],rcx
0x15de86:	jg     0x15de97
0x15de85:	movq   QWORD PTR [rdi],mm1
0x15de84:	movdqu XMMWORD PTR [rdi],xmm1
0x15de9c:	mov    DWORD PTR [rdi],ecx
0x15de9b:	mov    QWORD PTR [rdi],rcx
0x15def6:	jg     0x15df07
0x15def5:	movq   QWORD PTR [rdi],mm1
0x15def4:	movdqu XMMWORD PTR [rdi],xmm1
0x15df0c:	mov    DWORD PTR [rdi],ecx
0x15df0b:	mov    QWORD PTR [rdi],rcx
0x15df66:	jg     0x15df77
0x15df65:	movq   QWORD PTR [rdi],mm1
0x15df64:	movdqu XMMWORD PTR [rdi],xmm1
0x15df7c:	mov    DWORD PTR [rdi],ecx
0x15df7b:	mov    QWORD PTR [rdi],rcx
0x15df7a:	add    al,0x48; 	mov    DWORD PTR [rdi],ecx
0x15dfd6:	jg     0x15dfe7
0x15dfd5:	movq   QWORD PTR [rdi],mm1
0x15dfd4:	movdqu XMMWORD PTR [rdi],xmm1
0x15dfec:	mov    DWORD PTR [rdi],ecx
0x15dfeb:	mov    QWORD PTR [rdi],rcx
0x15e046:	jg     0x15e057
0x15e045:	movq   QWORD PTR [rdi],mm1
0x15e044:	movdqu XMMWORD PTR [rdi],xmm1
0x15e05c:	mov    DWORD PTR [rdi],ecx
0x15e05b:	mov    QWORD PTR [rdi],rcx
0x15e0b6:	jg     0x15e0c7
0x15e0b5:	movq   QWORD PTR [rdi],mm1
0x15e0b4:	movdqu XMMWORD PTR [rdi],xmm1
0x15e0cc:	mov    DWORD PTR [rdi],ecx
0x15e0cb:	mov    QWORD PTR [rdi],rcx
0x15e126:	jg     0x15e137
0x15e125:	movq   QWORD PTR [rdi],mm1
0x15e124:	movdqu XMMWORD PTR [rdi],xmm1
0x15e134:	mov    DWORD PTR [rdi],edx
0x15e133:	mov    QWORD PTR [rdi],rdx
0x15e196:	jg     0x15e1a7
0x15e195:	movq   QWORD PTR [rdi],mm1
0x15e194:	movdqu XMMWORD PTR [rdi],xmm1
0x15e1a8:	mov    DWORD PTR [rdi],ecx
0x15e206:	jg     0x15e217
0x15e205:	movq   QWORD PTR [rdi],mm1
0x15e204:	movdqu XMMWORD PTR [rdi],xmm1
0x15e218:	mov    DWORD PTR [rdi],ecx
0x15e276:	jg     0x15e287
0x15e275:	movq   QWORD PTR [rdi],mm1
0x15e274:	movdqu XMMWORD PTR [rdi],xmm1
0x15e288:	mov    DWORD PTR [rdi],ecx
0x15e2e6:	jg     0x15e2f7
0x15e2e5:	movq   QWORD PTR [rdi],mm1
0x15e2e4:	movdqu XMMWORD PTR [rdi],xmm1
0x15e2f2:	mov    DWORD PTR [rdi],edx
0x15e2f0:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0x15e356:	jg     0x15e367
0x15e355:	movq   QWORD PTR [rdi],mm1
0x15e354:	movdqu XMMWORD PTR [rdi],xmm1
0x15e36c:	mov    DWORD PTR [rdi],ecx
0x15e36b:	mov    WORD PTR [rdi],cx
0x15e3c6:	jg     0x15e3d7
0x15e3c5:	movq   QWORD PTR [rdi],mm1
0x15e3c4:	movdqu XMMWORD PTR [rdi],xmm1
0x15e3d4:	mov    DWORD PTR [rdi],edx
0x15e3d3:	mov    WORD PTR [rdi],dx
0x15e436:	jg     0x15e447
0x15e435:	movq   QWORD PTR [rdi],mm1
0x15e434:	movdqu XMMWORD PTR [rdi],xmm1
0x15e443:	mov    BYTE PTR [rdi],dl
0x15e441:	mov    dh,0x16; 	mov    BYTE PTR [rdi],dl
0x1600bc:	movq   QWORD PTR [rdi-0x10],mm0
0x16012c:	movq   QWORD PTR [rdi-0x10],mm1
0x16014f:	clc    
0x16014e:	rex.WRXB clc 
0x16014d:	mov    DWORD PTR [rdi-0x8],ecx
0x16014c:	mov    QWORD PTR [rdi-0x8],rcx
0x1601bc:	movq   QWORD PTR [rdi-0x10],mm1
0x1601df:	clc    
0x1601de:	rex.WRXB clc 
0x1601dd:	mov    DWORD PTR [rdi-0x8],ecx
0x1601dc:	mov    QWORD PTR [rdi-0x8],rcx
0x16022f:	jg     0x160278
0x16024c:	movq   QWORD PTR [rdi-0x10],mm1
0x16026f:	clc    
0x16026e:	rex.WRXB clc 
0x16026d:	mov    DWORD PTR [rdi-0x8],ecx
0x16026c:	mov    QWORD PTR [rdi-0x8],rcx
0x1602dc:	movq   QWORD PTR [rdi-0x10],mm1
0x1602fd:	cld    
0x1602fc:	rex.WRXB cld 
0x1602fb:	mov    DWORD PTR [rdi-0x4],ecx
0x1602fa:	hlt    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x16035c:	movq   QWORD PTR [rdi-0x10],mm1
0x16037d:	cld    
0x16037c:	rex.WRXB cld 
0x16037b:	mov    DWORD PTR [rdi-0x4],ecx
0x16037a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x1603dc:	movq   QWORD PTR [rdi-0x10],mm1
0x1603fd:	cld    
0x1603fc:	rex.WRXB cld 
0x1603fb:	mov    DWORD PTR [rdi-0x4],ecx
0x16045c:	movq   QWORD PTR [rdi-0x10],mm1
0x16047d:	cld    
0x16047c:	rex.WRXB cld 
0x16047b:	mov    DWORD PTR [rdi-0x4],ecx
0x1604dc:	movq   QWORD PTR [rdi-0x10],mm1
0x1604f7:	clc    
0x1604f6:	push   rdi; 	clc    
0x1604f5:	mov    DWORD PTR [rdi-0x8],edx
0x1604f4:	mov    QWORD PTR [rdi-0x8],rdx
0x16055c:	movq   QWORD PTR [rdi-0x10],mm1
0x16057b:	cld    
0x16057a:	rex.WRXB cld 
0x160579:	mov    DWORD PTR [rdi-0x4],ecx
0x160578:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x1605dc:	movq   QWORD PTR [rdi-0x10],mm1
0x1605fb:	cld    
0x1605fa:	rex.WRXB cld 
0x1605f9:	mov    DWORD PTR [rdi-0x4],ecx
0x1605f8:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x16065c:	movq   QWORD PTR [rdi-0x10],mm1
0x16067b:	cld    
0x16067a:	rex.WRXB cld 
0x160679:	mov    DWORD PTR [rdi-0x4],ecx
0x160678:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x1606dc:	movq   QWORD PTR [rdi-0x10],mm1
0x1606f5:	cld    
0x1606f4:	push   rdi; 	cld    
0x1606f3:	mov    DWORD PTR [rdi-0x4],edx
0x1606f2:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16075c:	movq   QWORD PTR [rdi-0x10],mm1
0x16077d:	mov    DWORD PTR [rdi-0x2],ecx
0x16077c:	mov    WORD PTR [rdi-0x2],cx
0x1607ec:	movq   QWORD PTR [rdi-0x10],mm1
0x160805:	mov    DWORD PTR [rdi-0x2],edx
0x160804:	mov    WORD PTR [rdi-0x2],dx
0x16086c:	movq   QWORD PTR [rdi-0x10],mm1
0x160884:	mov    BYTE PTR [rdi-0x1],dl
0x1608dc:	jg     0x1608e5
0x1608db:	movq   QWORD PTR [rdi],mm0
0x1608da:	movdqu XMMWORD PTR [rdi],xmm0
0x160936:	jg     0x160947
0x160935:	movq   QWORD PTR [rdi],mm1
0x160934:	movdqu XMMWORD PTR [rdi],xmm1
0x16094c:	mov    DWORD PTR [rdi],ecx
0x16094b:	mov    QWORD PTR [rdi],rcx
0x1609a6:	jg     0x1609b7
0x1609a5:	movq   QWORD PTR [rdi],mm1
0x1609a4:	movdqu XMMWORD PTR [rdi],xmm1
0x1609bc:	mov    DWORD PTR [rdi],ecx
0x1609bb:	mov    QWORD PTR [rdi],rcx
0x160a16:	jg     0x160a27
0x160a15:	movq   QWORD PTR [rdi],mm1
0x160a14:	movdqu XMMWORD PTR [rdi],xmm1
0x160a2c:	mov    DWORD PTR [rdi],ecx
0x160a2b:	mov    QWORD PTR [rdi],rcx
0x160a86:	jg     0x160a97
0x160a85:	movq   QWORD PTR [rdi],mm1
0x160a84:	movdqu XMMWORD PTR [rdi],xmm1
0x160a9c:	mov    DWORD PTR [rdi],ecx
0x160a9b:	mov    QWORD PTR [rdi],rcx
0x160a9a:	add    al,0x48; 	mov    DWORD PTR [rdi],ecx
0x160af6:	jg     0x160b07
0x160af5:	movq   QWORD PTR [rdi],mm1
0x160af4:	movdqu XMMWORD PTR [rdi],xmm1
0x160b0c:	mov    DWORD PTR [rdi],ecx
0x160b0b:	mov    QWORD PTR [rdi],rcx
0x160b66:	jg     0x160b77
0x160b65:	movq   QWORD PTR [rdi],mm1
0x160b64:	movdqu XMMWORD PTR [rdi],xmm1
0x160b7c:	mov    DWORD PTR [rdi],ecx
0x160b7b:	mov    QWORD PTR [rdi],rcx
0x160bd6:	jg     0x160be7
0x160bd5:	movq   QWORD PTR [rdi],mm1
0x160bd4:	movdqu XMMWORD PTR [rdi],xmm1
0x160bec:	mov    DWORD PTR [rdi],ecx
0x160beb:	mov    QWORD PTR [rdi],rcx
0x160c46:	jg     0x160c57
0x160c45:	movq   QWORD PTR [rdi],mm1
0x160c44:	movdqu XMMWORD PTR [rdi],xmm1
0x160c54:	mov    DWORD PTR [rdi],edx
0x160c53:	mov    QWORD PTR [rdi],rdx
0x160cb6:	jg     0x160cc7
0x160cb5:	movq   QWORD PTR [rdi],mm1
0x160cb4:	movdqu XMMWORD PTR [rdi],xmm1
0x160cc8:	mov    DWORD PTR [rdi],ecx
0x160d26:	jg     0x160d37
0x160d25:	movq   QWORD PTR [rdi],mm1
0x160d24:	movdqu XMMWORD PTR [rdi],xmm1
0x160d38:	mov    DWORD PTR [rdi],ecx
0x160d96:	jg     0x160da7
0x160d95:	movq   QWORD PTR [rdi],mm1
0x160d94:	movdqu XMMWORD PTR [rdi],xmm1
0x160da8:	mov    DWORD PTR [rdi],ecx
0x160e06:	jg     0x160e17
0x160e05:	movq   QWORD PTR [rdi],mm1
0x160e04:	movdqu XMMWORD PTR [rdi],xmm1
0x160e12:	mov    DWORD PTR [rdi],edx
0x160e10:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0x160e76:	jg     0x160e87
0x160e75:	movq   QWORD PTR [rdi],mm1
0x160e74:	movdqu XMMWORD PTR [rdi],xmm1
0x160e8c:	mov    DWORD PTR [rdi],ecx
0x160e8b:	mov    WORD PTR [rdi],cx
0x160ee6:	jg     0x160ef7
0x160ee5:	movq   QWORD PTR [rdi],mm1
0x160ee4:	movdqu XMMWORD PTR [rdi],xmm1
0x160ef4:	mov    DWORD PTR [rdi],edx
0x160ef3:	mov    WORD PTR [rdi],dx
0x160f56:	jg     0x160f67
0x160f55:	movq   QWORD PTR [rdi],mm1
0x160f54:	movdqu XMMWORD PTR [rdi],xmm1
0x160f63:	mov    BYTE PTR [rdi],dl
0x160f61:	mov    dh,0x16; 	mov    BYTE PTR [rdi],dl
0x163099:	sub    eax,ecx
0x163097:	add    al,0x82; 	sub    eax,ecx
0x16309c:	xor    eax,eax
0x16309b:	ret    ; 	xor    eax,eax
0x16309a:	enter  0x31c3,0xc0
0x1630b3:	sub    eax,ecx
0x1630b1:	add    al,0x82; 	sub    eax,ecx
0x1655ee:	sub    eax,ecx
0x1655ec:	add    al,0x82; 	sub    eax,ecx
0x1655f1:	xor    eax,eax
0x1655f0:	ret    ; 	xor    eax,eax
0x1655ef:	enter  0x31c3,0xc0
0x165613:	sub    eax,ecx
0x165611:	add    al,0x82; 	sub    eax,ecx
0x165836:	ror    BYTE PTR [rdi],0x85
0x1658a7:	xlat   BYTE PTR ds:[rbx]
0x1658a4:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x166c58:	clc    
0x166c57:	mov    eax,edi
0x166c56:	mov    rax,rdi
0x166c55:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x166cb0:	clc    
0x166caf:	mov    eax,edi
0x166cae:	mov    rax,rdi
0x166cad:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x166cc6:	clc    
0x166cc5:	mov    eax,edi
0x166cc4:	mov    rax,rdi
0x166cc3:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x166cd8:	clc    
0x166cd7:	mov    eax,edi
0x166cd6:	mov    rax,rdi
0x166cd5:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x166cee:	clc    
0x166ced:	mov    eax,edi
0x166cec:	mov    rax,rdi
0x166ceb:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x166cf6:	clc    
0x166cf5:	mov    eax,edi
0x166cf4:	mov    rax,rdi
0x166cf3:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x166d0c:	clc    
0x166d0b:	mov    eax,edi
0x166d0a:	mov    rax,rdi
0x166d09:	add    al,0x48; 	mov    eax,edi
0x166d1e:	clc    
0x166d1d:	mov    eax,edi
0x166d1c:	mov    rax,rdi
0x166d1b:	add    al,0x48; 	mov    eax,edi
0x166d2c:	clc    
0x166d2b:	mov    eax,edi
0x166d2a:	mov    rax,rdi
0x166d29:	add    ecx,DWORD PTR [rax-0x77]; 	clc    
0x166d3e:	clc    
0x166d3d:	mov    eax,edi
0x166d3c:	mov    rax,rdi
0x166d4e:	clc    
0x166d4d:	mov    eax,edi
0x166d4c:	mov    rax,rdi
0x166d5e:	clc    
0x166d5d:	mov    eax,edi
0x166d5c:	mov    rax,rdi
0x166d6e:	clc    
0x166d6d:	mov    eax,edi
0x166d6c:	mov    rax,rdi
0x166d6b:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x166d80:	clc    
0x166d7f:	mov    eax,edi
0x166d7e:	mov    rax,rdi
0x166da0:	clc    
0x166d9f:	mov    eax,edi
0x166d9e:	mov    rax,rdi
0x166dc0:	clc    
0x166dbf:	mov    eax,edi
0x166dbe:	mov    rax,rdi
0x1670f7:	xlat   BYTE PTR ds:[rbx]
0x1670f4:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x168875:	add    BYTE PTR [rax],al
0x1688dd:	add    BYTE PTR [rax],al
0x168ad3:	add    BYTE PTR [rax],al
0x168af5:	add    BYTE PTR [rax],al
0x168af3:	sub    DWORD PTR [rbx],eax; 	add    BYTE PTR [rax],al
0x168b1b:	add    BYTE PTR [rax],al
0x168b19:	add    eax,DWORD PTR [rbx]; 	add    BYTE PTR [rax],al
0x168b33:	add    BYTE PTR [rax],al
0x168b31:	jmp    0x168b35; 	add    BYTE PTR [rax],al
0x168b59:	add    BYTE PTR [rax],al
0x168b7b:	add    BYTE PTR [rax],al
0x168b99:	add    BYTE PTR [rax],al
0x168b97:	test   DWORD PTR [rdx],eax; 	add    BYTE PTR [rax],al
0x168bbb:	add    BYTE PTR [rax],al
0x168bb9:	movsxd eax,DWORD PTR [rdx]; 	add    BYTE PTR [rax],al
0x168bdb:	add    BYTE PTR [rax],al
0x168bfb:	add    BYTE PTR [rax],al
0x168bf9:	and    eax,DWORD PTR [rdx]; 	add    BYTE PTR [rax],al
0x168c1b:	add    BYTE PTR [rax],al
0x168c19:	add    eax,DWORD PTR [rdx]; 	add    BYTE PTR [rax],al
0x168c3d:	add    BYTE PTR [rax],al
0x168c3b:	loope  0x168c3e; 	add    BYTE PTR [rax],al
0x168c5d:	add    BYTE PTR [rax],al
0x168c7d:	add    BYTE PTR [rax],al
0x168c7f:	ret    
0x168c7e:	add    bl,al
0x168c7d:	add    BYTE PTR [rax],al; 	ret    
0x168c7c:	add    DWORD PTR [rax],eax; 	add    bl,al
0x168c90:	mov    BYTE PTR [rcx],dl
0x168c8e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rcx],dl
0x168ca1:	mov    DWORD PTR [rcx],edx
0x168ca0:	mov    WORD PTR [rcx],dx
0x168cb3:	mov    BYTE PTR [rcx+0x2],dl
0x168cc0:	mov    DWORD PTR [rcx],edx
0x168cbe:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rcx],edx
0x168cd2:	mov    BYTE PTR [rcx+0x4],dl
0x168ce3:	mov    DWORD PTR [rcx+0x4],edx
0x168ce2:	mov    WORD PTR [rcx+0x4],dx
0x168cf2:	mov    DWORD PTR [rcx+0x3],edx
0x168d01:	mov    DWORD PTR [rcx],edx
0x168d00:	mov    QWORD PTR [rcx],rdx
0x168d13:	mov    BYTE PTR [rcx+0x8],dl
0x168d24:	mov    DWORD PTR [rcx+0x8],edx
0x168d23:	mov    WORD PTR [rcx+0x8],dx
0x168d33:	mov    DWORD PTR [rcx+0x7],edx
0x168d43:	mov    DWORD PTR [rcx+0x8],edx
0x168d54:	mov    DWORD PTR [rcx+0x5],edx
0x168d53:	mov    QWORD PTR [rcx+0x5],rdx
0x168d64:	mov    DWORD PTR [rcx+0x6],edx
0x168d63:	mov    QWORD PTR [rcx+0x6],rdx
0x168d74:	mov    DWORD PTR [rcx+0x7],edx
0x168d73:	mov    QWORD PTR [rcx+0x7],rdx
0x168d84:	mov    DWORD PTR [rcx+0x8],edx
0x168d83:	mov    QWORD PTR [rcx+0x8],rdx
0x168eb1:	mov    eax,edx
0x168eb0:	mov    rax,rdx
0x168f48:	clc    
0x168f47:	mov    eax,edi
0x168f46:	mov    rax,rdi
0x168fe3:	clc    
0x168fe2:	mov    eax,edi
0x168fe1:	mov    rax,rdi
0x168fe0:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x169b66:	ror    BYTE PTR [rdi],0x85
0x169bd7:	xlat   BYTE PTR ds:[rbx]
0x169bd4:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x16af87:	lea    eax,[rdx+0x7]
0x16af86:	lea    rax,[rdx+0x7]
0x16afdf:	lea    eax,[rdx+0xf]
0x16afde:	lea    rax,[rdx+0xf]
0x16aff5:	lea    eax,[rdx]
0x16aff4:	lea    rax,[rdx]
0x16b007:	lea    eax,[rdx+0x1]
0x16b006:	lea    rax,[rdx+0x1]
0x16b01d:	lea    eax,[rdx+0x2]
0x16b01c:	lea    rax,[rdx+0x2]
0x16b035:	lea    eax,[rdx+0x3]
0x16b034:	lea    rax,[rdx+0x3]
0x16b04b:	lea    eax,[rdx+0x4]
0x16b04a:	lea    rax,[rdx+0x4]
0x16b05d:	lea    eax,[rdx+0x5]
0x16b05c:	lea    rax,[rdx+0x5]
0x16b07b:	lea    eax,[rdx+0x6]
0x16b07a:	lea    rax,[rdx+0x6]
0x16b08d:	lea    eax,[rdx+0x8]
0x16b08c:	lea    rax,[rdx+0x8]
0x16b0ad:	lea    eax,[rdx+0x9]
0x16b0ac:	lea    rax,[rdx+0x9]
0x16b0cd:	lea    eax,[rdx+0xa]
0x16b0cc:	lea    rax,[rdx+0xa]
0x16b0ed:	lea    eax,[rdx+0xb]
0x16b0ec:	lea    rax,[rdx+0xb]
0x16b10f:	lea    eax,[rdx+0xc]
0x16b10e:	lea    rax,[rdx+0xc]
0x16b12f:	lea    eax,[rdx+0xd]
0x16b12e:	lea    rax,[rdx+0xd]
0x16b14f:	lea    eax,[rdx+0xe]
0x16b14e:	lea    rax,[rdx+0xe]
0x16b487:	xlat   BYTE PTR ds:[rbx]
0x16b484:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x16cc0d:	fdivr  st,st(7)
0x16cc0c:	sbb    eax,0xffffffff
0x16cc0b:	sbb    rax,0xffffffffffffffff
0x16cc75:	fdivr  st,st(7)
0x16cc74:	sbb    eax,0xffffffff
0x16cc73:	sbb    rax,0xffffffffffffffff
0x16ce7a:	fdivr  st,st(7)
0x16ce79:	sbb    eax,0xffffffff
0x16ce78:	sbb    rax,0xffffffffffffffff
0x16ce9d:	fdivr  st,st(7)
0x16ce9c:	sbb    eax,0xffffffff
0x16ce9b:	sbb    rax,0xffffffffffffffff
0x16cec3:	fdivr  st,st(7)
0x16cec2:	sbb    eax,0xffffffff
0x16cec1:	sbb    rax,0xffffffffffffffff
0x16ceeb:	fdivr  st,st(7)
0x16ceea:	sbb    eax,0xffffffff
0x16cee9:	sbb    rax,0xffffffffffffffff
0x16cf11:	fdivr  st,st(7)
0x16cf10:	sbb    eax,0xffffffff
0x16cf0f:	sbb    rax,0xffffffffffffffff
0x16cf43:	fdivr  st,st(7)
0x16cf42:	sbb    eax,0xffffffff
0x16cf41:	sbb    rax,0xffffffffffffffff
0x16cf71:	fdivr  st,st(7)
0x16cf70:	sbb    eax,0xffffffff
0x16cf6f:	sbb    rax,0xffffffffffffffff
0x16cfa3:	fdivr  st,st(7)
0x16cfa2:	sbb    eax,0xffffffff
0x16cfa1:	sbb    rax,0xffffffffffffffff
0x16cfd3:	fdivr  st,st(7)
0x16cfd2:	sbb    eax,0xffffffff
0x16cfd1:	sbb    rax,0xffffffffffffffff
0x16d003:	fdivr  st,st(7)
0x16d002:	sbb    eax,0xffffffff
0x16d001:	sbb    rax,0xffffffffffffffff
0x16d033:	fdivr  st,st(7)
0x16d032:	sbb    eax,0xffffffff
0x16d031:	sbb    rax,0xffffffffffffffff
0x16d065:	fdivr  st,st(7)
0x16d064:	sbb    eax,0xffffffff
0x16d063:	sbb    rax,0xffffffffffffffff
0x16d095:	fdivr  st,st(7)
0x16d094:	sbb    eax,0xffffffff
0x16d093:	sbb    rax,0xffffffffffffffff
0x16d0c5:	fdivr  st,st(7)
0x16d0c4:	sbb    eax,0xffffffff
0x16d0c3:	sbb    rax,0xffffffffffffffff
0x16d0ce:	add    BYTE PTR [rax],al
0x16d0cc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x16d0e0:	mov    BYTE PTR [rcx],dl
0x16d0de:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rcx],dl
0x16d0f1:	mov    DWORD PTR [rcx],edx
0x16d0f0:	mov    WORD PTR [rcx],dx
0x16d103:	mov    BYTE PTR [rcx+0x2],dl
0x16d110:	mov    DWORD PTR [rcx],edx
0x16d10e:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rcx],edx
0x16d122:	mov    BYTE PTR [rcx+0x4],dl
0x16d133:	mov    DWORD PTR [rcx+0x4],edx
0x16d132:	mov    WORD PTR [rcx+0x4],dx
0x16d142:	mov    DWORD PTR [rcx+0x3],edx
0x16d151:	mov    DWORD PTR [rcx],edx
0x16d150:	mov    QWORD PTR [rcx],rdx
0x16d163:	mov    BYTE PTR [rcx+0x8],dl
0x16d174:	mov    DWORD PTR [rcx+0x8],edx
0x16d173:	mov    WORD PTR [rcx+0x8],dx
0x16d183:	mov    DWORD PTR [rcx+0x7],edx
0x16d193:	mov    DWORD PTR [rcx+0x8],edx
0x16d1a4:	mov    DWORD PTR [rcx+0x5],edx
0x16d1a3:	mov    QWORD PTR [rcx+0x5],rdx
0x16d1b4:	mov    DWORD PTR [rcx+0x6],edx
0x16d1b3:	mov    QWORD PTR [rcx+0x6],rdx
0x16d1c4:	mov    DWORD PTR [rcx+0x7],edx
0x16d1c3:	mov    QWORD PTR [rcx+0x7],rdx
0x16d1d4:	mov    DWORD PTR [rcx+0x8],edx
0x16d1d3:	mov    QWORD PTR [rcx+0x8],rdx
0x16d301:	mov    eax,edx
0x16d300:	mov    rax,rdx
0x16d39f:	fdivr  st,st(7)
0x16d39e:	sbb    eax,0xffffffff
0x16d39d:	sbb    rax,0xffffffffffffffff
0x16d44a:	fdivr  st,st(7)
0x16d449:	sbb    eax,0xffffffff
0x16d448:	sbb    rax,0xffffffffffffffff
0x16df47:	xlat   BYTE PTR ds:[rbx]
0x16df44:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x16e3b6:	clc    
0x16e3b5:	mov    eax,edi
0x16e3b4:	mov    rax,rdi
0x16e3b3:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x16e3d5:	clc    
0x16e3d4:	mov    eax,edi
0x16e3d3:	mov    rax,rdi
0x16e3d2:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x16e3e6:	clc    
0x16e3e5:	mov    eax,edi
0x16e3e4:	mov    rax,rdi
0x16e3e3:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x16e3f8:	clc    
0x16e3f7:	mov    eax,edi
0x16e3f6:	mov    rax,rdi
0x16e3f5:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x16e40e:	clc    
0x16e40d:	mov    eax,edi
0x16e40c:	mov    rax,rdi
0x16e40b:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x16e420:	clc    
0x16e41f:	mov    eax,edi
0x16e41e:	mov    rax,rdi
0x16e41d:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x16e466:	sub    eax,ecx
0x16e464:	mov    dh,0xe; 	sub    eax,ecx
0x16eedd:	cmp    BYTE PTR [rdi],dl
0x16f007:	xor    eax,eax
0x16f005:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f02f:	xor    eax,eax
0x16f02d:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f0bb:	sub    eax,edx
0x16f0e2:	xor    eax,eax
0x16f0e0:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f106:	sub    eax,edx
0x16f19e:	sub    eax,ecx
0x16f19c:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x16f1d2:	xor    eax,eax
0x16f1d0:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f209:	sub    eax,ecx
0x16f207:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x16f291:	xor    eax,eax
0x16f28f:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f2c2:	xor    eax,eax
0x16f2c0:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f2ec:	xor    eax,eax
0x16f2ea:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f308:	sub    eax,ecx
0x16f38a:	xor    eax,eax
0x16f388:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f40d:	xor    eax,eax
0x16f40b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f48d:	xor    eax,eax
0x16f48b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f50d:	xor    eax,eax
0x16f50b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f58d:	xor    eax,eax
0x16f58b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f615:	sub    eax,ecx
0x16f73b:	xor    eax,eax
0x16f739:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f7cb:	xor    eax,eax
0x16f7c9:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f7ee:	push   rdi
0x16f7ed:	outs   dx,DWORD PTR ds:[rsi]; 	push   rdi
0x16f85e:	xor    eax,eax
0x16f85c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f8fe:	xor    eax,eax
0x16f8fc:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16f99e:	xor    eax,eax
0x16f99c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16fa0f:	xor    eax,eax
0x16fa0d:	jne    0x16fa33; 	xor    eax,eax
0x16fa59:	sub    eax,ecx
0x16fa57:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x16fa6b:	sub    eax,ecx
0x16fa69:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x17050d:	cmp    BYTE PTR [rdi],dl
0x170637:	xor    eax,eax
0x170635:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x17065d:	xor    eax,eax
0x17065b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1706d8:	xor    eax,eax
0x1706d6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x17075d:	xor    eax,eax
0x17075b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1707e9:	xor    eax,eax
0x1707e7:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x17084f:	xor    eax,eax
0x17084d:	jne    0x170873; 	xor    eax,eax
0x170883:	xor    eax,eax
0x170881:	jne    0x170886; 	xor    eax,eax
0x17088d:	neg    eax
0x17088b:	jl     0x170890; 	neg    eax
0x17088f:	ret    
0x17088e:	fadd   st,st(3)
0x17088d:	neg    eax; 	ret    
0x17088c:	add    esi,edi; 	fadd   st,st(3)
0x170891:	xor    eax,eax
0x170890:	ret    ; 	xor    eax,eax
0x17088f:	ret    ; 	ret    ; 	xor    eax,eax
0x170921:	xor    eax,eax
0x170920:	xor    rax,rax
0x17096a:	lea    eax,[rdi+0x7]
0x170969:	lea    rax,[rdi+0x7]
0x170998:	lea    eax,[rdi+0x3]
0x170997:	lea    rax,[rdi+0x3]
0x1709f1:	lea    eax,[rdi+0xf]
0x1709f0:	lea    rax,[rdi+0xf]
0x170a37:	lea    eax,[rdi+0xb]
0x170a36:	lea    rax,[rdi+0xb]
0x170a7d:	lea    eax,[rdi+0x7]
0x170a7c:	lea    rax,[rdi+0x7]
0x170ad0:	lea    eax,[rdi+0xf]
0x170acf:	lea    rax,[rdi+0xf]
0x170ae1:	lea    eax,[rdi]
0x170ae0:	lea    rax,[rdi]
0x170af1:	lea    eax,[rdi+0x1]
0x170af0:	lea    rax,[rdi+0x1]
0x170b01:	lea    eax,[rdi+0x2]
0x170b00:	lea    rax,[rdi+0x2]
0x170b11:	lea    eax,[rdi+0x3]
0x170b10:	lea    rax,[rdi+0x3]
0x170b21:	lea    eax,[rdi+0x4]
0x170b20:	lea    rax,[rdi+0x4]
0x170b31:	lea    eax,[rdi+0x5]
0x170b30:	lea    rax,[rdi+0x5]
0x170b41:	lea    eax,[rdi+0x6]
0x170b40:	lea    rax,[rdi+0x6]
0x170b51:	lea    eax,[rdi+0x8]
0x170b50:	lea    rax,[rdi+0x8]
0x170b61:	lea    eax,[rdi+0x9]
0x170b60:	lea    rax,[rdi+0x9]
0x170b71:	lea    eax,[rdi+0xa]
0x170b70:	lea    rax,[rdi+0xa]
0x170b81:	lea    eax,[rdi+0xb]
0x170b80:	lea    rax,[rdi+0xb]
0x170b91:	lea    eax,[rdi+0xc]
0x170b90:	lea    rax,[rdi+0xc]
0x170ba1:	lea    eax,[rdi+0xd]
0x170ba0:	lea    rax,[rdi+0xd]
0x170bb1:	lea    eax,[rdi+0xe]
0x170bb0:	lea    rax,[rdi+0xe]
0x171dcf:	sub    eax,edx
0x171de8:	sub    eax,edx
0x171de7:	lock sub eax,edx
0x171de6:	push   rsi; 	lock sub eax,edx
0x171df8:	sub    eax,edx
0x171df7:	icebp  ; 	sub    eax,edx
0x171df6:	push   rsi; 	icebp  ; 	sub    eax,edx
0x171e08:	sub    eax,edx
0x171e07:	repnz sub eax,edx
0x171e06:	push   rsi; 	repnz sub eax,edx
0x171e18:	sub    eax,edx
0x171e17:	repz sub eax,edx
0x171e16:	push   rsi; 	repz sub eax,edx
0x171e28:	sub    eax,edx
0x171e27:	hlt    ; 	sub    eax,edx
0x171e26:	push   rsi; 	hlt    ; 	sub    eax,edx
0x171e38:	sub    eax,edx
0x171e37:	cmc    ; 	sub    eax,edx
0x171e36:	push   rsi; 	cmc    ; 	sub    eax,edx
0x171e48:	sub    eax,edx
0x171e83:	sub    eax,edx
0x1720fa:	xor    eax,eax
0x1720f8:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1721a7:	xor    eax,eax
0x1721a5:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x172262:	xor    eax,eax
0x172260:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1722fb:	xor    eax,eax
0x1722f9:	jne    0x172315; 	xor    eax,eax
0x172318:	fdivr  st,st(7)
0x172317:	sbb    eax,0xffffffff
0x172320:	xor    eax,eax
0x17231e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x172801:	add    BYTE PTR [rax],al
0x17281a:	add    BYTE PTR [rax],al
0x172818:	adc    al,0x1; 	add    BYTE PTR [rax],al
0x17282f:	add    BYTE PTR [rax],al
0x17282d:	inc    DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x17284a:	add    BYTE PTR [rax],al
0x172848:	in     al,0x0; 	add    BYTE PTR [rax],al
0x172928:	xor    eax,eax
0x172926:	jne    0x172930; 	xor    eax,eax
0x172937:	neg    eax
0x172935:	jg     0x172940; 	neg    eax
0x17293e:	add    BYTE PTR [rax],al
0x17293d:	add    BYTE PTR [rax],r8b
0x172950:	xor    eax,eax
0x17294e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x172a5d:	clc    
0x172a5c:	rex.RX clc 
0x172a6d:	cld    
0x172a6c:	rex.WRX cld 
0x172a6b:	mov    DWORD PTR [rsi-0x4],ecx
0x172a79:	mov    DWORD PTR [rsi-0x2],ecx
0x172a78:	mov    WORD PTR [rsi-0x2],cx
0x172a85:	mov    BYTE PTR [rdi],cl
0x172a83:	jb     0x172a87; 	mov    BYTE PTR [rdi],cl
0x172ae9:	vzeroupper 
0x172b00:	vzeroupper 
0x172b7c:	sbb    BYTE PTR [rax-0x7d],cl
0x172b7b:	rex.WRB sbb BYTE PTR [r8-0x7d],r9b
0x172f12:	pop    rdi
0x172f11:	pop    r15
0x172f10:	pop    rsi; 	pop    r15
0x172f0f:	pop    r14; 	pop    r15
0x173d3d:	pop    rdi
0x173d3c:	pop    r15
0x173d3b:	pop    rsi; 	pop    r15
0x173d3a:	pop    r14; 	pop    r15
0x173d5f:	add    bl,dh
0x173d9f:	add    bl,dh
0x173df3:	add    esp,0x8
0x173df2:	add    rsp,0x8
0x173f5f:	add    BYTE PTR [rax-0x7d],cl
0x173fbe:	add    BYTE PTR [rax+0x39],cl
0x174010:	pop    rbp
0x17400f:	pop    r13
0x17400e:	pop    rsp; 	pop    r13
0x17400d:	pop    r12; 	pop    r13
0x1740f2:	pop    rsp
0x1740f1:	pop    r12
0x1740f0:	pop    rbp; 	pop    r12
0x1740ef:	pop    rbx; 	pop    rbp; 	pop    r12
0x174147:	pop    rbp
0x174146:	pop    rbx; 	pop    rbp
0x174145:	or     BYTE PTR [rbx+0x5d],bl
0x174248:	add    esp,0x8
0x174247:	add    rsp,0x8
0x1742e9:	push   rbx
0x1742e7:	mov    ch,0xea; 	push   rbx
0x174327:	pop    rbx
0x174326:	loope  0x174383
0x174325:	jne    0x174308; 	pop    rbx
0x174324:	add    BYTE PTR [rbp-0x1f],dh; 	pop    rbx
0x174360:	je     0x174363
0x17437f:	adc    ecx,DWORD PTR [rax-0x7d]
0x17439e:	cmp    ecx,DWORD PTR [rax-0x7d]
0x1743af:	pop    rbp
0x1743ae:	pop    rbx; 	pop    rbp
0x1743ad:	pop    rax; 	pop    rbx; 	pop    rbp
0x1743ac:	out    dx,eax; 	pop    rax; 	pop    rbx; 	pop    rbp
0x1743fe:	pop    rbx
0x1743fc:	add    BYTE PTR [rax],al; 	pop    rbx
0x174479:	add    esp,0x8
0x174478:	add    rsp,0x8
0x1745ab:	add    bl,dh
0x1745a9:	add    BYTE PTR [rax],al; 	add    bl,dh
0x1745bb:	ja     0x1745c0
0x1745ba:	add    DWORD PTR [rdi+0x3],esi
0x1745b9:	inc    DWORD PTR [rcx]; 	ja     0x1745c0
0x1745d5:	add    esp,0x8
0x1745d4:	add    rsp,0x8
0x174683:	or     bl,dh
0x174774:	pop    rbp
0x174773:	pop    r13
0x174772:	pop    rsp; 	pop    r13
0x174771:	pop    r12; 	pop    r13
0x1747f3:	pop    rsp
0x1747f2:	pop    r12
0x1747f1:	pop    rbp; 	pop    r12
0x1747f0:	pop    rbx; 	pop    rbp; 	pop    r12
0x17483f:	add    bl,dh
0x17486f:	add    bl,dh
0x17489f:	add    bl,dh
0x1748cf:	add    bl,dh
0x1748ff:	add    bl,dh
0x174cc5:	pop    rdi
0x174cc4:	pop    r15
0x174cc3:	pop    rsi; 	pop    r15
0x174cc2:	pop    r14; 	pop    r15
0x174cdf:	pop    rdi
0x174cde:	pop    r15
0x174cdd:	pop    rsi; 	pop    r15
0x174cdc:	pop    r14; 	pop    r15
0x1750f1:	add    bl,dh
0x1750ef:	add    BYTE PTR [rax],al; 	add    bl,dh
0x175141:	adc    ecx,DWORD PTR [rax-0x7d]
0x175150:	pop    rbp
0x17514f:	pop    rbx; 	pop    rbp
0x17514e:	or     BYTE PTR [rbx+0x5d],bl
0x17519e:	pop    rdi
0x17519d:	pop    r15
0x17519c:	pop    rsi; 	pop    r15
0x17519b:	pop    r14; 	pop    r15
0x175217:	add    DWORD PTR [rax-0x7d],ecx
0x17523f:	pop    rdi
0x17523e:	pop    r15
0x17523d:	pop    rsi; 	pop    r15
0x17523c:	pop    r14; 	pop    r15
0x1752d4:	add    BYTE PTR [rax+0x39],cl
0x1752f0:	pop    rbp
0x1752ef:	pop    rbx; 	pop    rbp
0x1752ee:	or     BYTE PTR [rbx+0x5d],bl
0x1765ea:	add    BYTE PTR [rax],al
0x1769ea:	add    BYTE PTR [rax],al
0x176bea:	add    BYTE PTR [rax],al
0x176fea:	add    BYTE PTR [rax],al
0x17c5c2:	add    BYTE PTR [rax],al
0x17c69a:	add    BYTE PTR [rax],al
0x17cab6:	add    BYTE PTR [rax],al
0x17cc0a:	add    BYTE PTR [rax],al
0x17d00a:	add    BYTE PTR [rax],al
0x17d008:	ror    BYTE PTR [rax+rax*1],0x0
0x17d40a:	add    BYTE PTR [rax],al
0x17d409:	sldt   WORD PTR [rax]
0x17e23e:	add    BYTE PTR [rax],al
0x17e23c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x17e72e:	add    BYTE PTR [rax],al
0x17e72c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x17f236:	add    BYTE PTR [rax],al
0x17f234:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x17f9ce:	add    BYTE PTR [rax],al
0x17f9cc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x181b86:	add    BYTE PTR [rax],al
0x181d40:	rol    cl,0xc2
0x182a25:	sbb    bl,BYTE PTR [rsi]
0x182a62:	cld    
0x182c06:	push   rsi
0x182c05:	jrcxz  0x182c5d
0x182c04:	mov    ah,bl; 	push   rsi
0x182e0a:	mov    ah,0x13
0x182f51:	outs   dx,DWORD PTR ds:[rsi]
0x1832b1:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x1832b0:	mov    ah,0xa5
0x1833f9:	xchg   esp,eax
0x1833f8:	xchg   edi,eax; 	xchg   esp,eax
0x1833f7:	test   al,0x97; 	xchg   esp,eax
0x1833f6:	cld    ; 	test   al,0x97; 	xchg   esp,eax
0x183ca5:	jnp    0x183c60
0x183ca4:	stc    ; 	jnp    0x183c60
0x183ca3:	sar    ecx,1; 	jnp    0x183c60
0x183e2a:	sti    
0x183e29:	addr32 sti 
0x183e28:	shl    DWORD PTR [rdi-0x5],1
0x183f8a:	xor    al,0xd8
0x183f88:	je     0x183f4f; 	xor    al,0xd8
0x1840e6:	mov    edi,DWORD PTR [rdx]
0x1840e4:	mov    bh,0xb4; 	mov    edi,DWORD PTR [rdx]
0x1850b9:	ret    
0x1850b8:	fcmovb st,st(3)
0x1850b7:	out    dx,al; 	fcmovb st,st(3)
0x1850b6:	mov    al,0xee; 	fcmovb st,st(3)
0x18540c:	stos   DWORD PTR es:[rdi],eax
0x185544:	int    0x6b
0x185542:	sub    edi,esi; 	int    0x6b
0x185c8b:	stos   DWORD PTR es:[rdi],eax
0x185c8a:	mov    ch,0xab
0x185c89:	cmc    ; 	mov    ch,0xab
0x185c88:	out    0xf5,eax; 	mov    ch,0xab
0x185e39:	fcomp  DWORD PTR [rdx+0x21]
0x187b4b:	jmp    FWORD PTR [rax]
0x187b4a:	lock jmp FWORD PTR [rax]
0x189018:	hlt    
0x189017:	push   rsp
0x189016:	repz push rsp
0x18901c:	hlt    
0x18901b:	push   rsp
0x18901a:	repz push rsp
0x189019:	ret    ; 	repz push rsp
0x189024:	hlt    
0x189023:	push   rsp
0x189022:	repz push rsp
0x189021:	fdiv   st(3),st; 	push   rsp
0x18902c:	hlt    
0x18902b:	push   rsp
0x18902a:	repz push rsp
0x18902f:	jmp    rcx
0x18902e:	repz jmp rcx
0x18902d:	ret    ; 	repz jmp rcx
0x18906b:	jmp    rcx
0x18906a:	repz jmp rcx
0x189069:	fdiv   st(3),st; 	jmp    rcx
0x189098:	hlt    
0x189097:	push   rsp
0x189096:	repz push rsp
0x1890af:	jmp    rcx
0x1890ae:	repz jmp rcx
0x19a12c:	push   rsp
0x19a12a:	idiv   edi; 	push   rsp
0x19a134:	ins    BYTE PTR es:[rdi],dx
0x19a132:	idiv   edi; 	ins    BYTE PTR es:[rdi],dx
0x19a144:	pushf  
0x19a142:	idiv   edi; 	pushf  
0x19a154:	int3   
0x19a153:	dec    esp
0x19a152:	idiv   edi; 	int3   
0x19a151:	out    0xf7,al; 	dec    esp
0x19a15b:	jmp    rsp
0x19a159:	out    0xf7,al; 	jmp    rsp
0x19a164:	cld    
0x19a162:	idiv   edi; 	cld    
0x19d110:	add    al,BYTE PTR [rcx+0xa]
0x19d11d:	or     BYTE PTR [rbx+rcx*1+0x7e],cl
0x19db9d:	add    bl,BYTE PTR [rax+0xa]
0x19dba5:	pop    rdi
0x19dba2:	or     BYTE PTR [rdx+0xb],cl; 	pop    rdi
0x19e5a9:	add    DWORD PTR [rdx],ecx
0x19e5d1:	add    DWORD PTR [rdx],ecx
0x19fbb4:	add    DWORD PTR [rdx],0x63
0x19fce6:	and    BYTE PTR [rcx+0xa],al
0x19fe20:	outs   dx,DWORD PTR ds:[rsi]
0x19fe1e:	add    al,BYTE PTR [rdx]; 	outs   dx,DWORD PTR ds:[rsi]
0x19fe1d:	add    DWORD PTR [rdx],0x2; 	outs   dx,DWORD PTR ds:[rsi]
0x1a02f6:	outs   dx,DWORD PTR ds:[rsi]
0x1a02f4:	add    DWORD PTR [rdx],0x6f
0x1a0686:	and    BYTE PTR [rcx+0xa],al
0x1a0ee6:	jno    0x1a0ef2
0x1a0ee5:	add    dh,BYTE PTR [rcx+0xa]
0x1a1448:	pop    rax
0x1a1446:	add    BYTE PTR [rax],al; 	pop    rax
0x1a1462:	je     0x1a146e
0x1a1dad:	adc    BYTE PTR [rbx+0xa],ch
0x1a2010:	add    al,BYTE PTR [rdi+0xa]
0x1a2637:	add    bl,BYTE PTR [rcx+0xa]
0x1a263e:	or     ecx,DWORD PTR [rdx+0xa]
0x1a263d:	rex.RXB or r9d,DWORD PTR [r10+0xa]
0x1a2667:	push   rsi
0x1a2665:	add    al,BYTE PTR [rdx]; 	push   rsi
0x1a2664:	add    DWORD PTR [rdx],0x2; 	push   rsi
0x1a266f:	add    bl,BYTE PTR [rcx+0xa]
0x1a2677:	jae    0x1a2683
0x1a2676:	or     esi,DWORD PTR [rbx+0xa]
0x1a2675:	rex.RXB or r14d,DWORD PTR [r11+0xa]
0x1a273e:	add    DWORD PTR [rax+rbp*2],0xa
0x1a288f:	pop    rsi
0x1a288d:	add    al,BYTE PTR [rdx]; 	pop    rsi
0x1a288c:	add    DWORD PTR [rdx],0x2; 	pop    rsi
0x1a3014:	add    DWORD PTR [rdx],0x77
0x1a3c20:	add    al,BYTE PTR [rdi+0xa]
0x1a4051:	hlt    
0x1a4050:	add    dh,ah
0x1a404f:	add    al,0x2; 	hlt    
0x1a404e:	add    DWORD PTR [rdx+rax*1],0xfffffff4
0x1a4177:	add    al,0x79
0x1a4258:	add    cl,BYTE PTR [rbp+0xa]
0x1a426a:	add    DWORD PTR [rdx],ecx
0x1a4268:	add    ebx,DWORD PTR [rdi]; 	add    DWORD PTR [rdx],ecx
0x1a44fe:	add    DWORD PTR [rsi+riz*2],0xa
0x1a4573:	xchg   ebp,eax
0x1a4570:	add    DWORD PTR [rsi],0x2; 	xchg   ebp,eax
0x1a499c:	add    DWORD PTR [rdx],0x63
0x1a53ad:	add    DWORD PTR [rdx],0x43
0x1a5c57:	xor    BYTE PTR [rdx],al
0x1a5ee5:	add    dl,ch
0x1a6a10:	mov    BYTE PTR [rcx],al
0x1a6cc8:	mov    BYTE PTR [rcx],al
0x1a71df:	add    al,0x7b
0x1a71f5:	push   rdx
0x1a71f3:	mov    WORD PTR [rdx],es; 	push   rdx
0x1a72b7:	add    al,0x71
0x1a770e:	add    DWORD PTR [rdx],0x4b
0x1a7e07:	xor    BYTE PTR [rdx],al
0x1a7ed4:	pushf  
0x1a7ed2:	add    BYTE PTR [rax],al; 	pushf  
0x1a8da7:	add    al,0x72
0x1a8e60:	add    DWORD PTR [rsi],0x77
0x1a9ec5:	add    bl,BYTE PTR [rdx+0xa]
0x1a9ecd:	push   rdx
0x1a9eca:	or     BYTE PTR [rax+0xb],cl; 	push   rdx
0x1aa87d:	xor    BYTE PTR [rdx],al
0x1ab8af:	add    al,0x75
0x1abb0f:	add    al,ah
0x1abb0d:	inc    DWORD PTR [rax]; 	add    al,ah
0x1ac0f8:	jo     0x1ac104
0x1ac0f6:	add    DWORD PTR [rax+rsi*2],0xa
0x1ac300:	add    DWORD PTR [rsi],0x2
0x1aca01:	jle    0x1aca0d
0x1aca00:	add    bh,BYTE PTR [rsi+0xa]
0x1ac9ff:	add    al,0x2; 	jle    0x1aca0d
0x1acc2f:	add    al,ah
0x1acc2d:	adc    BYTE PTR [rcx],al; 	add    al,ah
0x1ae37f:	add    ecx,DWORD PTR [rdx]
0x1ae37e:	popf   ; 	add    ecx,DWORD PTR [rdx]
0x1ae78f:	push   rsp
0x1ae78d:	add    DWORD PTR [rdx],0x54
0x1afd06:	push   rbx
0x1afd04:	add    DWORD PTR [rdx],0x53
0x1afe9e:	add    DWORD PTR [rsp+rbp*2],0xa
0x1b0096:	cwde   
0x1b0093:	add    DWORD PTR [rdi],0x2; 	cwde   
0x1b2660:	add    ah,bh
0x1b265e:	mov    es,WORD PTR [rdx]; 	add    ah,bh
0x1b2690:	add    DWORD PTR [rdx],ecx
0x1b2855:	add    bl,BYTE PTR [rbp+0xa]
0x1b2ddd:	pop    rbx
0x1b2ddb:	add    DWORD PTR [rdx],0x5b
0x1b56f7:	add    al,cl
0x1b5bef:	xchg   ecx,eax
0x1b5bed:	add    al,BYTE PTR [rdx]; 	xchg   ecx,eax
0x1b5bec:	add    DWORD PTR [rdx],0x2; 	xchg   ecx,eax
0x1b69c6:	jb     0x1b69d2
0x1b69c5:	add    dh,BYTE PTR [rdx+0xa]
0x1b9077:	add    al,cl
0x1b90c8:	clc    
0x1b90c7:	add    al,bh
0x1b90c6:	add    DWORD PTR [rax],eax; 	clc    
0x1bad2e:	push   rcx
0x1bad2c:	add    DWORD PTR [rdx],0x51
0x1bad57:	add    al,0x66
0x1bad90:	rcl    BYTE PTR [rax+rdi*8],0xff
0x1bb867:	add    DWORD PTR [rdx],ecx
0x1bb866:	ins    BYTE PTR es:[rdi],dx; 	add    DWORD PTR [rdx],ecx
0x1bb865:	add    ebp,DWORD PTR [rcx+rax*1+0xa]
0x1bb87a:	mov    WORD PTR [rdx],cs
0x1bb878:	or     eax,DWORD PTR [rdx]; 	mov    WORD PTR [rdx],cs
0x1bc487:	add    al,BYTE PTR [rax]
0x1bc486:	cmc    ; 	add    al,BYTE PTR [rax]
0x1bc485:	add    esi,ebp; 	add    al,BYTE PTR [rax]
0x1bc4b7:	add    al,BYTE PTR [rax]
0x1bc4b6:	cmc    ; 	add    al,BYTE PTR [rax]
0x1bc4b5:	add    ebp,esi; 	add    al,BYTE PTR [rax]
0x1bc581:	or     BYTE PTR [rbx],al
0x1bc580:	icebp  ; 	or     BYTE PTR [rbx],al
0x1bc57f:	add    cl,dh; 	or     BYTE PTR [rbx],al
0x1bc5e8:	or     ch,BYTE PTR [rdi+0x5]
0x1bcd6e:	add    BYTE PTR [rax],al
0x1bcf52:	add    BYTE PTR [rax],al
0x1bd09e:	add    BYTE PTR [rax],al
0x1bd482:	add    BYTE PTR [rax],al
0x1bd480:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1bd936:	add    BYTE PTR [rax],al
0x1bd934:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1bde6e:	add    BYTE PTR [rax],al
0x1bebce:	add    BYTE PTR [rax],al
0x1bebcc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1beeb6:	add    BYTE PTR [rax],al
0x1beeb4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1bf96a:	add    BYTE PTR [rax],al
0x1bf968:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1c08d7:	add    BYTE PTR [rax],dl
0x1c08d5:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dl
0x1c10ae:	add    BYTE PTR [rax],al
0x1c10ac:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1c287f:	add    al,dh
0x1c287d:	add    BYTE PTR [rax],al; 	add    al,dh
0x1c28af:	add    BYTE PTR [rax],ah
0x1c28ad:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],ah
0x1c28c7:	add    BYTE PTR [rax],dh
0x1c28c5:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1c40ef:	lea    eax,[rcx]
0x1c40f5:	jno    0x1c40d2
0x1c7808:	int3   
0x1c7807:	add    ah,cl
0x1c7806:	add    BYTE PTR [rax],al; 	int3   
0x1c7805:	add    BYTE PTR [rax],al; 	add    ah,cl
0x1c7810:	int3   
0x1c780f:	add    ah,cl
0x1c780e:	add    BYTE PTR [rax],al; 	int3   
0x1c780d:	add    BYTE PTR [rax],al; 	add    ah,cl
