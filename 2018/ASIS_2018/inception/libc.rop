0x977:	add    BYTE PTR [rax],al
0x975:	and    al,0xa0; 	add    BYTE PTR [rax],al
0xc2a:	add    BYTE PTR [rax],al
0xdf6:	add    BYTE PTR [rax],al
0x1b2d:	jns    0x1b36
0x1b2c:	push   rcx; 	jns    0x1b36
0x1b96:	pop    rdx
0x1b9a:	pop    rdx
0x1b9e:	pop    rdx
0x1ba6:	pop    rdx
0x1cce:	je     0x1cf8
0x1ccd:	push   rbp; 	je     0x1cf8
0x1f6b:	movlhps xmm2,xmm3
0x209f:	sbb    BYTE PTR [rdx-0x1a],dl
0x211b:	xchg   ebp,eax
0x236f:	stos   BYTE PTR es:[rdi],al
0x236d:	add    al,0xaa
0x236c:	stos   BYTE PTR es:[rdi],al; 	add    al,0xaa
0x2687:	icebp  
0x2c37:	adc    al,0xe7
0x2c36:	cmp    dl,BYTE PTR [rdi+riz*8]
0x2c35:	sar    BYTE PTR [rdx],cl; 	adc    al,0xe7
0x2c88:	xabort 0xf3
0x2c87:	ret    ; 	xabort 0xf3
0x378d:	xchg   ebp,eax
0x3960:	pop    rsp
0x395e:	cmp    DWORD PTR [rsi],ecx; 	pop    rsp
0x3be8:	mov    dl,0x1e
0x3be6:	in     eax,0x78; 	mov    dl,0x1e
0x3c41:	cwde   
0x3c3f:	adc    bh,BYTE PTR [rax]; 	cwde   
0x3d02:	xchg   ebp,eax
0x3d00:	mov    cl,0x22; 	xchg   ebp,eax
0x40f6:	add    BYTE PTR [rax],al
0x40f4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x470e:	add    BYTE PTR [rax],al
0x470c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x4a86:	add    BYTE PTR [rax],al
0x4a84:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x5fae:	add    BYTE PTR [rax],al
0x5fac:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x6a46:	add    BYTE PTR [rax],al
0x6a44:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x79be:	add    BYTE PTR [rax],al
0x79bc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x7ab6:	add    BYTE PTR [rax],al
0x7ab4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x86e6:	add    BYTE PTR [rax],al
0x86e4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x883f:	add    BYTE PTR [rax],al
0xb96e:	add    BYTE PTR [rax],al
0xb96c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xbb66:	add    BYTE PTR [rax],al
0xbb64:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xc82f:	add    BYTE PTR [rax],dh
0xc9ee:	add    BYTE PTR [rax],al
0xc9ec:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xcb8f:	add    al,dl
0xd40e:	add    BYTE PTR [rax],al
0xd40c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xdf4e:	add    BYTE PTR [rax],al
0xdf4c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xe236:	add    BYTE PTR [rax],al
0xe234:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xe60e:	add    BYTE PTR [rax],al
0xe60c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xe97e:	add    BYTE PTR [rax],al
0xe97c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xee16:	add    BYTE PTR [rax],al
0xee14:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xf20e:	add    BYTE PTR [rax],al
0xf20c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xf8b6:	add    BYTE PTR [rax],al
0xf8b4:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x10a96:	add    BYTE PTR [rax],al
0x10a94:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x110ae:	add    BYTE PTR [rax],al
0x110ac:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x11506:	add    BYTE PTR [rax],al
0x11504:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1184e:	add    BYTE PTR [rax],al
0x1184c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1960f:	add    BYTE PTR [rax],dh
0x1960d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x197d7:	add    BYTE PTR [rax],dh
0x197d5:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x19d2f:	add    BYTE PTR [rax],dh
0x19d2d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x19ef7:	add    BYTE PTR [rax],dh
0x19ef5:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1a0bf:	add    BYTE PTR [rax],dh
0x1a0bd:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1a80f:	add    BYTE PTR [rax],dh
0x1a80d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1a9d7:	add    BYTE PTR [rax],dh
0x1a9d5:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1ab9f:	add    BYTE PTR [rax],dh
0x1ab9d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1b1ff:	add    al,al
0x1b1fd:	add    BYTE PTR [rax],al; 	add    al,al
0x1bc07:	add    al,cl
0x1bc05:	add    BYTE PTR [rax],al; 	add    al,cl
0x21353:	pop    rbp
0x21352:	pop    rbx; 	pop    rbp
0x21351:	pop    rax; 	pop    rbx; 	pop    rbp
0x21350:	add    BYTE PTR [rax+0x5b],bl; 	pop    rbp
0x21376:	add    BYTE PTR [rax],al
0x21375:	lock add BYTE PTR [rax],al
0x21374:	pop    rax; 	lock add BYTE PTR [rax],al
0x2155f:	pop    rdi
0x2155e:	pop    r15
0x2155d:	pop    rsi; 	pop    r15
0x2155c:	pop    r14; 	pop    r15
0x2190f:	add    bl,dh
0x2190d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x21a46:	pop    rbp
0x21a45:	pop    r13
0x21a44:	pop    rsp; 	pop    r13
0x21a43:	pop    r12; 	pop    r13
0x21c95:	sbb    DWORD PTR [rax],eax
0x21c93:	xor    al,0x1b; 	sbb    DWORD PTR [rax],eax
0x21ca5:	sbb    DWORD PTR [rax],eax
0x21ca3:	jno    0x21cde; 	sbb    DWORD PTR [rax],eax
0x21d33:	add    BYTE PTR [rax],al
0x21f2e:	add    BYTE PTR [rax],al
0x21f2c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x21f87:	add    BYTE PTR [rax-0x7d],cl
0x221a4:	pop    rbp
0x221a3:	pop    rdi; 	pop    rbp
0x221a2:	pop    r15; 	pop    rbp
0x221a1:	pop    rsi; 	pop    r15; 	pop    rbp
0x2244e:	pop    rdi
0x2244d:	pop    r15
0x2244c:	pop    rsi; 	pop    r15
0x2244b:	pop    r14; 	pop    r15
0x2255d:	neg    eax
0x2255c:	clc    ; 	neg    eax
0x2255b:	mov    eax,edi; 	neg    eax
0x2256f:	clc    
0x2256e:	mov    eax,edi
0x2256c:	add    BYTE PTR [rax],al; 	mov    eax,edi
0x22689:	pop    rbp
0x22688:	pop    rdi; 	pop    rbp
0x22687:	pop    r15; 	pop    rbp
0x22686:	pop    rsi; 	pop    r15; 	pop    rbp
0x22bc7:	pop    rdi
0x22bc6:	pop    r15
0x22bc5:	pop    rsi; 	pop    r15
0x22bc4:	pop    r14; 	pop    r15
0x22c4e:	pop    rdi
0x22c4d:	pop    r15
0x22c4c:	pop    rsi; 	pop    r15
0x22c4b:	pop    r14; 	pop    r15
0x22c53:	add    BYTE PTR [rax],al
0x22c51:	or     BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x22ce2:	cmp    ecx,DWORD PTR [rax-0x7d]
0x22d45:	pop    rbp
0x22d44:	pop    rbx; 	pop    rbp
0x22d43:	or     BYTE PTR [rbx+0x5d],bl
0x23382:	test   BYTE PTR [rbp+rcx*4+0x3c],cl
0x234d4:	xchg   DWORD PTR [rbp+rcx*4+0x34],ecx
0x2362c:	pop    rbp
0x2362b:	pop    rdi; 	pop    rbp
0x2362a:	pop    r15; 	pop    rbp
0x23629:	pop    rsi; 	pop    r15; 	pop    rbp
0x237e8:	add    BYTE PTR [rax-0x7d],cl
0x23895:	cmp    al,0x0
0x23894:	int3   ; 	cmp    al,0x0
0x23893:	push   rcx; 	int3   ; 	cmp    al,0x0
0x238a5:	cmp    al,0x0
0x238a4:	int3   ; 	cmp    al,0x0
0x238a3:	xor    esp,ecx; 	cmp    al,0x0
0x238fe:	pop    rbp
0x238fd:	pop    rbx; 	pop    rbp
0x238fc:	or     BYTE PTR [rbx+0x5d],bl
0x23993:	pop    rsp
0x23992:	pop    r12
0x23991:	pop    rbp; 	pop    r12
0x23990:	pop    rbx; 	pop    rbp; 	pop    r12
0x23b52:	pop    rdi
0x23b51:	pop    r15
0x23b50:	pop    rsi; 	pop    r15
0x23b4f:	pop    r14; 	pop    r15
0x23e6a:	pop    rsi
0x23e69:	pop    r14
0x23e68:	pop    rbp; 	pop    r14
0x23e67:	pop    r13; 	pop    r14
0x23ea6:	and    BYTE PTR [rax-0x7d],cl
0x23ecb:	pop    rdi
0x23eca:	pop    r15
0x23ec9:	pop    rsi; 	pop    r15
0x23ec8:	pop    r14; 	pop    r15
0x24014:	pop    rbp
0x24013:	pop    rdi; 	pop    rbp
0x24012:	pop    r15; 	pop    rbp
0x24011:	pop    rsi; 	pop    r15; 	pop    rbp
0x24024:	add    DWORD PTR [rax-0x7d],ecx
0x24023:	rex.RXB add DWORD PTR [r8-0x7d],r9d
0x2412f:	xchg   ebp,eax
0x243bd:	pop    rbp
0x243bc:	pop    rdi; 	pop    rbp
0x243bb:	pop    r15; 	pop    rbp
0x243ba:	pop    rsi; 	pop    r15; 	pop    rbp
0x245b9:	add    DWORD PTR [rax-0x7d],ecx
0x24a3e:	pop    rbp
0x24a3d:	pop    rdi; 	pop    rbp
0x24a3c:	pop    r15; 	pop    rbp
0x24a3b:	pop    rsi; 	pop    r15; 	pop    rbp
0x24e07:	add    al,ch
0x24e05:	add    BYTE PTR [rax],al; 	add    al,ch
0x24e74:	push   rsp
0x24e73:	push   rax; 	push   rsp
0x24e72:	mov    DWORD PTR [rax+0x54],edx
0x24e71:	push   rax; 	mov    DWORD PTR [rax+0x54],edx
0x24f3c:	cmovs  eax,edx
0x250df:	fimul  WORD PTR [rax+0x1]
0x25207:	pop    rdi
0x25206:	pop    r15
0x25205:	pop    rsi; 	pop    r15
0x25204:	pop    r14; 	pop    r15
0x2520f:	add    BYTE PTR [rax-0x77],cl
0x256ee:	pop    rdi
0x256ed:	pop    r15
0x256ec:	pop    rsi; 	pop    r15
0x256eb:	pop    r14; 	pop    r15
0x25c06:	pop    rdi
0x25c05:	pop    r15
0x25c04:	pop    rsi; 	pop    r15
0x25c03:	pop    r14; 	pop    r15
0x26180:	pop    rdi
0x2617f:	pop    r15
0x2617e:	pop    rsi; 	pop    r15
0x2617d:	pop    r14; 	pop    r15
0x2620a:	add    cl,BYTE PTR [rcx-0x7d]
0x26209:	add    cl,BYTE PTR [rcx-0x7d]
0x267d9:	pop    rdi
0x267d8:	pop    r15
0x267d7:	pop    rsi; 	pop    r15
0x267d6:	pop    r14; 	pop    r15
0x268de:	add    BYTE PTR [rcx-0x77],al
0x2692e:	and    al,0xf6
0x26aa1:	pop    rdi
0x26aa0:	pop    r15
0x26a9f:	pop    rsi; 	pop    r15
0x26a9e:	pop    r14; 	pop    r15
0x26fce:	xor    al,0xf6
0x26fcc:	add    BYTE PTR [rsp+rsi*1-0xa],dh
0x27567:	pop    rdi
0x27566:	pop    r15
0x27565:	pop    rsi; 	pop    r15
0x27564:	pop    r14; 	pop    r15
0x28597:	pop    rdi
0x28596:	pop    r15
0x28595:	pop    rsi; 	pop    r15
0x28594:	pop    r14; 	pop    r15
0x28738:	sbb    BYTE PTR [rcx-0x77],al
0x29427:	fisttp DWORD PTR [rcx-0x7d]
0x2953e:	add    cl,BYTE PTR [rax+0x39]
0x2953d:	rex.X add cl,BYTE PTR [rax+0x39]
0x2959f:	add    BYTE PTR [rax+0x39],cl
0x296bc:	pop    rdi
0x296bb:	pop    r15
0x296ba:	pop    rsi; 	pop    r15
0x296b9:	pop    r14; 	pop    r15
0x296e9:	add    BYTE PTR [rax+0x39],cl
0x29805:	add    cl,ch
0x29803:	add    BYTE PTR [rax],al; 	add    cl,ch
0x29916:	add    DWORD PTR [rax+0x39],ecx
0x29c2e:	and    al,0xf6
0x29d64:	add    BYTE PTR [rcx-0x77],al
0x29da4:	pop    rdi
0x29da3:	pop    r15
0x29da2:	pop    rsi; 	pop    r15
0x29da1:	pop    r14; 	pop    r15
0x2a312:	jbe    0x2a30a
0x2a310:	add    BYTE PTR [rsi+rsi*2-0xa],dh
0x2a8cd:	add    cl,BYTE PTR [rax+0x39]
0x2a8cc:	rex.X add cl,BYTE PTR [rax+0x39]
0x2a93f:	pop    rdi
0x2a93e:	pop    r15
0x2a93d:	pop    rsi; 	pop    r15
0x2a93c:	pop    r14; 	pop    r15
0x2aa3f:	or     al,0xe9
0x2aa3d:	jl     0x2aa63; 	or     al,0xe9
0x2ab98:	add    cl,BYTE PTR [rax+0x39]
0x2ab97:	rex.X add cl,BYTE PTR [rax+0x39]
0x2ac0f:	add    cl,BYTE PTR [rax+0x39]
0x2ac0e:	rex.X add cl,BYTE PTR [rax+0x39]
0x2ae6e:	and    al,0xf6
0x2afa8:	add    BYTE PTR [rcx-0x77],al
0x2afec:	pop    rdi
0x2afeb:	pop    r15
0x2afea:	pop    rsi; 	pop    r15
0x2afe9:	pop    r14; 	pop    r15
0x2b552:	jp     0x2b54a
0x2b550:	add    BYTE PTR [rdx+rdi*2-0xa],dh
0x2b6c1:	add    DWORD PTR [rax+0x39],ecx
0x2b6c0:	rex.RX add DWORD PTR [rax+0x39],r9d
0x2b6df:	add    cl,BYTE PTR [rax+0x39]
0x2b6de:	rex.RX add r9b,BYTE PTR [rax+0x39]
0x2b6fd:	add    ecx,DWORD PTR [rax+0x39]
0x2b6fc:	rex.RX add r9d,DWORD PTR [rax+0x39]
0x2baec:	pop    rdi
0x2baeb:	pop    r15
0x2baea:	pop    rsi; 	pop    r15
0x2bae9:	pop    r14; 	pop    r15
0x2bb77:	add    BYTE PTR [rax-0x77],cl
0x2bb76:	add    BYTE PTR [rax-0x77],cl
0x2bc11:	add    BYTE PTR [rax-0x77],cl
0x2bc68:	shr    BYTE PTR [rcx],cl
0x2bdc5:	cmp    al,0x0
0x2bf1e:	pop    rsp
0x2bf1d:	pop    r12
0x2bf1c:	pop    rbx; 	pop    r12
0x2bf1b:	add    BYTE PTR [rbx+0x41],bl; 	pop    rsp
0x2c0b8:	pop    rdi
0x2c0b7:	pop    r15
0x2c0b6:	pop    rsi; 	pop    r15
0x2c0b5:	pop    r14; 	pop    r15
0x2c181:	pop    rdi
0x2c180:	pop    r15
0x2c17f:	pop    rsi; 	pop    r15
0x2c17e:	pop    r14; 	pop    r15
0x2c2bb:	pop    rbp
0x2c2ba:	pop    rdi; 	pop    rbp
0x2c2b9:	pop    r15; 	pop    rbp
0x2c2b8:	pop    rsi; 	pop    r15; 	pop    rbp
0x2cb06:	add    esi,DWORD PTR [rdi+rax*1-0xd]
0x2cb49:	pop    rbx
0x2cb47:	add    BYTE PTR [rax],al; 	pop    rbx
0x2cb5a:	pop    rbx
0x2cb57:	mov    DWORD PTR [rbx+0x8],eax; 	pop    rbx
0x2cc79:	pop    rsp
0x2cc78:	pop    r12
0x2cc77:	pop    rbp; 	pop    r12
0x2cc76:	pop    rbx; 	pop    rbp; 	pop    r12
0x2cc9f:	pop    rsp
0x2cc9e:	pop    r12
0x2cc9d:	pop    rbp; 	pop    r12
0x2cc9c:	pop    rbx; 	pop    rbp; 	pop    r12
0x2cd1e:	pop    rsp
0x2cd1d:	pop    r12
0x2cd1c:	pop    rbp; 	pop    r12
0x2cd1b:	pop    rbx; 	pop    rbp; 	pop    r12
0x2ce79:	pop    rdi
0x2ce78:	pop    r15
0x2ce77:	pop    rsi; 	pop    r15
0x2ce76:	pop    r14; 	pop    r15
0x2d124:	pop    rdi
0x2d123:	pop    r15
0x2d122:	pop    rsi; 	pop    r15
0x2d121:	pop    r14; 	pop    r15
0x2da6d:	pop    rbp
0x2da6c:	pop    rdi; 	pop    rbp
0x2da6b:	pop    r15; 	pop    rbp
0x2da6a:	pop    rsi; 	pop    r15; 	pop    rbp
0x2dad7:	add    BYTE PTR [rax+0x63],cl
0x2ddac:	dec    DWORD PTR [rax-0x7d]
0x2ddab:	rex dec DWORD PTR [rax-0x7d]
0x2e167:	add    bl,dh
0x2e165:	add    BYTE PTR [rax],al; 	add    bl,dh
0x2e1f3:	pop    rdi
0x2e1f2:	pop    r15
0x2e1f1:	pop    rsi; 	pop    r15
0x2e1f0:	pop    r14; 	pop    r15
0x2e227:	pop    rdi
0x2e226:	pop    r15
0x2e225:	pop    rsi; 	pop    r15
0x2e224:	pop    r14; 	pop    r15
0x2e560:	pop    rbp
0x2e55f:	pop    rdi; 	pop    rbp
0x2e55e:	pop    r15; 	pop    rbp
0x2e55d:	pop    rsi; 	pop    r15; 	pop    rbp
0x2ea84:	pop    rbp
0x2ea83:	pop    rdi; 	pop    rbp
0x2ea82:	pop    r15; 	pop    rbp
0x2ea81:	pop    rsi; 	pop    r15; 	pop    rbp
0x2ec77:	add    BYTE PTR [rax-0x7d],cl
0x2f0c4:	cmp    eax,DWORD PTR [rax]
0x2f0f5:	add    bl,dh
0x2f11e:	mov    eax,DWORD PTR [rdx+rdi*8+0x40]
0x2f12e:	add    BYTE PTR [rax],al
0x2f152:	add    BYTE PTR [rax],al
0x2f150:	test   al,0x0; 	add    BYTE PTR [rax],al
0x2f1b4:	add    BYTE PTR [rax+0x39],cl
0x2f747:	out    0xe8,eax
0x2f845:	pop    rbp
0x2f844:	pop    rdi; 	pop    rbp
0x2f843:	pop    r15; 	pop    rbp
0x2f842:	pop    rsi; 	pop    r15; 	pop    rbp
0x2fd6a:	add    DWORD PTR [rax-0x7d],ecx
0x2fe9f:	add    BYTE PTR [rax-0x7d],cl
0x2ff28:	cmp    ecx,DWORD PTR [rax-0x7d]
0x2ffa7:	pop    rsi
0x2ffa6:	pop    r14
0x2ffa5:	pop    rbp; 	pop    r14
0x2ffa4:	pop    r13; 	pop    r14
0x2fff7:	add    BYTE PTR [rax-0x7d],cl
0x2fff6:	add    BYTE PTR [rax-0x7d],cl
0x300bb:	cmove  eax,edx
0x300ba:	cmove  rax,rdx
0x301a5:	mov    DWORD PTR [rax],edx
0x301a4:	mov    QWORD PTR [rax],rdx
0x301c4:	add    BYTE PTR [rax],al
0x3020a:	adc    bl,dh
0x3024d:	adc    bl,dh
0x3035b:	dec    DWORD PTR [rax-0x77]
0x3035a:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x30463:	add    BYTE PTR [rax-0x77],cl
0x304b6:	mov    bh,0xc0
0x304b5:	movzx  eax,ax
0x304b4:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x304d7:	mov    bh,0xc0
0x304d6:	movzx  eax,ax
0x304d5:	add    al,0xf; 	mov    bh,0xc0
0x304f6:	mov    bh,0xc0
0x304f5:	movzx  eax,ax
0x304f4:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x30517:	mov    bh,0xc0
0x30516:	movzx  eax,ax
0x30515:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x30537:	mov    bh,0xc0
0x30536:	movzx  eax,ax
0x30535:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x30557:	mov    bh,0xc0
0x30556:	movzx  eax,ax
0x30577:	mov    bh,0xc0
0x30576:	movzx  eax,ax
0x30575:	rex movzx eax,ax
0x30596:	mov    bh,0xc0
0x30595:	movzx  eax,ax
0x30594:	add    al,0xf; 	mov    bh,0xc0
0x305b7:	mov    bh,0xc0
0x305b6:	movzx  eax,ax
0x305b5:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x305d7:	mov    bh,0xc0
0x305d6:	movzx  eax,ax
0x305d5:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x305f7:	mov    bh,0xc0
0x305f6:	movzx  eax,ax
0x305f5:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x30629:	add    bl,dh
0x30627:	add    al,BYTE PTR [rax]; 	add    bl,dh
0x30659:	add    bl,dh
0x30657:	add    al,BYTE PTR [rax]; 	add    bl,dh
0x30673:	loopne 0x30676
0x30672:	and    eax,0x1
0x30671:	js     0x305f6; 	loopne 0x30676
0x3069a:	add    BYTE PTR [rax],al
0x30698:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x306ba:	add    BYTE PTR [rax],al
0x306b8:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x306c3:	loopne 0x30744
0x306c2:	and    eax,0x7f
0x306c1:	clc    ; 	and    eax,0x7f
0x306d5:	sete   al
0x306ec:	loopne 0x306ef
0x306eb:	and    eax,0x1
0x306ea:	js     0x3066f; 	loopne 0x306ef
0x306ff:	mov    bh,0xc0
0x306fe:	movzx  eax,ax
0x306fd:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x30720:	mov    bh,0xc0
0x3071f:	movzx  eax,ax
0x3071e:	add    al,0xf; 	mov    bh,0xc0
0x3073f:	mov    bh,0xc0
0x3073e:	movzx  eax,ax
0x3073d:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x30760:	mov    bh,0xc0
0x3075f:	movzx  eax,ax
0x3075e:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x30780:	mov    bh,0xc0
0x3077f:	movzx  eax,ax
0x3077e:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x307a0:	mov    bh,0xc0
0x3079f:	movzx  eax,ax
0x307c0:	mov    bh,0xc0
0x307bf:	movzx  eax,ax
0x307be:	rex movzx eax,ax
0x307df:	mov    bh,0xc0
0x307de:	movzx  eax,ax
0x307dd:	add    al,0xf; 	mov    bh,0xc0
0x30800:	mov    bh,0xc0
0x307ff:	movzx  eax,ax
0x307fe:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x30820:	mov    bh,0xc0
0x3081f:	movzx  eax,ax
0x3081e:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x30840:	mov    bh,0xc0
0x3083f:	movzx  eax,ax
0x3083e:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x30858:	add    al,0xb8
0x30857:	mov    eax,DWORD PTR [rax+rdi*4]
0x30868:	add    al,0xb8
0x30867:	mov    eax,DWORD PTR [rax+rdi*4]
0x3088d:	and    eax,esi
0x3088b:	add    BYTE PTR [rax],al; 	and    eax,esi
0x3089e:	add    BYTE PTR [rax],al
0x3089c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x308be:	add    BYTE PTR [rax],al
0x308bc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x308de:	add    BYTE PTR [rax],al
0x308dc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x3093d:	mov    DWORD PTR [rdx],eax
0x3093c:	mov    QWORD PTR [rdx],rax
0x3093b:	mov    QWORD PTR fs:[rdx],rax
0x3096b:	pop    rdi
0x3096a:	pop    r15
0x30969:	pop    rsi; 	pop    r15
0x30968:	pop    r14; 	pop    r15
0x30bab:	pop    rdi
0x30baa:	pop    r15
0x30ba9:	pop    rsi; 	pop    r15
0x30ba8:	pop    r14; 	pop    r15
0x30df7:	pop    rbp
0x30df6:	pop    rbx; 	pop    rbp
0x30df5:	or     BYTE PTR [rbx+0x5d],bl
0x30f3a:	pop    rdi
0x30f39:	pop    r15
0x30f38:	pop    rsi; 	pop    r15
0x30f37:	pop    r14; 	pop    r15
0x30fa3:	pop    rsp
0x317fc:	pop    rbp
0x317fb:	pop    rdi; 	pop    rbp
0x317fa:	pop    r15; 	pop    rbp
0x317f9:	pop    rsi; 	pop    r15; 	pop    rbp
0x326ac:	pop    rbp
0x326ab:	pop    rdi; 	pop    rbp
0x326aa:	pop    r15; 	pop    rbp
0x326a9:	pop    rsi; 	pop    r15; 	pop    rbp
0x32ba6:	add    BYTE PTR [rax-0x77],cl
0x32d41:	pop    rdi
0x32d40:	pop    r15
0x32d3f:	pop    rsi; 	pop    r15
0x32d3e:	pop    r14; 	pop    r15
0x33086:	pop    rdi
0x33085:	pop    r15
0x33084:	pop    rsi; 	pop    r15
0x33083:	pop    r14; 	pop    r15
0x332bd:	sbb    ecx,DWORD PTR [rcx-0x7d]
0x33b67:	dec    DWORD PTR [rax-0x7d]
0x33bff:	cmp    cl,ch
0x33d3f:	dec    DWORD PTR [rax-0x7d]
0x33dfb:	sub    BYTE PTR [rax-0x7d],cl
0x33e40:	sub    BYTE PTR [rax-0x7d],cl
0x3453f:	adc    DWORD PTR [rax-0x7d],ecx
0x345fd:	pop    rbp
0x345fc:	pop    rdi; 	pop    rbp
0x345fb:	pop    r15; 	pop    rbp
0x345fa:	pop    rsi; 	pop    r15; 	pop    rbp
0x34a53:	pop    rdi
0x34a52:	pop    r15
0x34a51:	pop    rsi; 	pop    r15
0x34a50:	pop    r14; 	pop    r15
0x34b59:	add    BYTE PTR [rax-0x77],cl
0x34ba8:	pop    rbp
0x34ba7:	pop    rbx; 	pop    rbp
0x34ba6:	fcomp  DWORD PTR [rbx+0x5d]
0x34ba5:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x34e73:	ror    BYTE PTR [rax+0x1],1
0x34f13:	ror    BYTE PTR [rax+0x1],1
0x34fb4:	pop    rdi
0x34fb3:	pop    r15
0x34fb2:	pop    rsi; 	pop    r15
0x34fb1:	pop    r14; 	pop    r15
0x35120:	xor    cl,ch
0x352a5:	pop    rsp
0x352a4:	pop    r12
0x352a3:	pop    rbp; 	pop    r12
0x352a2:	pop    rbx; 	pop    rbp; 	pop    r12
0x352c3:	pop    rsp
0x352c2:	pop    r12
0x352c1:	pop    rbp; 	pop    r12
0x352c0:	rcr    BYTE PTR [rbp+0x41],0x5c
0x353da:	pop    rdi
0x353d9:	pop    r15
0x353d8:	pop    rsi; 	pop    r15
0x353d7:	pop    r14; 	pop    r15
0x3543c:	add    DWORD PTR [rax-0x77],ecx
0x3544f:	add    BYTE PTR [rax-0x7d],cl
0x3566f:	add    bl,dh
0x358b3:	pop    rdi
0x358b2:	pop    r15
0x358b1:	pop    rsi; 	pop    r15
0x358b0:	pop    r14; 	pop    r15
0x35ca7:	pop    rdi
0x35ca6:	pop    r15
0x35ca5:	pop    rsi; 	pop    r15
0x35ca4:	pop    r14; 	pop    r15
0x39207:	pop    rdi
0x39206:	pop    r15
0x39205:	pop    rsi; 	pop    r15
0x39204:	pop    r14; 	pop    r15
0x3a7ff:	or     al,ch
0x3b177:	or     al,ch
0x3bf77:	or     al,ch
0x3c7e0:	sub    BYTE PTR [rax-0x7d],cl
0x3c83d:	pop    rdi
0x3c83c:	pop    r15
0x3c83b:	pop    rsi; 	pop    r15
0x3c83a:	pop    r14; 	pop    r15
0x3c9c1:	dec    DWORD PTR [rax-0x7d]
0x3cf1f:	add    BYTE PTR [rax-0x7d],cl
0x3cf9c:	pop    rbp
0x3cf9b:	pop    r13
0x3cf9a:	pop    rsp; 	pop    r13
0x3cf99:	pop    r12; 	pop    r13
0x3cfe9:	fpatan 
0x3d061:	pop    rdi
0x3d060:	pop    r15
0x3d05f:	pop    rsi; 	pop    r15
0x3d05e:	pop    r14; 	pop    r15
0x3d16f:	add    BYTE PTR [rax-0x39],cl
0x3d182:	fisttp WORD PTR [rax-0x39]
0x3d24c:	mov    eax,ecx
0x3d24b:	mov    rax,rcx
0x3d25f:	mov    eax,ecx
0x3d25e:	mov    rax,rcx
0x3d298:	pop    rbx
0x3d296:	xor    eax,eax; 	pop    rbx
0x3d2c3:	pop    rbx
0x3d3bc:	pop    rdi
0x3d3bb:	pop    r15
0x3d3ba:	pop    rsi; 	pop    r15
0x3d3b9:	pop    r14; 	pop    r15
0x3d667:	add    BYTE PTR [rax-0x7d],cl
0x3d6df:	add    BYTE PTR [rax-0x7d],cl
0x3db3f:	and    eax,ecx
0x3db3d:	not    eax; 	and    eax,ecx
0x3db88:	sar    eax,0x10
0x3db9b:	shr    eax,0x1f
0x3dbbb:	and    al,0x8
0x3dbba:	ins    BYTE PTR es:[rdi],dx; 	and    al,0x8
0x3dbb9:	fld    TBYTE PTR [rsp+0x8]
0x3dc1a:	and    al,0xe8
0x3dc19:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xe8
0x3dc18:	fld    TBYTE PTR [rsp-0x18]
0x3dc58:	fsubp  st(1),st
0x3dc56:	and    al,0x8; 	fsubp  st(1),st
0x3dc8a:	and    al,0xe8
0x3dc89:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xe8
0x3dc88:	fld    TBYTE PTR [rsp-0x18]
0x3dcb2:	fsubp  st(1),st
0x3dcb0:	and    al,0x8; 	fsubp  st(1),st
0x3dcd2:	and    al,0x8
0x3dcd1:	ins    BYTE PTR es:[rdi],dx; 	and    al,0x8
0x3dcd0:	fld    TBYTE PTR [rsp+0x8]
0x3dcfc:	push   rbx
0x3dd0e:	fstp   st(1)
0x3dd0d:	std    ; 	fstp   st(1)
0x3dd0c:	fscale ; 	fstp   st(1)
0x3dd77:	and    al,0xe8
0x3dd76:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xe8
0x3dd75:	fld    TBYTE PTR [rsp-0x18]
0x3dd84:	fadd   st,st(0)
0x3dd82:	and    al,0x8; 	fadd   st,st(0)
0x3ddcd:	add    BYTE PTR [rax],al
0x3ddcb:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x3ddf7:	add    esp,0x8
0x3ddf6:	add    rsp,0x8
0x3de39:	add    esp,0x8
0x3de38:	add    rsp,0x8
0x3de72:	and    eax,edx
0x3de70:	not    eax; 	and    eax,edx
0x3dea0:	shr    eax,0x3f
0x3de9f:	shr    rax,0x3f
0x3dec6:	shr    eax,0x3f
0x3dec5:	shr    rax,0x3f
0x3dee1:	orps   xmm0,xmm1
0x3dee0:	orpd   xmm0,xmm1
0x3df3a:	movd   mm0,eax
0x3df39:	movq   mm0,rax
0x3df98:	subps  xmm0,xmm1
0x3df97:	subsd  xmm0,xmm1
0x3dfb4:	adc    DWORD PTR [rdi],ecx
0x3dfb3:	movups XMMWORD PTR [rdi],xmm1
0x3dfb2:	movsd  QWORD PTR [rdi],xmm1
0x3dfed:	push   rax
0x3e022:	sub    cl,al
0x3e021:	movaps xmm0,xmm1
0x3e020:	movapd xmm0,xmm1
0x3e046:	sub    cl,al
0x3e045:	movaps xmm0,xmm1
0x3e044:	movapd xmm0,xmm1
0x3e074:	sub    cl,al
0x3e073:	movaps xmm0,xmm1
0x3e072:	movapd xmm0,xmm1
0x3e159:	movd   mm0,eax
0x3e158:	movq   mm0,rax
0x3e166:	mov    DWORD PTR [rdi],ecx
0x3e1a7:	add    BYTE PTR [rax],al
0x3e1db:	addps  xmm0,xmm0
0x3e1da:	addsd  xmm0,xmm0
0x3e223:	add    esp,0x28
0x3e222:	add    rsp,0x28
0x3e24e:	and    eax,edx
0x3e24c:	not    eax; 	and    eax,edx
0x3e271:	shr    eax,0x1f
0x3e28e:	shr    eax,0x1f
0x3e2a9:	push   rsp
0x3e2a7:	add    BYTE PTR [rdi],cl; 	push   rsp
0x3e2af:	push   rsi
0x3e2b0:	ret    
0x3e2af:	push   rsi; 	ret    
0x3e2ae:	orps   xmm0,xmm3
0x3e2ed:	movd   mm0,eax
0x3e2ec:	movd   xmm0,eax
0x3e305:	subps  xmm0,xmm1
0x3e304:	subss  xmm0,xmm1
0x3e31b:	adc    DWORD PTR [rdi],ecx
0x3e31a:	movups XMMWORD PTR [rdi],xmm1
0x3e319:	movss  DWORD PTR [rdi],xmm1
0x3e337:	movd   mm0,eax
0x3e336:	movd   xmm0,eax
0x3e344:	add    BYTE PTR [rdx+rbp*8-0xd],dh
0x3e379:	push   rax
0x3e39d:	sub    cl,al
0x3e39c:	movaps xmm0,xmm1
0x3e39b:	iret   ; 	movaps xmm0,xmm1
0x3e3bb:	sub    cl,al
0x3e3ba:	movaps xmm0,xmm1
0x3e3b9:	enter  0x280f,0xc1
0x3e3e0:	sub    cl,al
0x3e3df:	movaps xmm0,xmm1
0x3e3de:	enter  0x280f,0xc1
0x3e4a6:	mov    DWORD PTR [rdi],edx
0x3e4b1:	addps  xmm0,xmm0
0x3e4b0:	addss  xmm0,xmm0
0x3e4c5:	loopne 0x3e4cf
0x3e4c4:	and    eax,0x8
0x3e4f7:	addps  xmm0,xmm0
0x3e4f6:	addss  xmm0,xmm0
0x3e53f:	add    esp,0x28
0x3e53e:	add    rsp,0x28
0x3e58f:	and    eax,ecx
0x3e58d:	not    eax; 	and    eax,ecx
0x3e5da:	shr    eax,0x3f
0x3e5d9:	shr    rax,0x3f
0x3e5fb:	shr    eax,0x3f
0x3e5fa:	shr    rax,0x3f
0x3e644:	and    al,0xd8
0x3e643:	rex.R and al,0xd8
0x3e642:	outs   dx,DWORD PTR ds:[rsi]; 	rex.R and al,0xd8
0x3e6cf:	pop    rsp
0x3e6ce:	pop    r12
0x3e6cd:	pop    rbp; 	pop    r12
0x3e6cc:	pop    rbx; 	pop    rbp; 	pop    r12
0x3e757:	pop    rsp
0x3e756:	pop    r12
0x3e755:	pop    rbp; 	pop    r12
0x3e754:	pop    rbx; 	pop    rbp; 	pop    r12
0x3e78d:	pop    rsp
0x3e78c:	pop    r12
0x3e78b:	pop    rbp; 	pop    r12
0x3e78a:	pop    rbx; 	pop    rbp; 	pop    r12
0x3e7bb:	pop    rsp
0x3e7ba:	pop    r12
0x3e7b9:	pop    rbp; 	pop    r12
0x3e7b8:	pop    rbx; 	pop    rbp; 	pop    r12
0x3e83d:	push   rax
0x3e87d:	add    esp,0x28
0x3e87c:	add    rsp,0x28
0x3e89a:	add    esp,0x28
0x3e899:	add    rsp,0x28
0x3e8bf:	add    esp,0x28
0x3e8be:	add    rsp,0x28
0x3e8e7:	add    esp,0x28
0x3e8e6:	add    rsp,0x28
0x3e9db:	pop    rbx
0x3e9d8:	add    esp,0x20; 	pop    rbx
0x3e9f2:	pop    rbx
0x3e9ef:	add    esp,0x20; 	pop    rbx
0x3ea04:	loopne 0x3ea0e
0x3ea03:	and    eax,0x8
0x3ea89:	outs   dx,DWORD PTR ds:[rsi]
0x3ea86:	and    BYTE PTR [rsi+0xf],ah; 	outs   dx,DWORD PTR ds:[rsi]
0x3ea8b:	pop    rbx
0x3ea8a:	ret    ; 	pop    rbx
0x3ea89:	outs   dx,DWORD PTR ds:[rsi]; 	ret    ; 	pop    rbx
0x3ea88:	movq   mm0,mm3; 	pop    rbx
0x3eaf3:	outs   dx,DWORD PTR ds:[rsi]
0x3eb0b:	pop    rcx
0x3eb11:	outs   dx,DWORD PTR ds:[rsi]
0x3eb0e:	add    BYTE PTR [rsi+0xf],ah; 	outs   dx,DWORD PTR ds:[rsi]
0x3eb1e:	pop    rbx
0x3eb1b:	add    esp,0x20; 	pop    rbx
0x3eb62:	add    esp,0x18
0x3eb61:	add    rsp,0x18
0x3ebf2:	pop    rbx
0x3ebf0:	xor    eax,eax; 	pop    rbx
0x3ebef:	rex xor eax,eax; 	pop    rbx
0x3ece7:	add    bl,dh
0x3ed94:	add    BYTE PTR [rax],al
0x3eeb2:	add    BYTE PTR [rax],al
0x3eeb0:	sbb    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x3f0be:	add    BYTE PTR [rax],al
0x3f154:	or     esi,ebx
0x3f18d:	jae    0x3f190
0x3f18c:	push   QWORD PTR [rbx+0x1]
0x3f19d:	or     eax,0xffffffff
0x3f19c:	or     rax,0xffffffffffffffff
0x3f1c3:	or     al,0xf3
0x3f251:	pop    rbx
0x3f24e:	add    esp,0x10; 	pop    rbx
0x3f2f6:	pop    rsp
0x3f2f5:	pop    r12
0x3f2f4:	pop    rbp; 	pop    r12
0x3f2f3:	pop    rbx; 	pop    rbp; 	pop    r12
0x3f366:	add    BYTE PTR [rax],al
0x3f364:	sbb    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x3f3e9:	add    BYTE PTR [rax],al
0x3f3e7:	sbb    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x3f45f:	pop    rbp
0x3f45e:	pop    rbx; 	pop    rbp
0x3f45d:	add    BYTE PTR [rbx+0x5d],bl
0x3f45c:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x3f4f4:	add    BYTE PTR [rax],al
0x3f562:	pop    rbp
0x3f561:	pop    rbx; 	pop    rbp
0x3f560:	add    BYTE PTR [rbx+0x5d],bl
0x3f55f:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x3f684:	pop    rbx
0x3f682:	add    BYTE PTR [rax],al; 	pop    rbx
0x3f735:	pop    rbx
0x3f734:	rex pop rbx
0x3f732:	add    esp,0x40; 	pop    rbx
0x3f74d:	jae    0x3f750
0x3f74c:	push   QWORD PTR [rbx+0x1]
0x3f75d:	or     eax,0xffffffff
0x3f75c:	or     rax,0xffffffffffffffff
0x3f80e:	pop    rsp
0x3f80d:	pop    r12
0x3f80c:	pop    rbp; 	pop    r12
0x3f80b:	pop    rbx; 	pop    rbp; 	pop    r12
0x3f85c:	stos   DWORD PTR es:[rdi],eax
0x3f85b:	stos   QWORD PTR es:[rdi],rax
0x3f85a:	rep stos QWORD PTR es:[rdi],rax
0x3f859:	add    esi,ebx; 	stos   QWORD PTR es:[rdi],rax
0x3f8b4:	adc    DWORD PTR [rdi+0x70],eax
0x3f8b3:	movups XMMWORD PTR [rdi+0x70],xmm0
0x3f8f8:	xor    eax,eax
0x3f8f6:	or     DWORD PTR [rdi],eax; 	xor    eax,eax
0x3f93a:	xor    eax,eax
0x3f938:	and    DWORD PTR [rdi],eax; 	xor    eax,eax
0x3f97c:	mov    dh,0xc0
0x3f97b:	movzx  eax,al
0x3fa4c:	add    BYTE PTR [rax],al
0x3fb26:	cmove  eax,edx
0x3fd34:	xor    eax,eax
0x3fd32:	adc    al,0xc7; 	xor    eax,eax
0x3fdfd:	xor    eax,eax
0x3fdfb:	mov    DWORD PTR [rdi],eax; 	xor    eax,eax
0x40004:	xor    eax,eax
0x40002:	adc    al,0xc7; 	xor    eax,eax
0x400cd:	xor    eax,eax
0x400cb:	mov    DWORD PTR [rdi],eax; 	xor    eax,eax
0x400f4:	cmp    al,BYTE PTR [rax]
0x400f2:	mov    dh,0xb0; 	cmp    al,BYTE PTR [rax]
0x40104:	cmp    al,BYTE PTR [rax]
0x40130:	cmp    al,BYTE PTR [rax]
0x4012e:	jbe    0x400e0; 	cmp    al,BYTE PTR [rax]
0x40141:	mov    eax,edx
0x4013f:	cmp    al,BYTE PTR [rax]; 	mov    eax,edx
0x40150:	mov    eax,edx
0x4014f:	nop; 	mov    eax,edx
0x4014e:	xchg   ax,ax; 	mov    eax,edx
0x4020d:	pop    rbp
0x4020c:	pop    rbx; 	pop    rbp
0x4020b:	add    BYTE PTR [rbx+0x5d],bl
0x4020a:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x40390:	pop    rbp
0x4038f:	pop    r13
0x4038e:	pop    rsp; 	pop    r13
0x4038d:	pop    r12; 	pop    r13
0x4040e:	pop    rbp
0x4040d:	pop    rbx; 	pop    rbp
0x4040c:	add    BYTE PTR [rbx+0x5d],bl
0x4040b:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x40481:	pop    rbp
0x40480:	pop    rbx; 	pop    rbp
0x4047f:	add    BYTE PTR [rbx+0x5d],bl
0x4047e:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x40504:	add    BYTE PTR [rax],al
0x40502:	test   al,0x0; 	add    BYTE PTR [rax],al
0x40572:	pop    rsp
0x40571:	pop    r12
0x40570:	pop    rbp; 	pop    r12
0x4056f:	pop    rbx; 	pop    rbp; 	pop    r12
0x40691:	add    esp,0x8
0x40690:	add    rsp,0x8
0x40978:	pop    rdi
0x40977:	pop    r15
0x40976:	pop    rsi; 	pop    r15
0x40975:	pop    r14; 	pop    r15
0x40b49:	and    BYTE PTR [rax+0x1],cl
0x40f66:	pop    rdi
0x40f65:	pop    r15
0x40f64:	pop    rsi; 	pop    r15
0x40f63:	pop    r14; 	pop    r15
0x40fad:	ret    0x3948
0x40fac:	xchg   ebx,eax; 	ret    0x3948
0x41921:	adc    BYTE PTR [rcx-0x7d],cl
0x41c45:	adc    cl,BYTE PTR [rcx-0x7d]
0x41d42:	add    DWORD PTR [rcx+0x39],ecx
0x420be:	or     BYTE PTR [rax+0x39],cl
0x420bd:	or     BYTE PTR [r8+0x39],cl
0x4211b:	add    BYTE PTR [rax-0x7d],cl
0x4211a:	add    BYTE PTR [r8-0x7d],r9b
0x421b3:	add    BYTE PTR [rax-0x7d],cl
0x421b2:	add    BYTE PTR [r8-0x7d],r9b
0x42213:	add    BYTE PTR [rax-0x7d],cl
0x42212:	add    BYTE PTR [r8-0x7d],r9b
0x42399:	scas   eax,DWORD PTR es:[rdi]
0x42396:	dec    BYTE PTR [rcx+0xf]; 	scas   eax,DWORD PTR es:[rdi]
0x4256c:	pop    rbp
0x4256b:	pop    rdi; 	pop    rbp
0x4256a:	pop    r15; 	pop    rbp
0x42569:	pop    rsi; 	pop    r15; 	pop    rbp
0x42756:	pop    rdi
0x42755:	pop    r15
0x42754:	pop    rsi; 	pop    r15
0x42753:	pop    r14; 	pop    r15
0x42869:	pop    rbp
0x42868:	pop    rbp; 	pop    rbp
0x42867:	pop    r13; 	pop    rbp
0x42866:	pop    rsp; 	pop    r13; 	pop    rbp
0x42a6f:	pop    rbp
0x42a6e:	pop    rdi; 	pop    rbp
0x42a6d:	pop    r15; 	pop    rbp
0x42a6c:	pop    rsi; 	pop    r15; 	pop    rbp
0x42ca6:	pop    rsp
0x42ca5:	pop    r12
0x42ca4:	pop    rbp; 	pop    r12
0x42ca3:	pop    rbx; 	pop    rbp; 	pop    r12
0x42dab:	pop    rbp
0x42daa:	pop    r13
0x42da9:	pop    rsp; 	pop    r13
0x42da8:	pop    r12; 	pop    r13
0x42e87:	pop    rbx
0x42e85:	xor    eax,eax; 	pop    rbx
0x42ec8:	xor    eax,eax
0x42ec6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x430df:	add    BYTE PTR [rax+0x39],cl
0x430f9:	add    ecx,DWORD PTR [rbp+rcx*4+0x64]
0x43101:	adc    ecx,DWORD PTR [rax-0x7d]
0x431e3:	pop    rsp
0x431e2:	pop    r12
0x431e1:	pop    rbp; 	pop    r12
0x431e0:	pop    rbx; 	pop    rbp; 	pop    r12
0x432e6:	pop    rbp
0x432e5:	pop    rbx; 	pop    rbp
0x432e4:	or     BYTE PTR [rbx+0x5d],bl
0x4333d:	xor    eax,eax
0x433f2:	pop    rbp
0x433f1:	pop    r13
0x433f0:	pop    rsp; 	pop    r13
0x433ef:	pop    r12; 	pop    r13
0x434e3:	pop    rbp
0x434e2:	pop    r13
0x434e1:	pop    rsp; 	pop    r13
0x434e0:	pop    r12; 	pop    r13
0x43728:	pop    rdi
0x43727:	pop    r15
0x43726:	pop    rsi; 	pop    r15
0x43725:	pop    r14; 	pop    r15
0x437ce:	adc    DWORD PTR [rax-0x77],ecx
0x4383b:	pop    rbp
0x4383a:	pop    r13
0x43839:	pop    rsp; 	pop    r13
0x43838:	pop    r12; 	pop    r13
0x438d3:	pop    rbp
0x438d2:	pop    rbx; 	pop    rbp
0x438d1:	or     BYTE PTR [rbx+0x5d],bl
0x438e9:	sub    eax,edx
0x438e7:	xor    eax,edx; 	sub    eax,edx
0x438fe:	sub    eax,edx
0x438fd:	sub    rax,rdx
0x4391e:	sub    eax,edx
0x4391d:	sub    rax,rdx
0x4393c:	or     eax,edx
0x4393b:	or     rax,rdx
0x4393a:	ror    BYTE PTR [rax+0x9],0xd0
0x43946:	idiv   esi
0x43945:	idiv   rsi
0x43944:	cdq    ; 	idiv   rsi
0x43956:	idiv   esi
0x43955:	idiv   rsi
0x43954:	cdq    ; 	idiv   rsi
0x4396d:	pop    rbx
0x4396b:	jne    0x43970; 	pop    rbx
0x4396a:	add    BYTE PTR [rbp+0x3],dh; 	pop    rbx
0x43999:	pop    rbx
0x43996:	cmovs  eax,edx; 	pop    rbx
0x439c8:	pop    rax
0x439c7:	rex pop rax
0x439c6:	mov    eax,DWORD PTR [rax+0x58]
0x439c5:	pop    rbx; 	mov    eax,DWORD PTR [rax+0x58]
0x439d6:	add    BYTE PTR [rax+0x39],cl
0x43a42:	add    esp,0x28
0x43a41:	add    rsp,0x28
0x43a68:	pop    rbx
0x43a66:	add    BYTE PTR [rax],al; 	pop    rbx
0x43a86:	pop    rbx
0x43a83:	cmovs  eax,edx; 	pop    rbx
0x43ab8:	pop    rax
0x43ab7:	rex pop rax
0x43ab6:	mov    eax,DWORD PTR [rax+0x58]
0x43ab5:	pop    rbx; 	mov    eax,DWORD PTR [rax+0x58]
0x43ac6:	add    BYTE PTR [rax+0x39],cl
0x43b32:	add    esp,0x28
0x43b31:	add    rsp,0x28
0x43b52:	pop    rbx
0x43b81:	pop    rax
0x43b80:	rex pop rax
0x43b7f:	mov    eax,DWORD PTR [rax+0x58]
0x43b7e:	pop    rbx; 	mov    eax,DWORD PTR [rax+0x58]
0x43b8e:	add    BYTE PTR [rax+0x39],cl
0x43c3a:	add    esp,0x8
0x43c39:	add    rsp,0x8
0x43cea:	pop    rbx
0x43ce8:	mov    eax,ebx; 	pop    rbx
0x43ce7:	mov    rax,rbx; 	pop    rbx
0x43d91:	pop    rbx
0x43d8f:	mov    eax,ebx; 	pop    rbx
0x43d8e:	mov    rax,rbx; 	pop    rbx
0x43e4e:	add    esp,0x18
0x43e4d:	add    rsp,0x18
0x43f42:	xor    eax,eax
0x43f41:	ret    0xc031
0x43f40:	jns    0x43f04; 	xor    eax,eax
0x44084:	add    DWORD PTR [rbp+0x39],ecx
0x440fd:	pop    rbp
0x440fb:	mov    DWORD PTR [rsi],edx; 	pop    rbp
0x440fa:	mov    DWORD PTR [rsi],r10d; 	pop    rbp
0x4414c:	xor    eax,eax
0x4414a:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x442c4:	xor    eax,eax
0x4433f:	xor    eax,eax
0x4435a:	mov    DWORD PTR [rdi],eax
0x44359:	mov    QWORD PTR [rdi],r8
0x44376:	mov    DWORD PTR [rsi],edx
0x44374:	mov    DWORD PTR [rax],edx; 	mov    DWORD PTR [rsi],edx
0x443aa:	add    esp,0x8
0x443a9:	add    rsp,0x8
0x443f8:	xor    eax,ecx
0x443f6:	add    BYTE PTR [rax],al; 	xor    eax,ecx
0x4443c:	add    esp,0x18
0x4443b:	add    rsp,0x18
0x44489:	add    esp,0x18
0x44488:	add    rsp,0x18
0x444db:	add    esp,0x18
0x444da:	add    rsp,0x18
0x44528:	add    esp,0x18
0x44527:	add    rsp,0x18
0x4457b:	add    esp,0x18
0x4457a:	add    rsp,0x18
0x445c8:	add    esp,0x18
0x445c7:	add    rsp,0x18
0x44608:	add    esp,0x8
0x44607:	add    rsp,0x8
0x44699:	pop    rbp
0x44698:	pop    rbx; 	pop    rbp
0x44697:	sbb    BYTE PTR [rbx+0x5d],bl
0x44704:	pop    rbp
0x44703:	pop    rbx; 	pop    rbp
0x44702:	or     BYTE PTR [rbx+0x5d],bl
0x44764:	pop    rbp
0x44763:	pop    rbx; 	pop    rbp
0x44762:	or     BYTE PTR [rbx+0x5d],bl
0x447ae:	xor    eax,eax
0x447f8:	xor    eax,eax
0x4483a:	xor    eax,eax
0x44883:	mov    DWORD PTR [rdi+0x2],edx
0x44882:	mov    WORD PTR [rdi+0x2],dx
0x4492a:	pop    rsp
0x44929:	pop    r12
0x44928:	pop    rbp; 	pop    r12
0x44927:	pop    rbx; 	pop    rbp; 	pop    r12
0x449d0:	xor    eax,eax
0x449cf:	nop; 	xor    eax,eax
0x449ce:	xchg   ax,ax; 	xor    eax,eax
0x44b38:	pop    rdi
0x44b37:	pop    r15
0x44b36:	pop    rsi; 	pop    r15
0x44b35:	pop    r14; 	pop    r15
0x44d90:	pop    rdi
0x44d8f:	pop    r15
0x44d8e:	pop    rsi; 	pop    r15
0x44d8d:	pop    r14; 	pop    r15
0x44fed:	pop    rdi
0x44fec:	pop    r15
0x44feb:	pop    rsi; 	pop    r15
0x44fea:	pop    r14; 	pop    r15
0x451a8:	pop    rdi
0x451a7:	pop    r15
0x451a6:	pop    rsi; 	pop    r15
0x451a5:	pop    r14; 	pop    r15
0x451cf:	add    BYTE PTR [rax-0x7d],cl
0x45206:	add    DWORD PTR [rax-0x7d],ecx
0x4528b:	scas   eax,DWORD PTR es:[rdi]
0x452fb:	add    BYTE PTR [rax-0x7d],cl
0x45628:	xor    eax,eax
0x45626:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x45798:	pop    rdi
0x45797:	pop    r15
0x45796:	pop    rsi; 	pop    r15
0x45795:	pop    r14; 	pop    r15
0x45968:	pop    rdi
0x45967:	pop    r15
0x45966:	pop    rsi; 	pop    r15
0x45965:	pop    r14; 	pop    r15
0x4598f:	add    BYTE PTR [rax-0x7d],cl
0x459c6:	add    DWORD PTR [rax-0x7d],ecx
0x45a4b:	scas   eax,DWORD PTR es:[rdi]
0x45abb:	add    BYTE PTR [rax-0x7d],cl
0x45b2c:	pop    rdi
0x45b2b:	pop    r15
0x45b2a:	pop    rsi; 	pop    r15
0x45b29:	pop    r14; 	pop    r15
0x45c37:	add    ch,al
0x45c35:	je     0x45c5b; 	add    ch,al
0x45c95:	add    BYTE PTR [rax-0x7d],cl
0x45d58:	xor    eax,eax
0x45d56:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x45eb4:	pop    rdi
0x45eb3:	pop    r15
0x45eb2:	pop    rsi; 	pop    r15
0x45eb1:	pop    r14; 	pop    r15
0x4609d:	add    BYTE PTR [rax-0x7d],cl
0x4609c:	lods   eax,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rax-0x7d],cl
0x46199:	pop    rdi
0x46198:	pop    r15
0x46197:	pop    rsi; 	pop    r15
0x46196:	pop    r14; 	pop    r15
0x4643d:	pop    rdi
0x4643c:	pop    r15
0x4643b:	pop    rsi; 	pop    r15
0x4643a:	pop    r14; 	pop    r15
0x4651d:	add    BYTE PTR [rax-0x39],cl
0x466cf:	add    BYTE PTR [rax-0x7d],cl
0x466ce:	add    BYTE PTR [rax-0x7d],cl
0x4672b:	dec    DWORD PTR [rax-0x39]
0x46a1b:	pop    rdi
0x46a1a:	pop    r15
0x46a19:	pop    rsi; 	pop    r15
0x46a18:	pop    r14; 	pop    r15
0x46b67:	add    BYTE PTR [rcx-0x7d],cl
0x46bb5:	dec    DWORD PTR [rcx-0x39]
0x46c5e:	xchg   esp,eax
0x47773:	dec    DWORD PTR [rax+0x39]
0x47a3b:	sbb    BYTE PTR [rcx-0x77],cl
0x47ae5:	and    BYTE PTR [rcx-0x77],cl
0x48811:	add    BYTE PTR [rax-0x7d],cl
0x491ed:	add    BYTE PTR [rax-0x7d],cl
0x491ec:	lods   eax,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rax-0x7d],cl
0x492e9:	pop    rdi
0x492e8:	pop    r15
0x492e7:	pop    rsi; 	pop    r15
0x492e6:	pop    r14; 	pop    r15
0x49590:	pop    rdi
0x4958f:	pop    r15
0x4958e:	pop    rsi; 	pop    r15
0x4958d:	pop    r14; 	pop    r15
0x4967d:	add    BYTE PTR [rax-0x39],cl
0x4983f:	add    BYTE PTR [rax-0x7d],cl
0x4983e:	add    BYTE PTR [rax-0x7d],cl
0x498a3:	dec    DWORD PTR [rax-0x39]
0x49b8a:	pop    rdi
0x49b89:	pop    r15
0x49b88:	pop    rsi; 	pop    r15
0x49b87:	pop    r14; 	pop    r15
0x49cd7:	add    BYTE PTR [rcx-0x7d],cl
0x49d25:	dec    DWORD PTR [rcx-0x39]
0x49dce:	xchg   esp,eax
0x4ab79:	sbb    BYTE PTR [rcx-0x77],cl
0x4b63a:	add    BYTE PTR [rax-0x7d],cl
0x4bfdd:	add    BYTE PTR [rax-0x7d],cl
0x4bfdc:	lods   eax,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rax-0x7d],cl
0x4c0e1:	pop    rdi
0x4c0e0:	pop    r15
0x4c0df:	pop    rsi; 	pop    r15
0x4c0de:	pop    r14; 	pop    r15
0x4c353:	pop    rdi
0x4c352:	pop    r15
0x4c351:	pop    rsi; 	pop    r15
0x4c350:	pop    r14; 	pop    r15
0x4c469:	fmul   DWORD PTR [rax-0x39]
0x4c5ff:	add    BYTE PTR [rax-0x7d],cl
0x4c88c:	add    BYTE PTR [rax],bh
0x4c88a:	or     DWORD PTR [rax],eax; 	add    BYTE PTR [rax],bh
0x4c919:	pop    rdi
0x4c918:	pop    r15
0x4c917:	pop    rsi; 	pop    r15
0x4c916:	pop    r14; 	pop    r15
0x4ca67:	add    BYTE PTR [rcx-0x7d],cl
0x4cab5:	dec    DWORD PTR [rcx-0x39]
0x4cb5e:	xchg   esp,eax
0x4d63e:	dec    DWORD PTR [rax+0x39]
0x4d8b7:	sub    al,ch
0x4d902:	and    BYTE PTR [rcx-0x77],cl
0x4d9a5:	sbb    BYTE PTR [rcx-0x77],cl
0x4e35e:	add    BYTE PTR [rax-0x7d],cl
0x4e6a3:	add    BYTE PTR [rax+0x63],cl
0x4ecb9:	pop    rbp
0x4ecb8:	pop    rbx; 	pop    rbp
0x4ecb7:	sub    BYTE PTR [rbx+0x5d],bl
0x4ed69:	pop    rbp
0x4ed68:	pop    rbx; 	pop    rbp
0x4ed67:	sub    BYTE PTR [rbx+0x5d],bl
0x4ee47:	pop    rbp
0x4ee46:	pop    rbx; 	pop    rbp
0x4ee45:	cmp    BYTE PTR [rbx+0x5d],bl
0x4f110:	dec    DWORD PTR [rcx]
0x4f178:	pop    rsp
0x4f177:	pop    r12
0x4f176:	pop    rbp; 	pop    r12
0x4f175:	pop    rbx; 	pop    rbp; 	pop    r12
0x4f3c7:	add    al,ch
0x4f3c5:	add    BYTE PTR [rax],al; 	add    al,ch
0x4f439:	pop    rbx
0x4f437:	add    BYTE PTR [rax],al; 	pop    rbx
0x4f46a:	mov    dh,0xc0
0x4f469:	movzx  eax,al
0x4f468:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x4f5ad:	add    DWORD PTR [rax-0x7f],ecx
0x4f5de:	dec    DWORD PTR [rax+0x1]
0x4f69b:	pop    rbp
0x4f69a:	pop    rdi; 	pop    rbp
0x4f699:	pop    r15; 	pop    rbp
0x4f698:	pop    rsi; 	pop    r15; 	pop    rbp
0x4faab:	or     eax,edx
0x4faa9:	loopne 0x4fac9; 	or     eax,edx
0x4fab7:	add    bl,dh
0x4fab6:	add    bl,sil
0x4fb6d:	add    bl,dh
0x4fb6b:	add    al,0x10; 	add    bl,dh
0x4fbd2:	dec    DWORD PTR [rax-0x77]
0x4fbd1:	std    ; 	dec    DWORD PTR [rax-0x77]
0x4fbdc:	add    BYTE PTR [rax+0x39],cl
0x4fc49:	dec    DWORD PTR [rax-0x77]
0x4fc48:	std    ; 	dec    DWORD PTR [rax-0x77]
0x4fc53:	add    BYTE PTR [rax+0x39],cl
0x4fcba:	pop    rbp
0x4fcb9:	pop    rbx; 	pop    rbp
0x4fcb8:	rcr    BYTE PTR [rbx+0x5d],1
0x4fcb7:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x4fd85:	add    BYTE PTR [rax],al
0x4fd83:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x503ac:	pop    rdi
0x503ab:	pop    r15
0x503aa:	pop    rsi; 	pop    r15
0x503a9:	pop    r14; 	pop    r15
0x5132f:	add    BYTE PTR [rax],al
0x5132d:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x5140c:	pop    rdi
0x5140b:	pop    r15
0x5140a:	pop    rsi; 	pop    r15
0x51409:	pop    r14; 	pop    r15
0x514ab:	add    DWORD PTR [rax+0x39],ecx
0x514bd:	add    DWORD PTR [rax+0x39],ecx
0x514d9:	add    DWORD PTR [rax+0x39],ecx
0x514df:	pop    rbx
0x514de:	icebp  ; 	pop    rbx
0x514dd:	jne    0x514d0; 	pop    rbx
0x514dc:	ret    ; 	jne    0x514d0; 	pop    rbx
0x514e7:	add    bl,dh
0x514e5:	add    BYTE PTR [rax],al; 	add    bl,dh
0x514f4:	pop    rbx
0x514f2:	rol    BYTE PTR [rcx],0x5b
0x514f1:	add    eax,0x1; 	pop    rbx
0x5150a:	pop    rbx
0x51508:	jne    0x51500; 	pop    rbx
0x51507:	add    BYTE PTR [rbp-0xa],dh; 	pop    rbx
0x51513:	pop    rbx
0x51511:	mov    eax,ebx; 	pop    rbx
0x51510:	mov    rax,rbx; 	pop    rbx
0x51654:	and    cl,BYTE PTR [rax-0x7d]
0x51667:	add    BYTE PTR [rax-0x7d],cl
0x51666:	add    BYTE PTR [rax-0x7d],cl
0x5167e:	xchg   esp,eax
0x5167c:	cmp    cl,BYTE PTR [rdi]; 	xchg   esp,eax
0x516e3:	pop    rdi
0x516e2:	pop    r15
0x516e1:	pop    rsi; 	pop    r15
0x516e0:	pop    r14; 	pop    r15
0x517c1:	ror    BYTE PTR [rdi],0x85
0x51c98:	pop    rdi
0x51c97:	pop    r15
0x51c96:	pop    rsi; 	pop    r15
0x51c95:	pop    r14; 	pop    r15
0x51f3a:	pop    rsp
0x51f39:	pop    r12
0x51f38:	pop    rbp; 	pop    r12
0x51f37:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x51f83:	mov    eax,edx
0x52059:	xor    eax,eax
0x52057:	jae    0x5205c; 	xor    eax,eax
0x52069:	or     eax,0xffffffff
0x52068:	or     rax,0xffffffffffffffff
0x520ed:	xor    eax,eax
0x520eb:	jg     0x52155; 	xor    eax,eax
0x520fd:	or     eax,0xffffffff
0x520fc:	or     rax,0xffffffffffffffff
0x521ca:	add    BYTE PTR [rcx-0x77],cl
0x52241:	pop    rbx
0x52240:	push   rax; 	pop    rbx
0x5223e:	add    esp,0x50; 	pop    rbx
0x522e3:	fimul  DWORD PTR [rax-0x7d]
0x522ef:	fimul  DWORD PTR [rax-0x7d]
0x522fb:	fimul  DWORD PTR [rax-0x7d]
0x52304:	fimul  DWORD PTR [rax-0x7d]
0x52310:	fimul  DWORD PTR [rax-0x7d]
0x52319:	fimul  DWORD PTR [rax-0x7d]
0x52325:	fimul  DWORD PTR [rax-0x7d]
0x5241d:	xor    eax,eax
0x5241b:	jbe    0x5248d; 	xor    eax,eax
0x5242d:	or     eax,0xffffffff
0x5242c:	or     rax,0xffffffffffffffff
0x5251c:	pop    rbx
0x5251a:	xor    eax,eax; 	pop    rbx
0x52546:	add    BYTE PTR [rax],al
0x52544:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x52569:	xor    eax,eax
0x52568:	out    dx,eax; 	xor    eax,eax
0x52567:	jne    0x52558; 	xor    eax,eax
0x52598:	pop    rsp
0x52597:	pop    r12
0x52596:	pop    rbp; 	pop    r12
0x52595:	pop    rbx; 	pop    rbp; 	pop    r12
0x526ff:	pop    rsp
0x526fe:	pop    r12
0x526fd:	pop    rbp; 	pop    r12
0x526fc:	pop    rbx; 	pop    rbp; 	pop    r12
0x5271b:	add    DWORD PTR [rax+0x39],ecx
0x5281d:	pop    rbx
0x5281b:	xor    eax,eax; 	pop    rbx
0x52846:	add    BYTE PTR [rax],al
0x52844:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x52869:	xor    eax,eax
0x52868:	out    dx,eax; 	xor    eax,eax
0x52867:	jne    0x52858; 	xor    eax,eax
0x52898:	pop    rsp
0x52897:	pop    r12
0x52896:	pop    rbp; 	pop    r12
0x52895:	pop    rbx; 	pop    rbp; 	pop    r12
0x529ff:	pop    rsp
0x529fe:	pop    r12
0x529fd:	pop    rbp; 	pop    r12
0x529fc:	pop    rbx; 	pop    rbp; 	pop    r12
0x52a89:	adc    eax,eax
0x52a87:	mov    eax,ecx; 	adc    eax,eax
0x52b90:	add    BYTE PTR [rax-0x7d],cl
0x52bc9:	pop    rbx
0x52bc8:	pop    rbp; 	pop    rbx
0x52bc7:	rcr    BYTE PTR [rbp+0x5b],1
0x52bc6:	adc    eax,edx; 	pop    rbp; 	pop    rbx
0x52bff:	sub    eax,0x1
0x52c08:	xor    eax,eax
0x52c06:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x52c5a:	mov    eax,edx
0x52c59:	mov    rax,rdx
0x52c58:	out    0x48,eax; 	mov    eax,edx
0x52e6e:	pop    rdi
0x52e6d:	pop    r15
0x52e6c:	pop    rsi; 	pop    r15
0x52e6b:	pop    r14; 	pop    r15
0x53289:	mov    DWORD PTR [rdi],ecx
0x53288:	mov    QWORD PTR [rdi],r9
0x53287:	loope  0x532d5; 	mov    DWORD PTR [rdi],ecx
0x532bc:	clc    
0x532bb:	rex.WRXB clc 
0x532ba:	mov    DWORD PTR [rdi-0x8],ecx
0x532b9:	mov    QWORD PTR [rdi-0x8],r9
0x532e2:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x532df:	add    BYTE PTR [rbp+0xf],cl; 	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x5331e:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x5332f:	mov    DWORD PTR [rdi-0x10],ecx
0x5332e:	mov    QWORD PTR [rdi-0x10],r9
0x53393:	mov    DWORD PTR [rdi],ecx
0x53392:	mov    QWORD PTR [rdi],r9
0x533c4:	mov    DWORD PTR [rdi+0x8],ecx
0x533c3:	mov    QWORD PTR [rdi+0x8],r9
0x533f2:	lods   eax,DWORD PTR ds:[rsi]
0x533ef:	add    BYTE PTR [rbp+0xf],cl; 	lods   eax,DWORD PTR ds:[rsi]
0x5342e:	lods   eax,DWORD PTR ds:[rsi]
0x5343f:	mov    DWORD PTR [rdi+0x10],ecx
0x5343e:	mov    QWORD PTR [rdi+0x10],r9
0x53482:	mov    eax,edx
0x53481:	mov    rax,rdx
0x53480:	out    dx,eax; 	mov    rax,rdx
0x5353f:	pop    rbp
0x5353e:	pop    rdi; 	pop    rbp
0x5353d:	pop    r15; 	pop    rbp
0x5353c:	pop    rsi; 	pop    r15; 	pop    rbp
0x5357b:	add    BYTE PTR [rax+0x1],cl
0x536d6:	or     BYTE PTR [rax-0x7d],cl
0x53931:	fisttp DWORD PTR [rax-0x77]
0x5398e:	adc    BYTE PTR [rax+0x1],cl
0x539d7:	pop    rbx
0x539d5:	mov    eax,edx; 	pop    rbx
0x539d4:	mov    rax,rdx; 	pop    rbx
0x53a2e:	cmp    ecx,DWORD PTR [rax-0x7d]
0x53a52:	cmp    ecx,DWORD PTR [rax-0x7d]
0x53a8d:	pop    rdi
0x53a8c:	pop    r15
0x53a8b:	pop    rsi; 	pop    r15
0x53a8a:	pop    r14; 	pop    r15
0x53c31:	pop    rdi
0x53c30:	pop    r15
0x53c2f:	pop    rsi; 	pop    r15
0x53c2e:	pop    r14; 	pop    r15
0x53dca:	add    DWORD PTR [rax+0x39],ecx
0x541b8:	pop    rdi
0x541b7:	pop    r15
0x541b6:	pop    rsi; 	pop    r15
0x541b5:	pop    r14; 	pop    r15
0x5434c:	pop    rdi
0x5434b:	pop    r15
0x5434a:	pop    rsi; 	pop    r15
0x54349:	pop    r14; 	pop    r15
0x5443d:	ror    DWORD PTR [rbp+rcx*4+0x14],cl
0x5453d:	adc    BYTE PTR [rax+0x39],cl
0x54803:	leave  
0x54802:	cmp    ecx,ecx
0x54801:	jne    0x5483e; 	leave  
0x54800:	add    BYTE PTR [rbp+0x3b],dh; 	leave  
0x548a9:	adc    eax,eax
0x548a7:	mov    eax,ecx; 	adc    eax,eax
0x549b0:	add    BYTE PTR [rax-0x7d],cl
0x549e9:	pop    rbx
0x549e8:	pop    rbp; 	pop    rbx
0x549e7:	rcr    BYTE PTR [rbp+0x5b],1
0x549e6:	adc    eax,edx; 	pop    rbp; 	pop    rbx
0x54a40:	add    BYTE PTR [rax],al
0x54a3e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x54a5b:	mov    DWORD PTR [rdi],esi
0x54a5a:	mov    QWORD PTR [rdi],rsi
0x54a7d:	add    BYTE PTR [rax],al
0x54a7b:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x54af7:	add    BYTE PTR [rax],al
0x54af5:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x54b15:	add    BYTE PTR [rax],al
0x54b13:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x54b36:	add    BYTE PTR [rax],al
0x54b34:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x54b62:	cld    
0x54b61:	and    al,0xfc
0x54b60:	rex.R and al,0xfc
0x54b5f:	adc    BYTE PTR [rsp-0x4],al
0x54ba8:	clc    
0x54ba7:	and    al,0xf8
0x54ba6:	rex.R and al,0xf8
0x54ba5:	adc    BYTE PTR [rsp-0x8],al
0x54bf0:	and    al,0xe8
0x54bef:	ins    BYTE PTR es:[rdi],dx; 	and    al,0xe8
0x54bee:	fld    TBYTE PTR [rsp-0x18]
0x54c9a:	add    BYTE PTR [rax],al
0x54c98:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x54cb4:	add    BYTE PTR [rax],al
0x54cb2:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x54cfb:	add    BYTE PTR [rax],al
0x54cf9:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x54d09:	add    BYTE PTR [rax],al
0x54d07:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x54e6b:	pop    rdi
0x54e6a:	pop    r15
0x54e69:	pop    rsi; 	pop    r15
0x54e68:	pop    r14; 	pop    r15
0x5500d:	add    BYTE PTR [rax-0x7d],cl
0x5500c:	lods   eax,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rax-0x7d],cl
0x55111:	pop    rdi
0x55110:	pop    r15
0x5510f:	pop    rsi; 	pop    r15
0x5510e:	pop    r14; 	pop    r15
0x553dd:	pop    rdi
0x553dc:	pop    r15
0x553db:	pop    rsi; 	pop    r15
0x553da:	pop    r14; 	pop    r15
0x5551a:	sbb    ecx,DWORD PTR [rax-0x39]
0x556b0:	xchg   ebp,eax
0x556ae:	ror    BYTE PTR [rdi],1; 	xchg   ebp,eax
0x5570f:	add    BYTE PTR [rax-0x7d],cl
0x558c3:	xchg   esp,eax
0x5591a:	dec    DWORD PTR [rax-0x39]
0x55a4c:	add    BYTE PTR [rax],bh
0x55a4a:	or     al,BYTE PTR [rax]; 	add    BYTE PTR [rax],bh
0x55ada:	pop    rdi
0x55ad9:	pop    r15
0x55ad8:	pop    rsi; 	pop    r15
0x55ad7:	pop    r14; 	pop    r15
0x55c27:	add    BYTE PTR [rcx-0x7d],cl
0x55c75:	dec    DWORD PTR [rcx-0x39]
0x55d1e:	xchg   esp,eax
0x567ec:	dec    DWORD PTR [rax+0x39]
0x56a9b:	sbb    BYTE PTR [rcx-0x77],cl
0x57596:	add    BYTE PTR [rax-0x7d],cl
0x57b2d:	add    BYTE PTR [rcx],ch
0x57b2b:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rcx],ch
0x581ad:	pop    rbp
0x581ac:	pop    rbx; 	pop    rbp
0x581ab:	sub    BYTE PTR [rbx+0x5d],bl
0x582cf:	pinsrw mm0,eax,0x6
0x583e4:	pop    rdi
0x583e3:	pop    r15
0x583e2:	pop    rsi; 	pop    r15
0x583e1:	pop    r14; 	pop    r15
0x58561:	pop    rsp
0x58560:	pop    r12
0x5855f:	pop    rbp; 	pop    r12
0x5855e:	pop    rbx; 	pop    rbp; 	pop    r12
0x5859e:	pop    rsp
0x5859d:	pop    r12
0x5859c:	pop    rbp; 	pop    r12
0x58788:	pop    rbx
0x58786:	add    BYTE PTR [rax],al; 	pop    rbx
0x587f4:	mov    eax,esi
0x587f3:	mov    rax,rsi
0x587f2:	in     eax,0x48; 	mov    eax,esi
0x58878:	mov    eax,esi
0x58877:	mov    rax,rsi
0x58922:	pop    rbx
0x5891f:	add    esp,0x30; 	pop    rbx
0x58a23:	pop    rdi
0x58a22:	pop    r15
0x58a21:	pop    rsi; 	pop    r15
0x58a20:	pop    r14; 	pop    r15
0x58c44:	pop    rdi
0x58c43:	pop    r15
0x58c42:	pop    rsi; 	pop    r15
0x58c41:	pop    r14; 	pop    r15
0x58c6f:	dec    DWORD PTR [rax+0x29]
0x58c6e:	cld    ; 	dec    DWORD PTR [rax+0x29]
0x58e3f:	pop    rbp
0x58e3e:	pop    r13
0x58e3d:	pop    rsp; 	pop    r13
0x58e3c:	pop    r12; 	pop    r13
0x58fac:	and    BYTE PTR [rax+0x1],cl
0x595b7:	lahf   
0x595b5:	in     al,0xf; 	lahf   
0x59635:	add    BYTE PTR [rax+0x39],cl
0x596e7:	pop    rbp
0x596e6:	pop    rdi; 	pop    rbp
0x596e5:	pop    r15; 	pop    rbp
0x596e4:	pop    rsi; 	pop    r15; 	pop    rbp
0x5980b:	or     al,0x83
0x5980a:	rex.RXB or al,0x83
0x59809:	mov    dh,0x47; 	or     al,0x83
0x59869:	add    BYTE PTR [rcx-0x7d],cl
0x59a4e:	dec    DWORD PTR [rax-0x39]
0x59d81:	cmp    BYTE PTR [rax+0x39],cl
0x59d80:	push   rax; 	cmp    BYTE PTR [rax+0x39],cl
0x5a051:	add    BYTE PTR [rcx-0x77],cl
0x5a13a:	add    BYTE PTR [rcx-0x77],cl
0x5a690:	cmp    BYTE PTR [rax+0x39],cl
0x5a6d1:	add    BYTE PTR [rcx-0x77],al
0x5a941:	dec    DWORD PTR [rax-0x77]
0x5a940:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x5aad9:	add    BYTE PTR [rcx-0x77],cl
0x5ae48:	dec    DWORD PTR [rax-0x77]
0x5ae47:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x5af25:	add    BYTE PTR [rax+0x63],cl
0x5b5a9:	pop    rbp
0x5b5a8:	pop    rdi; 	pop    rbp
0x5b5a7:	pop    r15; 	pop    rbp
0x5b5a6:	pop    rsi; 	pop    r15; 	pop    rbp
0x5b944:	add    BYTE PTR [rcx-0x7d],cl
0x5bdd7:	add    BYTE PTR [rcx-0x77],cl
0x5e764:	pop    rsi
0x5e763:	pop    r14
0x5e762:	pop    rbp; 	pop    r14
0x5e761:	pop    r13; 	pop    r14
0x5e93e:	pop    rbp
0x5e93d:	pop    rbx; 	pop    rbp
0x5e93b:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x5e972:	pop    rbp
0x5e971:	pop    rbx; 	pop    rbp
0x5e96f:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x5e99e:	pop    rbp
0x5e99d:	pop    rbx; 	pop    rbp
0x5e99b:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x5e9bd:	pop    rbp
0x5e9bc:	pop    rbx; 	pop    rbp
0x5e9ba:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x5eb04:	pop    rdi
0x5eb03:	pop    r15
0x5eb02:	pop    rsi; 	pop    r15
0x5eb01:	pop    r14; 	pop    r15
0x5eb2f:	dec    DWORD PTR [rax+0x29]
0x5eb2e:	cld    ; 	dec    DWORD PTR [rax+0x29]
0x5ed28:	outs   dx,DWORD PTR ds:[rsi]
0x5ed25:	sbb    ah,BYTE PTR [rsi+0xf]; 	outs   dx,DWORD PTR ds:[rsi]
0x5ef8f:	loopne 0x5ef1a
0x5ef8d:	in     eax,0xdf; 	loopne 0x5ef1a
0x5f30e:	and    al,0x83
0x5f391:	pop    rbp
0x5f390:	pop    rdi; 	pop    rbp
0x5f38f:	pop    r15; 	pop    rbp
0x5f38e:	pop    rsi; 	pop    r15; 	pop    rbp
0x5f808:	add    BYTE PTR [rax-0x7d],cl
0x617b5:	mov    eax,ecx
0x617b4:	mov    eax,r9d
0x617b3:	fadd   QWORD PTR [rcx+rcx*4-0x38]
0x617cc:	mov    eax,ecx
0x617cb:	mov    eax,r9d
0x61882:	pop    rsp
0x61881:	pop    r12
0x61880:	pop    rbp; 	pop    r12
0x6187f:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x618d3:	mov    eax,edx
0x618d1:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x61992:	pop    rsp
0x61991:	pop    r12
0x61990:	pop    rbp; 	pop    r12
0x6198f:	rcr    BYTE PTR [rbp+0x41],1; 	pop    rsp
0x619e3:	mov    eax,edx
0x619e1:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x61b1b:	pop    rdi
0x61b1a:	pop    r15
0x61b19:	pop    rsi; 	pop    r15
0x61b18:	pop    r14; 	pop    r15
0x61bc8:	outs   dx,DWORD PTR ds:[rsi]
0x620e2:	xchg   esp,eax
0x620df:	rol    BYTE PTR [rcx+0xf],0x94
0x62428:	ror    BYTE PTR [rdi],0x8f
0x627c3:	pop    rdi
0x627c2:	pop    r15
0x627c1:	pop    rsi; 	pop    r15
0x627c0:	pop    r14; 	pop    r15
0x62832:	xchg   esp,eax
0x6282f:	add    BYTE PTR [rcx+0xf],al; 	xchg   esp,eax
0x62c75:	add    BYTE PTR [rcx+0x29],cl
0x62d81:	xchg   esp,eax
0x62d7e:	add    BYTE PTR [rcx+0xf],al; 	xchg   esp,eax
0x63b68:	ror    BYTE PTR [rcx-0x77],cl
0x63e8a:	add    BYTE PTR [rax-0x7d],cl
0x63fa1:	pop    rbp
0x63fa0:	pop    r13
0x63f9f:	pop    rsp; 	pop    r13
0x63f9e:	pop    r12; 	pop    r13
0x63fc6:	pop    rbp
0x63fc5:	pop    r13
0x63fc4:	pop    rsp; 	pop    r13
0x63fc3:	pop    r12; 	pop    r13
0x640c3:	pop    rsi
0x640c2:	pop    r14
0x640c1:	pop    rbp; 	pop    r14
0x640c0:	pop    r13; 	pop    r14
0x640f2:	add    BYTE PTR [rax],al
0x640f0:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x64191:	pop    rbp
0x64190:	pop    r13
0x6418f:	pop    rsp; 	pop    r13
0x6418e:	pop    r12; 	pop    r13
0x641c5:	add    BYTE PTR [rax],al
0x641c3:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x64276:	pop    rbx
0x64274:	mov    eax,edx; 	pop    rbx
0x643a8:	outs   dx,DWORD PTR ds:[rsi]
0x643a5:	add    BYTE PTR [rsi+0xf],ah; 	outs   dx,DWORD PTR ds:[rsi]
0x643cf:	outs   dx,DWORD PTR ds:[rsi]
0x643cc:	add    BYTE PTR [rsi+0xf],ah; 	outs   dx,DWORD PTR ds:[rsi]
0x644fb:	pop    rdi
0x644fa:	pop    r15
0x644f9:	pop    rsi; 	pop    r15
0x644f8:	pop    r14; 	pop    r15
0x6481d:	and    al,0x83
0x64bab:	add    al,0x83
0x64baa:	rex.RX add al,0x83
0x64ce6:	add    al,0x39
0x64ce5:	rex.RX add al,0x39
0x64db9:	add    BYTE PTR [rax],al
0x64db7:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x64e69:	add    BYTE PTR [rax],al
0x64e67:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x64f3b:	add    BYTE PTR [rax],al
0x64f39:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x64ff4:	add    BYTE PTR [rax],al
0x64ff2:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x650a9:	add    BYTE PTR [rax],al
0x650a7:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x65169:	add    BYTE PTR [rax],al
0x65167:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x65229:	add    BYTE PTR [rax],al
0x65227:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x65327:	adc    BYTE PTR [rax-0x7d],cl
0x6535c:	pop    rdi
0x6535b:	pop    r15
0x6535a:	pop    rsi; 	pop    r15
0x65359:	pop    r14; 	pop    r15
0x6545a:	add    BYTE PTR [rax+0x29],cl
0x6549c:	pop    rbp
0x6549b:	pop    r13
0x6549a:	pop    rsp; 	pop    r13
0x65499:	pop    r12; 	pop    r13
0x655fe:	and    BYTE PTR [rax+0x1],cl
0x65d07:	pop    rbp
0x65d06:	pop    rdi; 	pop    rbp
0x65d05:	pop    r15; 	pop    rbp
0x65d04:	pop    rsi; 	pop    r15; 	pop    rbp
0x65e4d:	or     al,0x83
0x65e4c:	rex.RX or al,0x83
0x65e4b:	mov    dh,0x46; 	or     al,0x83
0x660e6:	dec    DWORD PTR [rax-0x39]
0x662bb:	add    BYTE PTR [rax-0x7d],cl
0x66308:	dec    DWORD PTR [rax-0x77]
0x66307:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x6639e:	cmp    BYTE PTR [rax+0x39],cl
0x6639d:	push   rbp; 	cmp    BYTE PTR [rax+0x39],cl
0x66558:	add    BYTE PTR [rax+0x63],cl
0x66e75:	add    BYTE PTR [rax+0x39],cl
0x6710a:	dec    DWORD PTR [rax-0x77]
0x67272:	cmp    BYTE PTR [rax+0x39],cl
0x67271:	push   rbp; 	cmp    BYTE PTR [rax+0x39],cl
0x6770c:	add    BYTE PTR [rax+0x39],cl
0x67b26:	add    BYTE PTR [rax+0x63],cl
0x67bef:	add    BYTE PTR [rcx+0x63],cl
0x67f98:	pop    rbp
0x67f97:	pop    rdi; 	pop    rbp
0x67f96:	pop    r15; 	pop    rbp
0x67f95:	pop    rsi; 	pop    r15; 	pop    rbp
0x68518:	add    BYTE PTR [rcx-0x77],al
0x68811:	dec    DWORD PTR [rcx-0x77]
0x69cec:	fadd   DWORD PTR [rcx-0x77]
0x6b0e5:	pop    rsi
0x6b0e4:	pop    r14
0x6b0e3:	pop    rbp; 	pop    r14
0x6b0e2:	pop    r13; 	pop    r14
0x6b216:	pop    rsp
0x6b215:	pop    r12
0x6b214:	pop    rbp; 	pop    r12
0x6b213:	pop    rbx; 	pop    rbp; 	pop    r12
0x6b21f:	add    bl,dh
0x6b21d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x6b60d:	add    BYTE PTR [rax-0x7d],cl
0x6b994:	pop    rbp
0x6b993:	pop    rdi; 	pop    rbp
0x6b992:	pop    r15; 	pop    rbp
0x6b991:	pop    rsi; 	pop    r15; 	pop    rbp
0x6bd01:	adc    BYTE PTR [rax-0x7d],cl
0x6be97:	dec    DWORD PTR [rcx-0x7d]
0x6c113:	dec    DWORD PTR [rax+0x39]
0x6c13f:	xchg   ebp,eax
0x6c195:	dec    DWORD PTR [rax+0x39]
0x6c304:	dec    DWORD PTR [rax+0x39]
0x6c513:	dec    DWORD PTR [rax-0x77]
0x6c7ca:	add    DWORD PTR [rcx-0x7d],ecx
0x6cbe1:	dec    DWORD PTR [rax-0x77]
0x6ce83:	dec    DWORD PTR [rax-0x77]
0x6d17f:	cmp    cl,ch
0x6d29c:	add    DWORD PTR [rax+0x1],ecx
0x6d418:	dec    DWORD PTR [rax+0x1]
0x6d486:	dec    DWORD PTR [rax+0x29]
0x6d5b9:	xchg   ebp,eax
0x6d5b7:	ror    BYTE PTR [rdi],0x95
0x6d665:	fisttp DWORD PTR [rcx-0x77]
0x6d680:	dec    DWORD PTR [rax-0x39]
0x6d89d:	dec    DWORD PTR [rax+0x1]
0x6e0ff:	fimul  WORD PTR [rax-0x7d]
0x6e740:	dec    DWORD PTR [rax+0x1]
0x6e766:	dec    DWORD PTR [rcx-0x7d]
0x6eacd:	xchg   edi,eax
0x6ec83:	dec    DWORD PTR [rax+0x1]
0x6ed53:	dec    DWORD PTR [rax+0x1]
0x6fd60:	dec    DWORD PTR [rax+0x1]
0x70897:	dec    DWORD PTR [rax+0x29]
0x708bd:	dec    DWORD PTR [rax+0x39]
0x70e9b:	dec    DWORD PTR [rax+0x29]
0x7111d:	add    BYTE PTR [rax-0x77],cl
0x71148:	add    BYTE PTR [rax-0x7d],cl
0x72215:	dec    DWORD PTR [rax-0x77]
0x725d4:	dec    DWORD PTR [rax-0x77]
0x72d11:	dec    DWORD PTR [rax-0x77]
0x72db4:	shr    cl,1
0x72f63:	add    BYTE PTR [rax-0x7d],cl
0x734f9:	pop    rsp
0x734f8:	pop    r12
0x734f7:	pop    rbp; 	pop    r12
0x734f6:	pop    rbx; 	pop    rbp; 	pop    r12
0x734ff:	add    bl,dh
0x73b8e:	pop    rbp
0x73b8d:	pop    rdi; 	pop    rbp
0x73b8c:	pop    r15; 	pop    rbp
0x73b8b:	pop    rsi; 	pop    r15; 	pop    rbp
0x73e60:	fmul   QWORD PTR [rax-0x77]
0x74929:	dec    DWORD PTR [rax-0x7d]
0x7768d:	dec    DWORD PTR [rax+0x1]
0x77740:	ins    BYTE PTR es:[rdi],dx
0x77750:	pop    rsp
0x777a5:	test   DWORD PTR [rsi],eax
0x77d9f:	ror    BYTE PTR [rdi],0x85
0x788e7:	add    cl,ch
0x788e5:	add    BYTE PTR [rax],al; 	add    cl,ch
0x78ab6:	add    BYTE PTR [rax-0x7d],cl
0x78b67:	dec    DWORD PTR [rax+0x1]
0x7a5c1:	dec    DWORD PTR [rax-0x7d]
0x7b029:	add    BYTE PTR [rax],al
0x7b027:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x7b0fd:	add    BYTE PTR [rax],al
0x7b0fb:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x7b1b9:	add    BYTE PTR [rax],al
0x7b1b7:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x7b24b:	pop    rsp
0x7b24a:	pop    r12
0x7b249:	pop    rbp; 	pop    r12
0x7b248:	pop    rbx; 	pop    rbp; 	pop    r12
0x7b448:	pop    rsp
0x7b447:	pop    r12
0x7b446:	pop    rbp; 	pop    r12
0x7b445:	pop    rbx; 	pop    rbp; 	pop    r12
0x7b4ad:	pop    rbp
0x7b4ac:	pop    rbx; 	pop    rbp
0x7b4ab:	add    BYTE PTR [rbx+0x5d],bl
0x7b4aa:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x7b598:	pop    rbp
0x7b597:	pop    rbx; 	pop    rbp
0x7b596:	sub    BYTE PTR [rbx+0x5d],bl
0x7b5e6:	pop    rbx
0x7b5e4:	mov    eax,ebx; 	pop    rbx
0x7b5e3:	mov    rax,rbx; 	pop    rbx
0x7b5f5:	pop    rbx
0x7b5f3:	mov    eax,ebx; 	pop    rbx
0x7b5f2:	mov    rax,rbx; 	pop    rbx
0x7b672:	pop    rbx
0x7b670:	add    BYTE PTR [rax],al; 	pop    rbx
0x7b775:	pop    rdi
0x7b774:	pop    r15
0x7b773:	pop    rsi; 	pop    r15
0x7b772:	pop    r14; 	pop    r15
0x7b967:	pop    rdi
0x7b966:	pop    r15
0x7b965:	pop    rsi; 	pop    r15
0x7b964:	pop    r14; 	pop    r15
0x7b9c7:	test   BYTE PTR [rax+0x9],cl
0x7bca6:	add    esp,0x18
0x7bca5:	add    rsp,0x18
0x7bcec:	neg    eax
0x7bcea:	mov    dh,0xc0; 	neg    eax
0x7bd21:	pop    rbx
0x7bd1f:	neg    eax; 	pop    rbx
0x7bd3e:	or     ebx,esi
0x7bdf0:	add    al,0x1
0x7bdef:	rex.X add al,0x1
0x7bdee:	add    DWORD PTR [rdx+0x4],0x1
0x7be43:	add    BYTE PTR [rax],al
0x7be41:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x7be53:	add    BYTE PTR [rax],al
0x7be51:	adc    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x7be64:	xor    eax,eax
0x7be62:	add    al,0x1; 	xor    eax,eax
0x7beae:	add    bl,dh
0x7beac:	add    BYTE PTR [rax],al; 	add    bl,dh
0x7c03e:	pop    rbx
0x7c03c:	add    BYTE PTR [rax],al; 	pop    rbx
0x7c180:	pop    rbp
0x7c17f:	pop    rbx; 	pop    rbp
0x7c17e:	lock pop rbx; 	pop    rbp
0x7c17d:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x7c34c:	pop    rbx
0x7c34a:	add    BYTE PTR [rax],al; 	pop    rbx
0x7c479:	pop    rbx
0x7c478:	lock pop rbx
0x7c477:	mov    eax,esi; 	pop    rbx
0x7c589:	add    BYTE PTR [rax],al
0x7c587:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x7c641:	pop    rbp
0x7c640:	pop    r13
0x7c63f:	pop    rsp; 	pop    r13
0x7c63e:	pop    r12; 	pop    r13
0x7c790:	rol    DWORD PTR [rax],1
0x7c78f:	rex.R rol DWORD PTR [rax],1
0x7c7c4:	pop    rsi
0x7c7c3:	pop    r14
0x7c7c2:	pop    rbp; 	pop    r14
0x7c7c1:	pop    r13; 	pop    r14
0x7cee7:	mov    BYTE PTR [rcx+0xf],0x4f
0x7cfff:	pop    rbp
0x7cffe:	pop    r13
0x7cffd:	pop    rsp; 	pop    r13
0x7cffc:	pop    r12; 	pop    r13
0x7d09f:	pop    rbp
0x7d09e:	pop    r13
0x7d09d:	pop    rsp; 	pop    r13
0x7d09c:	pop    r12; 	pop    r13
0x7d7a3:	pop    rbp
0x7d7a2:	pop    r13
0x7d7a1:	pop    rsp; 	pop    r13
0x7d7a0:	pop    r12; 	pop    r13
0x7d7db:	pop    rbp
0x7d7da:	pop    r13
0x7d7d9:	pop    rsp; 	pop    r13
0x7d7d8:	pop    r12; 	pop    r13
0x7dcd7:	add    BYTE PTR [rax-0x7d],cl
0x7dd2f:	pop    rbp
0x7dd2e:	pop    rsi; 	pop    rbp
0x7dd2d:	pop    r14; 	pop    rbp
0x7dd2c:	pop    rbp; 	pop    r14; 	pop    rbp
0x7df3b:	pop    rbx
0x7df39:	add    BYTE PTR [rax],al; 	pop    rbx
0x7e0db:	pop    rbp
0x7e0da:	pop    rbx; 	pop    rbp
0x7e0d9:	add    BYTE PTR [rbx+0x5d],bl
0x7e0d8:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x7e1d0:	pop    rsp
0x7e1cf:	pop    r12
0x7e1ce:	pop    rbp; 	pop    r12
0x7e1cd:	pop    rbx; 	pop    rbp; 	pop    r12
0x7e303:	pop    rsp
0x7e302:	pop    r12
0x7e301:	pop    rbp; 	pop    r12
0x7e300:	pop    rbx; 	pop    rbp; 	pop    r12
0x7e526:	pop    rdi
0x7e525:	pop    r15
0x7e524:	pop    rsi; 	pop    r15
0x7e523:	pop    r14; 	pop    r15
0x7e8d4:	pop    rbp
0x7e8d3:	pop    rbx; 	pop    rbp
0x7e8d2:	rcr    BYTE PTR [rbx+0x5d],1
0x7e8d1:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x7ea87:	pop    rbp
0x7ea86:	pop    rbx; 	pop    rbp
0x7ea85:	lock pop rbx; 	pop    rbp
0x7ea84:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x7ec3c:	pop    rsp
0x7ec3b:	pop    r12
0x7ec3a:	pop    rbp; 	pop    r12
0x7ec39:	lock pop rbp; 	pop    r12
0x7ec73:	mov    eax,esi
0x7ec72:	mov    rax,rsi
0x7ed06:	add    bl,dh
0x7ed04:	add    DWORD PTR [rax],eax; 	add    bl,dh
0x7ed43:	add    BYTE PTR [rax-0x77],cl
0x7edb3:	pop    rsi
0x7edb2:	pop    r14
0x7edb1:	pop    rbp; 	pop    r14
0x7edb0:	pop    r13; 	pop    r14
0x7edeb:	pop    rsi
0x7edea:	pop    r14
0x7ede9:	pop    rbp; 	pop    r14
0x7ede8:	pop    r13; 	pop    r14
0x7ee52:	add    BYTE PTR [rax-0x77],cl
0x7eeca:	pop    rbp
0x7eec9:	pop    r13
0x7eec8:	pop    rsp; 	pop    r13
0x7eec7:	pop    r12; 	pop    r13
0x7ef05:	pop    rbp
0x7ef04:	pop    r13
0x7ef03:	pop    rsp; 	pop    r13
0x7ef02:	pop    r12; 	pop    r13
0x7efbb:	pop    rbp
0x7efba:	pop    rbx; 	pop    rbp
0x7efb9:	or     BYTE PTR [rbx+0x5d],bl
0x7efc0:	or     DWORD PTR [rdi],0x20
0x7f00b:	add    esp,0x18
0x7f00a:	add    rsp,0x18
0x7f048:	xor    eax,eax
0x7f046:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x7f117:	pop    rsp
0x7f116:	pop    r12
0x7f115:	pop    rbp; 	pop    r12
0x7f114:	pop    rbx; 	pop    rbp; 	pop    r12
0x7f158:	pop    rsp
0x7f157:	pop    r12
0x7f156:	pop    rbp; 	pop    r12
0x7f155:	pop    rbx; 	pop    rbp; 	pop    r12
0x7f1ce:	pop    rsp
0x7f1cd:	pop    r12
0x7f1cc:	pop    rbp; 	pop    r12
0x7f1cb:	pop    rbx; 	pop    rbp; 	pop    r12
0x7f30b:	pop    rbp
0x7f30a:	pop    r13
0x7f309:	pop    rsp; 	pop    r13
0x7f308:	pop    r12; 	pop    r13
0x7f428:	pop    rbp
0x7f427:	pop    r13
0x7f426:	pop    rsp; 	pop    r13
0x7f425:	pop    r12; 	pop    r13
0x7f49f:	pop    rbp
0x7f49e:	pop    r13
0x7f49d:	pop    rsp; 	pop    r13
0x7f49c:	pop    r12; 	pop    r13
0x7f5f1:	pop    rbp
0x7f5f0:	pop    rbx; 	pop    rbp
0x7f5ef:	rcr    BYTE PTR [rbx+0x5d],1
0x7f5ee:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x7f6c7:	add    al,ch
0x7f6c5:	add    BYTE PTR [rax],al; 	add    al,ch
0x7f72e:	pop    rbx
0x7f72c:	mov    eax,edx; 	pop    rbx
0x7f72b:	mov    rax,rdx; 	pop    rbx
0x7f7a8:	pop    rbx
0x7f7a6:	mov    eax,edx; 	pop    rbx
0x7f7a5:	mov    rax,rdx; 	pop    rbx
0x7f881:	pop    rbp
0x7f880:	pop    rbx; 	pop    rbp
0x7f87f:	or     BYTE PTR [rbx+0x5d],bl
0x7fa0f:	pop    rdi
0x7fa0e:	pop    r15
0x7fa0d:	pop    rsi; 	pop    r15
0x7fa0c:	pop    r14; 	pop    r15
0x7fafa:	pop    rdi
0x7faf9:	pop    r15
0x7faf8:	pop    rsi; 	pop    r15
0x7faf7:	pop    r14; 	pop    r15
0x7fe94:	pop    rdi
0x7fe93:	pop    r15
0x7fe92:	pop    rsi; 	pop    r15
0x7fe91:	pop    r14; 	pop    r15
0x7feeb:	pop    rdi
0x7feea:	pop    r15
0x7fee9:	pop    rsi; 	pop    r15
0x7fee8:	pop    r14; 	pop    r15
0x80009:	pop    rdi
0x80008:	pop    r15
0x80007:	pop    rsi; 	pop    r15
0x80006:	pop    r14; 	pop    r15
0x8019a:	pop    rsp
0x80199:	pop    r12
0x80198:	pop    rbp; 	pop    r12
0x80197:	pop    rbx; 	pop    rbp; 	pop    r12
0x802fd:	cmp    BYTE PTR [rax+0x1],cl
0x802fc:	push   rax; 	cmp    BYTE PTR [rax+0x1],cl
0x8037d:	cmp    BYTE PTR [rax+0x1],cl
0x803a1:	pop    rdi
0x803a0:	pop    r15
0x8039f:	pop    rsi; 	pop    r15
0x8039e:	pop    r14; 	pop    r15
0x8056e:	pop    rbp
0x8056d:	pop    r13
0x8056c:	pop    rsp; 	pop    r13
0x8056b:	pop    r12; 	pop    r13
0x80619:	add    bl,dh
0x80617:	add    BYTE PTR [rax],al; 	add    bl,dh
0x806a0:	pop    rdi
0x8069f:	pop    r15
0x8069e:	pop    rsi; 	pop    r15
0x8069d:	pop    r14; 	pop    r15
0x80993:	pop    rsp
0x80992:	pop    r12
0x80991:	pop    rbp; 	pop    r12
0x80990:	pop    rbx; 	pop    rbp; 	pop    r12
0x809d8:	add    BYTE PTR [rax-0x77],cl
0x809d7:	add    BYTE PTR ss:[rax-0x77],cl
0x80a8e:	cmp    BYTE PTR [rax+0x39],cl
0x80a8d:	push   rbp; 	cmp    BYTE PTR [rax+0x39],cl
0x80ab7:	or     cl,BYTE PTR [rax-0x7d]
0x80b1f:	pop    rbp
0x80b1e:	pop    r13
0x80b1d:	pop    rsp; 	pop    r13
0x80b1c:	pop    r12; 	pop    r13
0x80c07:	and    al,0xe8
0x80dfe:	pop    rsi
0x80dfd:	pop    r14
0x80dfc:	pop    rbp; 	pop    r14
0x80dfb:	pop    r13; 	pop    r14
0x810d2:	pop    rbp
0x810d1:	pop    r13
0x810d0:	pop    rsp; 	pop    r13
0x810cf:	pop    r12; 	pop    r13
0x81287:	pop    rbp
0x81286:	pop    r13
0x81285:	pop    rsp; 	pop    r13
0x81284:	pop    r12; 	pop    r13
0x813b6:	pop    rbp
0x813b5:	pop    r13
0x813b4:	pop    rsp; 	pop    r13
0x813b3:	pop    r12; 	pop    r13
0x81460:	pop    rbp
0x8145f:	pop    r13
0x8145e:	pop    rsp; 	pop    r13
0x8145d:	pop    r12; 	pop    r13
0x81633:	pop    rbx
0x81631:	mov    eax,edx; 	pop    rbx
0x81649:	clc    
0x81648:	mov    eax,edi
0x81703:	pop    rbp
0x81702:	pop    r13
0x81701:	pop    rsp; 	pop    r13
0x81700:	pop    r12; 	pop    r13
0x817bc:	pop    rbp
0x817bb:	pop    r13
0x817ba:	pop    rsp; 	pop    r13
0x817b9:	pop    r12; 	pop    r13
0x818bb:	pop    rbp
0x818ba:	pop    rbx; 	pop    rbp
0x818b9:	rcr    BYTE PTR [rbx+0x5d],1
0x818b8:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x81973:	pop    rbp
0x81972:	pop    rbx; 	pop    rbp
0x81971:	or     BYTE PTR [rbx+0x5d],bl
0x81982:	pop    rbp
0x81981:	pop    rbx; 	pop    rbp
0x81980:	call   FWORD PTR [rbx+0x5d]
0x81a6a:	pop    rbx
0x81a69:	lock pop rbx
0x81a68:	mov    eax,esi; 	pop    rbx
0x81aec:	mov    eax,DWORD PTR [rdx]
0x81aea:	mov    DWORD PTR [rax],ecx; 	mov    eax,DWORD PTR [rdx]
0x81bd8:	pop    rbx
0x81bd7:	lock pop rbx
0x81bd6:	mov    eax,esi; 	pop    rbx
0x81c63:	mov    eax,DWORD PTR [rdx]
0x81c61:	mov    DWORD PTR [rax],ecx; 	mov    eax,DWORD PTR [rdx]
0x81d9c:	pop    rsp
0x81d9b:	pop    r12
0x81d9a:	pop    rbp; 	pop    r12
0x81d99:	lock pop rbp; 	pop    r12
0x81dd3:	mov    eax,esi
0x81dd2:	mov    rax,rsi
0x81e9a:	pop    rsp
0x81e99:	pop    r12
0x81e98:	pop    rbp; 	pop    r12
0x81e97:	pop    rbx; 	pop    rbp; 	pop    r12
0x81eb7:	pop    rsp
0x81eb6:	pop    r12
0x81eb5:	pop    rbp; 	pop    r12
0x81eb4:	pop    rbx; 	pop    rbp; 	pop    r12
0x81ec8:	clc    
0x81ec7:	mov    eax,edi
0x81ec6:	mov    rax,rdi
0x81ec5:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x81ff4:	pop    rsi
0x81ff3:	pop    r14
0x81ff2:	pop    rbp; 	pop    r14
0x81ff1:	pop    r13; 	pop    r14
0x820d8:	pop    rsi
0x820d7:	pop    r14
0x820d6:	pop    rbp; 	pop    r14
0x820d5:	pop    r13; 	pop    r14
0x821fc:	pop    rdi
0x821fb:	pop    r15
0x821fa:	pop    rsi; 	pop    r15
0x821f9:	pop    r14; 	pop    r15
0x8236d:	cmp    BYTE PTR [rax+0x1],cl
0x8236c:	push   rax; 	cmp    BYTE PTR [rax+0x1],cl
0x823e4:	cmp    BYTE PTR [rax+0x1],cl
0x823e3:	push   rbp; 	cmp    BYTE PTR [rax+0x1],cl
0x82408:	pop    rdi
0x82407:	pop    r15
0x82406:	pop    rsi; 	pop    r15
0x82405:	pop    r14; 	pop    r15
0x824fa:	pop    rbp
0x824f9:	pop    rbx; 	pop    rbp
0x824f8:	lock pop rbx; 	pop    rbp
0x824f7:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x825d3:	pop    rbx
0x825d2:	lock pop rbx
0x825d1:	mov    eax,esi; 	pop    rbx
0x82664:	clc    
0x82663:	mov    eax,edi
0x82661:	mov    DWORD PTR [rcx],edi; 	mov    eax,edi
0x82762:	pop    rbx
0x82760:	mov    eax,eax; 	pop    rbx
0x8275f:	mov    eax,r8d; 	pop    rbx
0x827f7:	mov    DWORD PTR [rcx],eax
0x827f5:	jb     0x82817; 	mov    DWORD PTR [rcx],eax
0x828e6:	pop    rbx
0x828e5:	lock pop rbx
0x828e4:	mov    eax,esi; 	pop    rbx
0x8296e:	mov    BYTE PTR [rcx],bh
0x8296d:	mov    BYTE PTR [rcx],dil
0x82a39:	add    BYTE PTR [rax],al
0x82a37:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x82af4:	add    BYTE PTR [rax],al
0x82af2:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x82bdb:	add    BYTE PTR [rax],al
0x82bd9:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x82cad:	add    BYTE PTR [rax],al
0x82cab:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x82d69:	add    BYTE PTR [rax],al
0x82d67:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x82e02:	pop    rbp
0x82e01:	pop    r13
0x82e00:	pop    rsp; 	pop    r13
0x82dff:	pop    r12; 	pop    r13
0x82eb0:	add    BYTE PTR [rax-0x7f],cl
0x82ee9:	pop    rsi
0x82ee8:	pop    r14
0x82ee7:	pop    rbp; 	pop    r14
0x82ee6:	pop    r13; 	pop    r14
0x82fa1:	pop    rbp
0x82fa0:	pop    r13
0x82f9f:	pop    rsp; 	pop    r13
0x82f9e:	pop    r12; 	pop    r13
0x83059:	add    BYTE PTR [rax],al
0x83057:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x8313a:	pop    rdi
0x83139:	pop    r15
0x83138:	pop    rsi; 	pop    r15
0x83137:	pop    r14; 	pop    r15
0x8335d:	mov    DWORD PTR [rax+0x40],ecx
0x8335c:	mov    QWORD PTR [rax+0x40],rcx
0x8339d:	mov    DWORD PTR [rax+0x40],ecx
0x8339c:	mov    QWORD PTR [rax+0x40],rcx
0x833eb:	pop    rbx
0x833e8:	add    esp,0x20; 	pop    rbx
0x83475:	pop    rdi
0x83474:	pop    r15
0x83473:	pop    rsi; 	pop    r15
0x83472:	pop    r14; 	pop    r15
0x836b5:	pop    rbp
0x836b4:	pop    rbx; 	pop    rbp
0x836b3:	rcr    BYTE PTR [rbx+0x5d],1
0x836b2:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x83896:	pop    rbp
0x83895:	pop    rbx; 	pop    rbp
0x83894:	or     BYTE PTR [rbx+0x5d],bl
0x838b9:	pop    rbp
0x838b8:	pop    rbx; 	pop    rbp
0x838b7:	or     BYTE PTR [rbx+0x5d],bl
0x83a43:	pop    rbp
0x83a42:	pop    rbx; 	pop    rbp
0x83a41:	or     BYTE PTR [rbx+0x5d],bl
0x83ab9:	pop    rbp
0x83ab8:	pop    rbx; 	pop    rbp
0x83ab7:	or     BYTE PTR [rbx+0x5d],bl
0x83d87:	pop    rdi
0x83d86:	pop    r15
0x83d85:	pop    rsi; 	pop    r15
0x83d84:	pop    r14; 	pop    r15
0x840a3:	pop    rdi
0x840a2:	pop    r15
0x840a1:	pop    rsi; 	pop    r15
0x840a0:	pop    r14; 	pop    r15
0x8424d:	add    dh,bl
0x8424b:	add    BYTE PTR [rdx+rax*1-0xd],dh
0x8426e:	pop    rsp
0x8426d:	pop    r12
0x8426c:	pop    rbp; 	pop    r12
0x8426b:	pop    rbx; 	pop    rbp; 	pop    r12
0x842a7:	pop    rsp
0x842a6:	pop    r12
0x842a5:	pop    rbp; 	pop    r12
0x842a4:	pop    rbx; 	pop    rbp; 	pop    r12
0x84333:	pop    rsp
0x84332:	pop    r12
0x84331:	pop    rbp; 	pop    r12
0x84330:	pop    rbx; 	pop    rbp; 	pop    r12
0x843af:	pop    rbx
0x843ad:	xor    eax,eax; 	pop    rbx
0x84431:	pop    rbx
0x8442f:	add    BYTE PTR [rax],al; 	pop    rbx
0x84494:	pop    rbp
0x84493:	pop    rbx; 	pop    rbp
0x84492:	sbb    BYTE PTR [rbx+0x5d],bl
0x844f0:	pop    rbp
0x844ef:	pop    rbx; 	pop    rbp
0x844ee:	or     BYTE PTR [rbx+0x5d],bl
0x8457f:	add    al,0x3a
0x8457e:	lea    eax,[rdx+rdi*1]
0x8457d:	repnz lea eax,[rdx+rdi*1]
0x84590:	lea    eax,[rax-0x1]
0x8458f:	lea    eax,[r8-0x1]
0x845e2:	pop    rbp
0x845e1:	pop    rbx; 	pop    rbp
0x845e0:	or     BYTE PTR [rbx+0x5d],bl
0x84695:	sub    eax,edx
0x846ab:	sub    eax,edx
0x847ea:	pop    rbx
0x847e8:	add    BYTE PTR [rax],al; 	pop    rbx
0x847ef:	add    bl,dh
0x847ee:	add    bl,sil
0x8483e:	add    dh,bl
0x8486f:	neg    eax
0x84909:	pop    rdi
0x84908:	pop    r15
0x84907:	pop    rsi; 	pop    r15
0x84906:	pop    r14; 	pop    r15
0x84a42:	pop    rdi
0x84a41:	pop    r15
0x84a40:	pop    rsi; 	pop    r15
0x84a3f:	pop    r14; 	pop    r15
0x84bce:	pop    rdi
0x84bcd:	pop    r15
0x84bcc:	pop    rsi; 	pop    r15
0x84bcb:	pop    r14; 	pop    r15
0x84d3d:	pop    rbp
0x84d3c:	pop    r13
0x84d3b:	pop    rsp; 	pop    r13
0x84d3a:	pop    r12; 	pop    r13
0x84d89:	sar    eax,0x2
0x84d88:	sar    rax,0x2
0x84ed6:	pop    rsi
0x84ed5:	pop    r14
0x84ed4:	pop    rbp; 	pop    r14
0x84ed3:	pop    r13; 	pop    r14
0x84f0f:	add    cl,BYTE PTR [rax-0x77]
0x84f0e:	clc    ; 	add    cl,BYTE PTR [rax-0x77]
0x84f21:	pop    rsi
0x84f20:	pop    r14
0x84f1f:	pop    rbp; 	pop    r14
0x84f1e:	pop    r13; 	pop    r14
0x85004:	dec    DWORD PTR [rax-0x39]
0x8508e:	add    BYTE PTR [rax-0x39],cl
0x8508d:	add    BYTE PTR ss:[rax-0x39],cl
0x85127:	pop    rsp
0x85126:	pop    r12
0x85125:	pop    rbp; 	pop    r12
0x85124:	pop    rbx; 	pop    rbp; 	pop    r12
0x85271:	pop    rdi
0x85270:	pop    r15
0x8526f:	pop    rsi; 	pop    r15
0x8526e:	pop    r14; 	pop    r15
0x859a4:	pop    rdi
0x859a3:	pop    r15
0x859a2:	pop    rsi; 	pop    r15
0x859a1:	pop    r14; 	pop    r15
0x85a3e:	ror    BYTE PTR [rax+0x29],1
0x85a52:	add    BYTE PTR [rax+0x1],cl
0x85b7d:	dec    DWORD PTR [rax+0x29]
0x85c80:	ror    BYTE PTR [rax-0x77],1
0x85e1a:	and    BYTE PTR [rax+0x1],cl
0x85e19:	rex.RXB and BYTE PTR [r8+0x1],r9b
0x85eb3:	adc    BYTE PTR [rax+0x1],cl
0x85eb2:	rex.RXB adc BYTE PTR [r8+0x1],r9b
0x85ed7:	ret    0x2948
0x85ed6:	scas   eax,DWORD PTR es:[rdi]; 	ret    0x2948
0x85ee2:	or     BYTE PTR [rax+0x29],cl
0x85ee1:	rex.RXB or BYTE PTR [r8+0x29],r9b
0x85fb7:	scas   eax,DWORD PTR es:[rdi]
0x85fb4:	add    cl,BYTE PTR [rax+0xf]; 	scas   eax,DWORD PTR es:[rdi]
0x860f0:	pop    rbx
0x860ee:	add    BYTE PTR [rax],al; 	pop    rbx
0x861b9:	pop    rbp
0x861b8:	pop    rbx; 	pop    rbp
0x861b7:	sbb    BYTE PTR [rbx+0x5d],bl
0x863e8:	pop    rdi
0x863e7:	pop    r15
0x863e6:	pop    rsi; 	pop    r15
0x863e5:	pop    r14; 	pop    r15
0x86535:	pop    rbp
0x86534:	pop    rbx; 	pop    rbp
0x86532:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x865cd:	pop    rbp
0x865cc:	pop    rbx; 	pop    rbp
0x865cb:	call   FWORD PTR [rbx+0x5d]
0x8682d:	pop    rsp
0x8682c:	pop    r12
0x8682b:	pop    rbp; 	pop    r12
0x8682a:	pop    rbx; 	pop    rbp; 	pop    r12
0x86849:	pop    rsp
0x86848:	pop    r12
0x86847:	pop    rbp; 	pop    r12
0x86846:	pop    rbx; 	pop    rbp; 	pop    r12
0x86a78:	fmul   DWORD PTR [rax-0x77]
0x86ab9:	pop    rdi
0x86ab8:	pop    r15
0x86ab7:	pop    rsi; 	pop    r15
0x86ab6:	pop    r14; 	pop    r15
0x86ad0:	dec    DWORD PTR [rax+0x29]
0x86bb1:	cmove  eax,ecx
0x86bb0:	cmove  r8,rcx
0x86bc0:	xor    eax,eax
0x86bbf:	nop; 	xor    eax,eax
0x86bbe:	xchg   ax,ax; 	xor    eax,eax
0x86bd4:	mov    eax,DWORD PTR [rax+0x4c]
0x86bd3:	mov    rax,QWORD PTR [rax+0x4c]
0x86ca9:	pop    rdi
0x86ca8:	pop    r15
0x86ca7:	pop    rsi; 	pop    r15
0x86ca6:	pop    r14; 	pop    r15
0x86d85:	pop    rbp
0x86d84:	pop    r13
0x86d83:	pop    rsp; 	pop    r13
0x86d82:	pop    r12; 	pop    r13
0x86e8b:	pop    rdi
0x86e8a:	pop    r15
0x86e89:	pop    rsi; 	pop    r15
0x86e88:	pop    r14; 	pop    r15
0x86f60:	pop    rbp
0x86f5f:	pop    rdi; 	pop    rbp
0x86f5e:	pop    r15; 	pop    rbp
0x86f5d:	pop    rsi; 	pop    r15; 	pop    rbp
0x86fb8:	pop    rsp
0x86fb7:	pop    r12
0x86fb6:	pop    rbp; 	pop    r12
0x86fb5:	pop    rbx; 	pop    rbp; 	pop    r12
0x87225:	pop    rbx
0x87223:	mov    eax,edx; 	pop    rbx
0x87222:	cs mov eax,edx; 	pop    rbx
0x87292:	pop    rbx
0x87290:	mov    eax,edx; 	pop    rbx
0x8733e:	pop    rbx
0x8733c:	xor    eax,eax; 	pop    rbx
0x87412:	add    BYTE PTR [rax-0x77],cl
0x874ba:	pop    rbp
0x874b9:	pop    r13
0x874b8:	pop    rsp; 	pop    r13
0x874b7:	pop    r12; 	pop    r13
0x87598:	add    BYTE PTR [rax],al
0x875a3:	mov    DWORD PTR [rdi],ecx
0x875a2:	iret   ; 	mov    DWORD PTR [rdi],ecx
0x875a1:	loope  0x87572; 	mov    DWORD PTR [rdi],ecx
0x875af:	add    bl,dh
0x875ad:	add    BYTE PTR [rax],al; 	add    bl,dh
0x875ed:	mov    eax,edx
0x875ec:	ret    0xd089
0x875eb:	mov    edx,eax; 	mov    eax,edx
0x87695:	mov    eax,edx
0x87693:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x876dd:	mov    eax,edx
0x876dc:	ret    0xd089
0x876db:	mov    edx,eax; 	mov    eax,edx
0x87785:	mov    eax,edx
0x87783:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x877be:	or     ebx,esi
0x877bc:	sar    BYTE PTR [rax+0x9],0xf3
0x8780a:	mov    eax,edx
0x87809:	mov    eax,r10d
0x87808:	cmp    BYTE PTR [rcx+rcx*4-0x30],al
0x878d5:	pop    rbx
0x878d3:	mov    eax,edx; 	pop    rbx
0x878d2:	mov    eax,r10d; 	pop    rbx
0x87b92:	pop    rsi
0x87b91:	pop    r14
0x87b90:	pop    rbp; 	pop    r14
0x87b8f:	pop    r13; 	pop    r14
0x87d2d:	pop    rbx
0x87d2b:	mov    eax,edx; 	pop    rbx
0x87db5:	pop    rbx
0x87db3:	mov    eax,edx; 	pop    rbx
0x87e88:	pop    rbx
0x87e86:	mov    eax,edx; 	pop    rbx
0x87f29:	pop    rbx
0x87f27:	mov    eax,edx; 	pop    rbx
0x87fff:	pop    rbx
0x87ffd:	mov    eax,edx; 	pop    rbx
0x88007:	add    al,ch
0x88005:	add    BYTE PTR [rax],al; 	add    al,ch
0x880b0:	pop    rbx
0x880ae:	xor    eax,eax; 	pop    rbx
0x88162:	add    BYTE PTR [rax-0x77],cl
0x881f6:	pop    rbp
0x881f5:	pop    r13
0x881f4:	pop    rsp; 	pop    r13
0x881f3:	pop    r12; 	pop    r13
0x8825a:	mov    eax,edx
0x88259:	mov    eax,r10d
0x88258:	cmp    BYTE PTR [rcx+rcx*4-0x30],al
0x88325:	pop    rbx
0x88323:	mov    eax,edx; 	pop    rbx
0x88322:	mov    eax,r10d; 	pop    rbx
0x88471:	pop    rbx
0x8846f:	add    BYTE PTR [rax],al; 	pop    rbx
0x88542:	add    BYTE PTR [rax-0x77],cl
0x885bf:	cmp    BYTE PTR [rax+0x29],cl
0x88610:	pop    rsi
0x8860f:	pop    r14
0x8860e:	pop    rbp; 	pop    r14
0x8860d:	pop    r13; 	pop    r14
0x887b0:	pop    rbp
0x887af:	pop    r13
0x887ae:	pop    rsp; 	pop    r13
0x887ad:	pop    r12; 	pop    r13
0x8887c:	pop    rbp
0x8887b:	pop    r13
0x8887a:	pop    rsp; 	pop    r13
0x88879:	pop    r12; 	pop    r13
0x8890f:	dec    DWORD PTR [rax-0x7f]
0x8890e:	std    ; 	dec    DWORD PTR [rax-0x7f]
0x88947:	pop    rsi
0x88946:	pop    r14
0x88945:	pop    rbp; 	pop    r14
0x88944:	pop    r13; 	pop    r14
0x889f0:	pop    rsi
0x889ef:	pop    r14
0x889ee:	pop    rbp; 	pop    r14
0x889ed:	pop    r13; 	pop    r14
0x88a26:	pop    rsi
0x88a25:	pop    r14
0x88a24:	pop    rbp; 	pop    r14
0x88a23:	pop    r13; 	pop    r14
0x88aa2:	pop    rbp
0x88aa1:	pop    rbx; 	pop    rbp
0x88aa0:	sbb    BYTE PTR [rbx+0x5d],bl
0x88bf5:	pop    rdi
0x88bf4:	pop    r15
0x88bf3:	pop    rsi; 	pop    r15
0x88bf2:	pop    r14; 	pop    r15
0x88d39:	add    BYTE PTR [rax],al
0x88d37:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x88e2d:	pop    rbx
0x88e2b:	mov    eax,edx; 	pop    rbx
0x88f3e:	pop    rbx
0x88f3c:	mov    eax,edx; 	pop    rbx
0x88f3b:	mov    rax,rdx; 	pop    rbx
0x88fb8:	pop    rbx
0x88fb6:	mov    eax,edx; 	pop    rbx
0x88fb5:	mov    rax,rdx; 	pop    rbx
0x8925f:	pop    rsi
0x8925e:	pop    r14
0x8925d:	pop    rbp; 	pop    r14
0x8925c:	pop    r13; 	pop    r14
0x8934a:	sar    eax,0x2
0x89349:	sar    rax,0x2
0x89355:	sub    eax,DWORD PTR [rdi+0x38]
0x89354:	sub    rax,QWORD PTR [rdi+0x38]
0x89378:	setne  al
0x89384:	add    bl,dh
0x89382:	add    BYTE PTR [rax],al; 	add    bl,dh
0x89395:	add    BYTE PTR [rax],al
0x89393:	add    al,0x8; 	add    BYTE PTR [rax],al
0x893a5:	sete   al
0x893b5:	sete   al
0x893c5:	add    BYTE PTR [rax],al
0x893c3:	add    BYTE PTR [rdx],al; 	add    BYTE PTR [rax],al
0x893ff:	pop    rbx
0x893fc:	mov    DWORD PTR [rax+0x20],edx; 	pop    rbx
0x89407:	add    al,ch
0x89405:	add    BYTE PTR [rax],al; 	add    al,ch
0x89424:	pop    rbx
0x89421:	mov    DWORD PTR [rbx+0x28],eax; 	pop    rbx
0x8945a:	sar    eax,0x2
0x89459:	sar    rax,0x2
0x89465:	sub    eax,DWORD PTR [rdi+0x20]
0x89464:	sub    rax,QWORD PTR [rdi+0x20]
0x89800:	pop    rbp
0x897ff:	pop    rdi; 	pop    rbp
0x897fe:	pop    r15; 	pop    rbp
0x897fd:	pop    rsi; 	pop    r15; 	pop    rbp
0x8995d:	xor    eax,eax
0x8995b:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x899bd:	pop    rbx
0x899bb:	xor    eax,eax; 	pop    rbx
0x89a35:	pop    rbp
0x89a34:	pop    r13
0x89a33:	pop    rsp; 	pop    r13
0x89a32:	pop    r12; 	pop    r13
0x89a91:	pop    rbp
0x89a90:	pop    r13
0x89a8f:	pop    rsp; 	pop    r13
0x89a8e:	pop    r12; 	pop    r13
0x89afe:	pop    rsp
0x89afd:	pop    r12
0x89afc:	pop    rbp; 	pop    r12
0x89afb:	pop    rbx; 	pop    rbp; 	pop    r12
0x89b3c:	add    BYTE PTR [rax-0x77],cl
0x89c39:	pop    rsi
0x89c38:	pop    r14
0x89c37:	pop    rbp; 	pop    r14
0x89c36:	pop    r13; 	pop    r14
0x89d8d:	xor    eax,eax
0x89d8b:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x89ddd:	pop    rbx
0x89ddb:	xor    eax,eax; 	pop    rbx
0x89e60:	pop    rsp
0x89e5f:	pop    r12
0x89e5e:	pop    rbp; 	pop    r12
0x89e5d:	pop    rbx; 	pop    rbp; 	pop    r12
0x89e93:	pop    rsp
0x89e92:	pop    r12
0x89e91:	pop    rbp; 	pop    r12
0x89e90:	pop    rbx; 	pop    rbp; 	pop    r12
0x89f16:	pop    rbp
0x89f15:	pop    rbx; 	pop    rbp
0x89f14:	or     BYTE PTR [rbx+0x5d],bl
0x8a068:	pop    rsi
0x8a067:	pop    r14
0x8a066:	pop    rbp; 	pop    r14
0x8a065:	pop    r13; 	pop    r14
0x8a1c7:	add    esp,0x48
0x8a1c6:	add    rsp,0x48
0x8a1e2:	iret   
0x8a1e0:	and    DWORD PTR [rdi],0xffffffcf
0x8a1f6:	loopne 0x8a1f9
0x8a1f5:	and    eax,0x1
0x8a1f4:	add    al,0x83; 	loopne 0x8a1f9
0x8a206:	loopne 0x8a209
0x8a205:	and    eax,0x1
0x8a22a:	mov    BYTE PTR [rcx],bh
0x8a229:	mov    BYTE PTR [rcx],dil
0x8a253:	mov    dh,0x0
0x8a252:	movzx  eax,BYTE PTR [rax]
0x8a251:	or     BYTE PTR [rdi],cl; 	mov    dh,0x0
0x8a28a:	mov    dh,0x0
0x8a289:	movzx  eax,BYTE PTR [rax]
0x8a288:	or     BYTE PTR [rdi],cl; 	mov    dh,0x0
0x8a2de:	pop    rbx
0x8a2dc:	neg    eax; 	pop    rbx
0x8a31a:	mov    BYTE PTR [rcx],bh
0x8a319:	mov    BYTE PTR [rcx],dil
0x8a3e9:	pop    rbx
0x8a3e8:	lock pop rbx
0x8a3e7:	mov    eax,esi; 	pop    rbx
0x8a476:	pop    rsp
0x8a475:	pop    r12
0x8a474:	pop    rbp; 	pop    r12
0x8a473:	pop    rbx; 	pop    rbp; 	pop    r12
0x8a493:	add    BYTE PTR [rax+0x39],cl
0x8a4a7:	pop    rsp
0x8a4a6:	pop    r12
0x8a4a5:	pop    rbp; 	pop    r12
0x8a4a4:	pop    rbx; 	pop    rbp; 	pop    r12
0x8a4b9:	pop    rsp
0x8a4b8:	pop    r12
0x8a4b7:	pop    rbp; 	pop    r12
0x8a4b6:	pop    rbx; 	pop    rbp; 	pop    r12
0x8a51f:	cmp    BYTE PTR [rax+0x39],cl
0x8a51e:	push   rbp; 	cmp    BYTE PTR [rax+0x39],cl
0x8a53f:	pop    rbp
0x8a53e:	pop    r13
0x8a53d:	pop    rsp; 	pop    r13
0x8a53c:	pop    r12; 	pop    r13
0x8a55b:	pop    rbp
0x8a55a:	pop    r13
0x8a559:	pop    rsp; 	pop    r13
0x8a558:	pop    r12; 	pop    r13
0x8a5fa:	pop    rsp
0x8a5f9:	pop    r12
0x8a5f8:	pop    rbp; 	pop    r12
0x8a5f7:	pop    rbx; 	pop    rbp; 	pop    r12
0x8a614:	pop    rsp
0x8a613:	pop    r12
0x8a612:	pop    rbp; 	pop    r12
0x8a611:	pop    rbx; 	pop    rbp; 	pop    r12
0x8a625:	clc    
0x8a624:	mov    eax,edi
0x8a623:	mov    rax,rdi
0x8a622:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x8a6af:	pop    rbp
0x8a6ae:	pop    r13
0x8a6ad:	pop    rsp; 	pop    r13
0x8a6ac:	pop    r12; 	pop    r13
0x8a777:	pop    rbp
0x8a776:	pop    rbx; 	pop    rbp
0x8a775:	sbb    BYTE PTR [rbx+0x5d],bl
0x8a806:	pop    rbp
0x8a805:	pop    rbx; 	pop    rbp
0x8a804:	sbb    BYTE PTR [rbx+0x5d],bl
0x8a87d:	pop    rbx
0x8a87b:	mov    eax,ebx; 	pop    rbx
0x8a87a:	mov    rax,rbx; 	pop    rbx
0x8a8b1:	pop    rbx
0x8a8af:	je     0x8a8b8; 	pop    rbx
0x8a8db:	pop    rbx
0x8a8d9:	add    BYTE PTR [rax],al; 	pop    rbx
0x8a964:	pop    rbx
0x8a962:	xor    eax,eax; 	pop    rbx
0x8a978:	pop    rbx
0x8aa6e:	pop    rdi
0x8aa6d:	pop    r15
0x8aa6c:	pop    rsi; 	pop    r15
0x8aa6b:	pop    r14; 	pop    r15
0x8acd4:	pop    rdi
0x8acd3:	pop    r15
0x8acd2:	pop    rsi; 	pop    r15
0x8acd1:	pop    r14; 	pop    r15
0x8b21c:	pop    rbp
0x8b21b:	pop    r13
0x8b21a:	pop    rsp; 	pop    r13
0x8b219:	pop    r12; 	pop    r13
0x8b2e7:	add    al,ch
0x8b2e5:	add    BYTE PTR [rax],al; 	add    al,ch
0x8b474:	pop    rdi
0x8b473:	pop    r15
0x8b472:	pop    rsi; 	pop    r15
0x8b471:	pop    r14; 	pop    r15
0x8b6f8:	pop    rdi
0x8b6f7:	pop    r15
0x8b6f6:	pop    rsi; 	pop    r15
0x8b6f5:	pop    r14; 	pop    r15
0x8b88c:	pop    rsp
0x8b88b:	pop    r12
0x8b88a:	pop    rbp; 	pop    r12
0x8b889:	pop    rbx; 	pop    rbp; 	pop    r12
0x8b8a8:	pop    rsp
0x8b8a7:	pop    r12
0x8b8a6:	pop    rbp; 	pop    r12
0x8b8a5:	pop    rbx; 	pop    rbp; 	pop    r12
0x8b9b3:	pop    rdi
0x8b9b2:	pop    r15
0x8b9b1:	pop    rsi; 	pop    r15
0x8b9b0:	pop    r14; 	pop    r15
0x8bd3a:	pop    rbp
0x8bd39:	pop    r13
0x8bd38:	pop    rsp; 	pop    r13
0x8bd37:	pop    r12; 	pop    r13
0x8beb0:	pop    rbp
0x8beaf:	pop    r13
0x8beae:	pop    rsp; 	pop    r13
0x8bead:	pop    r12; 	pop    r13
0x8c13a:	pop    rbp
0x8c139:	pop    rbx; 	pop    rbp
0x8c138:	or     BYTE PTR [rbx+0x5d],bl
0x8c185:	pop    rbp
0x8c184:	pop    rbx; 	pop    rbp
0x8c183:	or     BYTE PTR [rbx+0x5d],bl
0x8c2c7:	pop    rsp
0x8c2c6:	pop    r12
0x8c2c5:	pop    rbp; 	pop    r12
0x8c2c4:	pop    rbx; 	pop    rbp; 	pop    r12
0x8c46a:	pop    rsp
0x8c469:	pop    r12
0x8c468:	pop    rbp; 	pop    r12
0x8c467:	pop    rbx; 	pop    rbp; 	pop    r12
0x8c51e:	pop    rsi
0x8c51d:	pop    r14
0x8c51c:	pop    rbp; 	pop    r14
0x8c51b:	pop    r13; 	pop    r14
0x8ce69:	pop    rbp
0x8ce68:	pop    r13
0x8ce67:	pop    rsp; 	pop    r13
0x8ce66:	pop    r12; 	pop    r13
0x8ce82:	pop    rbp
0x8ce81:	pop    r13
0x8ce80:	pop    rsp; 	pop    r13
0x8ce7f:	pop    r12; 	pop    r13
0x8ce87:	add    al,ch
0x8ce86:	add    al,bpl
0x8ce90:	xor    eax,eax
0x8ce8f:	nop; 	xor    eax,eax
0x8ce8e:	scas   eax,DWORD PTR es:[rdi]; 	nop; 	xor    eax,eax
0x8cea6:	or     ebx,esi
0x8cfa6:	pop    rdi
0x8cfa5:	pop    r15
0x8cfa4:	pop    rsi; 	pop    r15
0x8cfa3:	pop    r14; 	pop    r15
0x8d176:	pop    rsi
0x8d175:	pop    r14
0x8d174:	pop    rbp; 	pop    r14
0x8d173:	pop    r13; 	pop    r14
0x8d181:	mov    dh,0x2
0x8d180:	movzx  eax,BYTE PTR [rdx]
0x8d17f:	add    BYTE PTR [rdi],cl; 	mov    dh,0x2
0x8d1af:	pop    rsi
0x8d1ae:	pop    r14
0x8d1ad:	pop    rbp; 	pop    r14
0x8d1ac:	pop    r13; 	pop    r14
0x8d367:	pop    rsp
0x8d366:	pop    r12
0x8d365:	pop    rbp; 	pop    r12
0x8d364:	pop    rbx; 	pop    rbp; 	pop    r12
0x8d56d:	add    bl,dh
0x8d56b:	add    BYTE PTR [rax],al; 	add    bl,dh
0x8d7f2:	pop    rbp
0x8d7f1:	pop    rbx; 	pop    rbp
0x8d7f0:	cmp    BYTE PTR [rbx+0x5d],bl
0x8daef:	pop    rbp
0x8daee:	pop    rbx; 	pop    rbp
0x8daed:	cmp    BYTE PTR [rbx+0x5d],bl
0x8dbfa:	pop    rdi
0x8dbf9:	pop    r15
0x8dbf8:	pop    rsi; 	pop    r15
0x8dbf7:	pop    r14; 	pop    r15
0x8dd77:	mov    DWORD PTR [rdi+0x8],eax
0x8dd76:	mov    QWORD PTR [rdi+0x8],rax
0x8dda7:	mov    DWORD PTR [rdi+0x8],eax
0x8dda6:	mov    QWORD PTR [rdi+0x8],rax
0x8de2b:	pop    rbp
0x8de2a:	pop    rbx; 	pop    rbp
0x8de29:	or     BYTE PTR [rbx+0x5d],bl
0x8de82:	pop    rbx
0x8de80:	add    BYTE PTR [rax],al; 	pop    rbx
0x8dfb0:	pop    rbp
0x8dfaf:	pop    rbx; 	pop    rbp
0x8dfae:	or     BYTE PTR [rbx+0x5d],bl
0x8e188:	pop    rbp
0x8e187:	pop    rbx; 	pop    rbp
0x8e186:	or     BYTE PTR [rbx+0x5d],bl
0x8e2d2:	pop    rbx
0x8e2cf:	add    esp,0x20; 	pop    rbx
0x8e306:	or     ebx,esi
0x8e304:	add    BYTE PTR [rcx+rcx*1-0xd],dh
0x8e345:	pop    rsp
0x8e344:	pop    r12
0x8e343:	pop    rbp; 	pop    r12
0x8e342:	pop    rbx; 	pop    rbp; 	pop    r12
0x8e40b:	pop    rbp
0x8e40a:	pop    rbx; 	pop    rbp
0x8e409:	or     BYTE PTR [rbx+0x5d],bl
0x8e523:	pop    rdi
0x8e522:	pop    r15
0x8e521:	pop    rsi; 	pop    r15
0x8e520:	pop    r14; 	pop    r15
0x8e528:	xor    eax,eax
0x8e6dc:	pop    rdi
0x8e6db:	pop    r15
0x8e6da:	pop    rsi; 	pop    r15
0x8e6d9:	pop    r14; 	pop    r15
0x8e91b:	pop    rbp
0x8e91a:	pop    r13
0x8e919:	pop    rsp; 	pop    r13
0x8e918:	pop    r12; 	pop    r13
0x8ea4a:	pop    rsp
0x8ea49:	pop    r12
0x8ea48:	pop    rbp; 	pop    r12
0x8ea47:	pop    rbx; 	pop    rbp; 	pop    r12
0x8eb4b:	add    bl,dh
0x8eb49:	add    BYTE PTR [rax],al; 	add    bl,dh
0x8ebf4:	pop    rbp
0x8ebf3:	pop    r13
0x8ebf2:	pop    rsp; 	pop    r13
0x8ebf1:	pop    r12; 	pop    r13
0x8ec50:	xor    eax,eax
0x8ec4e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x8ecd4:	pop    rbp
0x8ecd3:	pop    rbx; 	pop    rbp
0x8ecd2:	cmp    BYTE PTR [rbx+0x5d],bl
0x8efef:	pop    rbp
0x8efee:	pop    rbx; 	pop    rbp
0x8efed:	sbb    BYTE PTR [rbx+0x5d],bl
0x8f047:	pop    rbp
0x8f046:	pop    rbx; 	pop    rbp
0x8f045:	or     BYTE PTR [rbx+0x5d],bl
0x8f088:	pop    rbp
0x8f087:	pop    rbx; 	pop    rbp
0x8f086:	or     BYTE PTR [rbx+0x5d],bl
0x8f0cf:	add    al,0x3a
0x8f0ce:	lea    eax,[rdx+rdi*1]
0x8f0cd:	repnz lea eax,[rdx+rdi*1]
0x8f0dc:	lea    eax,[rax-0x1]
0x8f0db:	lea    eax,[r8-0x1]
0x8f398:	pop    rdi
0x8f397:	pop    r15
0x8f396:	pop    rsi; 	pop    r15
0x8f395:	pop    r14; 	pop    r15
0x8f68b:	pop    rdi
0x8f68a:	pop    r15
0x8f689:	pop    rsi; 	pop    r15
0x8f688:	pop    r14; 	pop    r15
0x8f9d9:	pop    rdi
0x8f9d8:	pop    r15
0x8f9d7:	pop    rsi; 	pop    r15
0x8f9d6:	pop    r14; 	pop    r15
0x8fa43:	pop    rsp
0x8fa42:	pop    r12
0x8fa41:	pop    rbp; 	pop    r12
0x8fa40:	pop    rbx; 	pop    rbp; 	pop    r12
0x8fb18:	mov    DWORD PTR [rdx],eax
0x8fb17:	mov    QWORD PTR [rdx],rax
0x8fb23:	sub    eax,DWORD PTR [rsi+0x10]
0x8fb4b:	sub    eax,edx
0x8fb56:	sub    eax,edx
0x8fb9b:	pop    rbp
0x8fb9a:	pop    rbx; 	pop    rbp
0x8fb99:	or     BYTE PTR [rbx+0x5d],bl
0x8fbc3:	pop    rbp
0x8fbc2:	pop    rbx; 	pop    rbp
0x8fbc0:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x8fc24:	pop    rbx
0x8fc22:	add    BYTE PTR [rax],al; 	pop    rbx
0x8fc3f:	add    bl,dh
0x8fc9d:	pop    rdi
0x8fc9c:	pop    r15
0x8fc9b:	pop    rsi; 	pop    r15
0x8fc9a:	pop    r14; 	pop    r15
0x8fdc0:	xor    eax,eax
0x8fdbe:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x8fddf:	add    bl,dh
0x8fddd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x8fe00:	xor    eax,eax
0x8fdfe:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x8fe11:	mov    eax,DWORD PTR [rdi+0x68]
0x8fe10:	mov    rax,QWORD PTR [rdi+0x68]
0x8fe22:	clc    
0x8fe21:	mov    eax,edi
0x8fe20:	mov    rax,rdi
0x8fe1f:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x8fe8d:	add    BYTE PTR [rcx],al
0x8fed9:	add    bl,dh
0x8fed7:	add    BYTE PTR [rax],al; 	add    bl,dh
0x8fef4:	add    BYTE PTR [rax],al
0x8fef2:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x8ff30:	mov    dh,0x0
0x8ff2f:	movzx  eax,BYTE PTR [rax]
0x8ff2e:	and    DWORD PTR [rdi],ecx; 	mov    dh,0x0
0x8ff6f:	neg    eax
0x900cc:	pop    rdi
0x900cb:	pop    r15
0x900ca:	pop    rsi; 	pop    r15
0x900c9:	pop    r14; 	pop    r15
0x90229:	pop    rdi
0x90228:	pop    r15
0x90227:	pop    rsi; 	pop    r15
0x90226:	pop    r14; 	pop    r15
0x90396:	pop    rbp
0x90395:	pop    r13
0x90394:	pop    rsp; 	pop    r13
0x90393:	pop    r12; 	pop    r13
0x9040b:	pop    rbx
0x90409:	or     ecx,DWORD PTR [rax]; 	pop    rbx
0x90408:	or     DWORD PTR [rbx],0x8; 	pop    rbx
0x9041e:	sub    eax,DWORD PTR [rdi+0x18]
0x9041d:	sub    rax,QWORD PTR [rdi+0x18]
0x9055a:	pop    rsi
0x90559:	pop    r14
0x90558:	pop    rbp; 	pop    r14
0x90557:	pop    r13; 	pop    r14
0x90599:	pop    rsi
0x90598:	pop    r14
0x90597:	pop    rbp; 	pop    r14
0x90596:	pop    r13; 	pop    r14
0x90738:	add    bl,dh
0x90760:	xor    eax,eax
0x907a7:	adc    BYTE PTR [rcx-0x7d],al
0x907a6:	adc    BYTE PTR [rcx-0x7d],al
0x90831:	sbb    BYTE PTR [rax+0x39],cl
0x90830:	push   rdi; 	sbb    BYTE PTR [rax+0x39],cl
0x90858:	pop    rbp
0x90857:	pop    rbx; 	pop    rbp
0x90856:	adc    BYTE PTR [rbx+0x5d],bl
0x90855:	rex.RXB adc BYTE PTR [r11+0x5d],r11b
0x908bc:	add    bl,dh
0x90a88:	pop    rsi
0x90a87:	pop    r14
0x90a86:	pop    rbp; 	pop    r14
0x90a85:	pop    r13; 	pop    r14
0x90c16:	dec    DWORD PTR [rax-0x77]
0x90c15:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x90c5b:	pop    rbp
0x90c5a:	pop    r13
0x90c59:	pop    rsp; 	pop    r13
0x90c58:	pop    r12; 	pop    r13
0x90d2c:	dec    DWORD PTR [rax-0x77]
0x90d2b:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x90d78:	add    BYTE PTR [rax],al
0x90d76:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x90dcd:	adc    bl,dh
0x90ff6:	ror    BYTE PTR [rdi],0x84
0x90ffc:	add    BYTE PTR [rax+0x1],cl
0x912d7:	pop    rdi
0x912d6:	pop    r15
0x912d5:	pop    rsi; 	pop    r15
0x912d4:	pop    r14; 	pop    r15
0x913bf:	pop    rbp
0x913be:	pop    r13
0x913bd:	pop    rsp; 	pop    r13
0x913bc:	pop    r12; 	pop    r13
0x913d3:	pop    rbp
0x913d2:	pop    r13
0x913d1:	pop    rsp; 	pop    r13
0x913d0:	pop    r12; 	pop    r13
0x91677:	pop    rbx
0x91676:	push   rax; 	pop    rbx
0x91674:	add    esp,0x50; 	pop    rbx
0x916c7:	sar    BYTE PTR [rax+0x6],0xf3
0x91880:	pop    rbp
0x9187f:	pop    rbx; 	pop    rbp
0x9187e:	rcr    BYTE PTR [rbx+0x5d],1
0x9187d:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x91ec8:	add    esp,0x8
0x91ec7:	add    rsp,0x8
0x91ed1:	mov    eax,edx
0x91ed0:	mov    rax,rdx
0x92047:	pop    rbp
0x92046:	pop    rbx; 	pop    rbp
0x92045:	or     BYTE PTR [rbx+0x5d],bl
0x92111:	add    esp,0x8
0x92110:	add    rsp,0x8
0x92314:	pop    rsp
0x92313:	pop    r12
0x92312:	pop    rbp; 	pop    r12
0x92311:	clc    ; 	pop    rbp; 	pop    r12
0x9237f:	add    BYTE PTR [rax+0x1],cl
0x92389:	add    BYTE PTR [rax+0x39],cl
0x9253f:	fmul   DWORD PTR [rax+0x39]
0x92548:	add    dh,dh
0x92546:	add    al,BYTE PTR [rax]; 	add    dh,dh
0x925b3:	add    BYTE PTR [rax+0x39],cl
0x927a6:	pop    rsi
0x927a5:	pop    r14
0x927a4:	pop    rbp; 	pop    r14
0x927a3:	pop    r13; 	pop    r14
0x9284f:	add    bl,dh
0x9284e:	add    bl,sil
0x92d39:	pop    rdi
0x92d38:	pop    r15
0x92d37:	pop    rsi; 	pop    r15
0x92d36:	pop    r14; 	pop    r15
0x93201:	add    BYTE PTR [rax+0x39],cl
0x93a1e:	dec    DWORD PTR [rcx-0x7b]
0x93ae8:	add    BYTE PTR [rax+0x39],cl
0x93c7c:	pop    rdi
0x93c7b:	pop    r15
0x93c7a:	pop    rsi; 	pop    r15
0x93c79:	pop    r14; 	pop    r15
0x9443d:	pop    rdi
0x9443c:	pop    r15
0x9443b:	pop    rsi; 	pop    r15
0x9443a:	pop    r14; 	pop    r15
0x9464e:	add    BYTE PTR [rcx-0x7d],cl
0x9497a:	add    BYTE PTR [rax-0x17],dl
0x95411:	add    DWORD PTR [rax+0x39],ecx
0x95443:	ror    BYTE PTR [rax+0x39],1
0x9544f:	pop    rbx
0x9544e:	lock pop rbx
0x9544d:	mov    eax,esi; 	pop    rbx
0x9544c:	mov    rax,rsi; 	pop    rbx
0x95481:	mov    eax,esi
0x95480:	mov    rax,rsi
0x9556a:	pop    rdi
0x95569:	pop    r15
0x95568:	pop    rsi; 	pop    r15
0x95567:	pop    r14; 	pop    r15
0x957b0:	pop    rsi
0x957af:	pop    r14
0x957ae:	pop    rbp; 	pop    r14
0x957ad:	pop    r13; 	pop    r14
0x95e6a:	pop    rdi
0x95e69:	pop    r15
0x95e68:	pop    rsi; 	pop    r15
0x95e67:	pop    r14; 	pop    r15
0x96526:	pop    rbx
0x96525:	stos   DWORD PTR es:[rdi],eax; 	pop    rbx
0x96524:	stos   QWORD PTR es:[rdi],rax; 	pop    rbx
0x96523:	rep stos QWORD PTR es:[rdi],rax; 	pop    rbx
0x967fa:	add    DWORD PTR [rax+0x39],ecx
0x96830:	ror    BYTE PTR [rax+0x39],1
0x9684a:	pop    rdi
0x96849:	pop    r15
0x96848:	pop    rsi; 	pop    r15
0x96847:	pop    r14; 	pop    r15
0x96a85:	add    BYTE PTR [rax+0x39],cl
0x96c0a:	pop    rbp
0x96c09:	pop    rbx; 	pop    rbp
0x96c08:	rcr    BYTE PTR [rbx+0x5d],1
0x96c07:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x96c8a:	pop    rbp
0x96c89:	pop    rbx; 	pop    rbp
0x96c88:	rcr    BYTE PTR [rbx+0x5d],1
0x96c87:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x96f43:	add    bl,dh
0x96f41:	add    BYTE PTR [rax],al; 	add    bl,dh
0x96fef:	add    bl,dh
0x96fed:	add    BYTE PTR [rax],al; 	add    bl,dh
0x97056:	mov    DWORD PTR [rax],edi
0x97055:	mov    QWORD PTR [rax],rdi
0x97068:	add    BYTE PTR [rax],al
0x97066:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x9721a:	pop    rbp
0x97219:	pop    rbx; 	pop    rbp
0x97218:	rcr    BYTE PTR [rbx+0x5d],1
0x97217:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x9726a:	pop    rbp
0x97269:	pop    rbx; 	pop    rbp
0x97268:	rcr    BYTE PTR [rbx+0x5d],1
0x97267:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x9771e:	pop    rsi
0x9771d:	pop    r14
0x9771c:	pop    rbp; 	pop    r14
0x9771b:	pop    r13; 	pop    r14
0x97ac1:	pop    rdi
0x97ac0:	pop    r15
0x97abf:	pop    rsi; 	pop    r15
0x97abe:	pop    r14; 	pop    r15
0x98041:	add    BYTE PTR [rax+0x39],cl
0x981bf:	or     BYTE PTR [rcx-0x77],cl
0x981be:	or     BYTE PTR [rcx-0x77],cl
0x988fb:	stc    
0x989ba:	pop    rdi
0x989b9:	pop    r15
0x989b8:	pop    rsi; 	pop    r15
0x989b7:	pop    r14; 	pop    r15
0x98e2e:	pop    rdi
0x98e2d:	pop    r15
0x98e2c:	pop    rsi; 	pop    r15
0x98e2b:	pop    r14; 	pop    r15
0x9938a:	pop    rsi
0x99389:	pop    r14
0x99388:	pop    rbp; 	pop    r14
0x99387:	pop    r13; 	pop    r14
0x9989a:	pop    rsi
0x99899:	pop    r14
0x99898:	pop    rbp; 	pop    r14
0x99897:	pop    r13; 	pop    r14
0x99d27:	pop    rsi
0x99d26:	pop    r14
0x99d25:	pop    rbp; 	pop    r14
0x99d24:	pop    r13; 	pop    r14
0x9a025:	dec    DWORD PTR [rax-0x77]
0x9a0b6:	ror    BYTE PTR [rdi],0x84
0x9a0ea:	pop    rsi
0x9a0e9:	pop    r14
0x9a0e8:	pop    rbp; 	pop    r14
0x9a0e7:	pop    r13; 	pop    r14
0x9a51e:	jns    0x9a4a3
0x9a58f:	pop    rdi
0x9a58e:	pop    r15
0x9a58d:	pop    rsi; 	pop    r15
0x9a58c:	pop    r14; 	pop    r15
0x9a7ca:	clc    
0x9a7c9:	rex.X clc 
0x9a7c8:	lea    eax,[rdx-0x8]
0x9a7c7:	lea    rax,[rdx-0x8]
0x9a7da:	cmovne eax,ecx
0x9a7d9:	cmovne rax,rcx
0x9a7e1:	lea    eax,[rdx-0x10]
0x9a7e0:	lea    rax,[rdx-0x10]
0x9a7e8:	xor    eax,eax
0x9a852:	sub    eax,0x10
0x9a851:	sub    rax,0x10
0x9a97d:	pop    rsi
0x9a97c:	pop    r14
0x9a97b:	pop    rbp; 	pop    r14
0x9a97a:	pop    r13; 	pop    r14
0x9ab69:	pop    rdi
0x9ab68:	pop    r15
0x9ab67:	pop    rsi; 	pop    r15
0x9ab66:	pop    r14; 	pop    r15
0x9abc7:	add    al,ch
0x9abc5:	add    BYTE PTR [rax],al; 	add    al,ch
0x9ac64:	pop    rbp
0x9ac63:	pop    rbx; 	pop    rbp
0x9ac62:	rcr    BYTE PTR [rbx+0x5d],1
0x9ac61:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x9accf:	or     ecx,DWORD PTR [rax+0x63]
0x9aef3:	add    BYTE PTR [rax],al
0x9af1f:	pop    rbp
0x9af1e:	pop    r13
0x9af1d:	pop    rsp; 	pop    r13
0x9af1c:	pop    r12; 	pop    r13
0x9b173:	add    BYTE PTR [rax],al
0x9b1a7:	add    esp,0x8
0x9b1a6:	add    rsp,0x8
0x9b276:	ror    BYTE PTR [rdi],0x85
0x9b337:	pop    rsi
0x9b336:	pop    r14
0x9b335:	pop    rbp; 	pop    r14
0x9b334:	pop    r13; 	pop    r14
0x9b437:	add    BYTE PTR [rax-0x77],cl
0x9b4df:	add    BYTE PTR [rax+0x1],cl
0x9b555:	pop    rdi
0x9b554:	pop    r15
0x9b553:	pop    rsi; 	pop    r15
0x9b552:	pop    r14; 	pop    r15
0x9b657:	add    BYTE PTR [rax-0x77],cl
0x9b768:	pop    rdi
0x9b767:	pop    r15
0x9b766:	pop    rsi; 	pop    r15
0x9b765:	pop    r14; 	pop    r15
0x9bacd:	pop    rdi
0x9bacc:	pop    r15
0x9bacb:	pop    rsi; 	pop    r15
0x9baca:	pop    r14; 	pop    r15
0x9bd50:	pop    rbp
0x9bd4f:	pop    r13
0x9bd4e:	pop    rsp; 	pop    r13
0x9bd4d:	pop    r12; 	pop    r13
0x9bdcf:	add    BYTE PTR [rax-0x77],cl
0x9be1d:	xchg   esp,eax
0x9be1b:	fisttp DWORD PTR [rdi]; 	xchg   esp,eax
0x9be3e:	pop    rbx
0x9be3b:	add    esp,0x10; 	pop    rbx
0x9bf52:	add    esp,0x18
0x9bf51:	add    rsp,0x18
0x9c063:	pop    rbx
0x9c061:	mov    eax,ebx; 	pop    rbx
0x9c19d:	pop    rbp
0x9c19c:	pop    rdi; 	pop    rbp
0x9c19b:	pop    r15; 	pop    rbp
0x9c19a:	pop    rsi; 	pop    r15; 	pop    rbp
0x9c3b5:	pop    rdi
0x9c3b4:	pop    r15
0x9c3b3:	pop    rsi; 	pop    r15
0x9c3b2:	pop    r14; 	pop    r15
0x9c58c:	pop    rsp
0x9c58b:	pop    r12
0x9c58a:	pop    rbp; 	pop    r12
0x9c589:	pop    rbx; 	pop    rbp; 	pop    r12
0x9c770:	pop    rsi
0x9c76f:	pop    r14
0x9c76e:	pop    rbp; 	pop    r14
0x9c76d:	pop    r13; 	pop    r14
0x9c8f3:	pop    rdi
0x9c8f2:	pop    r15
0x9c8f1:	pop    rsi; 	pop    r15
0x9c8f0:	pop    r14; 	pop    r15
0x9c91f:	add    bl,dh
0x9c91d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x9c937:	add    BYTE PTR [rsi+rax*1-0xd],dh
0x9ca3d:	pop    rbp
0x9ca3c:	pop    rbx; 	pop    rbp
0x9ca3b:	or     BYTE PTR [rbx+0x5d],bl
0x9cb30:	pop    rbx
0x9cb2f:	nop; 	pop    rbx
0x9cb2e:	xchg   ax,ax; 	pop    rbx
0x9cb2d:	jmp    QWORD PTR [rsi-0x70]; 	pop    rbx
0x9cc0a:	pop    rbp
0x9cc09:	pop    r13
0x9cc08:	pop    rsp; 	pop    r13
0x9cc07:	pop    r12; 	pop    r13
0x9ccc5:	pop    rbp
0x9ccc4:	pop    r13
0x9ccc3:	pop    rsp; 	pop    r13
0x9ccc2:	pop    r12; 	pop    r13
0x9cdc0:	xchg   ebx,eax
0x9cf2d:	pop    rsi
0x9cf2c:	pop    r14
0x9cf2b:	pop    rbp; 	pop    r14
0x9cf2a:	pop    r13; 	pop    r14
0x9cfc3:	xor    eax,eax
0x9cfc2:	in     eax,dx; 	xor    eax,eax
0x9cfc1:	jne    0x9cfb0; 	xor    eax,eax
0x9cfd3:	add    BYTE PTR [rax],al
0x9cfd1:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x9d03b:	pop    rsp
0x9d03a:	pop    r12
0x9d039:	pop    rbp; 	pop    r12
0x9d038:	pop    rbx; 	pop    rbp; 	pop    r12
0x9d053:	pop    rsp
0x9d052:	pop    r12
0x9d051:	pop    rbp; 	pop    r12
0x9d050:	pop    rbx; 	pop    rbp; 	pop    r12
0x9d0ae:	xor    eax,eax
0x9d0ac:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x9d108:	pop    rsp
0x9d107:	pop    r12
0x9d106:	pop    rbp; 	pop    r12
0x9d105:	pop    rbx; 	pop    rbp; 	pop    r12
0x9d132:	pop    rsp
0x9d131:	pop    r12
0x9d130:	pop    rbp; 	pop    r12
0x9d12f:	pop    rbx; 	pop    rbp; 	pop    r12
0x9d18b:	pop    rsi
0x9d18a:	pop    r14
0x9d189:	pop    rbp; 	pop    r14
0x9d188:	pop    r13; 	pop    r14
0x9d24a:	pop    rsp
0x9d249:	pop    r12
0x9d248:	pop    rbp; 	pop    r12
0x9d247:	pop    rbx; 	pop    rbp; 	pop    r12
0x9d28f:	pop    rsp
0x9d28e:	pop    r12
0x9d28d:	pop    rbp; 	pop    r12
0x9d28c:	pop    rbx; 	pop    rbp; 	pop    r12
0x9d2a6:	pop    rsp
0x9d2a5:	pop    r12
0x9d2a4:	pop    rbp; 	pop    r12
0x9d2a3:	pop    rbx; 	pop    rbp; 	pop    r12
0x9d343:	pop    rbp
0x9d342:	pop    rbx; 	pop    rbp
0x9d341:	add    BYTE PTR [rbx+0x5d],bl
0x9d340:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x9d36d:	pop    rbp
0x9d36c:	pop    rbx; 	pop    rbp
0x9d36a:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x9d387:	pop    rbp
0x9d386:	pop    rbx; 	pop    rbp
0x9d384:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x9d43a:	pop    rdi
0x9d439:	pop    r15
0x9d438:	pop    rsi; 	pop    r15
0x9d437:	pop    r14; 	pop    r15
0x9d497:	pop    rdi
0x9d496:	pop    r15
0x9d495:	pop    rsi; 	pop    r15
0x9d494:	pop    r14; 	pop    r15
0x9d4a0:	xor    eax,eax
0x9d49e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x9d500:	pop    rbp
0x9d4ff:	pop    rbx; 	pop    rbp
0x9d4fe:	sbb    BYTE PTR [rbx+0x5d],bl
0x9d50e:	add    BYTE PTR [rax],al
0x9d50c:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x9d572:	xor    eax,eax
0x9d570:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x9d5c6:	pop    rsi
0x9d5c5:	pop    r14
0x9d5c4:	pop    rbp; 	pop    r14
0x9d5c3:	pop    r13; 	pop    r14
0x9d611:	mov    DWORD PTR [rdi],esi
0x9d610:	mov    QWORD PTR [rdi],rsi
0x9d60f:	ror    BYTE PTR [rax-0x77],0x37
0x9d625:	mov    DWORD PTR [rdi],esi
0x9d624:	mov    QWORD PTR [rdi],rsi
0x9d623:	ror    BYTE PTR [rax-0x77],0x37
0x9d675:	pop    rbp
0x9d674:	pop    rbx; 	pop    rbp
0x9d673:	sbb    BYTE PTR [rbx+0x5d],bl
0x9d69f:	pop    rbp
0x9d69e:	pop    rbx; 	pop    rbp
0x9d69d:	sbb    BYTE PTR [rbx+0x5d],bl
0x9d709:	pop    rbx
0x9d706:	add    esp,0x10; 	pop    rbx
0x9d88a:	cmovne eax,edx
0x9d889:	cmovne rax,rdx
0x9d95a:	movsx  eax,dl
0x9d964:	add    bl,dh
0x9d962:	add    BYTE PTR [rax],al; 	add    bl,dh
0x9d998:	cmovbe eax,edx
0x9d9df:	pop    rbp
0x9d9de:	pop    rbx; 	pop    rbp
0x9d9dc:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x9da01:	add    DWORD PTR [rax-0x77],ecx
0x9da37:	pop    rbp
0x9da36:	pop    rbx; 	pop    rbp
0x9da34:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x9da57:	pop    rsp
0x9da56:	pop    r12
0x9da55:	pop    rbp; 	pop    r12
0x9da54:	pop    rbx; 	pop    rbp; 	pop    r12
0x9db49:	pop    rdi
0x9db48:	pop    r15
0x9db47:	pop    rsi; 	pop    r15
0x9db46:	pop    r14; 	pop    r15
0x9dba0:	dec    BYTE PTR [rax-0x77]
0x9dc96:	cmove  eax,edx
0x9dc95:	cmove  rax,rdx
0x9dcc6:	cmove  eax,edx
0x9dcc5:	cmove  rax,rdx
0x9dd28:	hlt    
0x9dd96:	cmove  eax,edx
0x9dd95:	cmove  rax,rdx
0x9ddba:	cmovne eax,edx
0x9ddb9:	cmovne rax,rdx
0x9de05:	add    esp,0x8
0x9de04:	add    rsp,0x8
0x9de1c:	xor    al,0x0
0x9de1b:	sti    ; 	xor    al,0x0
0x9de59:	add    esp,0x8
0x9de58:	add    rsp,0x8
0x9df09:	pop    rbp
0x9df08:	pop    rbx; 	pop    rbp
0x9df06:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x9df16:	add    BYTE PTR [rax+0x63],cl
0x9df56:	add    BYTE PTR [rcx],ch
0x9df54:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rcx],ch
0x9e06a:	cmovne eax,edx
0x9e069:	cmovne rax,rdx
0x9e535:	pop    rdi
0x9e534:	pop    r15
0x9e533:	pop    rsi; 	pop    r15
0x9e532:	pop    r14; 	pop    r15
0x9e5d7:	add    DWORD PTR [rax-0x7d],ecx
0x9e67b:	pop    rdi
0x9e67a:	pop    r15
0x9e679:	pop    rsi; 	pop    r15
0x9e678:	pop    r14; 	pop    r15
0x9e95c:	or     ecx,DWORD PTR [rax-0x7d]
0x9eb3d:	cmove  eax,edx
0x9eb3c:	cmove  rax,rdx
0x9eb81:	dec    DWORD PTR [rax+0x1]
0x9eb80:	clc    ; 	dec    DWORD PTR [rax+0x1]
0x9ebae:	pop    rsp
0x9ebad:	pop    r12
0x9ebac:	pop    rbp; 	pop    r12
0x9ebab:	pop    rbx; 	pop    rbp; 	pop    r12
0x9ebc4:	pop    rsp
0x9ebc3:	pop    r12
0x9ebc2:	pop    rbp; 	pop    r12
0x9ebc1:	pop    rbx; 	pop    rbp; 	pop    r12
0x9ec06:	cmove  eax,edx
0x9ec05:	cmove  rax,rdx
0x9ec69:	add    BYTE PTR [rdx+rax*8-0xd],dh
0x9ecc7:	cmovne eax,edx
0x9ecc6:	cmovne rax,rdx
0x9ed15:	cmovne eax,edx
0x9ed14:	cmovne rax,rdx
0x9ed36:	cmovne eax,edx
0x9ed35:	cmovne rax,rdx
0x9ed8b:	cmovne eax,edx
0x9ed8a:	cmovne rax,rdx
0x9edd5:	cmovne eax,edx
0x9edd4:	cmovne rax,rdx
0x9ee37:	cmovne eax,edx
0x9ee36:	cmovne rax,rdx
0x9ee85:	cmovne eax,edx
0x9ee84:	cmovne rax,rdx
0x9eea6:	cmovne eax,edx
0x9eea5:	cmovne rax,rdx
0x9eecb:	add    eax,0x1
0x9eedd:	add    eax,0x1
0x9f0db:	pop    rsp
0x9f0da:	pop    r12
0x9f0d9:	pop    rbp; 	pop    r12
0x9f0d8:	rcr    BYTE PTR [rbp+0x41],0x5c
0x9f12b:	icebp  
0x9f137:	cmovne eax,edx
0x9f136:	cmovne rax,rdx
0x9f185:	cmovne eax,edx
0x9f184:	cmovne rax,rdx
0x9f1a6:	cmovne eax,edx
0x9f1a5:	cmovne rax,rdx
0x9f1e1:	pop    rbp
0x9f1e0:	pop    rbx; 	pop    rbp
0x9f1df:	fcomp  DWORD PTR [rbx+0x5d]
0x9f1de:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x9f1fb:	pop    rbp
0x9f1fa:	pop    rbx; 	pop    rbp
0x9f1f9:	fcomp  DWORD PTR [rbx+0x5d]
0x9f1f8:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x9f272:	ror    BYTE PTR [rcx-0x39],cl
0x9f2b2:	ror    BYTE PTR [rcx-0x7d],1
0x9f2ba:	add    DWORD PTR [rcx+0x39],ecx
0x9f2c9:	pop    rsp
0x9f2c8:	pop    r12
0x9f2c7:	pop    rbp; 	pop    r12
0x9f2c6:	pop    rbx; 	pop    rbp; 	pop    r12
0x9f785:	pop    rdi
0x9f784:	pop    r15
0x9f783:	pop    rsi; 	pop    r15
0x9f782:	pop    r14; 	pop    r15
0x9f828:	add    DWORD PTR [rax-0x7d],ecx
0x9f88c:	pop    rdi
0x9f88b:	pop    r15
0x9f88a:	pop    rsi; 	pop    r15
0x9f889:	pop    r14; 	pop    r15
0x9fa03:	add    DWORD PTR [rax+0x39],ecx
0x9fb90:	add    DWORD PTR [rax+0x39],ecx
0x9fd09:	out    0xf3,al
0x9fd4a:	add    DWORD PTR [rax-0x77],ecx
0x9fd49:	clc    ; 	add    DWORD PTR [rax-0x77],ecx
0x9fdc3:	pop    rdi
0x9fdc2:	pop    r15
0x9fdc1:	pop    rsi; 	pop    r15
0x9fdc0:	pop    r14; 	pop    r15
0x9fdd9:	dec    DWORD PTR [rax-0x77]
0x9fdd8:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x9ffe4:	loope  0x9ffd9
0xa026d:	pop    rdi
0xa026c:	pop    r15
0xa026b:	pop    rsi; 	pop    r15
0xa026a:	pop    r14; 	pop    r15
0xa060c:	pop    rdi
0xa060b:	pop    r15
0xa060a:	pop    rsi; 	pop    r15
0xa0609:	pop    r14; 	pop    r15
0xa07e6:	cmove  eax,edx
0xa07e5:	cmove  rax,rdx
0xa0816:	cmove  eax,edx
0xa0815:	cmove  rax,rdx
0xa087f:	pop    rdi
0xa087e:	pop    r15
0xa087d:	pop    rsi; 	pop    r15
0xa087c:	pop    r14; 	pop    r15
0xa08fc:	pop    rdi
0xa08fb:	pop    r15
0xa08fa:	pop    rsi; 	pop    r15
0xa08f9:	pop    r14; 	pop    r15
0xa092b:	ror    BYTE PTR [rax+0x1],1
0xa0937:	pop    rsp
0xa0936:	pop    r12
0xa0935:	pop    rbp; 	pop    r12
0xa0934:	pop    rbx; 	pop    rbp; 	pop    r12
0xa0949:	pop    rsp
0xa0948:	pop    r12
0xa0947:	pop    rbp; 	pop    r12
0xa0946:	pop    rbx; 	pop    rbp; 	pop    r12
0xa09b8:	pop    rdi
0xa09b7:	pop    r15
0xa09b6:	pop    rsi; 	pop    r15
0xa09b5:	pop    r14; 	pop    r15
0xa0a3c:	pop    rsi
0xa0a3b:	pop    r14
0xa0a3a:	pop    rbp; 	pop    r14
0xa0a39:	pop    r13; 	pop    r14
0xa0a66:	add    DWORD PTR [rax-0x7d],ecx
0xa0a88:	add    BYTE PTR [rax-0x7d],cl
0xa0aba:	pop    rsi
0xa0ab9:	pop    r14
0xa0ab8:	pop    rbp; 	pop    r14
0xa0ab7:	pop    r13; 	pop    r14
0xa0b10:	pop    rbp
0xa0b0f:	pop    rbx; 	pop    rbp
0xa0b0e:	or     BYTE PTR [rbx+0x5d],bl
0xa0b1f:	cmovne eax,edi
0xa0b1e:	cmovne rax,rdi
0xa0b79:	pop    rsp
0xa0b78:	pop    r12
0xa0b77:	pop    rbp; 	pop    r12
0xa0b76:	pop    rbx; 	pop    rbp; 	pop    r12
0xa0b94:	pop    rsp
0xa0b93:	pop    r12
0xa0b92:	pop    rbp; 	pop    r12
0xa0b91:	pop    rbx; 	pop    rbp; 	pop    r12
0xa0b9f:	add    bl,dh
0xa0b9d:	add    BYTE PTR [rax],al; 	add    bl,dh
0xa0bf0:	pop    rsp
0xa0bef:	pop    r12
0xa0bee:	pop    rbp; 	pop    r12
0xa0bed:	pop    rbx; 	pop    rbp; 	pop    r12
0xa0cdc:	pop    rdi
0xa0cdb:	pop    r15
0xa0cda:	pop    rsi; 	pop    r15
0xa0cd9:	pop    r14; 	pop    r15
0xa0d39:	dec    DWORD PTR [rax+0x29]
0xa0d38:	clc    ; 	dec    DWORD PTR [rax+0x29]
0xa0d52:	pop    rsp
0xa0d51:	pop    r12
0xa0d50:	pop    rbp; 	pop    r12
0xa0d4f:	pop    rbx; 	pop    rbp; 	pop    r12
0xa0d57:	add    bl,dh
0xa0d56:	add    bl,sil
0xa0db8:	add    DWORD PTR [rax-0x7d],ecx
0xa0de0:	add    DWORD PTR [rax-0x7d],ecx
0xa0dfd:	pop    rsi
0xa0dfc:	pop    r14
0xa0dfb:	pop    rbp; 	pop    r14
0xa0dfa:	pop    r13; 	pop    r14
0xa0f47:	pop    rdi
0xa0f46:	pop    r15
0xa0f45:	pop    rsi; 	pop    r15
0xa0f44:	pop    r14; 	pop    r15
0xa0fd2:	or     BYTE PTR [rax-0x77],cl
0xa1057:	add    eax,ebp
0xa1157:	add    eax,ebp
0xa12d3:	xchg   ebp,eax
0xa12d1:	ror    BYTE PTR [rdi],0x95
0xa12da:	xchg   esp,eax
0xa12d7:	rol    BYTE PTR [rcx+0xf],1; 	xchg   esp,eax
0xa1309:	pop    rbx
0xa1307:	xor    eax,eax; 	pop    rbx
0xa1306:	icebp  ; 	xor    eax,eax; 	pop    rbx
0xa132f:	pop    rbx
0xa132d:	jne    0xa12ec; 	pop    rbx
0xa1359:	pop    rbx
0xa1356:	cmovne eax,edx; 	pop    rbx
0xa135b:	xor    eax,eax
0xa135a:	ret    ; 	xor    eax,eax
0xa1359:	pop    rbx; 	ret    ; 	xor    eax,eax
0xa1392:	xchg   ebp,eax
0xa143b:	cmovne eax,edi
0xa143a:	cmovne rax,rdi
0xa1483:	xchg   ebp,eax
0xa1481:	ror    BYTE PTR [rdi],0x95
0xa148a:	xchg   esp,eax
0xa1487:	rol    BYTE PTR [rcx+0xf],1; 	xchg   esp,eax
0xa14b8:	pop    rbp
0xa14b7:	pop    rbx; 	pop    rbp
0xa14b6:	icebp  ; 	pop    rbx; 	pop    rbp
0xa14b5:	jne    0xa14a8; 	pop    rbx; 	pop    rbp
0xa14cb:	pop    rbp
0xa14ca:	pop    rbx; 	pop    rbp
0xa14c9:	xchg   BYTE PTR [rbx+0x5d],bl
0xa14c8:	jne    0xa1450; 	pop    rbx; 	pop    rbp
0xa1567:	xchg   ebp,eax
0xa1564:	test   BYTE PTR [rcx+0xf],0x95
0xa165a:	pop    rdi
0xa1659:	pop    r15
0xa1658:	pop    rsi; 	pop    r15
0xa1657:	pop    r14; 	pop    r15
0xa17e0:	pop    rdi
0xa17df:	pop    r15
0xa17de:	pop    rsi; 	pop    r15
0xa17dd:	pop    r14; 	pop    r15
0xa1840:	xor    eax,eax
0xa183e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xa18ec:	pop    rsi
0xa18eb:	pop    r14
0xa18ea:	pop    rbp; 	pop    r14
0xa18e9:	pop    r13; 	pop    r14
0xa18fd:	pop    rsi
0xa18fc:	pop    r14
0xa18fb:	pop    rbp; 	pop    r14
0xa18fa:	pop    r13; 	pop    r14
0xa191a:	cmovne eax,edx
0xa1919:	cmovne rax,rdx
0xa1c3f:	add    BYTE PTR [rcx-0x77],cl
0xa1cef:	add    BYTE PTR [rcx-0x7d],cl
0xa1cee:	add    BYTE PTR [rcx-0x7d],cl
0xa1dcb:	pop    rdi
0xa1dca:	pop    r15
0xa1dc9:	pop    rsi; 	pop    r15
0xa1dc8:	pop    r14; 	pop    r15
0xa1f35:	add    BYTE PTR [rax+0x29],cl
0xa298e:	pop    rbp
0xa298d:	pop    rdi; 	pop    rbp
0xa298c:	pop    r15; 	pop    rbp
0xa298b:	pop    rsi; 	pop    r15; 	pop    rbp
0xa2fb5:	add    BYTE PTR [rax-0x7d],cl
0xa317e:	add    BYTE PTR [rax+0x63],cl
0xa361d:	add    BYTE PTR [rbp+0x1],al
0xa36d2:	fisttp DWORD PTR [rax-0x7d]
0xa36ea:	dec    DWORD PTR [rax-0x7d]
0xa3727:	fisttp DWORD PTR [rax-0x7d]
0xa37fe:	mov    dh,0x45
0xa3853:	xchg   ebx,eax
0xa3851:	adc    BYTE PTR [rdi],cl; 	xchg   ebx,eax
0xa3c6b:	or     BYTE PTR [rax-0x7d],cl
0xa3d65:	cmp    BYTE PTR [rax-0x7d],cl
0xa3d72:	adc    BYTE PTR [rax+0x39],cl
0xa3e59:	fild   DWORD PTR [rcx-0x7d]
0xa3e6a:	fisttp DWORD PTR [rcx-0x7d]
0xa3f3f:	push   rbp
0xa3f3e:	mov    dh,0x55
0xa3f3c:	add    DWORD PTR [rdi],ecx; 	mov    dh,0x55
0xa40fd:	add    BYTE PTR [rcx-0x77],cl
0xa41d8:	fisttp DWORD PTR [rax-0x7d]
0xa42df:	push   rbp
0xa42de:	mov    dh,0x55
0xa42dc:	add    DWORD PTR [rdi],ecx; 	mov    dh,0x55
0xa461f:	add    DWORD PTR [rax+0x39],ecx
0xa4b49:	add    BYTE PTR [rax+0x29],cl
0xa4d21:	add    BYTE PTR [rax+0x29],cl
0xa4e4d:	retf   0xf780
0xa4e66:	add    bh,dh
0xa4e64:	sub    BYTE PTR [rax],al; 	add    bh,dh
0xa4e72:	add    bh,dh
0xa4e70:	sub    DWORD PTR [rax],eax; 	add    bh,dh
0xa4e96:	fild   DWORD PTR [rcx-0x7d]
0xa4ea0:	fisttp DWORD PTR [rax-0x7d]
0xa4f9b:	push   rbp
0xa4f9a:	mov    dh,0x55
0xa4f98:	add    DWORD PTR [rdi],ecx; 	mov    dh,0x55
0xa5162:	add    BYTE PTR [rax-0x77],cl
0xa5341:	add    BYTE PTR [rax+0x29],cl
0xa54c9:	add    BYTE PTR [rax+0x29],cl
0xa5853:	dec    DWORD PTR [rbp+0x39]
0xa5a8d:	ret    0x634d
0xa6a51:	add    DWORD PTR [rcx-0x77],ecx
0xa6b11:	add    BYTE PTR [rax+0x29],cl
0xa6c5e:	retf   0xf780
0xa6c77:	add    bh,dh
0xa6c83:	add    bh,dh
0xa6cc5:	fisttp DWORD PTR [rcx-0x7d]
0xa6ce4:	fisttp DWORD PTR [rax-0x7d]
0xa6db1:	push   rbp
0xa6db0:	mov    dh,0x55
0xa6dae:	add    DWORD PTR [rdi],ecx; 	mov    dh,0x55
0xa6f6f:	add    BYTE PTR [rax-0x77],cl
0xa716e:	fild   DWORD PTR [rcx-0x7d]
0xa722f:	mov    dh,0x45
0xa722d:	add    DWORD PTR [rdi],ecx; 	mov    dh,0x45
0xa7419:	add    BYTE PTR [rbp+0x29],cl
0xa7418:	outs   dx,DWORD PTR ds:[rsi]; 	add    BYTE PTR [rbp+0x29],cl
0xa76d6:	cmp    BYTE PTR [rax-0x77],cl
0xa7947:	add    BYTE PTR [rax-0x77],cl
0xa7d01:	stc    
0xa7cff:	add    cl,ch; 	stc    
0xa8095:	mov    DWORD PTR [rdx],ecx
0xa8094:	mov    QWORD PTR [rdx],rcx
0xa8093:	in     al,dx; 	mov    QWORD PTR [rdx],rcx
0xa80a7:	mov    DWORD PTR [rdx],ecx
0xa80a6:	mov    QWORD PTR [rdx],rcx
0xa80a5:	ror    DWORD PTR [rax-0x77],0xa
0xa80f4:	pop    rbp
0xa80f3:	pop    rbx; 	pop    rbp
0xa80f1:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0xa810f:	pop    rbp
0xa810e:	pop    rbx; 	pop    rbp
0xa810c:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0xa819d:	xchg   esp,eax
0xa819b:	ror    DWORD PTR [rdi],1; 	xchg   esp,eax
0xa81ec:	mov    DWORD PTR [rdi],edx
0xa81eb:	mov    QWORD PTR [rdi],rdx
0xa81ea:	pop    rbx; 	mov    QWORD PTR [rdi],rdx
0xa81f5:	pop    rbx
0xa81f3:	mov    DWORD PTR [rdi],edx; 	pop    rbx
0xa81f2:	mov    QWORD PTR [rdi],rdx; 	pop    rbx
0xa8207:	add    bl,dh
0xa820d:	mov    DWORD PTR [rdi],edx
0xa820c:	mov    QWORD PTR [rdi],rdx
0xa823f:	add    bl,dh
0xa8248:	xor    eax,eax
0xa8246:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xa8288:	xor    eax,eax
0xa8286:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xa82df:	add    bl,dh
0xa82dd:	add    BYTE PTR [rax],al; 	add    bl,dh
0xa82e8:	xor    eax,eax
0xa82e6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xa8308:	div    ebx
0xa830f:	add    bl,dh
0xa8348:	xor    eax,eax
0xa8346:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xa8390:	fcomip st,st(3)
0xa838e:	enter  0xdf74,0xf3
0xa8393:	xor    eax,eax
0xa8392:	ret    ; 	xor    eax,eax
0xa8391:	repz ret ; 	xor    eax,eax
0xa842c:	fcomi  st,st(3)
0xa8438:	xor    eax,eax
0xa8436:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xa8475:	clc    
0xa8474:	add    eax,edi
0xa8473:	add    rax,rdi
0xa8489:	mov    DWORD PTR [rdi],edx
0xa8488:	mov    QWORD PTR [rdi],rdx
0xa8487:	clc    ; 	mov    QWORD PTR [rdi],rdx
0xa8495:	clc    
0xa8494:	add    eax,edi
0xa8493:	add    rax,rdi
0xa84b0:	mov    BYTE PTR [rdi+0x2],dl
0xa84af:	cli    ; 	mov    BYTE PTR [rdi+0x2],dl
0xa84bd:	clc    
0xa84bc:	add    eax,edi
0xa84bb:	add    rax,rdi
0xa84ce:	mov    BYTE PTR [rdi+0x4],dl
0xa84cd:	hlt    ; 	mov    BYTE PTR [rdi+0x4],dl
0xa84e7:	mov    DWORD PTR [rdi+0x4],edx
0xa84e6:	mov    WORD PTR [rdi+0x4],dx
0xa8507:	mov    BYTE PTR [rdi+0x6],dl
0xa8545:	clc    
0xa8544:	mov    eax,edi
0xa8543:	mov    rax,rdi
0xa8542:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xa855a:	clc    
0xa8559:	mov    eax,edi
0xa8558:	mov    rax,rdi
0xa8565:	clc    
0xa8564:	mov    eax,edi
0xa8563:	mov    rax,rdi
0xa8582:	clc    
0xa8581:	mov    eax,edi
0xa8580:	mov    rax,rdi
0xa857f:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xa858c:	clc    
0xa858b:	mov    eax,edi
0xa858a:	mov    rax,rdi
0xa85a0:	clc    
0xa859f:	mov    eax,edi
0xa859e:	mov    rax,rdi
0xa859d:	add    al,0x48; 	mov    eax,edi
0xa85b9:	clc    
0xa85b8:	mov    eax,edi
0xa85b7:	mov    rax,rdi
0xa85b6:	add    al,0x48; 	mov    eax,edi
0xa85d9:	clc    
0xa85d8:	mov    eax,edi
0xa85d7:	mov    rax,rdi
0xa8614:	lea    eax,[rdi+rax*1-0x1]
0xa862b:	mov    DWORD PTR [rdi],edx
0xa862a:	mov    QWORD PTR [rdi],rdx
0xa8634:	lea    eax,[rdi+rax*1-0x1]
0xa8652:	mov    BYTE PTR [rdi+0x2],dl
0xa8651:	cli    ; 	mov    BYTE PTR [rdi+0x2],dl
0xa8663:	lea    eax,[rdi+rax*1-0x1]
0xa8680:	mov    BYTE PTR [rdi+0x4],dl
0xa867f:	hlt    ; 	mov    BYTE PTR [rdi+0x4],dl
0xa8699:	mov    DWORD PTR [rdi+0x4],edx
0xa8698:	mov    WORD PTR [rdi+0x4],dx
0xa86b9:	mov    BYTE PTR [rdi+0x6],dl
0xa86e6:	cmove  eax,edx
0xa86e5:	cmove  rax,rdx
0xa875a:	pop    rbp
0xa8759:	pop    r13
0xa8758:	pop    rsp; 	pop    r13
0xa8757:	pop    r12; 	pop    r13
0xa878a:	pop    rbp
0xa8789:	pop    r13
0xa8788:	pop    rsp; 	pop    r13
0xa8787:	pop    r12; 	pop    r13
0xa87b8:	pop    rbp
0xa87b7:	pop    r13
0xa87b6:	pop    rsp; 	pop    r13
0xa87b5:	pop    r12; 	pop    r13
0xa8861:	pop    rbp
0xa8860:	pop    r13
0xa885f:	pop    rsp; 	pop    r13
0xa885e:	pop    r12; 	pop    r13
0xa88e6:	pop    rbp
0xa88e5:	pop    r13
0xa88e4:	pop    rsp; 	pop    r13
0xa88e3:	pop    r12; 	pop    r13
0xa8907:	pop    rbp
0xa8906:	pop    r13
0xa8905:	pop    rsp; 	pop    r13
0xa8904:	pop    r12; 	pop    r13
0xa891f:	add    esp,0x8
0xa891e:	add    rsp,0x8
0xa8976:	pop    rbp
0xa8975:	pop    r13
0xa8974:	pop    rsp; 	pop    r13
0xa8973:	pop    r12; 	pop    r13
0xa89dc:	pop    rbp
0xa89db:	pop    r13
0xa89da:	pop    rsp; 	pop    r13
0xa89d9:	pop    r12; 	pop    r13
0xa89fd:	dec    DWORD PTR [rax+0x39]
0xa8a05:	adc    cl,BYTE PTR [rax+0x29]
0xa9e4c:	sub    eax,ecx
0xa9e4a:	add    al,0x17; 	sub    eax,ecx
0xa9e4f:	xor    eax,eax
0xa9e4e:	ret    ; 	xor    eax,eax
0xa9e4d:	enter  0x31c3,0xc0
0xa9e66:	sub    eax,ecx
0xa9e64:	mov    dh,0x7; 	sub    eax,ecx
0xa9eb7:	sub    eax,edx
0xa9eb5:	adc    al,0x16; 	sub    eax,edx
0xaa025:	sub    eax,edx
0xaa023:	adc    al,0xa; 	sub    eax,edx
0xaa0eb:	sub    eax,edx
0xaa0e9:	adc    al,0xa; 	sub    eax,edx
0xaa110:	sub    eax,ecx
0xaa10f:	shr    BYTE PTR [rcx],0xc8
0xaa10e:	xor    eax,eax; 	sub    eax,ecx
0xab951:	sub    eax,ecx
0xab94f:	add    al,0x17; 	sub    eax,ecx
0xab954:	xor    eax,eax
0xab953:	ret    ; 	xor    eax,eax
0xab952:	enter  0x31c3,0xc0
0xab966:	sub    eax,ecx
0xab964:	mov    dh,0x7; 	sub    eax,ecx
0xab9f9:	add    eax,ecx
0xab9f8:	add    rax,rcx
0xab9f7:	clc    ; 	add    rax,rcx
0xaba54:	xlat   BYTE PTR ds:[rbx]
0xaba51:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xababe:	xlat   BYTE PTR ds:[rbx]
0xababb:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabad3:	xlat   BYTE PTR ds:[rbx]
0xabad0:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabb61:	xlat   BYTE PTR ds:[rbx]
0xabb5e:	xor    BYTE PTR [rsi+0xf],ah; 	xlat   BYTE PTR ds:[rbx]
0xabb73:	lea    eax,[rdi+rax*1+0x30]
0xabbb9:	xlat   BYTE PTR ds:[rbx]
0xabbb6:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabbdd:	xor    eax,eax
0xabbdb:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xabc09:	xor    eax,eax
0xabc08:	push   rdi; 	xor    eax,eax
0xabc07:	jne    0xabc60; 	xor    eax,eax
0xabc16:	cmp    al,dh
0xabc15:	cmp    al,r14b
0xabc14:	lea    eax,[rax+rdi*1-0x10]
0xabc25:	clc    
0xabc24:	add    eax,edi
0xabc23:	add    rax,rdi
0xabc22:	ror    BYTE PTR [rax+0x1],0xf8
0xabc36:	cmp    BYTE PTR [rax],dl
0xabc35:	cmp    BYTE PTR [rax],r10b
0xabc34:	lea    eax,[rax+rdi*1+0x10]
0xabc46:	cmp    BYTE PTR [rax],ah
0xabc45:	cmp    BYTE PTR [rax],r12b
0xabc44:	lea    eax,[rax+rdi*1+0x20]
0xabc5a:	clc    
0xabc59:	add    eax,edi
0xabc58:	add    rax,rdi
0xabc57:	cmp    BYTE PTR [rax+0x1],cl; 	clc    
0xabc69:	lea    eax,[rdi+rax*1+0x10]
0xabc79:	lea    eax,[rdi+rax*1+0x20]
0xabc89:	lea    eax,[rdi+rax*1+0x30]
0xabc90:	xor    eax,eax
0xabc8f:	nop; 	xor    eax,eax
0xabc8e:	xchg   ax,ax; 	xor    eax,eax
0xabd01:	add    eax,ecx
0xabd00:	add    rax,rcx
0xabcff:	clc    ; 	add    rax,rcx
0xabd54:	xlat   BYTE PTR ds:[rbx]
0xabd51:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabdb4:	xlat   BYTE PTR ds:[rbx]
0xabdb1:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabdc9:	xlat   BYTE PTR ds:[rbx]
0xabdc6:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabe3f:	xlat   BYTE PTR ds:[rbx]
0xabe3c:	xor    BYTE PTR [rsi+0xf],ah; 	xlat   BYTE PTR ds:[rbx]
0xabe4d:	lea    eax,[rdi+rax*1+0x30]
0xabe66:	cmp    al,dh
0xabe65:	cmp    al,r14b
0xabe64:	lea    eax,[rax+rdi*1-0x10]
0xabe75:	clc    
0xabe74:	add    eax,edi
0xabe73:	add    rax,rdi
0xabe72:	ror    BYTE PTR [rax+0x1],0xf8
0xabe86:	cmp    BYTE PTR [rax],dl
0xabe85:	cmp    BYTE PTR [rax],r10b
0xabe84:	lea    eax,[rax+rdi*1+0x10]
0xabe96:	cmp    BYTE PTR [rax],ah
0xabe95:	cmp    BYTE PTR [rax],r12b
0xabe94:	lea    eax,[rax+rdi*1+0x20]
0xabf2f:	xlat   BYTE PTR ds:[rbx]
0xabf2c:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabf90:	xlat   BYTE PTR ds:[rbx]
0xabf8d:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xabfa4:	xlat   BYTE PTR ds:[rbx]
0xabfa1:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xac01f:	xlat   BYTE PTR ds:[rbx]
0xac01c:	add    BYTE PTR [rsi+0xf],ah; 	xlat   BYTE PTR ds:[rbx]
0xac04b:	clc    
0xac04a:	add    eax,edi
0xac049:	add    rax,rdi
0xac048:	ror    BYTE PTR [rax+0x1],0xf8
0xac08d:	xlat   BYTE PTR ds:[rbx]
0xac08a:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xac0ac:	xor    eax,eax
0xac0aa:	jne    0xac120; 	xor    eax,eax
0xac0db:	xor    eax,eax
0xac0d9:	jne    0xac150; 	xor    eax,eax
0xac0e5:	clc    
0xac0e4:	add    eax,edi
0xac0e3:	add    rax,rdi
0xac0e2:	ror    BYTE PTR [rax+0x1],0xf8
0xac0f6:	cmp    BYTE PTR [rax],dl
0xac0f5:	cmp    BYTE PTR [rax],r10b
0xac0f4:	lea    eax,[rax+rdi*1+0x10]
0xac106:	cmp    BYTE PTR [rax],ah
0xac105:	cmp    BYTE PTR [rax],r12b
0xac104:	lea    eax,[rax+rdi*1+0x20]
0xac116:	cmp    BYTE PTR [rax],dh
0xac115:	cmp    BYTE PTR [rax],r14b
0xac114:	lea    eax,[rax+rdi*1+0x30]
0xac12e:	clc    
0xac12d:	add    eax,edi
0xac12c:	add    rax,rdi
0xac12b:	fs add rax,rdi
0xac13d:	lea    eax,[rdi+rax*1+0x10]
0xac15d:	lea    eax,[rdi+rax*1+0x20]
0xac17d:	lea    eax,[rdi+rax*1+0x30]
0xac190:	xor    eax,eax
0xac18e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xac1c3:	clc    
0xac1c2:	add    eax,edi
0xac1c1:	add    rax,rdi
0xac1c0:	ror    BYTE PTR [rax+0x1],0xf8
0xac21d:	add    eax,esi
0xac21c:	add    rax,rsi
0xac21b:	clc    ; 	add    rax,rsi
0xac25a:	add    eax,esi
0xac259:	add    rax,rsi
0xac258:	clc    ; 	add    rax,rsi
0xac266:	cmp    BYTE PTR [rax],dl
0xac265:	cmp    BYTE PTR [rax],r10b
0xac264:	lea    eax,[rax+rdi*1+0x10]
0xac346:	sub    eax,edx
0xac344:	mov    dh,0x16; 	sub    eax,edx
0xac34d:	and    cl,BYTE PTR [rcx-0x77]
0xac36c:	sub    eax,edx
0xac36a:	mov    dh,0xd2; 	sub    eax,edx
0xac370:	xor    eax,eax
0xac36f:	nop; 	xor    eax,eax
0xac36e:	ret    ; 	nop; 	xor    eax,eax
0xae889:	sub    eax,ecx
0xae887:	add    al,0x82; 	sub    eax,ecx
0xae88c:	xor    eax,eax
0xae88b:	ret    ; 	xor    eax,eax
0xae88a:	enter  0x31c3,0xc0
0xae8a3:	sub    eax,ecx
0xae8a1:	add    al,0x82; 	sub    eax,ecx
0xb0ece:	sub    eax,ecx
0xb0ecc:	add    al,0x82; 	sub    eax,ecx
0xb0ed1:	xor    eax,eax
0xb0ed0:	ret    ; 	xor    eax,eax
0xb0ecf:	enter  0x31c3,0xc0
0xb0ef3:	sub    eax,ecx
0xb0ef1:	add    al,0x82; 	sub    eax,ecx
0xb0f53:	cmovne eax,edx
0xb0f52:	cmovne rax,rdx
0xb0fa1:	enter  0xf66,0xeb
0xb1049:	xlat   BYTE PTR ds:[rbx]
0xb1071:	cmovne eax,edx
0xb1070:	cmovne rax,rdx
0xb10a6:	xlat   BYTE PTR ds:[rbx]
0xb10bf:	xlat   BYTE PTR ds:[rbx]
0xb10bc:	fsub   QWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xb1168:	add    al,0x7
0xb1167:	lea    eax,[rdi+rax*1]
0xb1166:	lea    rax,[rdi+rax*1]
0xb11b9:	enter  0xf66,0xeb
0xb1269:	xlat   BYTE PTR ds:[rbx]
0xb1286:	add    al,0x7
0xb1285:	lea    eax,[rdi+rax*1]
0xb1284:	lea    rax,[rdi+rax*1]
0xb12b6:	xlat   BYTE PTR ds:[rbx]
0xb12cf:	xlat   BYTE PTR ds:[rbx]
0xb12cc:	fsub   QWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xb138c:	clc    
0xb138b:	add    eax,edi
0xb138a:	add    rax,rdi
0xb1389:	ror    BYTE PTR [rax+0x1],0xf8
0xb13c6:	xlat   BYTE PTR ds:[rbx]
0xb141a:	add    al,0x37
0xb1419:	lea    eax,[rdi+rsi*1]
0xb1418:	lea    rax,[rdi+rsi*1]
0xb145f:	outs   dx,DWORD PTR ds:[rsi]
0xb145c:	xor    BYTE PTR [rsi+0xf],ah; 	outs   dx,DWORD PTR ds:[rsi]
0xb1499:	outs   dx,DWORD PTR ds:[rsi]
0xb1496:	shl    BYTE PTR [rsi+0xf],1; 	outs   dx,DWORD PTR ds:[rsi]
0xb151e:	add    al,0x31
0xb151d:	lea    eax,[rcx+rsi*1]
0xb151c:	lea    rax,[rcx+rsi*1]
0xb1540:	xor    eax,eax
0xb1610:	clc    
0xb160f:	add    eax,edi
0xb160e:	add    rax,rdi
0xb1656:	bsf    eax,edx
0xb16a3:	bsf    eax,edx
0xb16a2:	bsf    rax,rdx
0xb1700:	bsf    eax,edx
0xb16ff:	bsf    rax,rdx
0xb17ba:	clc    
0xb17b9:	sub    eax,edi
0xb17b8:	sub    rax,rdi
0xb17b7:	ror    BYTE PTR [rax+0x29],1; 	clc    
0xb17c6:	xor    eax,eax
0xb17c5:	xor    rax,rax
0xb17c4:	add    al,0x48; 	xor    eax,eax
0xb1863:	bsf    eax,edx
0xb1862:	bsf    rax,rdx
0xb18cf:	bsf    eax,edx
0xb18ce:	bsf    rax,rdx
0xb18e0:	bsf    eax,edx
0xb18df:	bsf    rax,rdx
0xb192f:	add    BYTE PTR [rcx+0x39],cl
0xb197f:	clc    
0xb197e:	sub    eax,edi
0xb197d:	sub    rax,rdi
0xb197c:	ror    BYTE PTR [rax+0x29],1; 	clc    
0xb19d6:	clc    
0xb19d5:	sub    eax,edi
0xb19d4:	sub    rax,rdi
0xb19d3:	ror    BYTE PTR [rax+0x29],1; 	clc    
0xb2027:	xlat   BYTE PTR ds:[rbx]
0xb2024:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xb33cc:	clc    
0xb33cb:	mov    eax,edi
0xb33ca:	mov    rax,rdi
0xb33c9:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb3423:	clc    
0xb3422:	mov    eax,edi
0xb3421:	mov    rax,rdi
0xb3420:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb343b:	clc    
0xb343a:	mov    eax,edi
0xb3439:	mov    rax,rdi
0xb3438:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb344d:	clc    
0xb344c:	mov    eax,edi
0xb344b:	mov    rax,rdi
0xb344a:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb3463:	clc    
0xb3462:	mov    eax,edi
0xb3461:	mov    rax,rdi
0xb3460:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb347b:	clc    
0xb347a:	mov    eax,edi
0xb3479:	mov    rax,rdi
0xb3478:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb3491:	clc    
0xb3490:	mov    eax,edi
0xb348f:	mov    rax,rdi
0xb348e:	add    al,0x48; 	mov    eax,edi
0xb34b3:	clc    
0xb34b2:	mov    eax,edi
0xb34b1:	mov    rax,rdi
0xb34b0:	add    al,0x48; 	mov    eax,edi
0xb34d1:	clc    
0xb34d0:	mov    eax,edi
0xb34cf:	mov    rax,rdi
0xb34ce:	add    ecx,DWORD PTR [rax-0x77]; 	clc    
0xb34ef:	clc    
0xb34ee:	mov    eax,edi
0xb34ed:	mov    rax,rdi
0xb34ec:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb3515:	clc    
0xb3514:	mov    eax,edi
0xb3513:	mov    rax,rdi
0xb3512:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb3537:	clc    
0xb3536:	mov    eax,edi
0xb3535:	mov    rax,rdi
0xb3534:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb3555:	clc    
0xb3554:	mov    eax,edi
0xb3553:	mov    rax,rdi
0xb3575:	clc    
0xb3574:	mov    eax,edi
0xb3573:	mov    rax,rdi
0xb3572:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb3599:	clc    
0xb3598:	mov    eax,edi
0xb3597:	mov    rax,rdi
0xb35b9:	clc    
0xb35b8:	mov    eax,edi
0xb35b7:	mov    rax,rdi
0xb35d9:	clc    
0xb35d8:	mov    eax,edi
0xb35d7:	mov    rax,rdi
0xb35f9:	clc    
0xb35f8:	mov    eax,edi
0xb35f7:	mov    rax,rdi
0xb35f6:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb3c86:	ror    BYTE PTR [rdi],0x85
0xb3cd7:	xlat   BYTE PTR ds:[rbx]
0xb3cd4:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xb5677:	add    cl,ch
0xb5675:	or     DWORD PTR [rax],eax; 	add    cl,ch
0xb5d9c:	clc    
0xb5d9b:	mov    eax,edi
0xb5d9a:	mov    rax,rdi
0xb5d99:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb5df3:	clc    
0xb5df2:	mov    eax,edi
0xb5df1:	mov    rax,rdi
0xb5df0:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb5e0b:	clc    
0xb5e0a:	mov    eax,edi
0xb5e09:	mov    rax,rdi
0xb5e08:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb5e1d:	clc    
0xb5e1c:	mov    eax,edi
0xb5e1b:	mov    rax,rdi
0xb5e1a:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb5e33:	clc    
0xb5e32:	mov    eax,edi
0xb5e31:	mov    rax,rdi
0xb5e30:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb5e4b:	clc    
0xb5e4a:	mov    eax,edi
0xb5e49:	mov    rax,rdi
0xb5e48:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb5e61:	clc    
0xb5e60:	mov    eax,edi
0xb5e5f:	mov    rax,rdi
0xb5e5e:	add    al,0x48; 	mov    eax,edi
0xb5e83:	clc    
0xb5e82:	mov    eax,edi
0xb5e81:	mov    rax,rdi
0xb5e80:	add    al,0x48; 	mov    eax,edi
0xb5ea1:	clc    
0xb5ea0:	mov    eax,edi
0xb5e9f:	mov    rax,rdi
0xb5e9e:	add    ecx,DWORD PTR [rax-0x77]; 	clc    
0xb5ebf:	clc    
0xb5ebe:	mov    eax,edi
0xb5ebd:	mov    rax,rdi
0xb5ebc:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0xb5ee5:	clc    
0xb5ee4:	mov    eax,edi
0xb5ee3:	mov    rax,rdi
0xb5ee2:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb5f07:	clc    
0xb5f06:	mov    eax,edi
0xb5f05:	mov    rax,rdi
0xb5f04:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb5f25:	clc    
0xb5f24:	mov    eax,edi
0xb5f23:	mov    rax,rdi
0xb5f45:	clc    
0xb5f44:	mov    eax,edi
0xb5f43:	mov    rax,rdi
0xb5f42:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb5f69:	clc    
0xb5f68:	mov    eax,edi
0xb5f67:	mov    rax,rdi
0xb5f89:	clc    
0xb5f88:	mov    eax,edi
0xb5f87:	mov    rax,rdi
0xb5fa9:	clc    
0xb5fa8:	mov    eax,edi
0xb5fa7:	mov    rax,rdi
0xb5fc9:	clc    
0xb5fc8:	mov    eax,edi
0xb5fc7:	mov    rax,rdi
0xb5fc6:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb6086:	clc    
0xb6085:	mov    eax,edi
0xb6084:	mov    rax,rdi
0xb6083:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb6129:	clc    
0xb6128:	mov    eax,edi
0xb6127:	mov    rax,rdi
0xb6126:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb61a5:	clc    
0xb61a4:	mov    eax,edi
0xb61a3:	mov    rax,rdi
0xb61a2:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb620f:	clc    
0xb620e:	mov    eax,edi
0xb620d:	mov    rax,rdi
0xb620c:	adc    BYTE PTR [rax-0x77],cl; 	clc    
0xb6222:	clc    
0xb6221:	mov    eax,edi
0xb6220:	mov    rax,rdi
0xb621f:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xb62c1:	clc    
0xb62c0:	mov    eax,edi
0xb62bf:	mov    rax,rdi
0xb62be:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb6374:	clc    
0xb6373:	mov    eax,edi
0xb6372:	mov    rax,rdi
0xb6371:	or     BYTE PTR [rax-0x77],cl; 	clc    
0xb645a:	clc    
0xb6459:	mov    eax,edi
0xb6458:	mov    rax,rdi
0xb6539:	mov    eax,edx
0xb6538:	mov    rax,rdx
0xb68a0:	mov    BYTE PTR [rdi],dh
0xb689e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dh
0xb68b4:	mov    DWORD PTR [rdi],edx
0xb68b3:	mov    WORD PTR [rdi],dx
0xb68c7:	ja     0xb68cb
0xb68c6:	mov    BYTE PTR [rdi+0x2],dh
0xb68d2:	mov    DWORD PTR [rdi],edx
0xb68d0:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xb68e5:	mov    DWORD PTR [rdi],ecx
0xb68e3:	ja     0xb68e9; 	mov    DWORD PTR [rdi],ecx
0xb68f9:	mov    DWORD PTR [rdi+0x4],edx
0xb68f8:	mov    WORD PTR [rdi+0x4],dx
0xb6907:	mov    DWORD PTR [rdi+0x3],edx
0xb6914:	mov    DWORD PTR [rdi],edx
0xb6913:	mov    QWORD PTR [rdi],rdx
0xb6927:	mov    DWORD PTR [rdi],ecx
0xb6926:	mov    QWORD PTR [rdi],rcx
0xb693b:	mov    DWORD PTR [rdi+0x8],edx
0xb693a:	mov    WORD PTR [rdi+0x8],dx
0xb6949:	mov    DWORD PTR [rdi+0x7],edx
0xb6959:	mov    DWORD PTR [rdi+0x8],edx
0xb696b:	mov    DWORD PTR [rdi+0x5],edx
0xb696a:	mov    QWORD PTR [rdi+0x5],rdx
0xb697b:	mov    DWORD PTR [rdi+0x6],edx
0xb697a:	mov    QWORD PTR [rdi+0x6],rdx
0xb698b:	mov    DWORD PTR [rdi+0x7],edx
0xb698a:	mov    QWORD PTR [rdi+0x7],rdx
0xb6996:	jg     0xb699f
0xb6995:	movq   QWORD PTR [rdi],mm0
0xb6994:	movdqu XMMWORD PTR [rdi],xmm0
0xb69a9:	ja     0xb69bb
0xb69a8:	mov    BYTE PTR [rdi+0x10],dh
0xb69bd:	mov    DWORD PTR [rdi+0x10],ecx
0xb69bc:	mov    WORD PTR [rdi+0x10],cx
0xb69db:	mov    DWORD PTR [rdi+0xf],ecx
0xb69eb:	mov    DWORD PTR [rdi+0x10],ecx
0xb69ff:	ja     0xb6a15
0xb69fe:	mov    BYTE PTR [rdi+0x14],dh
0xb6a1d:	mov    DWORD PTR [rdi+0xe],ecx
0xb6a1c:	mov    QWORD PTR [rdi+0xe],rcx
0xb6a3d:	mov    DWORD PTR [rdi+0xf],ecx
0xb6a3c:	mov    QWORD PTR [rdi+0xf],rcx
0xb6a5d:	mov    DWORD PTR [rdi+0x10],ecx
0xb6a5c:	mov    QWORD PTR [rdi+0x10],rcx
0xb6a81:	ja     0xb6a9b
0xb6a80:	mov    BYTE PTR [rdi+0x18],dh
0xb6aa5:	mov    DWORD PTR [rdi+0x18],ecx
0xb6aa4:	mov    WORD PTR [rdi+0x18],cx
0xb6ac3:	mov    DWORD PTR [rdi+0x17],ecx
0xb6ae3:	mov    DWORD PTR [rdi+0x18],ecx
0xb6afe:	movq   QWORD PTR [rdi+0xd],mm2
0xb6b1e:	movq   QWORD PTR [rdi+0xe],mm2
0xb6b3e:	movq   QWORD PTR [rdi+0xf],mm2
0xb6b5e:	movq   QWORD PTR [rdi+0x10],mm2
0xb70ee:	add    BYTE PTR [rax],al
0xb70ec:	mov    al,0x8; 	add    BYTE PTR [rax],al
0xb7112:	add    BYTE PTR [rax],al
0xb7110:	mov    WORD PTR [rax],cs; 	add    BYTE PTR [rax],al
0xb7135:	add    BYTE PTR [rax],al
0xb7150:	add    BYTE PTR [rax],al
0xb7173:	add    BYTE PTR [rax],al
0xb7171:	sub    ecx,DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0xb7198:	add    BYTE PTR [rax],al
0xb71b6:	add    BYTE PTR [rax],al
0xb71d2:	add    BYTE PTR [rax],al
0xb71f5:	add    BYTE PTR [rax],al
0xb721a:	add    BYTE PTR [rax],al
0xb7218:	test   BYTE PTR [rdi],al; 	add    BYTE PTR [rax],al
0xb7238:	add    BYTE PTR [rax],al
0xb7258:	add    BYTE PTR [rax],al
0xb727a:	add    BYTE PTR [rax],al
0xb7278:	and    al,0x7; 	add    BYTE PTR [rax],al
0xb729a:	add    BYTE PTR [rax],al
0xb7298:	add    al,0x7; 	add    BYTE PTR [rax],al
0xb72ba:	add    BYTE PTR [rax],al
0xb72b8:	in     al,0x6; 	add    BYTE PTR [rax],al
0xb72d4:	add    BYTE PTR [rax],al
0xb72f7:	add    BYTE PTR [rax],al
0xb731c:	add    BYTE PTR [rax],al
0xb733a:	add    BYTE PTR [rax],al
0xb735a:	add    BYTE PTR [rax],al
0xb737d:	add    BYTE PTR [rax],al
0xb737b:	and    DWORD PTR [rsi],eax; 	add    BYTE PTR [rax],al
0xb739c:	add    BYTE PTR [rax],al
0xb739a:	add    al,BYTE PTR [rsi]; 	add    BYTE PTR [rax],al
0xb73bc:	add    BYTE PTR [rax],al
0xb73ba:	loop   0xb73c1; 	add    BYTE PTR [rax],al
0xb73dc:	add    BYTE PTR [rax],al
0xb73ff:	add    BYTE PTR [rax],al
0xb7434:	add    BYTE PTR [rax],al
0xb7432:	push   0x5; 	add    BYTE PTR [rax],al
0xb7462:	add    BYTE PTR [rax],al
0xb7460:	cmp    al,0x5; 	add    BYTE PTR [rax],al
0xb7492:	add    BYTE PTR [rax],al
0xb7490:	or     al,0x5; 	add    BYTE PTR [rax],al
0xb74be:	add    BYTE PTR [rax],al
0xb74bc:	loopne 0xb74c2; 	add    BYTE PTR [rax],al
0xb74ee:	add    BYTE PTR [rax],al
0xb74ec:	mov    al,0x4; 	add    BYTE PTR [rax],al
0xb751e:	add    BYTE PTR [rax],al
0xb751c:	add    BYTE PTR [rax+rax*1],0x0
0xb754e:	add    BYTE PTR [rax],al
0xb755e:	add    BYTE PTR [rax],al
0xb755c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xb7572:	mov    BYTE PTR [rdi],dl
0xb7570:	mov    dl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],dl
0xb7584:	mov    DWORD PTR [rdi],edx
0xb7583:	mov    WORD PTR [rdi],dx
0xb7599:	mov    BYTE PTR [rdi+0x2],dl
0xb75a2:	mov    DWORD PTR [rdi],edx
0xb75a0:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xb75b7:	mov    BYTE PTR [rdi+0x4],dl
0xb75c9:	mov    DWORD PTR [rdi+0x4],edx
0xb75c8:	mov    WORD PTR [rdi+0x4],dx
0xb75d7:	mov    DWORD PTR [rdi+0x3],edx
0xb75e4:	mov    DWORD PTR [rdi],edx
0xb75e3:	mov    QWORD PTR [rdi],rdx
0xb75f9:	mov    BYTE PTR [rdi+0x8],dl
0xb760b:	mov    DWORD PTR [rdi+0x8],edx
0xb760a:	mov    WORD PTR [rdi+0x8],dx
0xb7619:	mov    DWORD PTR [rdi+0x7],edx
0xb7629:	mov    DWORD PTR [rdi+0x8],edx
0xb763b:	mov    DWORD PTR [rdi+0x5],edx
0xb763a:	mov    QWORD PTR [rdi+0x5],rdx
0xb764b:	mov    DWORD PTR [rdi+0x6],edx
0xb764a:	mov    QWORD PTR [rdi+0x6],rdx
0xb765b:	mov    DWORD PTR [rdi+0x7],edx
0xb765a:	mov    QWORD PTR [rdi+0x7],rdx
0xb7666:	jg     0xb766f
0xb7665:	movq   QWORD PTR [rdi],mm0
0xb7664:	movdqu XMMWORD PTR [rdi],xmm0
0xb767b:	mov    BYTE PTR [rdi+0x10],cl
0xb768d:	mov    DWORD PTR [rdi+0x10],ecx
0xb768c:	mov    WORD PTR [rdi+0x10],cx
0xb76ab:	mov    DWORD PTR [rdi+0xf],ecx
0xb76bb:	mov    DWORD PTR [rdi+0x10],ecx
0xb76d1:	mov    BYTE PTR [rdi+0x14],dl
0xb76ed:	mov    DWORD PTR [rdi+0xe],ecx
0xb76ec:	mov    QWORD PTR [rdi+0xe],rcx
0xb770d:	mov    DWORD PTR [rdi+0xf],ecx
0xb770c:	mov    QWORD PTR [rdi+0xf],rcx
0xb772d:	mov    DWORD PTR [rdi+0x10],ecx
0xb772c:	mov    QWORD PTR [rdi+0x10],rcx
0xb7753:	mov    BYTE PTR [rdi+0x18],cl
0xb7775:	mov    DWORD PTR [rdi+0x18],ecx
0xb7774:	mov    WORD PTR [rdi+0x18],cx
0xb7793:	mov    DWORD PTR [rdi+0x17],ecx
0xb77b3:	mov    DWORD PTR [rdi+0x18],ecx
0xb77ce:	movq   QWORD PTR [rdi+0xd],mm2
0xb77ee:	movq   QWORD PTR [rdi+0xe],mm2
0xb780e:	movq   QWORD PTR [rdi+0xf],mm2
0xb782e:	movq   QWORD PTR [rdi+0x10],mm2
0xb7855:	mov    BYTE PTR [rdi+0x20],cl
0xb785e:	add    BYTE PTR [rax],al
0xb785c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xb7870:	mov    BYTE PTR [rdi],dl
0xb786e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dl
0xb7881:	mov    DWORD PTR [rdi],edx
0xb7880:	mov    WORD PTR [rdi],dx
0xb7890:	mov    DWORD PTR [rdi-0x1],edx
0xb78a0:	mov    DWORD PTR [rdi],edx
0xb789e:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rdi],edx
0xb78b2:	mov    BYTE PTR [rdi+0x4],dl
0xb78c3:	mov    DWORD PTR [rdi+0x4],edx
0xb78c2:	mov    WORD PTR [rdi+0x4],dx
0xb78d1:	mov    DWORD PTR [rdi-0x1],edx
0xb78d0:	mov    QWORD PTR [rdi-0x1],rdx
0xb78e1:	mov    DWORD PTR [rdi],edx
0xb78e0:	mov    QWORD PTR [rdi],rdx
0xb78f3:	mov    BYTE PTR [rdi+0x8],dl
0xb7904:	mov    DWORD PTR [rdi+0x8],edx
0xb7903:	mov    WORD PTR [rdi+0x8],dx
0xb7913:	mov    DWORD PTR [rdi+0x7],edx
0xb7923:	mov    DWORD PTR [rdi+0x8],edx
0xb7934:	mov    DWORD PTR [rdi+0x5],edx
0xb7933:	mov    QWORD PTR [rdi+0x5],rdx
0xb7944:	mov    DWORD PTR [rdi+0x6],edx
0xb7943:	mov    QWORD PTR [rdi+0x6],rdx
0xb7951:	movq   QWORD PTR [rdi-0x1],mm0
0xb7962:	jg     0xb796b
0xb7961:	movq   QWORD PTR [rdi],mm0
0xb7960:	movdqu XMMWORD PTR [rdi],xmm0
0xb7a96:	jg     0xb7ac8
0xb7a94:	movq   QWORD PTR [rdi+0x30],mm7
0xb7b42:	clc    
0xb7b41:	mov    eax,edi
0xb7b40:	mov    rax,rdi
0xb7b3f:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xb7ea3:	lea    eax,[rdi]
0xb7ea2:	lea    rax,[rdi]
0xb7eb7:	lea    eax,[rdi+0x1]
0xb7eb6:	lea    rax,[rdi+0x1]
0xb7eca:	lea    eax,[rdi+0x2]
0xb7ec9:	lea    rax,[rdi+0x2]
0xb7ed5:	lea    eax,[rdi+0x3]
0xb7ed4:	lea    rax,[rdi+0x3]
0xb7ee8:	lea    eax,[rdi+0x4]
0xb7ee7:	lea    rax,[rdi+0x4]
0xb7efd:	lea    eax,[rdi+0x5]
0xb7efc:	lea    rax,[rdi+0x5]
0xb7f1b:	lea    eax,[rdi+0x6]
0xb7f1a:	lea    rax,[rdi+0x6]
0xb7f27:	lea    eax,[rdi+0x7]
0xb7f26:	lea    rax,[rdi+0x7]
0xb7f3a:	lea    eax,[rdi+0x8]
0xb7f39:	lea    rax,[rdi+0x8]
0xb7f4f:	lea    eax,[rdi+0x9]
0xb7f4e:	lea    rax,[rdi+0x9]
0xb7f6d:	lea    eax,[rdi+0xa]
0xb7f6c:	lea    rax,[rdi+0xa]
0xb7f8d:	lea    eax,[rdi+0xb]
0xb7f8c:	lea    rax,[rdi+0xb]
0xb7faf:	lea    eax,[rdi+0xc]
0xb7fae:	lea    rax,[rdi+0xc]
0xb7fcf:	lea    eax,[rdi+0xd]
0xb7fce:	lea    rax,[rdi+0xd]
0xb7fef:	lea    eax,[rdi+0xe]
0xb7fee:	lea    rax,[rdi+0xe]
0xb8009:	lea    eax,[rdi+0xf]
0xb8008:	lea    rax,[rdi+0xf]
0xb801c:	lea    eax,[rdi+0x10]
0xb801b:	lea    rax,[rdi+0x10]
0xb8031:	lea    eax,[rdi+0x11]
0xb8030:	lea    rax,[rdi+0x11]
0xb804f:	lea    eax,[rdi+0x12]
0xb804e:	lea    rax,[rdi+0x12]
0xb806f:	lea    eax,[rdi+0x13]
0xb806e:	lea    rax,[rdi+0x13]
0xb8092:	lea    eax,[rdi+0x14]
0xb8091:	lea    rax,[rdi+0x14]
0xb80b1:	lea    eax,[rdi+0x15]
0xb80b0:	lea    rax,[rdi+0x15]
0xb80d1:	lea    eax,[rdi+0x16]
0xb80d0:	lea    rax,[rdi+0x16]
0xb80f1:	lea    eax,[rdi+0x17]
0xb80f0:	lea    rax,[rdi+0x17]
0xb8114:	lea    eax,[rdi+0x18]
0xb8113:	lea    rax,[rdi+0x18]
0xb8139:	lea    eax,[rdi+0x19]
0xb8138:	lea    rax,[rdi+0x19]
0xb8157:	lea    eax,[rdi+0x1a]
0xb8156:	lea    rax,[rdi+0x1a]
0xb8177:	lea    eax,[rdi+0x1b]
0xb8176:	lea    rax,[rdi+0x1b]
0xb8193:	lea    eax,[rdi+0x1c]
0xb8192:	lea    rax,[rdi+0x1c]
0xb81b3:	lea    eax,[rdi+0x1d]
0xb81b2:	lea    rax,[rdi+0x1d]
0xb81d3:	lea    eax,[rdi+0x1e]
0xb81d2:	lea    rax,[rdi+0x1e]
0xb81f3:	lea    eax,[rdi+0x1f]
0xb81f2:	lea    rax,[rdi+0x1f]
0xb87a1:	add    BYTE PTR [rax],al
0xb87c6:	add    BYTE PTR [rax],al
0xb87e9:	add    BYTE PTR [rax],al
0xb8804:	add    BYTE PTR [rax],al
0xb8827:	add    BYTE PTR [rax],al
0xb884c:	add    BYTE PTR [rax],al
0xb884a:	jb     0xb8855; 	add    BYTE PTR [rax],al
0xb886a:	add    BYTE PTR [rax],al
0xb8886:	add    BYTE PTR [rax],al
0xb8884:	cmp    BYTE PTR [rcx],cl; 	add    BYTE PTR [rax],al
0xb88a9:	add    BYTE PTR [rax],al
0xb88ce:	add    BYTE PTR [rax],al
0xb88fc:	add    BYTE PTR [rax],al
0xb891c:	add    BYTE PTR [rax],al
0xb893e:	add    BYTE PTR [rax],al
0xb896e:	add    BYTE PTR [rax],al
0xb899e:	add    BYTE PTR [rax],al
0xb899c:	and    BYTE PTR [rax],cl; 	add    BYTE PTR [rax],al
0xb89c8:	add    BYTE PTR [rax],al
0xb89eb:	add    BYTE PTR [rax],al
0xb89e9:	rol    DWORD PTR [rdi],cl; 	add    BYTE PTR [rax],al
0xb8a10:	add    BYTE PTR [rax],al
0xb8a3e:	add    BYTE PTR [rax],al
0xb8a6e:	add    BYTE PTR [rax],al
0xb8aa1:	add    BYTE PTR [rax],al
0xb8ad0:	add    BYTE PTR [rax],al
0xb8b00:	add    BYTE PTR [rax],al
0xb8b30:	add    BYTE PTR [rax],al
0xb8b2e:	mov    es,WORD PTR [rsi]; 	add    BYTE PTR [rax],al
0xb8b63:	add    BYTE PTR [rax],al
0xb8b98:	add    BYTE PTR [rax],al
0xb8bc6:	add    BYTE PTR [rax],al
0xb8bf6:	add    BYTE PTR [rax],al
0xb8bf4:	enter  0x5,0x0
0xb8c22:	add    BYTE PTR [rax],al
0xb8c52:	add    BYTE PTR [rax],al
0xb8c82:	add    BYTE PTR [rax],al
0xb8c80:	cmp    al,0x5; 	add    BYTE PTR [rax],al
0xb8cb2:	add    BYTE PTR [rax],al
0xb8cb0:	or     al,0x5; 	add    BYTE PTR [rax],al
0xb8cc2:	clc    
0xb8cc1:	mov    eax,edi
0xb8cc0:	mov    rax,rdi
0xb8cbf:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xb8cd5:	lea    eax,[rdi+0x1]
0xb8cd4:	lea    rax,[rdi+0x1]
0xb8ce7:	lea    eax,[rdi+0x2]
0xb8ce6:	lea    rax,[rdi+0x2]
0xb8cfd:	lea    eax,[rdi+0x3]
0xb8cfc:	lea    rax,[rdi+0x3]
0xb8d15:	lea    eax,[rdi+0x4]
0xb8d14:	lea    rax,[rdi+0x4]
0xb8d2b:	lea    eax,[rdi+0x5]
0xb8d2a:	lea    rax,[rdi+0x5]
0xb8d3d:	lea    eax,[rdi+0x6]
0xb8d3c:	lea    rax,[rdi+0x6]
0xb8d5b:	lea    eax,[rdi+0x7]
0xb8d5a:	lea    rax,[rdi+0x7]
0xb8d67:	lea    eax,[rdi+0x8]
0xb8d66:	lea    rax,[rdi+0x8]
0xb8d7d:	lea    eax,[rdi+0x9]
0xb8d7c:	lea    rax,[rdi+0x9]
0xb8d9f:	lea    eax,[rdi+0xa]
0xb8d9e:	lea    rax,[rdi+0xa]
0xb8dbd:	lea    eax,[rdi+0xb]
0xb8dbc:	lea    rax,[rdi+0xb]
0xb8ddd:	lea    eax,[rdi+0xc]
0xb8ddc:	lea    rax,[rdi+0xc]
0xb8dff:	lea    eax,[rdi+0xd]
0xb8dfe:	lea    rax,[rdi+0xd]
0xb8e1f:	lea    eax,[rdi+0xe]
0xb8e1e:	lea    rax,[rdi+0xe]
0xb8e3f:	lea    eax,[rdi+0xf]
0xb8e3e:	lea    rax,[rdi+0xf]
0xb8e59:	lea    eax,[rdi+0x10]
0xb8e58:	lea    rax,[rdi+0x10]
0xb8e6f:	lea    eax,[rdi+0x11]
0xb8e6e:	lea    rax,[rdi+0x11]
0xb8e91:	lea    eax,[rdi+0x12]
0xb8e90:	lea    rax,[rdi+0x12]
0xb8eaf:	lea    eax,[rdi+0x13]
0xb8eae:	lea    rax,[rdi+0x13]
0xb8ecf:	lea    eax,[rdi+0x14]
0xb8ece:	lea    rax,[rdi+0x14]
0xb8ef5:	lea    eax,[rdi+0x15]
0xb8ef4:	lea    rax,[rdi+0x15]
0xb8f11:	lea    eax,[rdi+0x16]
0xb8f10:	lea    rax,[rdi+0x16]
0xb8f31:	lea    eax,[rdi+0x17]
0xb8f30:	lea    rax,[rdi+0x17]
0xb8f51:	lea    eax,[rdi+0x18]
0xb8f50:	lea    rax,[rdi+0x18]
0xb8f77:	lea    eax,[rdi+0x19]
0xb8f76:	lea    rax,[rdi+0x19]
0xb8f99:	lea    eax,[rdi+0x1a]
0xb8f98:	lea    rax,[rdi+0x1a]
0xb8fb7:	lea    eax,[rdi+0x1b]
0xb8fb6:	lea    rax,[rdi+0x1b]
0xb8fd7:	lea    eax,[rdi+0x1c]
0xb8fd6:	lea    rax,[rdi+0x1c]
0xb8ff3:	lea    eax,[rdi+0x1d]
0xb8ff2:	lea    rax,[rdi+0x1d]
0xb9013:	lea    eax,[rdi+0x1e]
0xb9012:	lea    rax,[rdi+0x1e]
0xb9033:	lea    eax,[rdi+0x1f]
0xb9032:	lea    rax,[rdi+0x1f]
0xb9053:	lea    eax,[rdi+0x20]
0xb9052:	lea    rax,[rdi+0x20]
0xb9075:	mov    BYTE PTR [rdi+0x20],cl
0xb907e:	add    BYTE PTR [rax],al
0xb907c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0xb9090:	mov    BYTE PTR [rdi],dl
0xb908e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dl
0xb90a1:	mov    DWORD PTR [rdi],edx
0xb90a0:	mov    WORD PTR [rdi],dx
0xb90b0:	mov    DWORD PTR [rdi-0x1],edx
0xb90c0:	mov    DWORD PTR [rdi],edx
0xb90be:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rdi],edx
0xb90d2:	mov    BYTE PTR [rdi+0x4],dl
0xb90e3:	mov    DWORD PTR [rdi+0x4],edx
0xb90e2:	mov    WORD PTR [rdi+0x4],dx
0xb90f1:	mov    DWORD PTR [rdi-0x1],edx
0xb90f0:	mov    QWORD PTR [rdi-0x1],rdx
0xb9101:	mov    DWORD PTR [rdi],edx
0xb9100:	mov    QWORD PTR [rdi],rdx
0xb9113:	mov    BYTE PTR [rdi+0x8],dl
0xb9124:	mov    DWORD PTR [rdi+0x8],edx
0xb9123:	mov    WORD PTR [rdi+0x8],dx
0xb9133:	mov    DWORD PTR [rdi+0x7],edx
0xb9143:	mov    DWORD PTR [rdi+0x8],edx
0xb9154:	mov    DWORD PTR [rdi+0x5],edx
0xb9153:	mov    QWORD PTR [rdi+0x5],rdx
0xb9164:	mov    DWORD PTR [rdi+0x6],edx
0xb9163:	mov    QWORD PTR [rdi+0x6],rdx
0xb9171:	movq   QWORD PTR [rdi-0x1],mm0
0xb9182:	jg     0xb918b
0xb9181:	movq   QWORD PTR [rdi],mm0
0xb9180:	movdqu XMMWORD PTR [rdi],xmm0
0xb92b9:	lea    eax,[rdi+0x40]
0xb92b8:	lea    rax,[rdi+0x40]
0xb9362:	clc    
0xb9361:	mov    eax,edi
0xb9360:	mov    rax,rdi
0xb935f:	add    BYTE PTR [rax-0x77],cl; 	clc    
0xb952a:	clc    
0xb9529:	mov    eax,edi
0xb9528:	mov    rax,rdi
0xb9b50:	mov    BYTE PTR [rdi],dh
0xb9b4e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dh
0xb9b64:	mov    DWORD PTR [rdi],edx
0xb9b63:	mov    WORD PTR [rdi],dx
0xb9b77:	ja     0xb9b7b
0xb9b76:	mov    BYTE PTR [rdi+0x2],dh
0xb9b82:	mov    DWORD PTR [rdi],edx
0xb9b80:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xb9b95:	mov    DWORD PTR [rdi],ecx
0xb9b93:	ja     0xb9b99; 	mov    DWORD PTR [rdi],ecx
0xb9ba9:	mov    DWORD PTR [rdi+0x4],edx
0xb9ba8:	mov    WORD PTR [rdi+0x4],dx
0xb9bb7:	mov    DWORD PTR [rdi+0x3],edx
0xb9bc4:	mov    DWORD PTR [rdi],edx
0xb9bc3:	mov    QWORD PTR [rdi],rdx
0xb9bd7:	mov    DWORD PTR [rdi],ecx
0xb9bd6:	mov    QWORD PTR [rdi],rcx
0xb9beb:	mov    DWORD PTR [rdi+0x8],edx
0xb9bea:	mov    WORD PTR [rdi+0x8],dx
0xb9bf9:	mov    DWORD PTR [rdi+0x7],edx
0xb9c09:	mov    DWORD PTR [rdi+0x8],edx
0xb9c1b:	mov    DWORD PTR [rdi+0x5],edx
0xb9c1a:	mov    QWORD PTR [rdi+0x5],rdx
0xb9c2b:	mov    DWORD PTR [rdi+0x6],edx
0xb9c2a:	mov    QWORD PTR [rdi+0x6],rdx
0xb9c3b:	mov    DWORD PTR [rdi+0x7],edx
0xb9c3a:	mov    QWORD PTR [rdi+0x7],rdx
0xb9c46:	jg     0xb9c4f
0xb9c45:	movq   QWORD PTR [rdi],mm0
0xb9c44:	movdqu XMMWORD PTR [rdi],xmm0
0xb9c59:	ja     0xb9c6b
0xb9c58:	mov    BYTE PTR [rdi+0x10],dh
0xb9c6d:	mov    DWORD PTR [rdi+0x10],ecx
0xb9c6c:	mov    WORD PTR [rdi+0x10],cx
0xb9c8b:	mov    DWORD PTR [rdi+0xf],ecx
0xb9c9b:	mov    DWORD PTR [rdi+0x10],ecx
0xb9caf:	ja     0xb9cc5
0xb9cae:	mov    BYTE PTR [rdi+0x14],dh
0xb9ccd:	mov    DWORD PTR [rdi+0xe],ecx
0xb9ccc:	mov    QWORD PTR [rdi+0xe],rcx
0xb9ced:	mov    DWORD PTR [rdi+0xf],ecx
0xb9cec:	mov    QWORD PTR [rdi+0xf],rcx
0xb9d0d:	mov    DWORD PTR [rdi+0x10],ecx
0xb9d0c:	mov    QWORD PTR [rdi+0x10],rcx
0xb9d31:	ja     0xb9d4b
0xb9d30:	mov    BYTE PTR [rdi+0x18],dh
0xb9d55:	mov    DWORD PTR [rdi+0x18],ecx
0xb9d54:	mov    WORD PTR [rdi+0x18],cx
0xb9d73:	mov    DWORD PTR [rdi+0x17],ecx
0xb9d93:	mov    DWORD PTR [rdi+0x18],ecx
0xb9dae:	movq   QWORD PTR [rdi+0xd],mm2
0xb9dce:	movq   QWORD PTR [rdi+0xe],mm2
0xb9dee:	movq   QWORD PTR [rdi+0xf],mm2
0xb9e0e:	movq   QWORD PTR [rdi+0x10],mm2
0xba620:	mov    BYTE PTR [rdi],dh
0xba61e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rdi],dh
0xba634:	mov    DWORD PTR [rdi],edx
0xba633:	mov    WORD PTR [rdi],dx
0xba647:	ja     0xba64b
0xba646:	mov    BYTE PTR [rdi+0x2],dh
0xba652:	mov    DWORD PTR [rdi],edx
0xba650:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0xba665:	mov    DWORD PTR [rdi],ecx
0xba663:	ja     0xba669; 	mov    DWORD PTR [rdi],ecx
0xba679:	mov    DWORD PTR [rdi+0x4],edx
0xba678:	mov    WORD PTR [rdi+0x4],dx
0xba687:	mov    DWORD PTR [rdi+0x3],edx
0xba694:	mov    DWORD PTR [rdi],edx
0xba693:	mov    QWORD PTR [rdi],rdx
0xba6a7:	mov    DWORD PTR [rdi],ecx
0xba6a6:	mov    QWORD PTR [rdi],rcx
0xba6bb:	mov    DWORD PTR [rdi+0x8],edx
0xba6ba:	mov    WORD PTR [rdi+0x8],dx
0xba6c9:	mov    DWORD PTR [rdi+0x7],edx
0xba6d9:	mov    DWORD PTR [rdi+0x8],edx
0xba6eb:	mov    DWORD PTR [rdi+0x5],edx
0xba6ea:	mov    QWORD PTR [rdi+0x5],rdx
0xba6fb:	mov    DWORD PTR [rdi+0x6],edx
0xba6fa:	mov    QWORD PTR [rdi+0x6],rdx
0xba70b:	mov    DWORD PTR [rdi+0x7],edx
0xba70a:	mov    QWORD PTR [rdi+0x7],rdx
0xba716:	jg     0xba71f
0xba715:	movq   QWORD PTR [rdi],mm0
0xba714:	movdqu XMMWORD PTR [rdi],xmm0
0xba729:	ja     0xba73b
0xba728:	mov    BYTE PTR [rdi+0x10],dh
0xba73d:	mov    DWORD PTR [rdi+0x10],ecx
0xba73c:	mov    WORD PTR [rdi+0x10],cx
0xba75b:	mov    DWORD PTR [rdi+0xf],ecx
0xba76b:	mov    DWORD PTR [rdi+0x10],ecx
0xba77f:	ja     0xba795
0xba77e:	mov    BYTE PTR [rdi+0x14],dh
0xba79d:	mov    DWORD PTR [rdi+0xe],ecx
0xba79c:	mov    QWORD PTR [rdi+0xe],rcx
0xba7bd:	mov    DWORD PTR [rdi+0xf],ecx
0xba7bc:	mov    QWORD PTR [rdi+0xf],rcx
0xba7dd:	mov    DWORD PTR [rdi+0x10],ecx
0xba7dc:	mov    QWORD PTR [rdi+0x10],rcx
0xba801:	ja     0xba81b
0xba800:	mov    BYTE PTR [rdi+0x18],dh
0xba825:	mov    DWORD PTR [rdi+0x18],ecx
0xba824:	mov    WORD PTR [rdi+0x18],cx
0xba843:	mov    DWORD PTR [rdi+0x17],ecx
0xba863:	mov    DWORD PTR [rdi+0x18],ecx
0xba87e:	movq   QWORD PTR [rdi+0xd],mm2
0xba89e:	movq   QWORD PTR [rdi+0xe],mm2
0xba8be:	movq   QWORD PTR [rdi+0xf],mm2
0xba8de:	movq   QWORD PTR [rdi+0x10],mm2
0xba8f2:	mov    BYTE PTR [rdi],ch
0xba8f1:	in     eax,dx; 	mov    BYTE PTR [rdi],ch
0xba8f0:	xor    ch,ch; 	mov    BYTE PTR [rdi],ch
0xba906:	mov    BYTE PTR [rdi+0x1],ch
0xba905:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1],ch
0xba918:	mov    BYTE PTR [rdi+0x2],ch
0xba917:	in     eax,dx; 	mov    BYTE PTR [rdi+0x2],ch
0xba92e:	mov    BYTE PTR [rdi+0x3],ch
0xba92d:	in     eax,dx; 	mov    BYTE PTR [rdi+0x3],ch
0xba946:	mov    BYTE PTR [rdi+0x4],ch
0xba945:	in     eax,dx; 	mov    BYTE PTR [rdi+0x4],ch
0xba95c:	mov    BYTE PTR [rdi+0x5],ch
0xba95b:	in     eax,dx; 	mov    BYTE PTR [rdi+0x5],ch
0xba96e:	mov    BYTE PTR [rdi+0x6],ch
0xba96d:	in     eax,dx; 	mov    BYTE PTR [rdi+0x6],ch
0xba98c:	mov    BYTE PTR [rdi+0x7],ch
0xba98b:	in     eax,dx; 	mov    BYTE PTR [rdi+0x7],ch
0xba998:	mov    BYTE PTR [rdi+0x8],ch
0xba997:	in     eax,dx; 	mov    BYTE PTR [rdi+0x8],ch
0xba9ae:	mov    BYTE PTR [rdi+0x9],ch
0xba9ad:	in     eax,dx; 	mov    BYTE PTR [rdi+0x9],ch
0xba9d0:	mov    BYTE PTR [rdi+0xa],ch
0xba9cf:	in     eax,dx; 	mov    BYTE PTR [rdi+0xa],ch
0xba9ee:	mov    BYTE PTR [rdi+0xb],ch
0xba9ed:	in     eax,dx; 	mov    BYTE PTR [rdi+0xb],ch
0xbaa0e:	mov    BYTE PTR [rdi+0xc],ch
0xbaa0d:	in     eax,dx; 	mov    BYTE PTR [rdi+0xc],ch
0xbaa30:	mov    BYTE PTR [rdi+0xd],ch
0xbaa2f:	in     eax,dx; 	mov    BYTE PTR [rdi+0xd],ch
0xbaa50:	mov    BYTE PTR [rdi+0xe],ch
0xbaa4f:	in     eax,dx; 	mov    BYTE PTR [rdi+0xe],ch
0xbaa70:	mov    BYTE PTR [rdi+0xf],ch
0xbaa6f:	in     eax,dx; 	mov    BYTE PTR [rdi+0xf],ch
0xbaa8a:	mov    BYTE PTR [rdi+0x10],ch
0xbaa89:	in     eax,dx; 	mov    BYTE PTR [rdi+0x10],ch
0xbaaa0:	mov    BYTE PTR [rdi+0x11],ch
0xbaa9f:	in     eax,dx; 	mov    BYTE PTR [rdi+0x11],ch
0xbaac2:	mov    BYTE PTR [rdi+0x12],ch
0xbaac1:	in     eax,dx; 	mov    BYTE PTR [rdi+0x12],ch
0xbaae0:	mov    BYTE PTR [rdi+0x13],ch
0xbaadf:	in     eax,dx; 	mov    BYTE PTR [rdi+0x13],ch
0xbab00:	mov    BYTE PTR [rdi+0x14],ch
0xbaaff:	in     eax,dx; 	mov    BYTE PTR [rdi+0x14],ch
0xbab26:	mov    BYTE PTR [rdi+0x15],ch
0xbab25:	in     eax,dx; 	mov    BYTE PTR [rdi+0x15],ch
0xbab42:	mov    BYTE PTR [rdi+0x16],ch
0xbab41:	in     eax,dx; 	mov    BYTE PTR [rdi+0x16],ch
0xbab62:	mov    BYTE PTR [rdi+0x17],ch
0xbab61:	in     eax,dx; 	mov    BYTE PTR [rdi+0x17],ch
0xbab82:	mov    BYTE PTR [rdi+0x18],ch
0xbab81:	in     eax,dx; 	mov    BYTE PTR [rdi+0x18],ch
0xbaba8:	mov    BYTE PTR [rdi+0x19],ch
0xbaba7:	in     eax,dx; 	mov    BYTE PTR [rdi+0x19],ch
0xbabca:	mov    BYTE PTR [rdi+0x1a],ch
0xbabc9:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1a],ch
0xbabe8:	mov    BYTE PTR [rdi+0x1b],ch
0xbabe7:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1b],ch
0xbac08:	mov    BYTE PTR [rdi+0x1c],ch
0xbac07:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1c],ch
0xbac24:	mov    BYTE PTR [rdi+0x1d],ch
0xbac23:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1d],ch
0xbac44:	mov    BYTE PTR [rdi+0x1e],ch
0xbac43:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1e],ch
0xbac64:	mov    BYTE PTR [rdi+0x1f],ch
0xbac63:	in     eax,dx; 	mov    BYTE PTR [rdi+0x1f],ch
0xbac84:	mov    BYTE PTR [rdi+0x20],ch
0xbac83:	in     eax,dx; 	mov    BYTE PTR [rdi+0x20],ch
0xbacaa:	mov    BYTE PTR [rdi+0x21],ch
0xbaca9:	in     eax,dx; 	mov    BYTE PTR [rdi+0x21],ch
0xbacfa:	mov    BYTE PTR [rdi+0x40],ch
0xbacf9:	in     eax,dx; 	mov    BYTE PTR [rdi+0x40],ch
0xbad9e:	add    BYTE PTR [rax],al
0xbad9d:	add    BYTE PTR [rax],r8b
0xbae3b:	shl    DWORD PTR [rsi+0xf],0xda
0xbaea2:	in     eax,dx
0xbaea1:	jne    0xbae90
0xbaea0:	leave  ; 	jne    0xbae90
0xbae9f:	test   cl,cl; 	jne    0xbae90
0xbaea4:	xor    eax,eax
0xbaea3:	ret    ; 	xor    eax,eax
0xbaea2:	in     eax,dx; 	ret    ; 	xor    eax,eax
0xbaeff:	shl    DWORD PTR [rsi+0xf],0xda
0xbaf52:	in     eax,dx
0xbaf51:	jne    0xbaf40
0xbaf50:	leave  ; 	jne    0xbaf40
0xbaf4f:	test   cl,cl; 	jne    0xbaf40
0xbaf54:	xor    eax,eax
0xbaf53:	ret    ; 	xor    eax,eax
0xbaf52:	in     eax,dx; 	ret    ; 	xor    eax,eax
0xbaf59:	clc    
0xbaf58:	mov    eax,edi
0xbaf57:	mov    rax,rdi
0xbaf56:	ret    ; 	mov    rax,rdi
0xbaf8c:	outs   dx,DWORD PTR ds:[rsi]
0xbb0c4:	lea    eax,[rcx-0x1]
0xbb0c3:	lea    rax,[rcx-0x1]
0xbb0cf:	add    BYTE PTR [rcx+0x1],cl
0xbb117:	outs   dx,DWORD PTR ds:[rsi]
0xbb214:	sub    eax,0x1
0xbb213:	sub    rax,0x1
0xbb240:	xor    eax,eax
0xbb23e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xbb2e4:	sub    eax,edx
0xbb2e3:	sub    rax,rdx
0xbb388:	cmove  eax,edx
0xbb387:	cmove  rax,rdx
0xbb424:	sub    eax,edx
0xbb423:	sub    rax,rdx
0xbb483:	adc    DWORD PTR [rdi+rdx*1-0x10],ecx
0xbb4d7:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xbb4d6:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xbb4d5:	add    esi,ebx; 	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xbb4d4:	jb     0xbb4d9; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xbb4e6:	cld    
0xbb4e5:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]; 	cld    
0xbb4e4:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]; 	cld    
0xbb4e3:	std    ; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]; 	cld    
0xbb53b:	adc    DWORD PTR [rdi+rdx*1-0x10],ecx
0xbb565:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xbb564:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xbb562:	mov    ecx,edx; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0xbb57b:	mov    BYTE PTR [rdi],cl
0xbb579:	mov    dh,0xe; 	mov    BYTE PTR [rdi],cl
0xbb58c:	mov    DWORD PTR [rdi],esi
0xbb58b:	mov    QWORD PTR [rdi],rsi
0xbb58a:	clc    ; 	mov    QWORD PTR [rdi],rsi
0xbb599:	mov    DWORD PTR [rdi],esi
0xbb598:	cld    ; 	mov    DWORD PTR [rdi],esi
0xbb5aa:	mov    DWORD PTR [rdi],esi
0xbb5a9:	mov    WORD PTR [rdi],si
0xbb607:	adc    DWORD PTR [rdi+rdx*1-0x40],edi
0xbb62a:	adc    DWORD PTR [rdi+rdx*1-0x20],ebx
0xbb6c1:	adc    DWORD PTR [rbx],esp
0xbb6c0:	movups XMMWORD PTR [rbx],xmm4
0xbb6bf:	movups XMMWORD PTR [r11],xmm4
0xbb748:	adc    DWORD PTR [rbx],eax
0xbb747:	movups XMMWORD PTR [rbx],xmm0
0xbb746:	movups XMMWORD PTR [r11],xmm8
0xbb7af:	adc    DWORD PTR [rbx],esp
0xbb7ae:	movups XMMWORD PTR [rbx],xmm4
0xbb7ad:	movups XMMWORD PTR [r11],xmm4
0xbb816:	adc    DWORD PTR [rbx],eax
0xbb815:	movups XMMWORD PTR [rbx],xmm0
0xbb814:	movups XMMWORD PTR [r11],xmm8
0xbb89c:	jg     0xbb8a5
0xbb89b:	movq   QWORD PTR [rdi],mm0
0xbb89a:	movdqu XMMWORD PTR [rdi],xmm0
0xbb8bd:	mov    eax,edx
0xbb8bc:	mov    rax,rdx
0xbb8bb:	stos   BYTE PTR es:[rdi],al; 	mov    rax,rdx
0xbb8fc:	jg     0xbb905
0xbb8fb:	movq   QWORD PTR [rdi],mm0
0xbb8fa:	movdqu XMMWORD PTR [rdi],xmm0
0xbb97e:	in     al,0xf3
0xbb997:	mov    BYTE PTR [rdi],cl
0xbb995:	jb     0xbb999; 	mov    BYTE PTR [rdi],cl
0xbb9a0:	mov    DWORD PTR [rdi],ecx
0xbb99f:	mov    QWORD PTR [rdi],rcx
0xbb99e:	clc    ; 	mov    QWORD PTR [rdi],rcx
0xbb9a7:	mov    DWORD PTR [rdi],ecx
0xbb9a6:	cld    ; 	mov    DWORD PTR [rdi],ecx
0xbb9b0:	mov    DWORD PTR [rdi],ecx
0xbb9af:	mov    WORD PTR [rdi],cx
0xbba12:	pop    rbx
0xbba10:	xor    eax,eax; 	pop    rbx
0xbba4f:	pop    rbx
0xbba4c:	cmove  eax,edx; 	pop    rbx
0xbba62:	pop    rbx
0xbba60:	add    eax,DWORD PTR [rax]; 	pop    rbx
0xbba5f:	cld    ; 	add    eax,DWORD PTR [rax]; 	pop    rbx
0xbba87:	pop    rbx
0xbba84:	cmove  eax,ecx; 	pop    rbx
0xbba93:	pop    rbx
0xbba91:	mov    dh,0xc1; 	pop    rbx
0xbba90:	movzx  eax,cl; 	pop    rbx
0xbbaad:	pop    rbx
0xbbaab:	inc    DWORD PTR [rbx]; 	pop    rbx
0xbbaaa:	cld    ; 	inc    DWORD PTR [rbx]; 	pop    rbx
0xbbadf:	pop    rbx
0xbbadc:	cmovne eax,edx; 	pop    rbx
0xbbb02:	pop    rbx
0xbbb00:	add    BYTE PTR [rax],al; 	pop    rbx
0xbbb09:	pop    rbx
0xbbb07:	add    BYTE PTR [rax],al; 	pop    rbx
0xbbb10:	pop    rbx
0xbbb0e:	add    BYTE PTR [rax],al; 	pop    rbx
0xbbb17:	pop    rbx
0xbbb15:	add    BYTE PTR [rax],al; 	pop    rbx
0xbbb1e:	pop    rbx
0xbbb1c:	add    BYTE PTR [rax],al; 	pop    rbx
0xbbb25:	pop    rbx
0xbbb23:	add    BYTE PTR [rax],al; 	pop    rbx
0xbbb2c:	pop    rbx
0xbbb2a:	add    BYTE PTR [rax],al; 	pop    rbx
0xbbb42:	mov    eax,eax
0xbbb41:	pop    rbx; 	mov    eax,eax
0xbbb40:	icebp  ; 	pop    rbx; 	mov    eax,eax
0xbbb48:	pop    rbx
0xbbb46:	mov    eax,edx; 	pop    rbx
0xbbb45:	mov    rax,rdx; 	pop    rbx
0xbbb5a:	mov    eax,eax
0xbbb59:	icebp  ; 	mov    eax,eax
0xbbb58:	div    ecx; 	mov    eax,eax
0xbbc8b:	pop    rbp
0xbbc8a:	pop    r13
0xbbc89:	pop    rsp; 	pop    r13
0xbbc88:	pop    r12; 	pop    r13
0xbbca0:	xor    eax,eax
0xbbc9e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xbbe8d:	sub    BYTE PTR [rbx+rcx*4+0x35],cl
0xbbfcd:	pop    rdi
0xbbfcc:	pop    r15
0xbbfcb:	pop    rsi; 	pop    r15
0xbbfca:	pop    r14; 	pop    r15
0xbc004:	xor    eax,eax
0xbc002:	je     0xbc010; 	xor    eax,eax
0xbc04e:	loope  0xbc043
0xbc04c:	mov    dh,BYTE PTR [rcx+riz*8-0xd]
0xbc09b:	fdiv   st(3),st
0xbc099:	mov    BYTE PTR [rsp+rbx*8-0xd],dh
0xbc116:	cmove  eax,edx
0xbc115:	cmove  rax,rdx
0xbcc64:	xor    eax,eax
0xbcc62:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xbcc83:	add    BYTE PTR [rax],al
0xbcc9a:	add    BYTE PTR [rax],al
0xbcc98:	xor    al,0x1; 	add    BYTE PTR [rax],al
0xbccaf:	add    BYTE PTR [rax],al
0xbccca:	add    BYTE PTR [rax],al
0xbccc8:	add    al,0x1; 	add    BYTE PTR [rax],al
0xbcce5:	add    BYTE PTR [rax],al
0xbccfa:	add    BYTE PTR [rax],al
0xbcd0f:	add    BYTE PTR [rax],al
0xbcd2a:	add    BYTE PTR [rax],al
0xbcd45:	add    BYTE PTR [rax],al
0xbcd43:	mov    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xbcd56:	jne    0xbcdd0
0xbcd6b:	jne    0xbcdd0
0xbcd6a:	sub    BYTE PTR [rbp+0x63],dh
0xbcd69:	rex.RX sub BYTE PTR [rbp+0x63],r14b
0xbcd77:	pop    rax
0xbcd76:	jne    0xbcdd0
0xbcd75:	sub    al,0x75; 	pop    rax
0xbcd74:	rex.RX sub al,0x75; 	pop    rax
0xbcd91:	jne    0xbcdd0
0xbcd90:	xor    BYTE PTR [rbp+0x3d],dh
0xbcd8f:	rex.RX xor BYTE PTR [rbp+0x3d],r14b
0xbcda6:	jne    0xbcdd0
0xbcdbb:	jne    0xbcdd0
0xbcdba:	cmp    BYTE PTR [rbp+0x13],dh
0xbcdb9:	rex.RX cmp BYTE PTR [rbp+0x13],r14b
0xbcdc6:	jne    0xbcdd0
0xbcdd7:	neg    eax
0xbcdd5:	jg     0xbcdd9; 	neg    eax
0xbcde1:	xor    eax,eax
0xbcde0:	xor    rax,rax
0xbce0a:	cmovne eax,edx
0xbce09:	cmovne rax,rdx
0xbce27:	add    BYTE PTR [rax-0x7d],cl
0xbce26:	add    BYTE PTR [rax-0x7d],cl
0xbce47:	pop    rsp
0xbce46:	pop    r12
0xbce45:	pop    rbp; 	pop    r12
0xbce44:	pop    rbx; 	pop    rbp; 	pop    r12
0xbcea7:	pop    rbp
0xbcea6:	pop    rbx; 	pop    rbp
0xbcea4:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xbced6:	cmove  eax,edx
0xbced5:	cmove  rax,rdx
0xbcf4e:	add    bl,dh
0xbcf4c:	add    BYTE PTR [rax],al; 	add    bl,dh
0xbcfa2:	add    al,0x75
0xbcfa1:	rex.B add al,0x75
0xbcfbd:	mov    dh,bl
0xbd07f:	xor    eax,eax
0xbd07d:	je     0xbd088; 	xor    eax,eax
0xbd09a:	cmovg  eax,edx
0xbd12c:	pop    rbx
0xbd12a:	mov    eax,ebx; 	pop    rbx
0xbd129:	mov    rax,rbx; 	pop    rbx
0xbd168:	pop    rbx
0xbd166:	mov    eax,ebx; 	pop    rbx
0xbd165:	mov    rax,rbx; 	pop    rbx
0xbd1b7:	add    BYTE PTR [rax-0x7d],cl
0xbd1b6:	add    BYTE PTR [rax-0x7d],cl
0xbd1d7:	pop    rbp
0xbd1d6:	pop    rbx; 	pop    rbp
0xbd1d5:	or     BYTE PTR [rbx+0x5d],bl
0xbd216:	cmove  eax,edx
0xbd215:	cmove  rax,rdx
0xbd267:	xor    eax,eax
0xbd266:	ret    ; 	xor    eax,eax
0xbd265:	repz ret ; 	xor    eax,eax
0xbd2bb:	pop    rsp
0xbd2ba:	pop    r12
0xbd2b9:	pop    rbp; 	pop    r12
0xbd2b8:	pop    rbx; 	pop    rbp; 	pop    r12
0xbd2ee:	pop    rsp
0xbd2ed:	pop    r12
0xbd2ec:	pop    rbp; 	pop    r12
0xbd2eb:	pop    rbx; 	pop    rbp; 	pop    r12
0xbd326:	clc    
0xbd325:	mov    eax,edi
0xbd324:	mov    rax,rdi
0xbd323:	dec    DWORD PTR [rax-0x77]; 	clc    
0xbd436:	cmove  eax,edx
0xbd435:	cmove  rax,rdx
0xbd499:	add    BYTE PTR [rdx+rax*8-0xd],dh
0xbd4e3:	or     al,0xf3
0xbd4e1:	add    BYTE PTR [rsp+rcx*1-0xd],dh
0xbd50b:	cmove  eax,edx
0xbd50a:	cmove  rax,rdx
0xbd5db:	mov    eax,ecx
0xbd5da:	mov    rax,rcx
0xbd5d9:	add    al,0x48; 	mov    eax,ecx
0xbd631:	mov    eax,ecx
0xbd630:	mov    rax,rcx
0xbd62f:	rex.W; 	mov    rax,rcx
0xbd73a:	pop    rsp
0xbd739:	pop    r12
0xbd738:	pop    rbp; 	pop    r12
0xbd737:	pop    rbx; 	pop    rbp; 	pop    r12
0xbd89d:	pop    rsi
0xbd89c:	pop    r14
0xbd89b:	pop    rbp; 	pop    r14
0xbd89a:	pop    r13; 	pop    r14
0xbda82:	pop    rsi
0xbda81:	pop    r14
0xbda80:	pop    rbp; 	pop    r14
0xbda7f:	pop    r13; 	pop    r14
0xbda8e:	add    BYTE PTR [rax-0x77],cl
0xbda8d:	str    WORD PTR [rax-0x77]
0xbdd21:	pop    rsp
0xbdd20:	pop    r12
0xbdd1f:	pop    rbp; 	pop    r12
0xbdd1e:	pop    rbx; 	pop    rbp; 	pop    r12
0xbddae:	add    BYTE PTR [rax+0x39],cl
0xbdf6b:	pop    rdi
0xbdf6a:	pop    r15
0xbdf69:	pop    rsi; 	pop    r15
0xbdf68:	pop    r14; 	pop    r15
0xbe086:	add    BYTE PTR [rax+0x39],cl
0xbe335:	pop    rdi
0xbe334:	pop    r15
0xbe333:	pop    rsi; 	pop    r15
0xbe332:	pop    r14; 	pop    r15
0xbe366:	add    BYTE PTR [rax+0x39],cl
0xbe636:	pop    rdi
0xbe635:	pop    r15
0xbe634:	pop    rsi; 	pop    r15
0xbe633:	pop    r14; 	pop    r15
0xbe64e:	add    BYTE PTR [rax+0x39],cl
0xbe870:	pop    rdi
0xbe86f:	pop    r15
0xbe86e:	pop    rsi; 	pop    r15
0xbe86d:	pop    r14; 	pop    r15
0xbec7a:	add    BYTE PTR [rax-0x77],cl
0xbecd5:	pop    rdi
0xbecd4:	pop    r15
0xbecd3:	pop    rsi; 	pop    r15
0xbecd2:	pop    r14; 	pop    r15
0xbecef:	add    BYTE PTR [rax-0x7d],cl
0xbedea:	add    BYTE PTR [rax-0x7d],cl
0xbef8a:	add    BYTE PTR [rax-0x7d],cl
0xbf00e:	pop    rdi
0xbf00d:	pop    r15
0xbf00c:	pop    rsi; 	pop    r15
0xbf00b:	pop    r14; 	pop    r15
0xbf01f:	add    BYTE PTR [rax-0x7d],cl
0xbf13a:	add    BYTE PTR [rax-0x7d],cl
0xbf312:	in     al,0x75
0xbf3ac:	add    BYTE PTR [rax-0x7d],cl
0xbf405:	pop    rdi
0xbf404:	pop    r15
0xbf403:	pop    rsi; 	pop    r15
0xbf402:	pop    r14; 	pop    r15
0xbf41f:	add    BYTE PTR [rax-0x7d],cl
0xbf51a:	add    BYTE PTR [rax-0x7d],cl
0xbf689:	add    BYTE PTR [rax-0x7d],cl
0xbf7c8:	pop    rdi
0xbf7c7:	pop    r15
0xbf7c6:	pop    rsi; 	pop    r15
0xbf7c5:	pop    r14; 	pop    r15
0xbfa20:	pop    rdi
0xbfa1f:	pop    r15
0xbfa1e:	pop    rsi; 	pop    r15
0xbfa1d:	pop    r14; 	pop    r15
0xbfb0d:	add    BYTE PTR [rax-0x39],cl
0xbfccf:	add    BYTE PTR [rax-0x7d],cl
0xbfcce:	add    BYTE PTR [rax-0x7d],cl
0xbfd33:	dec    DWORD PTR [rax-0x39]
0xc0447:	pop    rdi
0xc0446:	pop    r15
0xc0445:	pop    rsi; 	pop    r15
0xc0444:	pop    r14; 	pop    r15
0xc076e:	enter  0xf66,0x62
0xc0a87:	xor    al,ch
0xc1709:	cmp    DWORD PTR [rax+0x63],ecx
0xc1b43:	add    BYTE PTR [rax+0x63],cl
0xc21e8:	pop    rdi
0xc21e7:	pop    r15
0xc21e6:	pop    rsi; 	pop    r15
0xc21e5:	pop    r14; 	pop    r15
0xc23f3:	pop    rdi
0xc23f2:	pop    r15
0xc23f1:	pop    rsi; 	pop    r15
0xc23f0:	pop    r14; 	pop    r15
0xc2509:	fmul   DWORD PTR [rax-0x39]
0xc269f:	add    BYTE PTR [rax-0x7d],cl
0xc2de5:	pop    rdi
0xc2de4:	pop    r15
0xc2de3:	pop    rsi; 	pop    r15
0xc2de2:	pop    r14; 	pop    r15
0xc313c:	enter  0xf66,0x62
0xc407f:	cmp    ecx,DWORD PTR [rax+0x63]
0xc4141:	add    BYTE PTR [rax-0x77],cl
0xc44eb:	add    BYTE PTR [rax+0x63],cl
0xc4b68:	pop    rdi
0xc4b67:	pop    r15
0xc4b66:	pop    rsi; 	pop    r15
0xc4b65:	pop    r14; 	pop    r15
0xc4dbd:	pop    rdi
0xc4dbc:	pop    r15
0xc4dbb:	pop    rsi; 	pop    r15
0xc4dba:	pop    r14; 	pop    r15
0xc4e9d:	add    BYTE PTR [rax-0x39],cl
0xc504f:	add    BYTE PTR [rax-0x7d],cl
0xc504e:	add    BYTE PTR [rax-0x7d],cl
0xc50ab:	dec    DWORD PTR [rax-0x39]
0xc54c7:	pop    rdi
0xc54c6:	pop    r15
0xc54c5:	pop    rsi; 	pop    r15
0xc54c4:	pop    r14; 	pop    r15
0xc5ca4:	enter  0xf66,0x62
0xc6775:	add    BYTE PTR [rax+0x39],cl
0xc698c:	fimul  WORD PTR [rax-0x77]
0xc7248:	add    BYTE PTR [rax+0x63],cl
0xc788a:	pop    rbp
0xc7889:	pop    rbx; 	pop    rbp
0xc7888:	sub    BYTE PTR [rbx+0x5d],bl
0xc7968:	pop    rbp
0xc7967:	pop    rbx; 	pop    rbp
0xc7966:	cmp    BYTE PTR [rbx+0x5d],bl
0xc7a3a:	pop    rbp
0xc7a39:	pop    rbx; 	pop    rbp
0xc7a38:	sub    BYTE PTR [rbx+0x5d],bl
0xc7afb:	add    dh,bl
0xc7af9:	add    BYTE PTR [rdx+rax*1-0xd],dh
0xc7afe:	or     eax,0xffffffff
0xc7afd:	ret    ; 	or     eax,0xffffffff
0xc7be7:	pop    rsi
0xc7be6:	pop    r14
0xc7be5:	pop    rbp; 	pop    r14
0xc7be4:	pop    rbx; 	pop    rbp; 	pop    r14
0xc7bef:	add    bl,dh
0xc7bed:	add    BYTE PTR [rax],al; 	add    bl,dh
0xc7bf8:	xor    eax,eax
0xc7bf6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xc81f0:	pop    rdi
0xc81ef:	pop    r15
0xc81ee:	pop    rsi; 	pop    r15
0xc81ed:	pop    r14; 	pop    r15
0xc8462:	fimul  WORD PTR [rax-0x77]
0xc8815:	add    BYTE PTR [rax+0x63],cl
0xc8a9f:	dec    DWORD PTR [rax-0x77]
0xc8acc:	pop    rbp
0xc8acb:	pop    rdi; 	pop    rbp
0xc8aca:	pop    r15; 	pop    rbp
0xc8ac9:	pop    rsi; 	pop    r15; 	pop    rbp
0xc8b02:	mov    dh,dh
0xc9a02:	dec    DWORD PTR [rax-0x77]
0xc9f67:	fisttp QWORD PTR [rax-0x77]
0xca986:	add    DWORD PTR [rcx+0x39],eax
0xca9e2:	dec    DWORD PTR [rax-0x77]
0xcaed4:	xchg   ebx,eax
0xcaed1:	adc    BYTE PTR [rcx+0xf],al; 	xchg   ebx,eax
0xcb5cd:	xchg   ebx,eax
0xcb9c1:	dec    DWORD PTR [rcx-0x77]
0xcbbf7:	add    BYTE PTR [rcx],bh
0xcbc1b:	fsubr  QWORD PTR [rcx]
0xcbc23:	pop    rsp
0xcbc22:	pop    r12
0xcbc21:	pop    rbp; 	pop    r12
0xcbc20:	pop    rbx; 	pop    rbp; 	pop    r12
0xcbc6f:	or     bh,BYTE PTR [rcx]
0xcbc87:	pop    rbp
0xcbc86:	pop    r13
0xcbc85:	pop    rsp; 	pop    r13
0xcbc84:	pop    r12; 	pop    r13
0xcbc90:	xor    eax,eax
0xcbc8e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xcbcbf:	add    BYTE PTR [rcx],bh
0xcbcbe:	add    BYTE PTR [rcx],dil
0xcbcf7:	pop    rbp
0xcbcf6:	pop    r13
0xcbcf5:	pop    rsp; 	pop    r13
0xcbcf4:	pop    r12; 	pop    r13
0xcbd45:	or     bh,BYTE PTR [rcx]
0xcbd4f:	shr    BYTE PTR [rcx],1
0xcbd5b:	pop    rsi
0xcbd5a:	pop    r14
0xcbd59:	pop    rbp; 	pop    r14
0xcbd58:	pop    r13; 	pop    r14
0xcbd60:	xor    eax,eax
0xcbdb0:	pop    rbx
0xcbe15:	pop    rbx
0xcbe12:	add    esp,0x20; 	pop    rbx
0xcc057:	pop    rbp
0xcc056:	pop    rdi; 	pop    rbp
0xcc055:	pop    r15; 	pop    rbp
0xcc054:	pop    rsi; 	pop    r15; 	pop    rbp
0xcc1a0:	pop    rbp
0xcc19f:	pop    rbx; 	pop    rbp
0xcc19e:	or     BYTE PTR [rbx+0x5d],bl
0xcc29a:	pop    rbp
0xcc299:	pop    r13
0xcc298:	pop    rsp; 	pop    r13
0xcc297:	pop    r12; 	pop    r13
0xcc469:	add    BYTE PTR [rax-0x39],cl
0xcc4a2:	pop    rdi
0xcc4a1:	pop    r15
0xcc4a0:	pop    rsi; 	pop    r15
0xcc49f:	pop    r14; 	pop    r15
0xcc5d6:	add    BYTE PTR [rax+0x39],cl
0xcc7ce:	pop    rbx
0xcc7cc:	add    BYTE PTR [rax],al; 	pop    rbx
0xcc910:	pop    rbp
0xcc90f:	pop    rbx; 	pop    rbp
0xcc90e:	lock pop rbx; 	pop    rbp
0xcc90d:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0xccadc:	pop    rbx
0xccada:	add    BYTE PTR [rax],al; 	pop    rbx
0xccc09:	pop    rbx
0xccc08:	lock pop rbx
0xccc07:	mov    eax,esi; 	pop    rbx
0xccd19:	add    BYTE PTR [rax],al
0xccd17:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0xccdd6:	pop    rbp
0xccdd5:	pop    r13
0xccdd4:	pop    rsp; 	pop    r13
0xccdd3:	pop    r12; 	pop    r13
0xcce67:	pop    rdi
0xcce66:	pop    r15
0xcce65:	pop    rsi; 	pop    r15
0xcce64:	pop    r14; 	pop    r15
0xcd057:	lods   eax,DWORD PTR ds:[rsi]
0xcd1d8:	pop    rdi
0xcd1d7:	pop    r15
0xcd1d6:	pop    rsi; 	pop    r15
0xcd1d5:	pop    r14; 	pop    r15
0xcd43d:	pop    rdi
0xcd43c:	pop    r15
0xcd43b:	pop    rsi; 	pop    r15
0xcd43a:	pop    r14; 	pop    r15
0xcd57a:	sbb    ecx,DWORD PTR [rax-0x39]
0xcd710:	xchg   ebp,eax
0xcd70e:	ror    BYTE PTR [rdi],1; 	xchg   ebp,eax
0xcd76f:	add    BYTE PTR [rax-0x7d],cl
0xcd923:	xchg   esp,eax
0xcd97a:	dec    DWORD PTR [rax-0x39]
0xcdf67:	pop    rdi
0xcdf66:	pop    r15
0xcdf65:	pop    rsi; 	pop    r15
0xcdf64:	pop    r14; 	pop    r15
0xce2cf:	enter  0xf66,0x62
0xcf799:	add    BYTE PTR [rax+0x63],cl
0xcffee:	pop    rbp
0xcffed:	pop    rbx; 	pop    rbp
0xcffec:	sub    BYTE PTR [rbx+0x5d],bl
0xd010d:	push   rbx
0xd011a:	add    bh,bh
0xd0119:	add    dil,r15b
0xd0118:	lea    eax,[rax+rax*1-0x1]
0xd01c9:	add    eax,ecx
0xd01c8:	add    rax,rcx
0xd01c7:	clc    ; 	add    rax,rcx
0xd0224:	xlat   BYTE PTR ds:[rbx]
0xd0221:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xd028e:	xlat   BYTE PTR ds:[rbx]
0xd028b:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xd02a3:	xlat   BYTE PTR ds:[rbx]
0xd02a0:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xd0331:	xlat   BYTE PTR ds:[rbx]
0xd032e:	xor    BYTE PTR [rsi+0xf],ah; 	xlat   BYTE PTR ds:[rbx]
0xd0343:	lea    eax,[rdi+rax*1+0x30]
0xd0389:	xlat   BYTE PTR ds:[rbx]
0xd0386:	fldenv [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0xd03ad:	xor    eax,eax
0xd03ab:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xd03d9:	xor    eax,eax
0xd03d8:	push   rdi; 	xor    eax,eax
0xd03d7:	jne    0xd0430; 	xor    eax,eax
0xd03e6:	cmp    al,dh
0xd03e5:	cmp    al,r14b
0xd03e4:	lea    eax,[rax+rdi*1-0x10]
0xd03f5:	clc    
0xd03f4:	add    eax,edi
0xd03f3:	add    rax,rdi
0xd03f2:	ror    BYTE PTR [rax+0x1],0xf8
0xd0406:	cmp    BYTE PTR [rax],dl
0xd0405:	cmp    BYTE PTR [rax],r10b
0xd0404:	lea    eax,[rax+rdi*1+0x10]
0xd0416:	cmp    BYTE PTR [rax],ah
0xd0415:	cmp    BYTE PTR [rax],r12b
0xd0414:	lea    eax,[rax+rdi*1+0x20]
0xd042a:	clc    
0xd0429:	add    eax,edi
0xd0428:	add    rax,rdi
0xd0427:	cmp    BYTE PTR [rax+0x1],cl; 	clc    
0xd0439:	lea    eax,[rdi+rax*1+0x10]
0xd0449:	lea    eax,[rdi+rax*1+0x20]
0xd0459:	lea    eax,[rdi+rax*1+0x30]
0xd0460:	xor    eax,eax
0xd045f:	nop; 	xor    eax,eax
0xd045e:	xchg   ax,ax; 	xor    eax,eax
0xd0547:	add    eax,ecx
0xd0546:	add    rax,rcx
0xd0545:	clc    ; 	add    rax,rcx
0xd0611:	clc    
0xd0610:	add    eax,edi
0xd060f:	add    rax,rdi
0xd060e:	adc    BYTE PTR [rax+0x1],cl; 	clc    
0xd0621:	xor    eax,eax
0xd0620:	xor    rax,rax
0xd0723:	xlat   BYTE PTR ds:[rbx]
0xd0720:	retf   0xf66; 	xlat   BYTE PTR ds:[rbx]
0xd079e:	lea    eax,[rdi-0x10]
0xd079d:	lea    rax,[rdi-0x10]
0xd0800:	lea    eax,[rdi-0x10]
0xd07ff:	lea    rax,[rdi-0x10]
0xd081d:	lea    eax,[rdi-0x10]
0xd081c:	lea    rax,[rdi-0x10]
0xd0843:	lea    eax,[rdi-0x10]
0xd0842:	lea    rax,[rdi-0x10]
0xd086d:	lea    eax,[rdi-0x10]
0xd086c:	lea    rax,[rdi-0x10]
0xd08ae:	lea    eax,[rdi-0x10]
0xd08ad:	lea    rax,[rdi-0x10]
0xd08c9:	lea    eax,[rdi-0x10]
0xd08c8:	lea    rax,[rdi-0x10]
0xd08db:	lea    eax,[rdi-0x10]
0xd08da:	lea    rax,[rdi-0x10]
0xd08f1:	lea    eax,[rdi-0x10]
0xd08f0:	lea    rax,[rdi-0x10]
0xd0903:	hlt    
0xd0902:	rex.RXB hlt 
0xd0901:	lea    eax,[rdi-0xc]
0xd0900:	lea    rax,[rdi-0xc]
0xd0913:	clc    
0xd0912:	rex.RXB clc 
0xd0911:	lea    eax,[rdi-0x8]
0xd0910:	lea    rax,[rdi-0x8]
0xd0923:	cld    
0xd0922:	rex.RXB cld 
0xd0921:	lea    eax,[rdi-0x4]
0xd0920:	lea    rax,[rdi-0x4]
0xd0931:	xor    eax,eax
0xd0930:	xor    rax,rax
0xd0946:	xor    eax,eax
0xd0945:	xor    rax,rax
0xd0944:	add    al,0x48; 	xor    eax,eax
0xd09eb:	shr    eax,0x2
0xd09ea:	shr    rax,0x2
0xd0a53:	shr    eax,0x2
0xd0a52:	shr    rax,0x2
0xd0a68:	shr    eax,0x2
0xd0a67:	shr    rax,0x2
0xd0aaf:	add    BYTE PTR [rcx+0x39],cl
0xd0b01:	shr    eax,0x2
0xd0b00:	shr    rax,0x2
0xd0b58:	shr    eax,0x2
0xd0b57:	shr    rax,0x2
0xd0be7:	add    bl,dh
0xd0bea:	xor    eax,eax
0xd0be9:	ret    ; 	xor    eax,eax
0xd0be8:	repz ret ; 	xor    eax,eax
0xd0bf0:	add    BYTE PTR [rax],al
0xd0bee:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd0bf6:	add    BYTE PTR [rax],al
0xd0bf4:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xd0de0:	je     0xd0e00
0xd0ddf:	pcmpeqb mm3,QWORD PTR [rsi]
0xd0dde:	loope  0xd0def; 	je     0xd0e00
0xd0df8:	add    eax,0x2
0xd0df7:	add    rax,0x2
0xd0e01:	add    eax,0x1
0xd0e00:	add    rax,0x1
0xd0e11:	add    eax,0x3
0xd0e10:	add    rax,0x3
0xd0e21:	xor    eax,eax
0xd0e20:	xor    rax,rax
0xd0e35:	add    BYTE PTR [rax],al
0xd0e33:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xd0e45:	add    BYTE PTR [rax],al
0xd0e43:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xd0e55:	add    BYTE PTR [rax],al
0xd0e53:	add    eax,DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0xd0e65:	add    BYTE PTR [rax],al
0xd0e63:	add    al,0x0; 	add    BYTE PTR [rax],al
0xd0e75:	add    BYTE PTR [rax],al
0xd0e85:	add    BYTE PTR [rax],al
0xd0e95:	add    BYTE PTR [rax],al
0xd119c:	pop    rsi
0xd119b:	pop    r14
0xd119a:	pop    rsp; 	pop    r14
0xd1199:	pop    r12; 	pop    r14
0xd124e:	pop    rsi
0xd124d:	pop    r14
0xd124c:	pop    rsp; 	pop    r14
0xd124b:	pop    r12; 	pop    r14
0xd12fb:	pop    rbx
0xd12f9:	mov    eax,ebx; 	pop    rbx
0xd12f8:	mov    rax,rbx; 	pop    rbx
0xd1323:	pop    rbx
0xd1321:	mov    eax,ebx; 	pop    rbx
0xd1320:	mov    rax,rbx; 	pop    rbx
0xd13e4:	add    esp,0x8
0xd13e3:	add    rsp,0x8
0xd1411:	add    esp,0x8
0xd1410:	add    rsp,0x8
0xd142e:	xor    eax,eax
0xd142c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xd14ab:	add    esp,0x28
0xd14aa:	add    rsp,0x28
0xd151f:	pop    rbx
0xd151e:	rex pop rbx
0xd151c:	add    esp,0x40; 	pop    rbx
0xd154c:	and    al,0xf0
0xd154b:	rex.R and al,0xf0
0xd154a:	adc    BYTE PTR [rsp-0x10],al
0xd1c51:	pop    rdi
0xd1c50:	pop    r15
0xd1c4f:	pop    rsi; 	pop    r15
0xd1c4e:	pop    r14; 	pop    r15
0xd2117:	xor    BYTE PTR [rcx-0x77],al
0xd2641:	pop    rdi
0xd2640:	pop    r15
0xd263f:	pop    rsi; 	pop    r15
0xd263e:	pop    r14; 	pop    r15
0xd2975:	syscall 
0xd2973:	add    BYTE PTR [rax],al; 	syscall 
0xd2a05:	add    esp,0x28
0xd2a04:	add    rsp,0x28
0xd2a3e:	or     ebx,esi
0xd2ae5:	add    esp,0x28
0xd2ae4:	add    rsp,0x28
0xd2b1d:	jae    0xd2b20
0xd2b1c:	push   QWORD PTR [rbx+0x1]
0xd2b2d:	or     eax,0xffffffff
0xd2b2c:	or     rax,0xffffffffffffffff
0xd2c35:	pop    rbx
0xd2c33:	add    BYTE PTR [rax],al; 	pop    rbx
0xd2d5b:	add    BYTE PTR [rcx],ch
0xd2d59:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],ch
0xd2ecd:	pop    rdi
0xd2ecc:	pop    r15
0xd2ecb:	pop    rsi; 	pop    r15
0xd2eca:	pop    r14; 	pop    r15
0xd2fb7:	add    BYTE PTR [rax-0x7d],cl
0xd3029:	pop    rdi
0xd3028:	pop    r15
0xd3027:	pop    rsi; 	pop    r15
0xd3026:	pop    r14; 	pop    r15
0xd30ed:	pop    rdi
0xd30ec:	pop    r15
0xd30eb:	pop    rsi; 	pop    r15
0xd30ea:	pop    r14; 	pop    r15
0xd32f1:	pop    rsi
0xd32f0:	pop    r14
0xd32ef:	pop    rbp; 	pop    r14
0xd32ee:	pop    r13; 	pop    r14
0xd3301:	add    BYTE PTR [rax-0x7d],cl
0xd34ee:	pop    rsi
0xd34ed:	pop    r14
0xd34ec:	pop    rbp; 	pop    r14
0xd34eb:	pop    r13; 	pop    r14
0xd3535:	pop    rsi
0xd3534:	pop    r14
0xd3533:	pop    rbp; 	pop    r14
0xd3532:	pop    r13; 	pop    r14
0xd360a:	pop    rdi
0xd3609:	pop    r15
0xd3608:	pop    rsi; 	pop    r15
0xd3607:	pop    r14; 	pop    r15
0xd3acf:	jmp    0xd3ad2
0xd3cb7:	add    BYTE PTR [rcx],ch
0xd3cb5:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],ch
0xd3cca:	xchg   esp,eax
0xd3cc8:	ror    BYTE PTR [rdi],0x94
0xd3ec0:	pop    rdi
0xd3ebf:	pop    r15
0xd3ebe:	pop    rsi; 	pop    r15
0xd3ebd:	pop    r14; 	pop    r15
0xd40e3:	add    BYTE PTR [rax-0x77],cl
0xd419a:	pop    rbp
0xd4199:	pop    rbx; 	pop    rbp
0xd4198:	sbb    BYTE PTR [rbx+0x5d],bl
0xd41a7:	dec    DWORD PTR [rax-0x7d]
0xd4462:	pop    rsi
0xd4461:	pop    r14
0xd4460:	pop    rbp; 	pop    r14
0xd445f:	pop    r13; 	pop    r14
0xd4567:	dec    DWORD PTR [rax-0x7d]
0xd47ec:	pop    rdi
0xd47eb:	pop    r15
0xd47ea:	pop    rsi; 	pop    r15
0xd47e9:	pop    r14; 	pop    r15
0xd50ad:	or     cl,BYTE PTR [rax-0x7d]
0xd5227:	adc    BYTE PTR [rax-0x7d],cl
0xd525c:	or     ecx,DWORD PTR [rax-0x7d]
0xd52fc:	fmul   DWORD PTR [rax-0x7d]
0xd533d:	dec    DWORD PTR [rax+0x39]
0xd533c:	sti    ; 	dec    DWORD PTR [rax+0x39]
0xd5601:	pop    rdi
0xd5600:	pop    r15
0xd55ff:	pop    rsi; 	pop    r15
0xd55fe:	pop    r14; 	pop    r15
0xd57f0:	add    BYTE PTR [rax-0x77],cl
0xd58a5:	add    BYTE PTR [rbx+rcx*4+0xd],cl
0xd58ac:	add    BYTE PTR [rax-0x7d],cl
0xd59bc:	pop    rdi
0xd59bb:	pop    r15
0xd59ba:	pop    rsi; 	pop    r15
0xd59b9:	pop    r14; 	pop    r15
0xd5a1c:	psubb  mm1,QWORD PTR [rax-0x77]
0xd5b24:	add    BYTE PTR [rax-0x77],cl
0xd5b2f:	add    BYTE PTR [rax-0x7d],cl
0xd5e2d:	jae    0xd5e30
0xd5e2c:	push   QWORD PTR [rbx+0x1]
0xd5e3d:	or     eax,0xffffffff
0xd5e3c:	or     rax,0xffffffffffffffff
0xd5e5d:	jae    0xd5e60
0xd5e5c:	push   QWORD PTR [rbx+0x1]
0xd5e6d:	or     eax,0xffffffff
0xd5e6c:	or     rax,0xffffffffffffffff
0xd5ec4:	add    esp,0x28
0xd5ec3:	add    rsp,0x28
0xd5f32:	add    bl,dh
0xd5f30:	add    DWORD PTR [rax],eax; 	add    bl,dh
0xd5ff8:	pop    rbx
0xd5ff5:	add    esp,0x30; 	pop    rbx
0xd6079:	pop    rbp
0xd6078:	pop    rdi; 	pop    rbp
0xd6077:	pop    r15; 	pop    rbp
0xd6076:	pop    rsi; 	pop    r15; 	pop    rbp
0xd674f:	add    esp,0x8
0xd674e:	add    rsp,0x8
0xd6a71:	pop    rdi
0xd6a70:	pop    r15
0xd6a6f:	pop    rsi; 	pop    r15
0xd6a6e:	pop    r14; 	pop    r15
0xd6aaf:	add    BYTE PTR [rax-0x7d],cl
0xd6aae:	add    BYTE PTR [rax-0x7d],cl
0xd7deb:	add    BYTE PTR [rax-0x7d],cl
0xd8de5:	fld    TBYTE PTR [rcx]
0xd8e0e:	fadd   DWORD PTR [rcx-0x77]
0xd96ee:	add    cl,ch
0xd96ec:	add    BYTE PTR [rax],al; 	add    cl,ch
0xd9ee5:	pop    rdi
0xd9ee4:	pop    r15
0xd9ee3:	pop    rsi; 	pop    r15
0xd9ee2:	pop    r14; 	pop    r15
0xd9ef8:	ror    BYTE PTR [rax-0x7d],cl
0xd9f12:	add    BYTE PTR [rax-0x7d],cl
0xd9ff3:	add    DWORD PTR [rax-0x7d],ecx
0xd9ff2:	rex.WXB add QWORD PTR [r8-0x7d],rcx
0xdaa40:	rol    BYTE PTR [rbp+0xf],0x44
0xdb2bb:	rol    BYTE PTR [rbp+0xf],0x44
0xdb4d7:	or     al,0xe9
0xdb5f4:	inc    DWORD PTR [rbp-0x77]
0xdc277:	add    esp,0x18
0xdc276:	add    rsp,0x18
0xdc325:	add    ecx,DWORD PTR [rax-0x7d]
0xdc386:	pop    rbp
0xdc385:	pop    rdi; 	pop    rbp
0xdc384:	pop    r15; 	pop    rbp
0xdc383:	pop    rsi; 	pop    r15; 	pop    rbp
0xdc62d:	or     ecx,DWORD PTR [rax-0x7d]
0xdc94e:	add    BYTE PTR [rax-0x7d],cl
0xdca4c:	add    BYTE PTR [rax-0x7d],cl
0xdcb1c:	add    BYTE PTR [rcx+0x29],al
0xdce2c:	add    BYTE PTR [rax-0x7d],cl
0xdd0b2:	add    BYTE PTR [rax-0x7d],cl
0xdd8af:	ror    BYTE PTR [rax-0x75],0x74
0xde2ac:	dec    BYTE PTR [rax-0x7d]
0xde637:	ror    BYTE PTR [rax-0x75],0x74
0xdebd8:	ror    BYTE PTR [rax-0x75],0x4c
0xdeca6:	ror    BYTE PTR [rax-0x75],0x4c
0xded87:	add    esp,0x18
0xded86:	add    rsp,0x18
0xdedde:	pop    rbx
0xdeddc:	mov    dh,0xc0; 	pop    rbx
0xdeddb:	movzx  eax,al; 	pop    rbx
0xdede0:	xor    eax,eax
0xdeddf:	ret    ; 	xor    eax,eax
0xdedde:	pop    rbx; 	ret    ; 	xor    eax,eax
0xdeee9:	and    BYTE PTR [rax-0x7d],cl
0xdeff7:	pop    rsi
0xdeff6:	pop    r14
0xdeff5:	pop    rbp; 	pop    r14
0xdeff4:	pop    r13; 	pop    r14
0xdf099:	pop    rbx
0xdf096:	add    esp,0x10; 	pop    rbx
0xdf0ce:	pop    rbx
0xdf0cb:	add    esp,0x10; 	pop    rbx
0xdf189:	pop    rbx
0xdf186:	add    esp,0x10; 	pop    rbx
0xdf274:	pop    rsi
0xdf273:	pop    r14
0xdf272:	pop    rbp; 	pop    r14
0xdf271:	pop    r13; 	pop    r14
0xdf2fc:	pop    rsi
0xdf2fb:	pop    r14
0xdf2fa:	pop    rbp; 	pop    r14
0xdf2f9:	pop    r13; 	pop    r14
0xdf420:	pop    rsi
0xdf41f:	pop    r14
0xdf41e:	pop    rbp; 	pop    r14
0xdf41d:	pop    r13; 	pop    r14
0xdf444:	pop    rsi
0xdf443:	pop    r14
0xdf442:	pop    rbp; 	pop    r14
0xdf441:	pop    r13; 	pop    r14
0xdf58d:	pop    rdi
0xdf58c:	pop    r15
0xdf58b:	pop    rsi; 	pop    r15
0xdf58a:	pop    r14; 	pop    r15
0xdf680:	pop    rbx
0xdf67d:	nop    DWORD PTR [rax]; 	pop    rbx
0xdf6f2:	pop    rbx
0xdf6f0:	add    BYTE PTR [rax],al; 	pop    rbx
0xdf78e:	pop    rbx
0xdf78c:	add    BYTE PTR [rax],al; 	pop    rbx
0xdf7e7:	add    al,ch
0xdf7e5:	add    BYTE PTR [rax],al; 	add    al,ch
0xdf891:	pop    rbp
0xdf890:	pop    r13
0xdf88f:	pop    rsp; 	pop    r13
0xdf88e:	pop    r12; 	pop    r13
0xdfa11:	pop    rbp
0xdfa10:	pop    r13
0xdfa0f:	pop    rsp; 	pop    r13
0xdfa0e:	pop    r12; 	pop    r13
0xdfb34:	pop    rbp
0xdfb33:	pop    r13
0xdfb32:	pop    rsp; 	pop    r13
0xdfb31:	pop    r12; 	pop    r13
0xdfcd2:	pop    rbp
0xdfcd1:	pop    r13
0xdfcd0:	pop    rsp; 	pop    r13
0xdfccf:	pop    r12; 	pop    r13
0xdfe23:	pop    rdi
0xdfe22:	pop    r15
0xdfe21:	pop    rsi; 	pop    r15
0xdfe20:	pop    r14; 	pop    r15
0xdff79:	pop    rbx
0xdff77:	add    BYTE PTR [rax],al; 	pop    rbx
0xe000c:	pop    rbp
0xe000b:	pop    rbx; 	pop    rbp
0xe000a:	or     BYTE PTR [rbx+0x5d],bl
0xe0011:	mov    eax,DWORD PTR [rdi+0x20]
0xe0010:	mov    rax,QWORD PTR [rdi+0x20]
0xe0102:	pop    rdi
0xe0101:	pop    r15
0xe0100:	pop    rsi; 	pop    r15
0xe00ff:	pop    r14; 	pop    r15
0xe0120:	mov    eax,DWORD PTR [rdi]
0xe01ba:	pop    rbp
0xe01b9:	pop    rbx; 	pop    rbp
0xe01b8:	add    BYTE PTR [rbx+0x5d],bl
0xe01b7:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0xe023b:	fmul   QWORD PTR [rax-0x7d]
0xe03de:	pop    rdi
0xe03dd:	pop    r15
0xe03dc:	pop    rsi; 	pop    r15
0xe03db:	pop    r14; 	pop    r15
0xe0443:	dec    DWORD PTR [rax-0x77]
0xe04a0:	pop    rsi
0xe049f:	pop    r14
0xe049e:	pop    rbp; 	pop    r14
0xe049d:	pop    r13; 	pop    r14
0xe0666:	pop    rdi
0xe0665:	pop    r15
0xe0664:	pop    rsi; 	pop    r15
0xe0663:	pop    r14; 	pop    r15
0xe076a:	pop    rdi
0xe0769:	pop    r15
0xe0768:	pop    rsi; 	pop    r15
0xe0767:	pop    r14; 	pop    r15
0xe0bcc:	pop    rdi
0xe0bcb:	pop    r15
0xe0bca:	pop    rsi; 	pop    r15
0xe0bc9:	pop    r14; 	pop    r15
0xe0c36:	and    BYTE PTR [rbp-0x77],cl
0xe0d37:	pop    rsi
0xe0d36:	pop    r14
0xe0d35:	pop    rbp; 	pop    r14
0xe0d34:	pop    r13; 	pop    r14
0xe0e1b:	pop    rsp
0xe0e1a:	pop    r12
0xe0e19:	pop    rbp; 	pop    r12
0xe0e18:	pop    rbx; 	pop    rbp; 	pop    r12
0xe0e7e:	add    esp,0x38
0xe0e7d:	add    rsp,0x38
0xe0f88:	add    esp,0x8
0xe0f87:	add    rsp,0x8
0xe10db:	pop    rsi
0xe10da:	pop    r14
0xe10d9:	pop    rbp; 	pop    r14
0xe10d8:	pop    r13; 	pop    r14
0xe127b:	pop    rsi
0xe127a:	pop    r14
0xe1279:	pop    rbp; 	pop    r14
0xe1278:	pop    r13; 	pop    r14
0xe1403:	sbb    BYTE PTR [rax-0x7d],cl
0xe1402:	sbb    BYTE PTR [r8-0x7d],r9b
0xe1453:	pop    rsi
0xe1452:	pop    r14
0xe1451:	pop    rbp; 	pop    r14
0xe1450:	pop    r13; 	pop    r14
0xe14f1:	pop    rsi
0xe14f0:	pop    r14
0xe14ef:	pop    rbp; 	pop    r14
0xe14ee:	pop    r13; 	pop    r14
0xe1514:	pop    rsi
0xe1513:	pop    r14
0xe1512:	pop    rbp; 	pop    r14
0xe1511:	pop    r13; 	pop    r14
0xe152b:	pop    rsi
0xe152a:	pop    r14
0xe1529:	pop    rbp; 	pop    r14
0xe1528:	pop    r13; 	pop    r14
0xe1656:	add    esp,0x18
0xe1655:	add    rsp,0x18
0xe1720:	add    esp,0x8
0xe171f:	add    rsp,0x8
0xe1727:	add    bl,dh
0xe1726:	add    bl,sil
0xe1802:	add    esp,0x48
0xe1801:	add    rsp,0x48
0xe1acf:	pop    rdi
0xe1ace:	pop    r15
0xe1acd:	pop    rsi; 	pop    r15
0xe1acc:	pop    r14; 	pop    r15
0xe1d9d:	add    BYTE PTR [rbx+rcx*4+0x25],cl
0xe1fa7:	pop    rdi
0xe1fa6:	pop    r15
0xe1fa5:	pop    rsi; 	pop    r15
0xe1fa4:	pop    r14; 	pop    r15
0xe2296:	pop    rdi
0xe2295:	pop    r15
0xe2294:	pop    rsi; 	pop    r15
0xe2293:	pop    r14; 	pop    r15
0xe230f:	add    BYTE PTR [rax-0x7d],cl
0xe2336:	fimul  DWORD PTR [rax-0x7d]
0xe2360:	add    BYTE PTR [rax-0x7d],cl
0xe248b:	dec    DWORD PTR [rax-0x7d]
0xe26bd:	pop    rdi
0xe26bc:	pop    r15
0xe26bb:	pop    rsi; 	pop    r15
0xe26ba:	pop    r14; 	pop    r15
0xe285d:	sbb    BYTE PTR [rax-0x7d],cl
0xe28b2:	pop    rdi
0xe28b1:	pop    r15
0xe28b0:	pop    rsi; 	pop    r15
0xe28af:	pop    r14; 	pop    r15
0xe2aac:	pop    rdi
0xe2aab:	pop    r15
0xe2aaa:	pop    rsi; 	pop    r15
0xe2aa9:	pop    r14; 	pop    r15
0xe2bd3:	pop    rdi
0xe2bd2:	pop    r15
0xe2bd1:	pop    rsi; 	pop    r15
0xe2bd0:	pop    r14; 	pop    r15
0xe2bea:	pop    rdi
0xe2be9:	pop    r15
0xe2be8:	pop    rsi; 	pop    r15
0xe2be7:	pop    r14; 	pop    r15
0xe2ee6:	pop    rdi
0xe2ee5:	pop    r15
0xe2ee4:	pop    rsi; 	pop    r15
0xe2ee3:	pop    r14; 	pop    r15
0xe2fdf:	pop    rbp
0xe2fde:	pop    rsp; 	pop    rbp
0xe2fdd:	pop    r12; 	pop    rbp
0xe2fdc:	pop    rbx; 	pop    r12; 	pop    rbp
0xe3126:	pop    rbp
0xe3125:	pop    rbx; 	pop    rbp
0xe3124:	sbb    BYTE PTR [rbx+0x5d],bl
0xe3258:	add    esp,0x8
0xe3257:	add    rsp,0x8
0xe33ab:	pop    rsi
0xe33aa:	pop    r14
0xe33a9:	pop    rbp; 	pop    r14
0xe33a8:	pop    r13; 	pop    r14
0xe354b:	pop    rsi
0xe354a:	pop    r14
0xe3549:	pop    rbp; 	pop    r14
0xe3548:	pop    r13; 	pop    r14
0xe3656:	add    esp,0x18
0xe3655:	add    rsp,0x18
0xe3720:	add    esp,0x8
0xe371f:	add    rsp,0x8
0xe3727:	add    bl,dh
0xe3726:	add    bl,sil
0xe3802:	add    esp,0x48
0xe3801:	add    rsp,0x48
0xe3a01:	pop    rdi
0xe3a00:	pop    r15
0xe39ff:	pop    rsi; 	pop    r15
0xe39fe:	pop    r14; 	pop    r15
0xe3dd1:	pop    rdi
0xe3dd0:	pop    r15
0xe3dcf:	pop    rsi; 	pop    r15
0xe3dce:	pop    r14; 	pop    r15
0xe400b:	or     ecx,DWORD PTR [rax-0x7d]
0xe4093:	pop    rbp
0xe4092:	pop    r13
0xe4091:	pop    rsp; 	pop    r13
0xe4090:	pop    r12; 	pop    r13
0xe4335:	push   rdi
0xe4333:	add    al,ch; 	push   rdi
0xe44bd:	pop    rdi
0xe44bc:	pop    r15
0xe44bb:	pop    rsi; 	pop    r15
0xe44ba:	pop    r14; 	pop    r15
0xe4538:	pop    rdi
0xe4537:	pop    r15
0xe4536:	pop    rsi; 	pop    r15
0xe4535:	pop    r14; 	pop    r15
0xe454d:	jae    0xe4550
0xe454c:	push   QWORD PTR [rbx+0x1]
0xe455d:	or     eax,0xffffffff
0xe455c:	or     rax,0xffffffffffffffff
0xe4596:	mov    eax,edx
0xe4595:	mov    rax,rdx
0xe4640:	pop    rbx
0xe463d:	add    esp,0x10; 	pop    rbx
0xe46e1:	pop    rsp
0xe46e0:	pop    r12
0xe46df:	pop    rbp; 	pop    r12
0xe46de:	pop    rbx; 	pop    rbp; 	pop    r12
0xe4770:	jae    0xe4773
0xe476f:	push   QWORD PTR [rbx+0x1]
0xe4780:	or     eax,0xffffffff
0xe477f:	or     rax,0xffffffffffffffff
0xe4809:	pop    rbp
0xe4808:	pop    r13
0xe4807:	pop    rsp; 	pop    r13
0xe4806:	pop    r12; 	pop    r13
0xe484d:	jae    0xe4850
0xe484c:	push   QWORD PTR [rbx+0x1]
0xe485d:	or     eax,0xffffffff
0xe485c:	or     rax,0xffffffffffffffff
0xe48c8:	pop    rbp
0xe48c7:	pop    rbx; 	pop    rbp
0xe48c6:	sub    BYTE PTR [rbx+0x5d],bl
0xe48fb:	xor    al,0xf3
0xe4928:	add    esp,0x18
0xe4927:	add    rsp,0x18
0xe496e:	or     ebx,esi
0xe49ec:	pop    rbp
0xe49eb:	pop    rbx; 	pop    rbp
0xe49ea:	sbb    BYTE PTR [rbx+0x5d],bl
0xe4a2e:	or     ebx,esi
0xe4c12:	pop    rbp
0xe4c11:	pop    rdi; 	pop    rbp
0xe4c10:	pop    r15; 	pop    rbp
0xe4c0f:	pop    rsi; 	pop    r15; 	pop    rbp
0xe4dae:	jae    0xe4db1
0xe4dad:	push   QWORD PTR [rbx+0x1]
0xe4dbe:	or     eax,0xffffffff
0xe4dbd:	or     rax,0xffffffffffffffff
0xe4e3d:	jae    0xe4e40
0xe4e3c:	push   QWORD PTR [rbx+0x1]
0xe4e4d:	or     eax,0xffffffff
0xe4e4c:	or     rax,0xffffffffffffffff
0xe4f74:	pop    rsi
0xe4f73:	pop    r14
0xe4f72:	pop    rbp; 	pop    r14
0xe4f71:	pop    r13; 	pop    r14
0xe510b:	leave  
0xe510a:	clc    ; 	leave  
0xe5109:	pop    rbp; 	clc    ; 	leave  
0xe5108:	mov    ebx,DWORD PTR [rbp-0x8]; 	leave  
0xe52b6:	pop    rbp
0xe52b5:	pop    rsp; 	pop    rbp
0xe52b4:	pop    r12; 	pop    rbp
0xe52b3:	pop    rbx; 	pop    r12; 	pop    rbp
0xe5456:	pop    rbp
0xe5455:	pop    rsp; 	pop    rbp
0xe5454:	pop    r12; 	pop    rbp
0xe5453:	pop    rbx; 	pop    r12; 	pop    rbp
0xe5513:	pop    rbp
0xe5512:	pop    rdi; 	pop    rbp
0xe5511:	pop    r15; 	pop    rbp
0xe5510:	pop    rsi; 	pop    r15; 	pop    rbp
0xe58e5:	syscall 
0xe58e3:	add    BYTE PTR [rax],al; 	syscall 
0xe58f5:	syscall 
0xe58f3:	add    BYTE PTR [rax],al; 	syscall 
0xe5905:	syscall 
0xe5903:	add    BYTE PTR [rax],al; 	syscall 
0xe5915:	syscall 
0xe5913:	add    BYTE PTR [rax],al; 	syscall 
0xe5925:	syscall 
0xe5923:	add    BYTE PTR [rax],al; 	syscall 
0xe5935:	syscall 
0xe5933:	add    BYTE PTR [rax],al; 	syscall 
0xe594d:	jae    0xe5950
0xe594c:	push   QWORD PTR [rbx+0x1]
0xe595d:	or     eax,0xffffffff
0xe595c:	or     rax,0xffffffffffffffff
0xe59ae:	add    esp,0x38
0xe59ad:	add    rsp,0x38
0xe5a3e:	add    esp,0x38
0xe5a3d:	add    rsp,0x38
0xe5ac1:	ror    DWORD PTR [rax+0x63],cl
0xe5b20:	pop    rbp
0xe5b1f:	pop    rbp; 	pop    rbp
0xe5b1e:	pop    r13; 	pop    rbp
0xe5b1d:	pop    rsp; 	pop    r13; 	pop    rbp
0xe5b4d:	jae    0xe5b50
0xe5b4c:	push   QWORD PTR [rbx+0x1]
0xe5b5d:	or     eax,0xffffffff
0xe5b5c:	or     rax,0xffffffffffffffff
0xe5b7d:	jae    0xe5b80
0xe5b7c:	push   QWORD PTR [rbx+0x1]
0xe5b8d:	or     eax,0xffffffff
0xe5b8c:	or     rax,0xffffffffffffffff
0xe5ba5:	syscall 
0xe5ba3:	add    BYTE PTR [rax],al; 	syscall 
0xe5bdd:	jae    0xe5be0
0xe5bdc:	push   QWORD PTR [rbx+0x1]
0xe5bed:	or     eax,0xffffffff
0xe5bec:	or     rax,0xffffffffffffffff
0xe5c0d:	jae    0xe5c10
0xe5c0c:	push   QWORD PTR [rbx+0x1]
0xe5c1d:	or     eax,0xffffffff
0xe5c1c:	or     rax,0xffffffffffffffff
0xe5c3d:	jae    0xe5c40
0xe5c3c:	push   QWORD PTR [rbx+0x1]
0xe5c4d:	or     eax,0xffffffff
0xe5c4c:	or     rax,0xffffffffffffffff
0xe5c6d:	jae    0xe5c70
0xe5c6c:	push   QWORD PTR [rbx+0x1]
0xe5c7d:	or     eax,0xffffffff
0xe5c7c:	or     rax,0xffffffffffffffff
0xe5cce:	add    esp,0x38
0xe5ccd:	add    rsp,0x38
0xe5d6e:	add    esp,0x38
0xe5d6d:	add    rsp,0x38
0xe5fe9:	pop    rbp
0xe5fe8:	pop    rdi; 	pop    rbp
0xe5fe7:	pop    r15; 	pop    rbp
0xe5fe6:	pop    rsi; 	pop    r15; 	pop    rbp
0xe614e:	pop    rsp
0xe614d:	pop    r12
0xe614c:	pop    rbp; 	pop    r12
0xe614b:	pop    rbx; 	pop    rbp; 	pop    r12
0xe6364:	add    cl,ch
0xe6362:	add    BYTE PTR [rax],al; 	add    cl,ch
0xe6678:	cmovne eax,edx
0xe6677:	cmovne rax,rdx
0xe66a5:	add    BYTE PTR [rax],al
0xe66a3:	jg     0xe66a5; 	add    BYTE PTR [rax],al
0xe66c5:	add    BYTE PTR [rax],al
0xe66d3:	add    BYTE PTR [rax],al
0xe66e3:	add    BYTE PTR [rax],al
0xe66e1:	jle    0xe66e3; 	add    BYTE PTR [rax],al
0xe6705:	add    BYTE PTR [rax],al
0xe6713:	add    BYTE PTR [rax],al
0xe6712:	cld    ; 	add    BYTE PTR [rax],al
0xe6777:	add    bl,dh
0xe6775:	add    BYTE PTR [rax],al; 	add    bl,dh
0xe6798:	cmovne eax,edx
0xe6797:	cmovne rax,rdx
0xe67c9:	add    BYTE PTR [rax],al
0xe67cf:	add    bl,dh
0xe67ce:	add    bl,sil
0xe684b:	xor    eax,eax
0xe6849:	jne    0xe686a; 	xor    eax,eax
0xe686d:	add    BYTE PTR [rax],al
0xe686b:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xe6884:	add    bh,bh
0xe6883:	add    dil,r15b
0xe6882:	lea    eax,[rax+rax*1-0x1]
0xe68d4:	add    bh,bh
0xe68d3:	add    dil,r15b
0xe68d2:	lea    eax,[rax+rax*1-0x1]
0xe6930:	dec    DWORD PTR [rax-0x77]
0xe692f:	repz dec DWORD PTR [rax-0x77]
0xe69c4:	pop    rbp
0xe69c3:	pop    rdi; 	pop    rbp
0xe69c2:	pop    r15; 	pop    rbp
0xe69c1:	pop    rsi; 	pop    r15; 	pop    rbp
0xe6b1a:	pop    rbp
0xe6b19:	pop    r13
0xe6b18:	pop    rsp; 	pop    r13
0xe6b17:	pop    r12; 	pop    r13
0xe6e3b:	pop    rsp
0xe6e3a:	pop    r12
0xe6e39:	pop    rbp; 	pop    r12
0xe6e38:	pop    rbx; 	pop    rbp; 	pop    r12
0xe7134:	pop    rdi
0xe7133:	pop    r15
0xe7132:	pop    rsi; 	pop    r15
0xe7131:	pop    r14; 	pop    r15
0xe714f:	pop    rdi
0xe714e:	pop    r15
0xe714d:	pop    rsi; 	pop    r15
0xe714c:	pop    r14; 	pop    r15
0xe7180:	xor    eax,eax
0xe717e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xe718b:	add    BYTE PTR [rax],al
0xe7189:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xe729f:	add    dh,dh
0xe729d:	add    BYTE PTR [rax],al; 	add    dh,dh
0xe77fe:	add    DWORD PTR [rcx-0x77],ecx
0xe77fd:	rex.WXB add QWORD PTR [r9-0x77],rcx
0xe784c:	dec    BYTE PTR [rcx+0x1]
0xe7934:	pop    rbp
0xe7933:	pop    rdi; 	pop    rbp
0xe7932:	pop    r15; 	pop    rbp
0xe7931:	pop    rsi; 	pop    r15; 	pop    rbp
0xe7d1c:	pop    rbp
0xe7d1b:	pop    rdi; 	pop    rbp
0xe7d1a:	pop    r15; 	pop    rbp
0xe7d19:	pop    rsi; 	pop    r15; 	pop    rbp
0xe9585:	adc    BYTE PTR [rax+0x39],cl
0xe966f:	pop    rbp
0xe966e:	pop    rbx; 	pop    rbp
0xe966d:	or     BYTE PTR [rbx+0x5d],bl
0xe9703:	add    BYTE PTR [rax],al
0xe9701:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xe971b:	add    BYTE PTR [rax],al
0xe9719:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xe972e:	sete   al
0xe9748:	xor    eax,eax
0xe978c:	add    BYTE PTR [rax-0x7d],cl
0xe979e:	pop    rsp
0xe979d:	pop    r12
0xe979c:	pop    rbp; 	pop    r12
0xe979b:	pop    rbx; 	pop    rbp; 	pop    r12
0xe9820:	dec    DWORD PTR [rax-0x77]
0xe983f:	pop    rsp
0xe983e:	pop    r12
0xe983d:	pop    rbp; 	pop    r12
0xe983c:	pop    rbx; 	pop    rbp; 	pop    r12
0xe988d:	add    BYTE PTR [rax-0x7d],cl
0xe98a0:	pop    rsp
0xe989f:	pop    r12
0xe989e:	pop    rbp; 	pop    r12
0xe989d:	pop    rbx; 	pop    rbp; 	pop    r12
0xe98fb:	add    ecx,DWORD PTR [rax-0x7d]
0xe98fa:	rex.XB add ecx,DWORD PTR [r8-0x7d]
0xe9933:	add    BYTE PTR [rax-0x77],cl
0xe994f:	pop    rsp
0xe994e:	pop    r12
0xe994d:	pop    rbp; 	pop    r12
0xe994c:	pop    rbx; 	pop    rbp; 	pop    r12
0xe9a61:	pop    rbp
0xe9a60:	pop    rdi; 	pop    rbp
0xe9a5f:	pop    r15; 	pop    rbp
0xe9a5e:	pop    rsi; 	pop    r15; 	pop    rbp
0xea1b6:	add    BYTE PTR [rcx-0x77],al
0xea224:	inc    DWORD PTR [rcx-0x77]
0xea430:	pop    rbp
0xea42f:	pop    rdi; 	pop    rbp
0xea42e:	pop    r15; 	pop    rbp
0xea42d:	pop    rsi; 	pop    r15; 	pop    rbp
0xeac10:	add    BYTE PTR [rcx-0x7d],cl
0xeb2d0:	ror    DWORD PTR [rdi],0x85
0xeba00:	pop    rbp
0xeb9ff:	pop    rdi; 	pop    rbp
0xeb9fe:	pop    r15; 	pop    rbp
0xeb9fd:	pop    rsi; 	pop    r15; 	pop    rbp
0xec323:	pop    rdi
0xec322:	pop    r15
0xec321:	pop    rsi; 	pop    r15
0xec320:	pop    r14; 	pop    r15
0xec386:	ror    BYTE PTR [rcx-0x7d],cl
0xec3f0:	xchg   ebp,eax
0xec3ee:	ror    BYTE PTR [rdi],0x95
0xec511:	add    BYTE PTR [rcx-0x7d],cl
0xec53d:	add    cl,ch
0xec53b:	add    BYTE PTR [rax],al; 	add    cl,ch
0xecfb3:	add    BYTE PTR [rax+0x63],cl
0xed833:	pop    rbp
0xed832:	pop    rdi; 	pop    rbp
0xed831:	pop    r15; 	pop    rbp
0xed830:	pop    rsi; 	pop    r15; 	pop    rbp
0xedb90:	add    BYTE PTR [rax],al
0xedb8e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xedb9c:	xor    eax,eax
0xedb9a:	or     BYTE PTR [rdx],al; 	xor    eax,eax
0xedbcb:	add    BYTE PTR [rax],al
0xedbc9:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xedbe4:	add    BYTE PTR [rax],al
0xedbe2:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xedbfa:	add    BYTE PTR [rax],al
0xedbf8:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xedc07:	add    BYTE PTR [rax],al
0xedc05:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xedc17:	add    BYTE PTR [rax],al
0xedc15:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xedc33:	add    BYTE PTR [rax],al
0xedc31:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0xedc47:	add    BYTE PTR [rax],al
0xedc45:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xedc5c:	add    BYTE PTR [rax],al
0xedc5a:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0xedc9f:	add    al,BYTE PTR [rbp-0x77]
0xedd37:	pop    rdi
0xedd36:	pop    r15
0xedd35:	pop    rsi; 	pop    r15
0xedd34:	pop    r14; 	pop    r15
0xede27:	pop    rdi
0xede26:	pop    r15
0xede25:	pop    rsi; 	pop    r15
0xede24:	pop    r14; 	pop    r15
0xede54:	pop    rdi
0xede53:	pop    r15
0xede52:	pop    rsi; 	pop    r15
0xede51:	pop    r14; 	pop    r15
0xedee3:	pop    rdi
0xedee2:	pop    r15
0xedee1:	pop    rsi; 	pop    r15
0xedee0:	pop    r14; 	pop    r15
0xee073:	pop    rdi
0xee072:	pop    r15
0xee071:	pop    rsi; 	pop    r15
0xee070:	pop    r14; 	pop    r15
0xee17a:	pop    rsp
0xee179:	pop    r12
0xee178:	pop    rbp; 	pop    r12
0xee177:	pop    rbx; 	pop    rbp; 	pop    r12
0xee1ae:	pop    rsp
0xee1ad:	pop    r12
0xee1ac:	pop    rbp; 	pop    r12
0xee1ab:	pop    rbx; 	pop    rbp; 	pop    r12
0xee2e2:	add    DWORD PTR [rax-0x7d],ecx
0xee2e1:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xee362:	pop    rdi
0xee361:	pop    r15
0xee360:	pop    rsi; 	pop    r15
0xee35f:	pop    r14; 	pop    r15
0xee3aa:	pop    rdi
0xee3a9:	pop    r15
0xee3a8:	pop    rsi; 	pop    r15
0xee3a7:	pop    r14; 	pop    r15
0xee412:	add    DWORD PTR [rax-0x7d],ecx
0xee411:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xee4a2:	add    DWORD PTR [rax-0x7d],ecx
0xee4a1:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xee4cf:	pop    rdi
0xee4ce:	pop    r15
0xee4cd:	pop    rsi; 	pop    r15
0xee4cc:	pop    r14; 	pop    r15
0xee638:	pop    rdi
0xee637:	pop    r15
0xee636:	pop    rsi; 	pop    r15
0xee635:	pop    r14; 	pop    r15
0xeeb5e:	pop    rdi
0xeeb5d:	pop    r15
0xeeb5c:	pop    rsi; 	pop    r15
0xeeb5b:	pop    r14; 	pop    r15
0xef5d7:	add    BYTE PTR [rax-0x7d],cl
0xef6dd:	xchg   esi,eax
0xef764:	add    BYTE PTR [rcx-0x77],cl
0xef7f6:	enter  0xf66,0xd4
0xefaae:	pop    rbx
0xefaab:	add    esp,0x20; 	pop    rbx
0xefbff:	pop    rsp
0xefbfe:	pop    r12
0xefbfd:	pop    rbp; 	pop    r12
0xefbfc:	rcr    BYTE PTR [rbp+0x41],0x5c
0xefc3b:	or     BYTE PTR [rcx],ch
0xefc39:	je     0xefc5f; 	or     BYTE PTR [rcx],ch
0xefc7d:	pop    rsp
0xefc7c:	pop    r12
0xefc7b:	pop    rbp; 	pop    r12
0xefc7a:	rcr    BYTE PTR [rbp+0x41],0x5c
0xefcb8:	add    BYTE PTR [rbp+0x63],cl
0xefcd0:	add    BYTE PTR [rbp+0x63],cl
0xefdf2:	pop    rsi
0xefdf1:	pop    r14
0xefdf0:	pop    rbp; 	pop    r14
0xefdef:	pop    r13; 	pop    r14
0xefe69:	pop    rbp
0xefe68:	pop    rbx; 	pop    rbp
0xefe67:	or     BYTE PTR [rbx+0x5d],bl
0xefea5:	add    eax,eax
0xefea4:	rol    BYTE PTR [rcx],0xc0
0xefea3:	xchg   ebp,eax; 	rol    BYTE PTR [rcx],0xc0
0xefec0:	pop    rbp
0xefebf:	pop    rbx; 	pop    rbp
0xefebe:	or     BYTE PTR [rbx+0x5d],bl
0xefee3:	add    eax,0x8
0xeffe4:	pop    rdi
0xeffe3:	pop    r15
0xeffe2:	pop    rsi; 	pop    r15
0xeffe1:	pop    r14; 	pop    r15
0xf0017:	add    al,ch
0xf0016:	add    al,bpl
0xf0891:	pop    rsi
0xf0890:	pop    r14
0xf088f:	pop    rbp; 	pop    r14
0xf088e:	pop    r13; 	pop    r14
0xf114d:	fimul  DWORD PTR [rcx-0x7d]
0xf11f4:	pop    rbp
0xf11f3:	pop    rdi; 	pop    rbp
0xf11f2:	pop    r15; 	pop    rbp
0xf11f1:	pop    rsi; 	pop    r15; 	pop    rbp
0xf16dd:	pop    rdi
0xf16dc:	pop    r15
0xf16db:	pop    rsi; 	pop    r15
0xf16da:	pop    r14; 	pop    r15
0xf1d52:	pop    rbx
0xf1d4f:	add    esp,0x10; 	pop    rbx
0xf1e4f:	pop    rsi
0xf1e4e:	pop    r14
0xf1e4d:	pop    rbp; 	pop    r14
0xf1e4c:	pop    r13; 	pop    r14
0xf21a1:	pop    rdi
0xf21a0:	pop    r15
0xf219f:	pop    rsi; 	pop    r15
0xf219e:	pop    r14; 	pop    r15
0xf28d8:	add    BYTE PTR [rcx-0x7d],cl
0xf28ee:	or     BYTE PTR [rcx+0x39],cl
0xf2c84:	add    BYTE PTR [rax+0x63],cl
0xf2dab:	pop    rdi
0xf2daa:	pop    r15
0xf2da9:	pop    rsi; 	pop    r15
0xf2da8:	pop    r14; 	pop    r15
0xf2ecf:	add    BYTE PTR [rax-0x77],cl
0xf2eff:	add    al,ch
0xf2f89:	pop    rbp
0xf2f88:	pop    rbx; 	pop    rbp
0xf2f86:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0xf315a:	pop    rdi
0xf3159:	pop    r15
0xf3158:	pop    rsi; 	pop    r15
0xf3157:	pop    r14; 	pop    r15
0xf3435:	pop    rbx
0xf3433:	xor    eax,eax; 	pop    rbx
0xf344b:	pop    rbx
0xf3449:	xor    eax,eax; 	pop    rbx
0xf3493:	pop    rbx
0xf3491:	xor    eax,eax; 	pop    rbx
0xf34cf:	add    BYTE PTR [rax-0x7d],cl
0xf34ff:	cmp    cl,BYTE PTR [rax-0x7d]
0xf3573:	fmul   DWORD PTR [rax-0x7d]
0xf3628:	add    DWORD PTR [rax-0x7d],ecx
0xf36b7:	add    BYTE PTR [rax-0x7d],cl
0xf39bf:	pop    rdi
0xf39be:	pop    r15
0xf39bd:	pop    rsi; 	pop    r15
0xf39bc:	pop    r14; 	pop    r15
0xf3bba:	adc    BYTE PTR [rcx+0x39],al
0xf3dc7:	out    0xe8,eax
0xf3de5:	pop    rdi
0xf3de4:	pop    r15
0xf3de3:	pop    rsi; 	pop    r15
0xf3de2:	pop    r14; 	pop    r15
0xf4026:	pop    rsp
0xf4025:	pop    r12
0xf4024:	pop    rbp; 	pop    r12
0xf4023:	pop    rbx; 	pop    rbp; 	pop    r12
0xf4038:	pop    rsp
0xf4037:	pop    r12
0xf4036:	pop    rbp; 	pop    r12
0xf4035:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0xf406d:	pop    rsp
0xf406c:	pop    r12
0xf406b:	pop    rbp; 	pop    r12
0xf406a:	rcr    BYTE PTR [rbp+0x41],0x5c
0xf4103:	add    BYTE PTR [rax],al
0xf4101:	or     al,0x0; 	add    BYTE PTR [rax],al
0xf4210:	xor    eax,eax
0xf420e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0xf423d:	pop    rsp
0xf423c:	pop    r12
0xf423b:	pop    rbp; 	pop    r12
0xf423a:	pop    rbx; 	pop    rbp; 	pop    r12
0xf426b:	or     BYTE PTR [rcx],ch
0xf45b4:	add    dh,dh
0xf45b2:	add    al,BYTE PTR [rax]; 	add    dh,dh
0xf45c5:	and    dh,dh
0xf45c3:	div    BYTE PTR [rdx+riz*1-0xa]
0xf45f0:	add    BYTE PTR [rcx-0x7d],al
0xf46ad:	pop    rdi
0xf46ac:	pop    r15
0xf46ab:	pop    rsi; 	pop    r15
0xf46aa:	pop    r14; 	pop    r15
0xf4747:	add    dh,dh
0xf4746:	add    sil,sil
0xf4be2:	cmp    ecx,DWORD PTR [rax-0x7d]
0xf4c20:	pop    rbp
0xf4c1f:	pop    rdi; 	pop    rbp
0xf4c1e:	pop    r15; 	pop    rbp
0xf4c1d:	pop    rsi; 	pop    r15; 	pop    rbp
0xf4e0b:	push   rcx
0xf4e09:	add    ch,al; 	push   rcx
0xf502a:	cmp    ecx,DWORD PTR [rax-0x7d]
0xf52ff:	dec    DWORD PTR [rax-0x77]
0xf52fe:	repnz dec DWORD PTR [rax-0x77]
0xf53f2:	cmp    ecx,DWORD PTR [rax-0x7d]
0xf574e:	dec    DWORD PTR [rax-0x77]
0xf574d:	repnz dec DWORD PTR [rax-0x77]
0xf57b0:	add    BYTE PTR [rcx-0x7d],cl
0xf595f:	pop    rdi
0xf595e:	pop    r15
0xf595d:	pop    rsi; 	pop    r15
0xf595c:	pop    r14; 	pop    r15
0xf5a5b:	pop    rdi
0xf5a5a:	pop    r15
0xf5a59:	pop    rsi; 	pop    r15
0xf5a58:	pop    r14; 	pop    r15
0xf5bf6:	pop    rdi
0xf5bf5:	pop    r15
0xf5bf4:	pop    rsi; 	pop    r15
0xf5bf3:	pop    r14; 	pop    r15
0xf5e3a:	add    DWORD PTR [rax-0x7d],ecx
0xf5e39:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xf5e3e:	add    DWORD PTR [rcx+0x39],eax
0xf5e3d:	ret    ; 	add    DWORD PTR [rcx+0x39],eax
0xf5f43:	pop    rdi
0xf5f42:	pop    r15
0xf5f41:	pop    rsi; 	pop    r15
0xf5f40:	pop    r14; 	pop    r15
0xf5f9d:	add    DWORD PTR [rax-0x7d],ecx
0xf5f9c:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xf5fa1:	add    DWORD PTR [rcx+0x39],eax
0xf5fa0:	ret    ; 	add    DWORD PTR [rcx+0x39],eax
0xf615a:	pop    rbp
0xf6159:	pop    rbx; 	pop    rbp
0xf6158:	sbb    BYTE PTR [rbx+0x5d],bl
0xf638c:	mov    bl,0xe9
0xf6742:	or     bh,dh
0xf6741:	pop    rdx; 	or     bh,dh
0xf676b:	add    esi,esi
0xf6769:	loop   0xf676a; 	add    esi,esi
0xf6847:	or     BYTE PTR [rax-0x77],cl
0xf68bf:	adc    BYTE PTR [rax-0x7d],cl
0xf6901:	pop    rbp
0xf6900:	pop    rdi; 	pop    rbp
0xf68ff:	pop    r15; 	pop    rbp
0xf68fe:	pop    rsi; 	pop    r15; 	pop    rbp
0xf6d9c:	adc    BYTE PTR [rax-0x7d],cl
0xf6df6:	or     BYTE PTR [rax-0x77],cl
0xf6ffe:	adc    BYTE PTR [rax-0x7d],cl
0xf71e0:	pop    rbp
0xf71df:	pop    r13
0xf71de:	pop    rsp; 	pop    r13
0xf71dd:	pop    r12; 	pop    r13
0xf720d:	pop    rbp
0xf720c:	pop    r13
0xf720b:	pop    rsp; 	pop    r13
0xf720a:	pop    r12; 	pop    r13
0xf7255:	pop    rbp
0xf7254:	pop    r13
0xf7253:	pop    rsp; 	pop    r13
0xf7252:	pop    r12; 	pop    r13
0xf72f5:	pop    rbp
0xf72f4:	pop    r13
0xf72f3:	pop    rsp; 	pop    r13
0xf72f2:	pop    r12; 	pop    r13
0xf7532:	xor    BYTE PTR [rax-0x7d],cl
0xf7540:	add    BYTE PTR [rax+0x1],cl
0xf75dc:	pop    rdi
0xf75db:	pop    r15
0xf75da:	pop    rsi; 	pop    r15
0xf75d9:	pop    r14; 	pop    r15
0xf77bd:	pop    rdi
0xf77bc:	pop    r15
0xf77bb:	pop    rsi; 	pop    r15
0xf77ba:	pop    r14; 	pop    r15
0xf7c4e:	add    BYTE PTR [rax-0x77],cl
0xf7cd8:	ror    BYTE PTR [rax+0x9],0x14
0xf7eb5:	pop    rdi
0xf7eb4:	pop    r15
0xf7eb3:	pop    rsi; 	pop    r15
0xf7eb2:	pop    r14; 	pop    r15
0xf81ac:	pop    rdi
0xf81ab:	pop    r15
0xf81aa:	pop    rsi; 	pop    r15
0xf81a9:	pop    r14; 	pop    r15
0xf828e:	xchg   esp,eax
0xf828c:	out    0xf,eax; 	xchg   esp,eax
0xfa1b7:	add    cl,ch
0xfa1b5:	add    BYTE PTR [rax],al; 	add    cl,ch
0xfa5de:	pop    rdi
0xfa5dd:	pop    r15
0xfa5dc:	pop    rsi; 	pop    r15
0xfa5db:	pop    r14; 	pop    r15
0xfa82c:	pop    rdi
0xfa82b:	pop    r15
0xfa82a:	pop    rsi; 	pop    r15
0xfa829:	pop    r14; 	pop    r15
0xfac20:	pop    rdi
0xfac1f:	pop    r15
0xfac1e:	pop    rsi; 	pop    r15
0xfac1d:	pop    r14; 	pop    r15
0xfb892:	adc    BYTE PTR [rax-0x7d],cl
0xfb891:	adc    BYTE PTR [r8-0x7d],r9b
0xfb896:	add    DWORD PTR [rax+0x39],ecx
0xfb895:	ret    ; 	add    DWORD PTR [rax+0x39],ecx
0xfbcbf:	ror    BYTE PTR [rdi],0x85
0xfc278:	pop    rdi
0xfc277:	pop    r15
0xfc276:	pop    rsi; 	pop    r15
0xfc275:	pop    r14; 	pop    r15
0xfcc80:	and    al,0x39
0xfcdf8:	fmul   DWORD PTR [rax-0x7d]
0xfceee:	pop    rdi
0xfceed:	pop    r15
0xfceec:	pop    rsi; 	pop    r15
0xfceeb:	pop    r14; 	pop    r15
0xfd0bf:	add    cl,BYTE PTR [rax-0x77]
0xfd317:	imul   DWORD PTR [rcx]
0xfd527:	add    ebp,eax
0xfd68e:	add    BYTE PTR [rcx],al
0xfd68c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rcx],al
0xfd698:	xor    al,0x39
0xfd6fc:	sub    al,0x39
0xfd95c:	pop    rdi
0xfd95b:	pop    r15
0xfd95a:	pop    rsi; 	pop    r15
0xfd959:	pop    r14; 	pop    r15
0xfdb8f:	pop    rdi
0xfdb8e:	pop    r15
0xfdb8d:	pop    rsi; 	pop    r15
0xfdb8c:	pop    r14; 	pop    r15
0xfdbf7:	sub    al,ch
0xfdbf6:	sub    r8b,r13b
0xfdca5:	add    DWORD PTR [rax-0x7d],ecx
0xfdca4:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xfde97:	fmul   DWORD PTR [rax-0x7d]
0xfe972:	add    DWORD PTR [rax-0x7d],ecx
0xfe971:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xfe9f3:	pop    rdi
0xfe9f2:	pop    r15
0xfe9f1:	pop    rsi; 	pop    r15
0xfe9f0:	pop    r14; 	pop    r15
0xfea5f:	add    DWORD PTR [rax-0x7d],ecx
0xfea5e:	push   rsp; 	add    DWORD PTR [rax-0x7d],ecx
0xfeb63:	add    DWORD PTR [rax-0x7d],ecx
0xfeb62:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xfebab:	add    DWORD PTR [rax-0x7d],ecx
0xfebaa:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xfebfb:	add    DWORD PTR [rax-0x7d],ecx
0xfebfa:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xfec34:	add    DWORD PTR [rax-0x7d],ecx
0xfec33:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xfec64:	add    DWORD PTR [rax-0x7d],ecx
0xfec63:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xfed28:	add    DWORD PTR [rax-0x7d],ecx
0xfed27:	rex.XB add DWORD PTR [r8-0x7d],ecx
0xff93c:	add    BYTE PTR [rcx],al
0xff93a:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],al
0xff95b:	add    BYTE PTR [rcx],bh
0xff959:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],bh
0xffb06:	add    BYTE PTR [rcx],bh
0xffb04:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rcx],bh
0xffdb4:	pop    rdi
0xffdb3:	pop    r15
0xffdb2:	pop    rsi; 	pop    r15
0xffdb1:	pop    r14; 	pop    r15
0xfffc1:	push   rsp
0xfffbe:	fmul   DWORD PTR [rax-0x73]; 	push   rsp
0x1001d4:	dec    DWORD PTR [rax-0x77]
0x1008f3:	add    BYTE PTR [rax-0x77],cl
0x100be4:	pop    rdi
0x100be3:	pop    r15
0x100be2:	pop    rsi; 	pop    r15
0x100be1:	pop    r14; 	pop    r15
0x100c88:	xchg   ebx,eax
0x101193:	add    esp,0x8
0x101192:	add    rsp,0x8
0x1011ab:	mov    DWORD PTR [rdx],edi
0x1011aa:	mov    QWORD PTR [rdx],rdi
0x101271:	pop    rsp
0x101270:	pop    r12
0x10126f:	pop    rbp; 	pop    r12
0x10126e:	pop    rbx; 	pop    rbp; 	pop    r12
0x1013fe:	pop    rsi
0x1013fd:	pop    r14
0x1013fc:	pop    rbp; 	pop    r14
0x1013fb:	pop    r13; 	pop    r14
0x10143e:	pop    rsi
0x10143d:	pop    r14
0x10143c:	pop    rbp; 	pop    r14
0x10143b:	pop    r13; 	pop    r14
0x1014ae:	pop    rbp
0x1014ad:	pop    r13
0x1014ac:	pop    rsp; 	pop    r13
0x1014ab:	pop    r12; 	pop    r13
0x101512:	pop    rbx
0x101510:	add    BYTE PTR [rax],al; 	pop    rbx
0x101657:	pop    rbp
0x101656:	pop    rbx; 	pop    rbp
0x101654:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x101660:	xor    eax,eax
0x10165e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x10177a:	pop    rdi
0x101779:	pop    r15
0x101778:	pop    rsi; 	pop    r15
0x101777:	pop    r14; 	pop    r15
0x1017a3:	add    BYTE PTR [rax],al
0x1017a1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x1017c4:	add    esp,0x18
0x1017c3:	add    rsp,0x18
0x1017e1:	add    esp,0x18
0x1017e0:	add    rsp,0x18
0x101885:	pop    rdi
0x101884:	pop    r15
0x101883:	pop    rsi; 	pop    r15
0x101882:	pop    r14; 	pop    r15
0x101987:	pop    rdi
0x101986:	pop    r15
0x101985:	pop    rsi; 	pop    r15
0x101984:	pop    r14; 	pop    r15
0x101a0c:	add    BYTE PTR [rax],al
0x101a0a:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x101a24:	mov    DWORD PTR [rsi+0x10],eax
0x101a23:	mov    QWORD PTR [rsi+0x10],r8
0x101aec:	pop    rbp
0x101aeb:	pop    rbx; 	pop    rbp
0x101aea:	sub    BYTE PTR [rbx+0x5d],bl
0x101bd4:	pop    rdi
0x101bd3:	pop    r15
0x101bd2:	pop    rsi; 	pop    r15
0x101bd1:	pop    r14; 	pop    r15
0x101bef:	pop    rdi
0x101bee:	pop    r15
0x101bed:	pop    rsi; 	pop    r15
0x101bec:	pop    r14; 	pop    r15
0x101c20:	xor    eax,eax
0x101c1e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x101c2b:	add    BYTE PTR [rax],al
0x101c29:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x101d3f:	add    dh,dh
0x101d3d:	add    BYTE PTR [rax],al; 	add    dh,dh
0x10229e:	add    DWORD PTR [rcx-0x77],ecx
0x10229d:	rex.WXB add QWORD PTR [r9-0x77],rcx
0x1022ec:	dec    BYTE PTR [rcx+0x1]
0x1023d4:	pop    rbp
0x1023d3:	pop    rdi; 	pop    rbp
0x1023d2:	pop    r15; 	pop    rbp
0x1023d1:	pop    rsi; 	pop    r15; 	pop    rbp
0x102741:	pop    rsp
0x102740:	pop    r12
0x10273f:	pop    rbp; 	pop    r12
0x10273e:	pop    rbx; 	pop    rbp; 	pop    r12
0x102d92:	sahf   
0x102e89:	pop    rdi
0x102e88:	pop    r15
0x102e87:	pop    rsi; 	pop    r15
0x102e86:	pop    r14; 	pop    r15
0x102ec0:	popf   
0x102ebe:	fimul  DWORD PTR [rdi]; 	popf   
0x103112:	add    BYTE PTR [rax-0x7d],cl
0x10330d:	pop    rbp
0x10330c:	pop    rdi; 	pop    rbp
0x10330b:	pop    r15; 	pop    rbp
0x10330a:	pop    rsi; 	pop    r15; 	pop    rbp
0x1037b7:	pop    rdi
0x1037b6:	pop    r15
0x1037b5:	pop    rsi; 	pop    r15
0x1037b4:	pop    r14; 	pop    r15
0x103b46:	and    cl,ch
0x103b45:	push   rbx; 	and    cl,ch
0x103ccb:	pop    rbx
0x103cca:	pop    rcx; 	pop    rbx
0x103cc9:	pop    rdx; 	pop    rcx; 	pop    rbx
0x103cc8:	or     bl,BYTE PTR [rdx+0x59]; 	pop    rbx
0x103ce4:	add    esp,0x18
0x103ce3:	add    rsp,0x18
0x103d04:	add    esp,0x18
0x103d03:	add    rsp,0x18
0x103d1f:	add    esp,0x18
0x103d1e:	add    rsp,0x18
0x103d41:	add    esp,0x18
0x103d40:	add    rsp,0x18
0x103d62:	add    esp,0x18
0x103d61:	add    rsp,0x18
0x103d84:	add    esp,0x18
0x103d83:	add    rsp,0x18
0x103d9d:	jae    0x103da0
0x103d9c:	push   QWORD PTR [rbx+0x1]
0x103dad:	or     eax,0xffffffff
0x103dac:	or     rax,0xffffffffffffffff
0x103dcd:	jae    0x103dd0
0x103dcc:	push   QWORD PTR [rbx+0x1]
0x103ddd:	or     eax,0xffffffff
0x103ddc:	or     rax,0xffffffffffffffff
0x103dfd:	jae    0x103e00
0x103dfc:	push   QWORD PTR [rbx+0x1]
0x103e0d:	or     eax,0xffffffff
0x103e0c:	or     rax,0xffffffffffffffff
0x103e2d:	jae    0x103e30
0x103e2c:	push   QWORD PTR [rbx+0x1]
0x103e3d:	or     eax,0xffffffff
0x103e3c:	or     rax,0xffffffffffffffff
0x103e5d:	jae    0x103e60
0x103e5c:	push   QWORD PTR [rbx+0x1]
0x103e6d:	or     eax,0xffffffff
0x103e6c:	or     rax,0xffffffffffffffff
0x103e8d:	jae    0x103e90
0x103e8c:	push   QWORD PTR [rbx+0x1]
0x103e9d:	or     eax,0xffffffff
0x103e9c:	or     rax,0xffffffffffffffff
0x103ebd:	jae    0x103ec0
0x103ebc:	push   QWORD PTR [rbx+0x1]
0x103ecd:	or     eax,0xffffffff
0x103ecc:	or     rax,0xffffffffffffffff
0x103eed:	jae    0x103ef0
0x103eec:	push   QWORD PTR [rbx+0x1]
0x103efd:	or     eax,0xffffffff
0x103efc:	or     rax,0xffffffffffffffff
0x103f5a:	add    esp,0x8
0x103f59:	add    rsp,0x8
0x103fb0:	add    bl,dh
0x103fae:	add    BYTE PTR [rax],al; 	add    bl,dh
0x103fe4:	fdiv   st,st(3)
0x103ffc:	mov    dh,0xc0
0x103ffb:	movzx  eax,al
0x104039:	add    BYTE PTR [rax],al
0x104037:	add    BYTE PTR [rax],ah; 	add    BYTE PTR [rax],al
0x10408f:	add    BYTE PTR [rax-0x7d],cl
0x1040bc:	pop    rdi
0x1040bb:	pop    r15
0x1040ba:	pop    rsi; 	pop    r15
0x1040b9:	pop    r14; 	pop    r15
0x10418b:	pop    rdi
0x10418a:	pop    r15
0x104189:	pop    rsi; 	pop    r15
0x104188:	pop    r14; 	pop    r15
0x1041fa:	pop    rdi
0x1041f9:	pop    r15
0x1041f8:	pop    rsi; 	pop    r15
0x1041f7:	pop    r14; 	pop    r15
0x104424:	fisttp DWORD PTR [rbp-0x77]
0x104644:	pop    rdi
0x104643:	pop    r15
0x104642:	pop    rsi; 	pop    r15
0x104641:	pop    r14; 	pop    r15
0x104658:	add    cl,BYTE PTR [rbp-0x77]
0x104657:	rex.WRX add r9b,BYTE PTR [rbp-0x77]
0x104c17:	or     BYTE PTR [rax-0x77],cl
0x104e91:	adc    cl,ch
0x104fb8:	pop    rbp
0x104fb7:	pop    rdi; 	pop    rbp
0x104fb6:	pop    r15; 	pop    rbp
0x104fb5:	pop    rsi; 	pop    r15; 	pop    rbp
0x105415:	dec    DWORD PTR [rax+0x39]
0x10541e:	add    BYTE PTR [rax-0x77],cl
0x105767:	add    BYTE PTR [rax-0x7d],cl
0x1058c3:	add    BYTE PTR [rax-0x7d],cl
0x105aaa:	xchg   esp,eax
0x105aa8:	add    DWORD PTR [rdi],ecx; 	xchg   esp,eax
0x106178:	add    DWORD PTR [rax-0x7d],ecx
0x106177:	push   rbx; 	add    DWORD PTR [rax-0x7d],ecx
0x106695:	xchg   ebp,eax
0x106693:	add    cl,BYTE PTR [rdi]; 	xchg   ebp,eax
0x106692:	clc    ; 	add    cl,BYTE PTR [rdi]; 	xchg   ebp,eax
0x1066e3:	xchg   ebp,eax
0x1066e1:	add    cl,BYTE PTR [rdi]; 	xchg   ebp,eax
0x1066e0:	clc    ; 	add    cl,BYTE PTR [rdi]; 	xchg   ebp,eax
0x106700:	xchg   esp,eax
0x1066fe:	add    al,0xf; 	xchg   esp,eax
0x1069bc:	xchg   esp,eax
0x1069ba:	adc    ecx,DWORD PTR [rdi]; 	xchg   esp,eax
0x106e89:	pop    rdi
0x106e88:	pop    r15
0x106e87:	pop    rsi; 	pop    r15
0x106e86:	pop    r14; 	pop    r15
0x107c40:	xchg   esp,eax
0x107f2f:	sub    BYTE PTR [rax-0x7d],cl
0x107f2e:	push   rsi; 	sub    BYTE PTR [rax-0x7d],cl
0x108017:	pop    rbp
0x108016:	pop    rdi; 	pop    rbp
0x108015:	pop    r15; 	pop    rbp
0x108014:	pop    rsi; 	pop    r15; 	pop    rbp
0x10820e:	ror    BYTE PTR [rdi],0x89
0x1088b2:	pop    rbp
0x1088b1:	pop    rbx; 	pop    rbp
0x1088b0:	or     BYTE PTR [rbx+0x5d],bl
0x1088b7:	add    bl,dh
0x1088b6:	add    bl,sil
0x108b92:	pop    rbp
0x108b91:	pop    r13
0x108b90:	pop    rsp; 	pop    r13
0x108b8f:	pop    r12; 	pop    r13
0x108c35:	sbb    cl,BYTE PTR [rax-0x7d]
0x108c83:	pop    rsp
0x108c82:	pop    r12
0x108c81:	pop    rbp; 	pop    r12
0x108c80:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x108ca8:	pop    rsp
0x108ca7:	pop    r12
0x108ca6:	pop    rbp; 	pop    r12
0x108ca5:	pop    rbx; 	pop    rbp; 	pop    r12
0x108ddb:	pop    rbp
0x108dda:	pop    r13
0x108dd9:	pop    rsp; 	pop    r13
0x108dd8:	pop    r12; 	pop    r13
0x108e5e:	pop    rbp
0x108e5d:	pop    r13
0x108e5c:	pop    rsp; 	pop    r13
0x108e5b:	pop    r12; 	pop    r13
0x108e6e:	pop    rbp
0x108e6d:	pop    r13
0x108e6c:	pop    rsp; 	pop    r13
0x108e6b:	pop    r12; 	pop    r13
0x108efd:	pop    rbp
0x108efc:	pop    r13
0x108efb:	pop    rsp; 	pop    r13
0x108efa:	pop    r12; 	pop    r13
0x108f44:	pop    rbp
0x108f43:	pop    r13
0x108f42:	pop    rsp; 	pop    r13
0x108f41:	pop    r12; 	pop    r13
0x108ffc:	pop    rbp
0x108ffb:	pop    r13
0x108ffa:	pop    rsp; 	pop    r13
0x108ff9:	pop    r12; 	pop    r13
0x109025:	add    BYTE PTR [rax-0x77],cl
0x109520:	pop    rbp
0x10951f:	pop    rdi; 	pop    rbp
0x10951e:	pop    r15; 	pop    rbp
0x10951d:	pop    rsi; 	pop    r15; 	pop    rbp
0x109a51:	pop    rdi
0x109a50:	pop    r15
0x109a4f:	pop    rsi; 	pop    r15
0x109a4e:	pop    r14; 	pop    r15
0x109be5:	add    BYTE PTR [rax-0x7d],cl
0x109ff9:	fidivr WORD PTR [rcx]
0x109ff7:	push   QWORD PTR [rsi+rbx*8+0x39]
0x10a0d5:	xchg   ebp,eax
0x10a0d3:	xor    BYTE PTR [rdi],cl; 	xchg   ebp,eax
0x10a5b0:	pop    rdi
0x10a5af:	pop    r15
0x10a5ae:	pop    rsi; 	pop    r15
0x10a5ad:	pop    r14; 	pop    r15
0x10a80a:	pop    rdi
0x10a809:	pop    r15
0x10a808:	pop    rsi; 	pop    r15
0x10a807:	pop    r14; 	pop    r15
0x10a87d:	add    BYTE PTR [rax-0x7d],cl
0x10abd5:	adc    BYTE PTR [rax-0x77],cl
0x10b250:	adc    BYTE PTR [rax-0x77],cl
0x10ba1e:	or     cl,BYTE PTR [rax-0x7d]
0x10ba37:	cmp    al,ch
0x10be55:	add    BYTE PTR [rax-0x7d],cl
0x10be71:	xor    ecx,DWORD PTR [rax-0x7d]
0x10c11a:	add    cl,ch
0x10c4aa:	dec    DWORD PTR [rax-0x77]
0x10c4a9:	hlt    ; 	dec    DWORD PTR [rax-0x77]
0x10ca49:	adc    BYTE PTR [rax-0x77],cl
0x10ce39:	cmp    ecx,DWORD PTR [rax-0x77]
0x10cf04:	pop    rdi
0x10cf03:	pop    r15
0x10cf02:	pop    rsi; 	pop    r15
0x10cf01:	pop    r14; 	pop    r15
0x10d156:	dec    DWORD PTR [rax-0x77]
0x10d155:	hlt    ; 	dec    DWORD PTR [rax-0x77]
0x10d2ff:	add    BYTE PTR [rax-0x7d],cl
0x10d32a:	pop    rbp
0x10d329:	pop    rbx; 	pop    rbp
0x10d328:	or     BYTE PTR [rbx+0x5d],bl
0x10d32f:	add    bl,dh
0x10d32e:	add    bl,sil
0x10d6f0:	pop    rdi
0x10d6ef:	pop    r15
0x10d6ee:	pop    rsi; 	pop    r15
0x10d6ed:	pop    r14; 	pop    r15
0x10e0e7:	add    BYTE PTR [rax-0x7d],cl
0x10e0e6:	add    BYTE PTR [rax-0x7d],cl
0x10e607:	add    al,ch
0x10e605:	add    DWORD PTR [rax],eax; 	add    al,ch
0x10e69a:	pop    rbp
0x10e699:	pop    r13
0x10e698:	pop    rsp; 	pop    r13
0x10e697:	pop    r12; 	pop    r13
0x10e74a:	pop    rbp
0x10e749:	pop    r13
0x10e748:	pop    rsp; 	pop    r13
0x10e747:	pop    r12; 	pop    r13
0x10e7b1:	pop    rbp
0x10e7b0:	pop    rbx; 	pop    rbp
0x10e7ae:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x10e7c2:	pop    rbp
0x10e7c1:	pop    rbx; 	pop    rbp
0x10e7c0:	add    BYTE PTR [rbx+0x5d],bl
0x10e7bf:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x10e7e6:	adc    DWORD PTR [rdi+0x40],eax
0x10e7e5:	movups XMMWORD PTR [rdi+0x40],xmm0
0x10e812:	add    DWORD PTR [rax-0x7d],ecx
0x10e811:	rex.XB add DWORD PTR [r8-0x7d],ecx
0x10e838:	add    DWORD PTR [rax-0x7d],ecx
0x10e837:	rex.XB add DWORD PTR [r8-0x7d],ecx
0x10e851:	pop    rbp
0x10e850:	pop    rbx; 	pop    rbp
0x10e84e:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x10e8a5:	pop    rbp
0x10e8a4:	pop    rbx; 	pop    rbp
0x10e8a3:	rcr    BYTE PTR [rbx+0x5d],1
0x10e8a2:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x10e93e:	pop    rsi
0x10e93d:	pop    r14
0x10e93c:	pop    rbp; 	pop    r14
0x10e93b:	pop    r13; 	pop    r14
0x10e9cd:	pop    rsp
0x10e9cc:	pop    r12
0x10e9cb:	pop    rbp; 	pop    r12
0x10e9ca:	pop    rbx; 	pop    rbp; 	pop    r12
0x10e9d8:	pop    rsp
0x10e9d7:	pop    r12
0x10e9d6:	pop    rbp; 	pop    r12
0x10e9d5:	pop    rbx; 	pop    rbp; 	pop    r12
0x10ea18:	pop    rbx
0x10ea15:	seta   al; 	pop    rbx
0x10ea22:	pop    rbx
0x10ea20:	xor    eax,eax; 	pop    rbx
0x10ea5d:	stos   DWORD PTR es:[rdi],eax
0x10ea5c:	stos   QWORD PTR es:[rdi],rax
0x10ea5b:	rep stos QWORD PTR es:[rdi],rax
0x10ea5a:	add    esi,ebx; 	stos   QWORD PTR es:[rdi],rax
0x10ea60:	xor    eax,eax
0x10ea5f:	nop; 	xor    eax,eax
0x10ea5e:	ret    ; 	nop; 	xor    eax,eax
0x10eab6:	adc    DWORD PTR [rsi+0x70],eax
0x10eab5:	movups XMMWORD PTR [rsi+0x70],xmm0
0x10eb06:	adc    DWORD PTR [rdi+0x78],eax
0x10eb05:	movups XMMWORD PTR [rdi+0x78],xmm0
0x10eb16:	xor    eax,eax
0x10eb14:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x10eb45:	xor    eax,eax
0x10eb43:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x10eb53:	xor    eax,eax
0x10eb51:	ja     0x10eb57; 	xor    eax,eax
0x10eb6c:	add    esp,0x18
0x10eb6b:	add    rsp,0x18
0x10eb7c:	add    esp,0x18
0x10eb7b:	add    rsp,0x18
0x10ec0e:	fmul   DWORD PTR [rax+0x21]
0x10ede2:	pop    rdi
0x10ede1:	pop    r15
0x10ede0:	pop    rsi; 	pop    r15
0x10eddf:	pop    r14; 	pop    r15
0x10f348:	add    esp,0x18
0x10f347:	add    rsp,0x18
0x10f3ae:	adc    DWORD PTR [rsi+0x70],eax
0x10f3ad:	movups XMMWORD PTR [rsi+0x70],xmm0
0x10f3c8:	xor    eax,eax
0x10f3c6:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x10f3d8:	xor    eax,eax
0x10f3d6:	mov    DWORD PTR [rsi],eax; 	xor    eax,eax
0x10f43f:	add    BYTE PTR [rax],al
0x10f478:	xor    eax,eax
0x10f476:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x10f48f:	fdiv   st,st(3)
0x10f4da:	add    esp,0x28
0x10f4d9:	add    rsp,0x28
0x10f51f:	add    bl,dh
0x10f51d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x10f54f:	add    BYTE PTR [rax-0x7d],cl
0x10f570:	pop    rsp
0x10f56f:	pop    r12
0x10f56e:	pop    rbp; 	pop    r12
0x10f56d:	pop    rbx; 	pop    rbp; 	pop    r12
0x10f581:	pop    rsp
0x10f580:	pop    r12
0x10f57f:	pop    rbp; 	pop    r12
0x10f57e:	pop    rbx; 	pop    rbp; 	pop    r12
0x10f5aa:	cmove  eax,edx
0x10f5a9:	cmove  rax,rdx
0x10f646:	pop    rbx
0x10f643:	add    esp,0x10; 	pop    rbx
0x10f69d:	jae    0x10f6a0
0x10f69c:	push   QWORD PTR [rbx+0x1]
0x10f6ad:	or     eax,0xffffffff
0x10f6ac:	or     rax,0xffffffffffffffff
0x10f6ff:	add    esp,0x18
0x10f6fe:	add    rsp,0x18
0x10f751:	add    esp,0x18
0x10f750:	add    rsp,0x18
0x10f77c:	add    esi,ebx
0x10f81c:	add    esi,ebx
0x10f874:	or     esi,ebx
0x10f97d:	jae    0x10f980
0x10f97c:	push   QWORD PTR [rbx+0x1]
0x10f98d:	or     eax,0xffffffff
0x10f98c:	or     rax,0xffffffffffffffff
0x10f9ad:	jae    0x10f9b0
0x10f9ac:	push   QWORD PTR [rbx+0x1]
0x10f9bd:	or     eax,0xffffffff
0x10f9bc:	or     rax,0xffffffffffffffff
0x10fa29:	pop    rsp
0x10fa28:	pop    r12
0x10fa27:	pop    rbp; 	pop    r12
0x10fa26:	pop    rbx; 	pop    rbp; 	pop    r12
0x10fa94:	pop    rsp
0x10fa93:	pop    r12
0x10fa92:	pop    rbp; 	pop    r12
0x10fa91:	pop    rbx; 	pop    rbp; 	pop    r12
0x10fab5:	syscall 
0x10fab3:	add    BYTE PTR [rax],al; 	syscall 
0x10facd:	jae    0x10fad0
0x10facc:	push   QWORD PTR [rbx+0x1]
0x10fadd:	or     eax,0xffffffff
0x10fadc:	or     rax,0xffffffffffffffff
0x10fafd:	jae    0x10fb00
0x10fafc:	push   QWORD PTR [rbx+0x1]
0x10fb0d:	or     eax,0xffffffff
0x10fb0c:	or     rax,0xffffffffffffffff
0x10fb5b:	add    al,0xf3
0x10fbbd:	jae    0x10fbc0
0x10fbbc:	push   QWORD PTR [rbx+0x1]
0x10fbcd:	or     eax,0xffffffff
0x10fbcc:	or     rax,0xffffffffffffffff
0x10fbed:	jae    0x10fbf0
0x10fbec:	push   QWORD PTR [rbx+0x1]
0x10fbfd:	or     eax,0xffffffff
0x10fbfc:	or     rax,0xffffffffffffffff
0x10fcaf:	add    esp,0x68
0x10fcae:	add    rsp,0x68
0x10fdcc:	pop    rax
0x10fdca:	add    esp,0x58
0x10fdc9:	add    rsp,0x58
0x10fed4:	add    esp,0x78
0x10fed3:	add    rsp,0x78
0x10fff1:	pop    rax
0x10ffef:	add    esp,0x58
0x10ffee:	add    rsp,0x58
0x1100d5:	pop    rsp
0x1100d4:	pop    r12
0x1100d3:	pop    rbp; 	pop    r12
0x1100d2:	pop    rbx; 	pop    rbp; 	pop    r12
0x11011b:	add    al,0xf3
0x1101a8:	pop    rsp
0x1101a7:	pop    r12
0x1101a6:	pop    rbp; 	pop    r12
0x1101a5:	pop    rbx; 	pop    rbp; 	pop    r12
0x1101ee:	or     ebx,esi
0x11021e:	or     ebx,esi
0x11024e:	or     ebx,esi
0x1102e5:	pop    rdi
0x1102e4:	pop    r15
0x1102e3:	pop    rsi; 	pop    r15
0x1102e2:	pop    r14; 	pop    r15
0x110432:	pop    rbp
0x110431:	pop    r13
0x110430:	pop    rsp; 	pop    r13
0x11042f:	pop    r12; 	pop    r13
0x110612:	add    esp,0x78
0x110611:	add    rsp,0x78
0x11071a:	add    esp,0x68
0x110719:	add    rsp,0x68
0x11077d:	jae    0x110780
0x11077c:	push   QWORD PTR [rbx+0x1]
0x11078d:	or     eax,0xffffffff
0x11078c:	or     rax,0xffffffffffffffff
0x110849:	pop    rbx
0x110846:	add    esp,0x30; 	pop    rbx
0x1108db:	cmp    al,0xf3
0x110912:	pop    rbx
0x11090f:	add    esp,0x10; 	pop    rbx
0x11094e:	or     ebx,esi
0x11097d:	jae    0x110980
0x11097c:	push   QWORD PTR [rbx+0x1]
0x11098d:	or     eax,0xffffffff
0x11098c:	or     rax,0xffffffffffffffff
0x1109ad:	jae    0x1109b0
0x1109ac:	push   QWORD PTR [rbx+0x1]
0x1109bd:	or     eax,0xffffffff
0x1109bc:	or     rax,0xffffffffffffffff
0x1109dd:	jae    0x1109e0
0x1109dc:	push   QWORD PTR [rbx+0x1]
0x1109ed:	or     eax,0xffffffff
0x1109ec:	or     rax,0xffffffffffffffff
0x110a0d:	jae    0x110a10
0x110a0c:	push   QWORD PTR [rbx+0x1]
0x110a1d:	or     eax,0xffffffff
0x110a1c:	or     rax,0xffffffffffffffff
0x110a3d:	jae    0x110a40
0x110a3c:	push   QWORD PTR [rbx+0x1]
0x110a4d:	or     eax,0xffffffff
0x110a4c:	or     rax,0xffffffffffffffff
0x110aba:	pop    rbp
0x110ab9:	pop    rbx; 	pop    rbp
0x110ab8:	sbb    BYTE PTR [rbx+0x5d],bl
0x110afd:	jae    0x110b00
0x110afc:	push   QWORD PTR [rbx+0x1]
0x110b0d:	or     eax,0xffffffff
0x110b0c:	or     rax,0xffffffffffffffff
0x110b2d:	jae    0x110b30
0x110b2c:	push   QWORD PTR [rbx+0x1]
0x110b3d:	or     eax,0xffffffff
0x110b3c:	or     rax,0xffffffffffffffff
0x110bed:	pop    rdi
0x110bec:	pop    r15
0x110beb:	pop    rsi; 	pop    r15
0x110bea:	pop    r14; 	pop    r15
0x11115f:	dec    DWORD PTR [rax-0x77]
0x11115e:	lock dec DWORD PTR [rax-0x77]
0x1112dc:	pop    rsp
0x1112db:	pop    r12
0x1112da:	pop    rbp; 	pop    r12
0x1112d9:	pop    rbx; 	pop    rbp; 	pop    r12
0x11135a:	add    BYTE PTR [rax-0x77],cl
0x11138a:	pop    rbx
0x111388:	add    BYTE PTR [rax],al; 	pop    rbx
0x1113ed:	jae    0x1113f0
0x1113ec:	push   QWORD PTR [rbx+0x1]
0x1113fd:	or     eax,0xffffffff
0x1113fc:	or     rax,0xffffffffffffffff
0x11141d:	jae    0x111420
0x11141c:	push   QWORD PTR [rbx+0x1]
0x11142d:	or     eax,0xffffffff
0x11142c:	or     rax,0xffffffffffffffff
0x11144d:	jae    0x111450
0x11144c:	push   QWORD PTR [rbx+0x1]
0x11145d:	or     eax,0xffffffff
0x11145c:	or     rax,0xffffffffffffffff
0x111480:	jae    0x111483
0x11147f:	push   QWORD PTR [rbx+0x1]
0x111490:	or     eax,0xffffffff
0x11148f:	or     rax,0xffffffffffffffff
0x111589:	add    BYTE PTR [rax-0x77],cl
0x1116f7:	pop    rsi
0x1116f6:	pop    r14
0x1116f5:	pop    rbp; 	pop    r14
0x1116f4:	pop    r13; 	pop    r14
0x111a0c:	pop    rdi
0x111a0b:	pop    r15
0x111a0a:	pop    rsi; 	pop    r15
0x111a09:	pop    r14; 	pop    r15
0x111c17:	pop    rax
0x111c15:	add    esp,0x58
0x111c14:	add    rsp,0x58
0x111c2d:	jae    0x111c30
0x111c2c:	push   QWORD PTR [rbx+0x1]
0x111c3d:	or     eax,0xffffffff
0x111c3c:	or     rax,0xffffffffffffffff
0x111c60:	jae    0x111c63
0x111c5f:	push   QWORD PTR [rbx+0x1]
0x111c70:	or     eax,0xffffffff
0x111c6f:	or     rax,0xffffffffffffffff
0x111c8d:	jae    0x111c90
0x111c8c:	push   QWORD PTR [rbx+0x1]
0x111c9d:	or     eax,0xffffffff
0x111c9c:	or     rax,0xffffffffffffffff
0x111cbd:	jae    0x111cc0
0x111cbc:	push   QWORD PTR [rbx+0x1]
0x111ccd:	or     eax,0xffffffff
0x111ccc:	or     rax,0xffffffffffffffff
0x111ced:	jae    0x111cf0
0x111cec:	push   QWORD PTR [rbx+0x1]
0x111cfd:	or     eax,0xffffffff
0x111cfc:	or     rax,0xffffffffffffffff
0x111d20:	jae    0x111d23
0x111d1f:	push   QWORD PTR [rbx+0x1]
0x111d30:	or     eax,0xffffffff
0x111d2f:	or     rax,0xffffffffffffffff
0x111d4d:	jae    0x111d50
0x111d4c:	push   QWORD PTR [rbx+0x1]
0x111d5d:	or     eax,0xffffffff
0x111d5c:	or     rax,0xffffffffffffffff
0x111d7d:	jae    0x111d80
0x111d7c:	push   QWORD PTR [rbx+0x1]
0x111d8d:	or     eax,0xffffffff
0x111d8c:	or     rax,0xffffffffffffffff
0x111dad:	jae    0x111db0
0x111dac:	push   QWORD PTR [rbx+0x1]
0x111dbd:	or     eax,0xffffffff
0x111dbc:	or     rax,0xffffffffffffffff
0x111f46:	pop    rsi
0x111f45:	pop    r14
0x111f44:	pop    rbp; 	pop    r14
0x111f43:	pop    r13; 	pop    r14
0x11235e:	dec    DWORD PTR [rax+0x39]
0x11235d:	lock dec DWORD PTR [rax+0x39]
0x112447:	pop    rdi
0x112446:	pop    r15
0x112445:	pop    rsi; 	pop    r15
0x112444:	pop    r14; 	pop    r15
0x11274e:	add    al,0x89
0x11293f:	push   rsi
0x112b3e:	pop    rbp
0x112b3d:	pop    rdi; 	pop    rbp
0x112b3c:	pop    r15; 	pop    rbp
0x112b3b:	pop    rsi; 	pop    r15; 	pop    rbp
0x112e10:	pop    rbp
0x112e0f:	pop    r13
0x112e0e:	pop    rsp; 	pop    r13
0x112e0d:	pop    r12; 	pop    r13
0x11346a:	pop    rdi
0x113469:	pop    r15
0x113468:	pop    rsi; 	pop    r15
0x113467:	pop    r14; 	pop    r15
0x113879:	ret    
0x113877:	shr    al,0xc3
0x11392b:	shr    al,0xf
0x113b5b:	add    al,0xf6
0x113b7c:	dec    DWORD PTR [rax+0x39]
0x113b7b:	lock dec DWORD PTR [rax+0x39]
0x113e57:	pop    rdi
0x113e56:	pop    r15
0x113e55:	pop    rsi; 	pop    r15
0x113e54:	pop    r14; 	pop    r15
0x11433a:	pop    rsp
0x114339:	pop    r12
0x114338:	pop    rbp; 	pop    r12
0x114337:	pop    rbx; 	pop    rbp; 	pop    r12
0x11448a:	pop    rdi
0x114489:	pop    r15
0x114488:	pop    rsi; 	pop    r15
0x114487:	pop    r14; 	pop    r15
0x114a49:	xor    eax,eax
0x114a48:	xor    ax,ax
0x114a47:	push   rsi; 	xor    ax,ax
0x114a61:	add    BYTE PTR [rax],al
0x114a5f:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x114b2b:	pop    rbp
0x114b2a:	pop    r13
0x114b29:	pop    rsp; 	pop    r13
0x114b28:	pop    r12; 	pop    r13
0x114b3e:	pop    rbp
0x114b3d:	pop    r13
0x114b3c:	pop    rsp; 	pop    r13
0x114b3b:	pop    r12; 	pop    r13
0x114b4b:	pop    rbp
0x114b4a:	pop    r13
0x114b49:	pop    rsp; 	pop    r13
0x114b48:	pop    r12; 	pop    r13
0x114ba6:	xor    eax,eax
0x114ba4:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x114c18:	pop    rsp
0x114c17:	pop    r12
0x114c16:	pop    rbp; 	pop    r12
0x114c15:	pop    rbx; 	pop    rbp; 	pop    r12
0x114cba:	pop    rbx
0x114cb9:	rex pop rbx
0x114cb7:	add    esp,0x40; 	pop    rbx
0x114d58:	cmova  eax,edx
0x114e61:	pop    rdi
0x114e60:	pop    r15
0x114e5f:	pop    rsi; 	pop    r15
0x114e5e:	pop    r14; 	pop    r15
0x114f84:	pop    rbx
0x114f82:	neg    eax; 	pop    rbx
0x114f92:	pop    rbx
0x114f90:	xor    eax,eax; 	pop    rbx
0x1150b1:	pop    rdi
0x1150b0:	pop    r15
0x1150af:	pop    rsi; 	pop    r15
0x1150ae:	pop    r14; 	pop    r15
0x1151d4:	pop    rbx
0x1151d2:	neg    eax; 	pop    rbx
0x1151e2:	pop    rbx
0x1151e0:	xor    eax,eax; 	pop    rbx
0x115210:	jae    0x115213
0x11520f:	push   QWORD PTR [rbx+0x1]
0x115220:	or     eax,0xffffffff
0x11521f:	or     rax,0xffffffffffffffff
0x115431:	pop    rdi
0x115430:	pop    r15
0x11542f:	pop    rsi; 	pop    r15
0x11542e:	pop    r14; 	pop    r15
0x1155cb:	pop    rdi
0x1155ca:	pop    r15
0x1155c9:	pop    rsi; 	pop    r15
0x1155c8:	pop    r14; 	pop    r15
0x115696:	or     ebx,esi
0x11578b:	mov    DWORD PTR [rsi+0x48],eax
0x11578a:	mov    QWORD PTR [rsi+0x48],rax
0x115808:	pop    rbp
0x115807:	pop    r13
0x115806:	pop    rsp; 	pop    r13
0x115805:	pop    r12; 	pop    r13
0x1158b6:	pop    rbp
0x1158b5:	pop    r13
0x1158b4:	pop    rsp; 	pop    r13
0x1158b3:	pop    r12; 	pop    r13
0x1158f6:	add    BYTE PTR [rax],al
0x11590f:	add    bl,dh
0x11590d:	adc    BYTE PTR [rax],al; 	add    bl,dh
0x115943:	ja     0x11594d
0x115942:	mov    DWORD PTR [rdi+0x8],esi
0x11598c:	ja     0x115996
0x11598b:	mov    DWORD PTR [rdi+0x8],esi
0x1159a0:	xor    eax,eax
0x11599e:	mov    DWORD PTR [rdi],eax; 	xor    eax,eax
0x115a0d:	pop    rsp
0x115a0c:	pop    r12
0x115a0b:	pop    rbp; 	pop    r12
0x115a0a:	rcr    BYTE PTR [rbp+0x41],0x5c
0x115a29:	pop    rsp
0x115a28:	pop    r12
0x115a27:	pop    rbp; 	pop    r12
0x115a26:	rcr    BYTE PTR [rbp+0x41],0x5c
0x115a46:	pop    rsp
0x115a45:	pop    r12
0x115a44:	pop    rbp; 	pop    r12
0x115a43:	pop    rbx; 	pop    rbp; 	pop    r12
0x115ad7:	pop    rsp
0x115ad6:	pop    r12
0x115ad5:	pop    rbp; 	pop    r12
0x115ad4:	pop    rbx; 	pop    rbp; 	pop    r12
0x115d21:	add    esp,0x38
0x115d20:	add    rsp,0x38
0x115d7c:	add    esp,0x18
0x115d7b:	add    rsp,0x18
0x115daa:	add    esp,0x18
0x115da9:	add    rsp,0x18
0x115e1e:	pop    rbx
0x115e1b:	add    esp,0x10; 	pop    rbx
0x115ec5:	mov    DWORD PTR [rdi+0x16],eax
0x115ec4:	mov    WORD PTR [rdi+0x16],ax
0x115f2e:	pop    rsp
0x115f2d:	pop    r12
0x115f2c:	pop    rbp; 	pop    r12
0x115f2b:	pop    rbx; 	pop    rbp; 	pop    r12
0x115fa7:	or     bl,dh
0x11601d:	jae    0x116020
0x11601c:	push   QWORD PTR [rbx+0x1]
0x11602d:	or     eax,0xffffffff
0x11602c:	or     rax,0xffffffffffffffff
0x116099:	add    BYTE PTR [rax-0x39],cl
0x1160b8:	pop    rbx
0x1160b7:	jo     0x116114
0x1160b5:	add    esp,0x70; 	pop    rbx
0x1160f9:	dec    DWORD PTR [rax-0x77]
0x1160f8:	std    ; 	dec    DWORD PTR [rax-0x77]
0x11611e:	add    BYTE PTR [rax+0x39],cl
0x1161e2:	pop    rsp
0x1161e1:	pop    r12
0x1161e0:	pop    rbp; 	pop    r12
0x1161df:	pop    rbx; 	pop    rbp; 	pop    r12
0x1163ab:	pop    rbp
0x1163aa:	pop    rbx; 	pop    rbp
0x1163a9:	add    BYTE PTR [rbx+0x5d],bl
0x1163a8:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x1163d8:	cmovns eax,edx
0x11640d:	jae    0x116410
0x11640c:	push   QWORD PTR [rbx+0x1]
0x11641d:	or     eax,0xffffffff
0x11641c:	or     rax,0xffffffffffffffff
0x11647c:	pop    rsp
0x11647b:	pop    r12
0x11647a:	pop    rbp; 	pop    r12
0x116479:	call   FWORD PTR [rbp+0x41]; 	pop    rsp
0x1164a2:	pop    rsp
0x1164a1:	pop    r12
0x1164a0:	pop    rbp; 	pop    r12
0x11649f:	pop    rbx; 	pop    rbp; 	pop    r12
0x1164d4:	sub    esi,ebx
0x1164fa:	xor    eax,eax
0x116572:	add    BYTE PTR [rax-0x39],cl
0x116580:	pop    rsp
0x11657f:	pop    r12
0x11657e:	pop    rbp; 	pop    r12
0x11657d:	pop    rbx; 	pop    rbp; 	pop    r12
0x11659b:	pop    rsp
0x11659a:	pop    r12
0x116599:	pop    rbp; 	pop    r12
0x116598:	pop    rbx; 	pop    rbp; 	pop    r12
0x1165a5:	fmul   DWORD PTR [rax+0x39]
0x1165dd:	jae    0x1165e0
0x1165dc:	push   QWORD PTR [rbx+0x1]
0x1165ed:	or     eax,0xffffffff
0x1165ec:	or     rax,0xffffffffffffffff
0x116668:	pop    rsp
0x116667:	pop    r12
0x116666:	pop    rbp; 	pop    r12
0x116665:	pop    rbx; 	pop    rbp; 	pop    r12
0x116708:	pop    rsp
0x116707:	pop    r12
0x116706:	pop    rbp; 	pop    r12
0x116705:	pop    rbx; 	pop    rbp; 	pop    r12
0x1167bd:	pop    rbp
0x1167bc:	pop    r13
0x1167bb:	pop    rsp; 	pop    r13
0x1167ba:	pop    r12; 	pop    r13
0x11686d:	pop    rbp
0x11686c:	pop    r13
0x11686b:	pop    rsp; 	pop    r13
0x11686a:	pop    r12; 	pop    r13
0x1168f3:	pop    rdi
0x1168f2:	pop    r15
0x1168f1:	pop    rsi; 	pop    r15
0x1168f0:	pop    r14; 	pop    r15
0x116a03:	pop    rdi
0x116a02:	pop    r15
0x116a01:	pop    rsi; 	pop    r15
0x116a00:	pop    r14; 	pop    r15
0x116afe:	add    esp,0x38
0x116afd:	add    rsp,0x38
0x116b9e:	add    esp,0x38
0x116b9d:	add    rsp,0x38
0x116c50:	add    esp,0x38
0x116c4f:	add    rsp,0x38
0x116d20:	add    esp,0x38
0x116d1f:	add    rsp,0x38
0x116daf:	add    dh,bl
0x116e19:	add    esp,0x28
0x116e18:	add    rsp,0x28
0x116eb8:	pop    rsi
0x116eb7:	pop    r14
0x116eb6:	pop    rbp; 	pop    r14
0x116eb5:	pop    r13; 	pop    r14
0x116efd:	jae    0x116f00
0x116efc:	push   QWORD PTR [rbx+0x1]
0x116f0d:	or     eax,0xffffffff
0x116f0c:	or     rax,0xffffffffffffffff
0x116f9a:	pop    rsp
0x116f99:	pop    r12
0x116f98:	pop    rbp; 	pop    r12
0x116f97:	pop    rbx; 	pop    rbp; 	pop    r12
0x116fbd:	jae    0x116fc0
0x116fbc:	push   QWORD PTR [rbx+0x1]
0x116fcd:	or     eax,0xffffffff
0x116fcc:	or     rax,0xffffffffffffffff
0x117062:	pop    rsi
0x117061:	pop    r14
0x117060:	pop    rbp; 	pop    r14
0x11705f:	pop    r13; 	pop    r14
0x11710a:	pop    rbp
0x117109:	pop    rbx; 	pop    rbp
0x1171ad:	jae    0x1171b0
0x1171ac:	push   QWORD PTR [rbx+0x1]
0x1171bd:	or     eax,0xffffffff
0x1171bc:	or     rax,0xffffffffffffffff
0x1171dd:	jae    0x1171e0
0x1171dc:	push   QWORD PTR [rbx+0x1]
0x1171ed:	or     eax,0xffffffff
0x1171ec:	or     rax,0xffffffffffffffff
0x11721b:	cmp    al,0xf3
0x117252:	pop    rbx
0x11724f:	add    esp,0x10; 	pop    rbx
0x11728d:	jae    0x117290
0x11728c:	push   QWORD PTR [rbx+0x1]
0x11729d:	or     eax,0xffffffff
0x11729c:	or     rax,0xffffffffffffffff
0x1172cb:	cmp    al,0xf3
0x117302:	pop    rbx
0x1172ff:	add    esp,0x10; 	pop    rbx
0x11733d:	jae    0x117340
0x11733c:	push   QWORD PTR [rbx+0x1]
0x11734d:	or     eax,0xffffffff
0x11734c:	or     rax,0xffffffffffffffff
0x1174ee:	pop    rbp
0x1174ed:	pop    rdi; 	pop    rbp
0x1174ec:	pop    r15; 	pop    rbp
0x1174eb:	pop    rsi; 	pop    r15; 	pop    rbp
0x1175ec:	pop    rbp
0x1175eb:	pop    rbx; 	pop    rbp
0x1175ea:	sbb    BYTE PTR [rbx+0x5d],bl
0x11765d:	jae    0x117660
0x11765c:	push   QWORD PTR [rbx+0x1]
0x11766d:	or     eax,0xffffffff
0x11766c:	or     rax,0xffffffffffffffff
0x11768d:	jae    0x117690
0x11768c:	push   QWORD PTR [rbx+0x1]
0x11769d:	or     eax,0xffffffff
0x11769c:	or     rax,0xffffffffffffffff
0x1176bd:	jae    0x1176c0
0x1176bc:	push   QWORD PTR [rbx+0x1]
0x1176cd:	or     eax,0xffffffff
0x1176cc:	or     rax,0xffffffffffffffff
0x1176fc:	pop    rbx
0x1176fa:	mov    eax,ebx; 	pop    rbx
0x1176f9:	mov    rax,rbx; 	pop    rbx
0x11772d:	pop    rbx
0x11772c:	ret    ; 	pop    rbx
0x11772b:	rex.R ret ; 	pop    rbx
0x11772a:	cmove  eax,ebx; 	pop    rbx
0x11780c:	pop    rax
0x11780a:	add    esp,0x58
0x117809:	add    rsp,0x58
0x117888:	add    esp,0x38
0x117887:	add    rsp,0x38
0x117963:	add    esp,0x68
0x117962:	add    rsp,0x68
0x1179d5:	add    esp,0x8
0x1179d4:	add    rsp,0x8
0x117a2d:	add    esp,0x8
0x117a2c:	add    rsp,0x8
0x117ae6:	add    esp,0x8
0x117ae5:	add    rsp,0x8
0x117c71:	pop    rsp
0x117c70:	pop    r12
0x117c6f:	pop    rbp; 	pop    r12
0x117c6e:	rcr    BYTE PTR [rbp+0x41],0x5c
0x117e52:	pop    rsp
0x117e51:	pop    r12
0x117e50:	pop    rbp; 	pop    r12
0x117e4f:	rcr    BYTE PTR [rbp+0x41],0x5c
0x117fe1:	add    esp,0x8
0x117fe0:	add    rsp,0x8
0x117fe7:	add    bl,dh
0x118006:	add    esp,0x8
0x118005:	add    rsp,0x8
0x118082:	pop    rbx
0x118080:	xor    eax,eax; 	pop    rbx
0x1181f9:	pop    rbp
0x1181f8:	pop    rsp; 	pop    rbp
0x1181f7:	pop    r12; 	pop    rbp
0x1181f6:	pop    rbx; 	pop    r12; 	pop    rbp
0x118214:	add    esp,0x8
0x118213:	add    rsp,0x8
0x118223:	add    BYTE PTR [rax],al
0x118221:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x118294:	add    BYTE PTR [rax+0x39],cl
0x1182a3:	add    DWORD PTR [rax+0x39],ecx
0x118493:	pop    rsi
0x118492:	pop    r14
0x118491:	pop    rbp; 	pop    r14
0x118490:	pop    r13; 	pop    r14
0x118895:	pop    rbp
0x118894:	pop    rdi; 	pop    rbp
0x118893:	pop    r15; 	pop    rbp
0x118892:	pop    rsi; 	pop    r15; 	pop    rbp
0x118a3a:	pop    rbp
0x118a39:	pop    r13
0x118a38:	pop    rsp; 	pop    r13
0x118a37:	pop    r12; 	pop    r13
0x118a4e:	or     ebx,esi
0x118b07:	add    esp,0x38
0x118b06:	add    rsp,0x38
0x118bd6:	add    esp,0x38
0x118bd5:	add    rsp,0x38
0x118c33:	or     al,0xf3
0x118c6e:	or     ebx,esi
0x118c9e:	or     ebx,esi
0x118d19:	ja     0x118d23
0x118d18:	mov    DWORD PTR [rdi+0x8],esi
0x118d17:	mov    QWORD PTR [rdi+0x8],rsi
0x118d2d:	add    BYTE PTR [rax],al
0x118d2b:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x118d47:	adc    bl,dh
0x118dd0:	inc    DWORD PTR [rax]
0x118dcf:	rex inc DWORD PTR [rax]
0x118dce:	mov    BYTE PTR [rax-0x1],0x0
0x118e27:	inc    DWORD PTR [rax]
0x118e26:	rex inc DWORD PTR [rax]
0x118e25:	mov    BYTE PTR [rax-0x1],0x0
0x118e3f:	inc    DWORD PTR [rax]
0x118e3e:	rex inc DWORD PTR [rax]
0x118e3d:	mov    BYTE PTR [rax-0x1],0x0
0x118f4f:	pop    rdi
0x118f4e:	pop    r15
0x118f4d:	pop    rsi; 	pop    r15
0x118f4c:	pop    r14; 	pop    r15
0x118f74:	add    BYTE PTR [rax-0x77],cl
0x118ff7:	dec    DWORD PTR [rax-0x77]
0x1190f6:	pop    rdi
0x1190f5:	pop    r15
0x1190f4:	pop    rsi; 	pop    r15
0x1190f3:	pop    r14; 	pop    r15
0x119107:	add    BYTE PTR [rax-0x7d],cl
0x11912c:	add    BYTE PTR [rax-0x77],cl
0x119149:	dec    DWORD PTR [rax-0x77]
0x119212:	pop    rsp
0x119211:	pop    r12
0x119210:	pop    rbp; 	pop    r12
0x11920f:	pop    rbx; 	pop    rbp; 	pop    r12
0x119258:	pop    rsp
0x119257:	pop    r12
0x119256:	pop    rbp; 	pop    r12
0x119255:	pop    rbx; 	pop    rbp; 	pop    r12
0x1192ab:	add    esp,0x8
0x1192aa:	add    rsp,0x8
0x1192cb:	add    esp,0x8
0x1192ca:	add    rsp,0x8
0x119300:	add    esp,0x8
0x1192ff:	add    rsp,0x8
0x11933b:	mov    dh,0xc0
0x11933a:	movzx  eax,al
0x119339:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x119343:	add    BYTE PTR [rax],al
0x119341:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1193b2:	pop    rbp
0x1193b1:	pop    r13
0x1193b0:	pop    rsp; 	pop    r13
0x1193af:	pop    r12; 	pop    r13
0x1194ff:	add    BYTE PTR [rax-0x7d],cl
0x11956d:	adc    cl,BYTE PTR [rax-0x7d]
0x11960e:	add    esp,0x8
0x11960d:	add    rsp,0x8
0x11971e:	pop    rbp
0x11971d:	pop    r13
0x11971c:	pop    rsp; 	pop    r13
0x11971b:	pop    r12; 	pop    r13
0x11979f:	add    BYTE PTR [rax-0x7d],cl
0x11980d:	adc    cl,BYTE PTR [rax-0x7d]
0x1198e5:	xchg   edi,eax
0x1199a3:	pop    rdi
0x1199a2:	pop    r15
0x1199a1:	pop    rsi; 	pop    r15
0x1199a0:	pop    r14; 	pop    r15
0x119afc:	pop    rbp
0x119afb:	pop    rbp; 	pop    rbp
0x119afa:	pop    r13; 	pop    rbp
0x119af9:	pop    rsp; 	pop    r13; 	pop    rbp
0x119bfb:	pop    rdi
0x119bfa:	pop    r15
0x119bf9:	pop    rsi; 	pop    r15
0x119bf8:	pop    r14; 	pop    r15
0x119d44:	add    BYTE PTR [rax],al
0x11a0b4:	pop    rdi
0x11a0b3:	pop    r15
0x11a0b2:	pop    rsi; 	pop    r15
0x11a0b1:	pop    r14; 	pop    r15
0x11a34e:	dec    DWORD PTR [rax-0x77]
0x11a34d:	lock dec DWORD PTR [rax-0x77]
0x11a6e1:	pop    rdi
0x11a6e0:	pop    r15
0x11a6df:	pop    rsi; 	pop    r15
0x11a6de:	pop    r14; 	pop    r15
0x11a986:	dec    DWORD PTR [rax-0x77]
0x11a985:	lock dec DWORD PTR [rax-0x77]
0x11ac8c:	pop    rdi
0x11ac8b:	pop    r15
0x11ac8a:	pop    rsi; 	pop    r15
0x11ac89:	pop    r14; 	pop    r15
0x11af36:	dec    DWORD PTR [rax-0x77]
0x11af35:	lock dec DWORD PTR [rax-0x77]
0x11b225:	pop    rdi
0x11b224:	pop    r15
0x11b223:	pop    rsi; 	pop    r15
0x11b222:	pop    r14; 	pop    r15
0x11b4be:	dec    DWORD PTR [rax-0x77]
0x11b4bd:	lock dec DWORD PTR [rax-0x77]
0x11b607:	pop    rdi
0x11b606:	pop    r15
0x11b605:	pop    rsi; 	pop    r15
0x11b604:	pop    r14; 	pop    r15
0x11b7e8:	add    esp,0x8
0x11b7e7:	add    rsp,0x8
0x11b80f:	add    bl,dh
0x11b83f:	jae    0x11b842
0x11b83e:	push   QWORD PTR [rbx+0x1]
0x11b84f:	or     eax,0xffffffff
0x11b84e:	or     rax,0xffffffffffffffff
0x11b8d1:	pop    rsp
0x11b8d0:	pop    r12
0x11b8cf:	pop    rbp; 	pop    r12
0x11b8ce:	pop    rbx; 	pop    rbp; 	pop    r12
0x11b9b8:	in     al,0x89
0x11ba24:	pop    rdi
0x11ba23:	pop    r15
0x11ba22:	pop    rsi; 	pop    r15
0x11ba21:	pop    r14; 	pop    r15
0x11babd:	jae    0x11bac0
0x11babc:	push   QWORD PTR [rbx+0x1]
0x11bacd:	or     eax,0xffffffff
0x11bacc:	or     rax,0xffffffffffffffff
0x11baed:	jae    0x11baf0
0x11baec:	push   QWORD PTR [rbx+0x1]
0x11bafd:	or     eax,0xffffffff
0x11bafc:	or     rax,0xffffffffffffffff
0x11bb78:	pop    rsp
0x11bb77:	pop    r12
0x11bb76:	pop    rbp; 	pop    r12
0x11bb75:	pop    rbx; 	pop    rbp; 	pop    r12
0x11bbbd:	jae    0x11bbc0
0x11bbbc:	push   QWORD PTR [rbx+0x1]
0x11bbcd:	or     eax,0xffffffff
0x11bbcc:	or     rax,0xffffffffffffffff
0x11bbed:	jae    0x11bbf0
0x11bbec:	push   QWORD PTR [rbx+0x1]
0x11bbfd:	or     eax,0xffffffff
0x11bbfc:	or     rax,0xffffffffffffffff
0x11bc20:	jae    0x11bc23
0x11bc1f:	push   QWORD PTR [rbx+0x1]
0x11bc30:	or     eax,0xffffffff
0x11bc2f:	or     rax,0xffffffffffffffff
0x11bc4d:	jae    0x11bc50
0x11bc4c:	push   QWORD PTR [rbx+0x1]
0x11bc5d:	or     eax,0xffffffff
0x11bc5c:	or     rax,0xffffffffffffffff
0x11bc7d:	jae    0x11bc80
0x11bc7c:	push   QWORD PTR [rbx+0x1]
0x11bc8d:	or     eax,0xffffffff
0x11bc8c:	or     rax,0xffffffffffffffff
0x11bcad:	jae    0x11bcb0
0x11bcac:	push   QWORD PTR [rbx+0x1]
0x11bcbd:	or     eax,0xffffffff
0x11bcbc:	or     rax,0xffffffffffffffff
0x11bcdd:	jae    0x11bce0
0x11bcdc:	push   QWORD PTR [rbx+0x1]
0x11bced:	or     eax,0xffffffff
0x11bcec:	or     rax,0xffffffffffffffff
0x11bd45:	pop    rsp
0x11bd44:	pop    r12
0x11bd43:	pop    rbp; 	pop    r12
0x11bd42:	pop    rbx; 	pop    rbp; 	pop    r12
0x11bd81:	pop    rsp
0x11bd80:	pop    r12
0x11bd7f:	pop    rbp; 	pop    r12
0x11bd7e:	pop    rbx; 	pop    rbp; 	pop    r12
0x11bdde:	add    esp,0x8
0x11bddd:	add    rsp,0x8
0x11be16:	pop    rbx
0x11be14:	mov    eax,ebx; 	pop    rbx
0x11be13:	mov    rax,rbx; 	pop    rbx
0x11bf31:	pop    rdi
0x11bf30:	pop    r15
0x11bf2f:	pop    rsi; 	pop    r15
0x11bf2e:	pop    r14; 	pop    r15
0x11c057:	pop    rdi
0x11c056:	pop    r15
0x11c055:	pop    rsi; 	pop    r15
0x11c054:	pop    r14; 	pop    r15
0x11c1fe:	pop    rdi
0x11c1fd:	pop    r15
0x11c1fc:	pop    rsi; 	pop    r15
0x11c1fb:	pop    r14; 	pop    r15
0x11c59f:	pop    rsp
0x11c59e:	pop    r12
0x11c59d:	pop    rbp; 	pop    r12
0x11c59c:	pop    rbx; 	pop    rbp; 	pop    r12
0x11c5d3:	pop    rsp
0x11c5d2:	pop    r12
0x11c5d1:	pop    rbp; 	pop    r12
0x11c5d0:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x11c626:	add    esp,0x18
0x11c625:	add    rsp,0x18
0x11c65d:	pop    rbx
0x11c65c:	pop    rdx; 	pop    rbx
0x11c65b:	fcomp  DWORD PTR [rdx+0x5b]
0x11c65a:	mov    eax,ebx; 	pop    rdx; 	pop    rbx
0x11c73f:	add    DWORD PTR [rax-0x7d],ecx
0x11c73e:	in     eax,dx; 	add    DWORD PTR [rax-0x7d],ecx
0x11c771:	pop    rdi
0x11c770:	pop    r15
0x11c76f:	pop    rsi; 	pop    r15
0x11c76e:	pop    r14; 	pop    r15
0x11c8a0:	pop    rdi
0x11c89f:	pop    r15
0x11c89e:	pop    rsi; 	pop    r15
0x11c89d:	pop    r14; 	pop    r15
0x11ca44:	pop    rdi
0x11ca43:	pop    r15
0x11ca42:	pop    rsi; 	pop    r15
0x11ca41:	pop    r14; 	pop    r15
0x11cbac:	add    ecx,ebx
0x11cbab:	in     eax,dx; 	add    ecx,ebx
0x11ce28:	add    esp,0x18
0x11ce27:	add    rsp,0x18
0x11ce5e:	add    BYTE PTR [rdi+rax*1-0xd],dh
0x11cef8:	pop    rbx
0x11cef6:	mov    dh,0xc0; 	pop    rbx
0x11cef5:	movzx  eax,al; 	pop    rbx
0x11cf17:	xor    eax,eax
0x11cf15:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x11cf2e:	xor    eax,eax
0x11cf2c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x11cf58:	pop    rbx
0x11cf56:	add    BYTE PTR [rax],al; 	pop    rbx
0x11cf6c:	add    BYTE PTR [rax],al
0x11d086:	pop    rdi
0x11d085:	pop    r15
0x11d084:	pop    rsi; 	pop    r15
0x11d083:	pop    r14; 	pop    r15
0x11d117:	pop    rdi
0x11d116:	pop    r15
0x11d115:	pop    rsi; 	pop    r15
0x11d114:	pop    r14; 	pop    r15
0x11d3b6:	or     BYTE PTR [rcx-0xa],al
0x11d3b5:	pop    rdi; 	or     BYTE PTR [rcx-0xa],al
0x11d51b:	lahf   
0x11d57f:	pop    rdi
0x11d57e:	pop    r15
0x11d57d:	pop    rsi; 	pop    r15
0x11d57c:	pop    r14; 	pop    r15
0x11d6f2:	or     BYTE PTR [rax-0x7d],cl
0x11d715:	pop    rbp
0x11d714:	pop    r13
0x11d713:	pop    rsp; 	pop    r13
0x11d712:	pop    r12; 	pop    r13
0x11d7e9:	pop    rbp
0x11d7e8:	pop    rdi; 	pop    rbp
0x11d7e7:	pop    r15; 	pop    rbp
0x11d7e6:	pop    rsi; 	pop    r15; 	pop    rbp
0x11d933:	add    DWORD PTR [rcx+0x9],ecx
0x11dd35:	pop    rbp
0x11dd34:	pop    rbx; 	pop    rbp
0x11dd33:	or     BYTE PTR [rbx+0x5d],bl
0x11dd3f:	add    bl,dh
0x11dd3d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x11ddbf:	push   rbx
0x11ddbe:	lock push rbx
0x11dfb8:	add    DWORD PTR [rax-0x77],ecx
0x11dfcc:	pop    rdi
0x11dfcb:	pop    r15
0x11dfca:	pop    rsi; 	pop    r15
0x11dfc9:	pop    r14; 	pop    r15
0x11e030:	pop    rdi
0x11e02f:	pop    r15
0x11e02e:	pop    rsi; 	pop    r15
0x11e02d:	pop    r14; 	pop    r15
0x11e047:	pop    rdi
0x11e046:	pop    r15
0x11e045:	pop    rsi; 	pop    r15
0x11e044:	pop    r14; 	pop    r15
0x11e050:	xor    eax,eax
0x11e04e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x11e0dd:	dec    DWORD PTR [rax+0x39]
0x11e0dc:	stc    ; 	dec    DWORD PTR [rax+0x39]
0x11e140:	pop    rbp
0x11e13f:	pop    rdi; 	pop    rbp
0x11e13e:	pop    r15; 	pop    rbp
0x11e13d:	pop    rsi; 	pop    r15; 	pop    rbp
0x11e18c:	dec    DWORD PTR [rax+0x39]
0x11e18b:	stc    ; 	dec    DWORD PTR [rax+0x39]
0x11e264:	pop    rsp
0x11e263:	pop    r12
0x11e262:	pop    rbp; 	pop    r12
0x11e261:	pop    rbx; 	pop    rbp; 	pop    r12
0x11e483:	pop    rbp
0x11e482:	pop    r13
0x11e481:	pop    rsp; 	pop    r13
0x11e480:	pop    r12; 	pop    r13
0x11e5d2:	pop    rbp
0x11e5d1:	pop    rbx; 	pop    rbp
0x11e5d0:	add    BYTE PTR [rbx+0x5d],bl
0x11e5cf:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x11e802:	add    BYTE PTR [rax],al
0x11e99d:	pop    rbp
0x11e99c:	pop    rdi; 	pop    rbp
0x11e99b:	pop    r15; 	pop    rbp
0x11e99a:	pop    rsi; 	pop    r15; 	pop    rbp
0x11ea19:	xchg   ebx,eax
0x11eb7d:	pop    rsp
0x11eb7c:	pop    r12
0x11eb7b:	pop    rbp; 	pop    r12
0x11eb7a:	pop    rbx; 	pop    rbp; 	pop    r12
0x11ed3d:	pop    rsi
0x11ed3c:	pop    r14
0x11ed3b:	pop    rbp; 	pop    r14
0x11ed3a:	pop    r13; 	pop    r14
0x11edb5:	or     dh,bl
0x11ee60:	pop    rdi
0x11ee5f:	pop    r15
0x11ee5e:	pop    rsi; 	pop    r15
0x11ee5d:	pop    r14; 	pop    r15
0x11efc6:	dec    DWORD PTR [rax-0x77]
0x11efc5:	lock dec DWORD PTR [rax-0x77]
0x11efd4:	add    BYTE PTR [rax+0x39],cl
0x11f000:	dec    DWORD PTR [rax-0x7f]
0x11f160:	pop    rbp
0x11f15f:	pop    rdi; 	pop    rbp
0x11f15e:	pop    r15; 	pop    rbp
0x11f15d:	pop    rsi; 	pop    r15; 	pop    rbp
0x11f4fe:	pop    rsi
0x11f4fd:	pop    r14
0x11f4fc:	pop    rbp; 	pop    r14
0x11f4fb:	pop    r13; 	pop    r14
0x11f594:	pop    rbp
0x11f593:	pop    rbx; 	pop    rbp
0x11f592:	add    BYTE PTR [rbx+0x5d],bl
0x11f591:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x11f624:	pop    rbp
0x11f623:	pop    rbx; 	pop    rbp
0x11f622:	add    BYTE PTR [rbx+0x5d],bl
0x11f621:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x11f679:	add    DWORD PTR [rax+0x39],ecx
0x11f694:	pop    rbx
0x11f692:	mov    eax,ebx; 	pop    rbx
0x11f691:	mov    rax,rbx; 	pop    rbx
0x11f6ef:	pop    rbx
0x11f6ed:	or     DWORD PTR [rax],eax; 	pop    rbx
0x11f796:	or     BYTE PTR [rax-0x77],cl
0x11f7a7:	fucomip st,st(0)
0x11f7e1:	pop    rdi
0x11f7e0:	pop    r15
0x11f7df:	pop    rsi; 	pop    r15
0x11f7de:	pop    r14; 	pop    r15
0x11f801:	cmove  eax,edx
0x11f820:	jae    0x11f823
0x11f81f:	push   QWORD PTR [rbx+0x1]
0x11f830:	or     eax,0xffffffff
0x11f82f:	or     rax,0xffffffffffffffff
0x11f84d:	jae    0x11f850
0x11f84c:	push   QWORD PTR [rbx+0x1]
0x11f85d:	or     eax,0xffffffff
0x11f85c:	or     rax,0xffffffffffffffff
0x11f87d:	jae    0x11f880
0x11f87c:	push   QWORD PTR [rbx+0x1]
0x11f88d:	or     eax,0xffffffff
0x11f88c:	or     rax,0xffffffffffffffff
0x11f8b0:	jae    0x11f8b3
0x11f8af:	push   QWORD PTR [rbx+0x1]
0x11f8c0:	or     eax,0xffffffff
0x11f8bf:	or     rax,0xffffffffffffffff
0x11f8e0:	jae    0x11f8e3
0x11f8df:	push   QWORD PTR [rbx+0x1]
0x11f8f0:	or     eax,0xffffffff
0x11f8ef:	or     rax,0xffffffffffffffff
0x11f90d:	jae    0x11f910
0x11f90c:	push   QWORD PTR [rbx+0x1]
0x11f91d:	or     eax,0xffffffff
0x11f91c:	or     rax,0xffffffffffffffff
0x11f940:	jae    0x11f943
0x11f93f:	push   QWORD PTR [rbx+0x1]
0x11f950:	or     eax,0xffffffff
0x11f94f:	or     rax,0xffffffffffffffff
0x11f96d:	jae    0x11f970
0x11f96c:	push   QWORD PTR [rbx+0x1]
0x11f97d:	or     eax,0xffffffff
0x11f97c:	or     rax,0xffffffffffffffff
0x11f99d:	jae    0x11f9a0
0x11f99c:	push   QWORD PTR [rbx+0x1]
0x11f9ad:	or     eax,0xffffffff
0x11f9ac:	or     rax,0xffffffffffffffff
0x11f9d0:	jae    0x11f9d3
0x11f9cf:	push   QWORD PTR [rbx+0x1]
0x11f9e0:	or     eax,0xffffffff
0x11f9df:	or     rax,0xffffffffffffffff
0x11f9fd:	jae    0x11fa00
0x11f9fc:	push   QWORD PTR [rbx+0x1]
0x11fa0d:	or     eax,0xffffffff
0x11fa0c:	or     rax,0xffffffffffffffff
0x11fa30:	jae    0x11fa33
0x11fa2f:	push   QWORD PTR [rbx+0x1]
0x11fa40:	or     eax,0xffffffff
0x11fa3f:	or     rax,0xffffffffffffffff
0x11fa8a:	mov    eax,DWORD PTR [rax+0x8]
0x11fa89:	mov    rax,QWORD PTR [rax+0x8]
0x11fa95:	add    BYTE PTR [rax],al
0x11faa3:	pop    rax
0x11faa2:	rex pop rax
0x11faa1:	mov    eax,DWORD PTR [rax+0x58]
0x11faa0:	mov    rax,QWORD PTR [rax+0x58]
0x11fab6:	xor    eax,eax
0x11fab4:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x11ffad:	pop    rbp
0x11ffac:	pop    rbx; 	pop    rbp
0x11ffab:	or     BYTE PTR [rbx+0x5d],bl
0x11ffff:	pop    rbp
0x11fffe:	pop    rbx; 	pop    rbp
0x11fffd:	add    BYTE PTR [rbx+0x5d],bl
0x11fffc:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x1201b4:	pop    rbp
0x1201b3:	pop    rbx; 	pop    rbp
0x1201b2:	add    BYTE PTR [rbx+0x5d],bl
0x1201b1:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x120314:	pop    rbp
0x120313:	pop    rbx; 	pop    rbp
0x120312:	add    BYTE PTR [rbx+0x5d],bl
0x120311:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x12168b:	or     eax,edx
0x12169d:	or     eax,edx
0x12169c:	ror    BYTE PTR [rcx],0xd0
0x12169b:	xor    al,al; 	or     eax,edx
0x1216e2:	or     eax,esi
0x1216e1:	or     rax,rsi
0x1216e0:	clc    ; 	or     rax,rsi
0x12173a:	pop    rbp
0x121739:	pop    rbx; 	pop    rbp
0x121738:	or     BYTE PTR [rbx+0x5d],bl
0x12173f:	add    bl,dh
0x12173e:	add    bl,sil
0x12175d:	jae    0x121760
0x12175c:	push   QWORD PTR [rbx+0x1]
0x12176d:	or     eax,0xffffffff
0x12176c:	or     rax,0xffffffffffffffff
0x12178d:	jae    0x121790
0x12178c:	push   QWORD PTR [rbx+0x1]
0x12179d:	or     eax,0xffffffff
0x12179c:	or     rax,0xffffffffffffffff
0x12182f:	add    esp,0x78
0x12182e:	add    rsp,0x78
0x121886:	je     0x121889
0x121884:	jl     0x121899; 	je     0x121889
0x1218a6:	or     eax,0xffffffff
0x1218a5:	or     rax,0xffffffffffffffff
0x1218cd:	jae    0x1218d0
0x1218cc:	push   QWORD PTR [rbx+0x1]
0x1218dd:	or     eax,0xffffffff
0x1218dc:	or     rax,0xffffffffffffffff
0x1218fd:	jae    0x121900
0x1218fc:	push   QWORD PTR [rbx+0x1]
0x12190d:	or     eax,0xffffffff
0x12190c:	or     rax,0xffffffffffffffff
0x12192d:	jae    0x121930
0x12192c:	push   QWORD PTR [rbx+0x1]
0x12193d:	or     eax,0xffffffff
0x12193c:	or     rax,0xffffffffffffffff
0x12195d:	jae    0x121960
0x12195c:	push   QWORD PTR [rbx+0x1]
0x12196d:	or     eax,0xffffffff
0x12196c:	or     rax,0xffffffffffffffff
0x1219a4:	jae    0x121999
0x121a12:	pop    rdi
0x121a11:	pop    r15
0x121a10:	pop    rsi; 	pop    r15
0x121a0f:	pop    r14; 	pop    r15
0x121a56:	or     ebx,esi
0x121a8d:	jae    0x121a90
0x121a8c:	push   QWORD PTR [rbx+0x1]
0x121a9d:	or     eax,0xffffffff
0x121a9c:	or     rax,0xffffffffffffffff
0x121acc:	neg    eax
0x121aca:	mov    dh,0xc0; 	neg    eax
0x121af6:	neg    eax
0x121af4:	mov    dh,0xc0; 	neg    eax
0x121b10:	jae    0x121b13
0x121b0f:	push   QWORD PTR [rbx+0x1]
0x121b20:	or     eax,0xffffffff
0x121b1f:	or     rax,0xffffffffffffffff
0x121b3d:	jae    0x121b40
0x121b3c:	push   QWORD PTR [rbx+0x1]
0x121b4d:	or     eax,0xffffffff
0x121b4c:	or     rax,0xffffffffffffffff
0x121bd8:	pop    rbp
0x121bd7:	pop    r13
0x121bd6:	pop    rsp; 	pop    r13
0x121bd5:	pop    r12; 	pop    r13
0x121c88:	pop    rbp
0x121c87:	pop    r13
0x121c86:	pop    rsp; 	pop    r13
0x121c85:	pop    r12; 	pop    r13
0x121d3a:	pop    rbp
0x121d39:	pop    r13
0x121d38:	pop    rsp; 	pop    r13
0x121d37:	pop    r12; 	pop    r13
0x121d8e:	jns    0x121d83
0x121e00:	pop    rdi
0x121dff:	pop    r15
0x121dfe:	pop    rsi; 	pop    r15
0x121dfd:	pop    r14; 	pop    r15
0x121ea6:	pop    rsp
0x121ea5:	pop    r12
0x121ea4:	pop    rbp; 	pop    r12
0x121ea3:	pop    rbx; 	pop    rbp; 	pop    r12
0x121f76:	or     ebx,esi
0x121fcf:	xor    eax,eax
0x121fce:	out    dx,eax; 	xor    eax,eax
0x121fcd:	add    edi,ebp; 	xor    eax,eax
0x122000:	loopne 0x122005
0x121fff:	and    eax,0x3
0x12202d:	jae    0x122030
0x12202c:	push   QWORD PTR [rbx+0x1]
0x12203d:	or     eax,0xffffffff
0x12203c:	or     rax,0xffffffffffffffff
0x12205d:	jae    0x122060
0x12205c:	push   QWORD PTR [rbx+0x1]
0x12206d:	or     eax,0xffffffff
0x12206c:	or     rax,0xffffffffffffffff
0x122085:	syscall 
0x122083:	add    BYTE PTR [rax],al; 	syscall 
0x1220a0:	jae    0x1220a3
0x12209f:	push   QWORD PTR [rbx+0x1]
0x1220b0:	or     eax,0xffffffff
0x1220af:	or     rax,0xffffffffffffffff
0x1220cd:	jae    0x1220d0
0x1220cc:	push   QWORD PTR [rbx+0x1]
0x1220dd:	or     eax,0xffffffff
0x1220dc:	or     rax,0xffffffffffffffff
0x1220fd:	jae    0x122100
0x1220fc:	push   QWORD PTR [rbx+0x1]
0x12210d:	or     eax,0xffffffff
0x12210c:	or     rax,0xffffffffffffffff
0x12212d:	jae    0x122130
0x12212c:	push   QWORD PTR [rbx+0x1]
0x12213d:	or     eax,0xffffffff
0x12213c:	or     rax,0xffffffffffffffff
0x12215d:	jae    0x122160
0x12215c:	push   QWORD PTR [rbx+0x1]
0x12216d:	or     eax,0xffffffff
0x12216c:	or     rax,0xffffffffffffffff
0x12218d:	jae    0x122190
0x12218c:	push   QWORD PTR [rbx+0x1]
0x12219d:	or     eax,0xffffffff
0x12219c:	or     rax,0xffffffffffffffff
0x1221bd:	jae    0x1221c0
0x1221bc:	push   QWORD PTR [rbx+0x1]
0x1221cd:	or     eax,0xffffffff
0x1221cc:	or     rax,0xffffffffffffffff
0x1221ed:	jae    0x1221f0
0x1221ec:	push   QWORD PTR [rbx+0x1]
0x1221fd:	or     eax,0xffffffff
0x1221fc:	or     rax,0xffffffffffffffff
0x12221d:	jae    0x122220
0x12221c:	push   QWORD PTR [rbx+0x1]
0x12222d:	or     eax,0xffffffff
0x12222c:	or     rax,0xffffffffffffffff
0x122250:	jae    0x122253
0x12224f:	push   QWORD PTR [rbx+0x1]
0x122260:	or     eax,0xffffffff
0x12225f:	or     rax,0xffffffffffffffff
0x12227d:	jae    0x122280
0x12227c:	push   QWORD PTR [rbx+0x1]
0x12228d:	or     eax,0xffffffff
0x12228c:	or     rax,0xffffffffffffffff
0x1222b0:	jae    0x1222b3
0x1222af:	push   QWORD PTR [rbx+0x1]
0x1222c0:	or     eax,0xffffffff
0x1222bf:	or     rax,0xffffffffffffffff
0x1222dd:	jae    0x1222e0
0x1222dc:	push   QWORD PTR [rbx+0x1]
0x1222ed:	or     eax,0xffffffff
0x1222ec:	or     rax,0xffffffffffffffff
0x12230d:	jae    0x122310
0x12230c:	push   QWORD PTR [rbx+0x1]
0x12231d:	or     eax,0xffffffff
0x12231c:	or     rax,0xffffffffffffffff
0x12233d:	jae    0x122340
0x12233c:	push   QWORD PTR [rbx+0x1]
0x12234d:	or     eax,0xffffffff
0x12234c:	or     rax,0xffffffffffffffff
0x12236d:	jae    0x122370
0x12236c:	push   QWORD PTR [rbx+0x1]
0x12237d:	or     eax,0xffffffff
0x12237c:	or     rax,0xffffffffffffffff
0x12239d:	jae    0x1223a0
0x12239c:	push   QWORD PTR [rbx+0x1]
0x1223ad:	or     eax,0xffffffff
0x1223ac:	or     rax,0xffffffffffffffff
0x1223d0:	jae    0x1223d3
0x1223cf:	push   QWORD PTR [rbx+0x1]
0x1223e0:	or     eax,0xffffffff
0x1223df:	or     rax,0xffffffffffffffff
0x122400:	jae    0x122403
0x1223ff:	push   QWORD PTR [rbx+0x1]
0x122410:	or     eax,0xffffffff
0x12240f:	or     rax,0xffffffffffffffff
0x12242d:	jae    0x122430
0x12242c:	push   QWORD PTR [rbx+0x1]
0x12243d:	or     eax,0xffffffff
0x12243c:	or     rax,0xffffffffffffffff
0x12245d:	jae    0x122460
0x12245c:	push   QWORD PTR [rbx+0x1]
0x12246d:	or     eax,0xffffffff
0x12246c:	or     rax,0xffffffffffffffff
0x122490:	jae    0x122493
0x12248f:	push   QWORD PTR [rbx+0x1]
0x1224a0:	or     eax,0xffffffff
0x12249f:	or     rax,0xffffffffffffffff
0x1224c0:	jae    0x1224c3
0x1224bf:	push   QWORD PTR [rbx+0x1]
0x1224d0:	or     eax,0xffffffff
0x1224cf:	or     rax,0xffffffffffffffff
0x1224f0:	jae    0x1224f3
0x1224ef:	push   QWORD PTR [rbx+0x1]
0x122500:	or     eax,0xffffffff
0x1224ff:	or     rax,0xffffffffffffffff
0x12251d:	jae    0x122520
0x12251c:	push   QWORD PTR [rbx+0x1]
0x12252d:	or     eax,0xffffffff
0x12252c:	or     rax,0xffffffffffffffff
0x12254d:	jae    0x122550
0x12254c:	push   QWORD PTR [rbx+0x1]
0x12255d:	or     eax,0xffffffff
0x12255c:	or     rax,0xffffffffffffffff
0x12257d:	jae    0x122580
0x12257c:	push   QWORD PTR [rbx+0x1]
0x12258d:	or     eax,0xffffffff
0x12258c:	or     rax,0xffffffffffffffff
0x1225ad:	jae    0x1225b0
0x1225ac:	push   QWORD PTR [rbx+0x1]
0x1225bd:	or     eax,0xffffffff
0x1225bc:	or     rax,0xffffffffffffffff
0x1225e0:	jae    0x1225e3
0x1225df:	push   QWORD PTR [rbx+0x1]
0x1225f0:	or     eax,0xffffffff
0x1225ef:	or     rax,0xffffffffffffffff
0x12260d:	jae    0x122610
0x12260c:	push   QWORD PTR [rbx+0x1]
0x12261d:	or     eax,0xffffffff
0x12261c:	or     rax,0xffffffffffffffff
0x12263d:	jae    0x122640
0x12263c:	push   QWORD PTR [rbx+0x1]
0x12264d:	or     eax,0xffffffff
0x12264c:	or     rax,0xffffffffffffffff
0x122670:	jae    0x122673
0x12266f:	push   QWORD PTR [rbx+0x1]
0x122680:	or     eax,0xffffffff
0x12267f:	or     rax,0xffffffffffffffff
0x12269d:	jae    0x1226a0
0x12269c:	push   QWORD PTR [rbx+0x1]
0x1226ad:	or     eax,0xffffffff
0x1226ac:	or     rax,0xffffffffffffffff
0x1226d0:	jae    0x1226d3
0x1226cf:	push   QWORD PTR [rbx+0x1]
0x1226e0:	or     eax,0xffffffff
0x1226df:	or     rax,0xffffffffffffffff
0x122700:	jae    0x122703
0x1226ff:	push   QWORD PTR [rbx+0x1]
0x122710:	or     eax,0xffffffff
0x12270f:	or     rax,0xffffffffffffffff
0x12272d:	jae    0x122730
0x12272c:	push   QWORD PTR [rbx+0x1]
0x12273d:	or     eax,0xffffffff
0x12273c:	or     rax,0xffffffffffffffff
0x12275d:	jae    0x122760
0x12275c:	push   QWORD PTR [rbx+0x1]
0x12276d:	or     eax,0xffffffff
0x12276c:	or     rax,0xffffffffffffffff
0x12278d:	jae    0x122790
0x12278c:	push   QWORD PTR [rbx+0x1]
0x12279d:	or     eax,0xffffffff
0x12279c:	or     rax,0xffffffffffffffff
0x122836:	pop    rsp
0x122835:	pop    r12
0x122834:	pop    rbp; 	pop    r12
0x122833:	pop    rbx; 	pop    rbp; 	pop    r12
0x12287d:	jae    0x122880
0x12287c:	push   QWORD PTR [rbx+0x1]
0x12288d:	or     eax,0xffffffff
0x12288c:	or     rax,0xffffffffffffffff
0x122906:	pop    rsp
0x122905:	pop    r12
0x122904:	pop    rbp; 	pop    r12
0x122903:	pop    rbx; 	pop    rbp; 	pop    r12
0x12294d:	jae    0x122950
0x12294c:	push   QWORD PTR [rbx+0x1]
0x12295d:	or     eax,0xffffffff
0x12295c:	or     rax,0xffffffffffffffff
0x12297d:	jae    0x122980
0x12297c:	push   QWORD PTR [rbx+0x1]
0x12298d:	or     eax,0xffffffff
0x12298c:	or     rax,0xffffffffffffffff
0x1229b0:	jae    0x1229b3
0x1229af:	push   QWORD PTR [rbx+0x1]
0x1229c0:	or     eax,0xffffffff
0x1229bf:	or     rax,0xffffffffffffffff
0x1229dd:	jae    0x1229e0
0x1229dc:	push   QWORD PTR [rbx+0x1]
0x1229ed:	or     eax,0xffffffff
0x1229ec:	or     rax,0xffffffffffffffff
0x122a8a:	pop    rsi
0x122a89:	pop    r14
0x122a88:	pop    rbp; 	pop    r14
0x122a87:	pop    r13; 	pop    r14
0x122ade:	jns    0x122ad3
0x122b50:	pop    rdi
0x122b4f:	pop    r15
0x122b4e:	pop    rsi; 	pop    r15
0x122b4d:	pop    r14; 	pop    r15
0x122bf8:	pop    rsp
0x122bf7:	pop    r12
0x122bf6:	pop    rbp; 	pop    r12
0x122bf5:	pop    rbx; 	pop    rbp; 	pop    r12
0x122cba:	pop    rsi
0x122cb9:	pop    r14
0x122cb8:	pop    rbp; 	pop    r14
0x122cb7:	pop    r13; 	pop    r14
0x122d58:	pop    rsp
0x122d57:	pop    r12
0x122d56:	pop    rbp; 	pop    r12
0x122d55:	pop    rbx; 	pop    rbp; 	pop    r12
0x122dae:	jns    0x122da3
0x122e20:	pop    rdi
0x122e1f:	pop    r15
0x122e1e:	pop    rsi; 	pop    r15
0x122e1d:	pop    r14; 	pop    r15
0x122e70:	jae    0x122e73
0x122e6f:	push   QWORD PTR [rbx+0x1]
0x122e80:	or     eax,0xffffffff
0x122e7f:	or     rax,0xffffffffffffffff
0x122e9d:	jae    0x122ea0
0x122e9c:	push   QWORD PTR [rbx+0x1]
0x122ead:	or     eax,0xffffffff
0x122eac:	or     rax,0xffffffffffffffff
0x122ecd:	jae    0x122ed0
0x122ecc:	push   QWORD PTR [rbx+0x1]
0x122edd:	or     eax,0xffffffff
0x122edc:	or     rax,0xffffffffffffffff
0x122f00:	jae    0x122f03
0x122eff:	push   QWORD PTR [rbx+0x1]
0x122f10:	or     eax,0xffffffff
0x122f0f:	or     rax,0xffffffffffffffff
0x122f90:	pop    rsp
0x122f8f:	pop    r12
0x122f8e:	pop    rbp; 	pop    r12
0x122f8d:	pop    rbx; 	pop    rbp; 	pop    r12
0x123005:	pop    rsi
0x123004:	pop    r14
0x123003:	pop    rbp; 	pop    r14
0x123002:	pop    r13; 	pop    r14
0x1231cd:	add    esp,0x18
0x1231cc:	add    rsp,0x18
0x123258:	pop    rbp
0x123257:	pop    r13
0x123256:	pop    rsp; 	pop    r13
0x123255:	pop    r12; 	pop    r13
0x123312:	pop    rsi
0x123311:	pop    r14
0x123310:	pop    rbp; 	pop    r14
0x12330f:	pop    r13; 	pop    r14
0x1233b8:	pop    rbp
0x1233b7:	pop    r13
0x1233b6:	pop    rsp; 	pop    r13
0x1233b5:	pop    r12; 	pop    r13
0x12344c:	cmovb  eax,edx
0x12344b:	cmovb  rax,rdx
0x123450:	xor    eax,eax
0x12344f:	ret    ; 	xor    eax,eax
0x1234c2:	pop    rbx
0x1234c0:	add    BYTE PTR [rax],al; 	pop    rbx
0x123558:	pop    rbp
0x123557:	pop    r13
0x123556:	pop    rsp; 	pop    r13
0x123555:	pop    r12; 	pop    r13
0x1235ae:	jno    0x1235a3
0x123614:	pop    rsi
0x123613:	pop    r14
0x123612:	pop    rbp; 	pop    r14
0x123611:	pop    r13; 	pop    r14
0x12365e:	or     ebx,esi
0x12368e:	or     ebx,esi
0x1236be:	or     ebx,esi
0x1236ee:	or     ebx,esi
0x123764:	pop    rax
0x123762:	add    esp,0x58
0x123761:	add    rsp,0x58
0x1237ee:	or     ebx,esi
0x12381e:	or     ebx,esi
0x12387e:	or     ebx,esi
0x1238b5:	add    bl,dh
0x1238b3:	add    BYTE PTR [rax],al; 	add    bl,dh
0x123c6e:	pop    rbp
0x123c6d:	pop    rdi; 	pop    rbp
0x123c6c:	pop    r15; 	pop    rbp
0x123c6b:	pop    rsi; 	pop    r15; 	pop    rbp
0x123e4b:	add    esp,0x8
0x123e4a:	add    rsp,0x8
0x123e7c:	add    esp,0x8
0x123e7b:	add    rsp,0x8
0x123e9d:	add    ecx,DWORD PTR [rax-0x42]
0x123e9c:	pop    rsi; 	add    ecx,DWORD PTR [rax-0x42]
0x123f63:	add    BYTE PTR [rax+0x63],cl
0x123fe0:	pop    rbp
0x123fdf:	pop    r13
0x123fde:	pop    rsp; 	pop    r13
0x123fdd:	pop    r12; 	pop    r13
0x12407d:	pop    rbp
0x12407c:	pop    r13
0x12407b:	pop    rsp; 	pop    r13
0x12407a:	pop    r12; 	pop    r13
0x1240a6:	pop    rbx
0x1240a4:	sub    al,0x0; 	pop    rbx
0x124171:	pop    rbp
0x12416f:	add    BYTE PTR [rax],al; 	pop    rbp
0x12419b:	pop    rbp
0x124199:	add    BYTE PTR [rax],al; 	pop    rbp
0x12428b:	add    DWORD PTR [rdx+rax*2],0x1
0x1243dc:	pop    rbp
0x1243db:	pop    r13
0x1243da:	pop    rsp; 	pop    r13
0x1243d9:	pop    r12; 	pop    r13
0x1244de:	mov    DWORD PTR [rdx],eax
0x1244f4:	add    BYTE PTR [rcx],al
0x1244f3:	add    DWORD PTR [rax],0x1
0x12452c:	fdiv   st,st(3)
0x1245e0:	mov    DWORD PTR [rdx],eax
0x1245df:	mov    WORD PTR [rdx],ax
0x1245f5:	add    BYTE PTR [rcx],al
0x1245f4:	add    DWORD PTR [rax],0x1
0x1245f3:	add    WORD PTR [rax],0x1
0x1249a5:	cmp    BYTE PTR [rax+0x63],cl
0x124a26:	sub    BYTE PTR [rcx],bh
0x124ad0:	pop    rbp
0x124acf:	pop    rdi; 	pop    rbp
0x124ace:	pop    r15; 	pop    rbp
0x124acd:	pop    rsi; 	pop    r15; 	pop    rbp
0x124de7:	mov    eax,DWORD PTR [rax+0x38]
0x124e47:	add    esp,0x38
0x124e46:	add    rsp,0x38
0x124ea8:	add    esp,0x40
0x124ea7:	add    rsp,0x40
0x124f1f:	add    ebx,esi
0x124f3d:	mov    bh,0xc0
0x124f3c:	movzx  eax,ax
0x124f3b:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x124faf:	add    ebx,esi
0x124fce:	mov    bh,0xc0
0x124fcd:	movzx  eax,ax
0x124fcc:	add    al,0xf; 	mov    bh,0xc0
0x12504f:	add    ebx,esi
0x12506a:	loopne 0x12506d
0x125069:	and    eax,0x1
0x125068:	js     0x124fed; 	loopne 0x12506d
0x1250df:	add    ebx,esi
0x1250fd:	mov    bh,0xc0
0x1250fc:	movzx  eax,ax
0x1250fb:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x12516f:	add    ebx,esi
0x125180:	setbe  al
0x1251ff:	add    ebx,esi
0x12521e:	mov    bh,0xc0
0x12521d:	movzx  eax,ax
0x12521c:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x12529f:	add    ebx,esi
0x1252be:	mov    bh,0xc0
0x1252bd:	movzx  eax,ax
0x12533f:	add    ebx,esi
0x12535e:	mov    bh,0xc0
0x12535d:	movzx  eax,ax
0x12535c:	rex movzx eax,ax
0x1253df:	add    ebx,esi
0x1253fd:	mov    bh,0xc0
0x1253fc:	movzx  eax,ax
0x1253fb:	add    al,0xf; 	mov    bh,0xc0
0x12546f:	add    ebx,esi
0x12548e:	mov    bh,0xc0
0x12548d:	movzx  eax,ax
0x12548c:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x12550a:	add    ebx,esi
0x125526:	mov    bh,0xc0
0x125525:	movzx  eax,ax
0x125524:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x12559f:	add    ebx,esi
0x1255be:	mov    bh,0xc0
0x1255bd:	movzx  eax,ax
0x1255bc:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x125628:	or     dh,bl
0x125683:	or     dh,bl
0x125711:	pop    rdi
0x125710:	pop    r15
0x12570f:	pop    rsi; 	pop    r15
0x12570e:	pop    r14; 	pop    r15
0x125727:	pop    rdi
0x125726:	pop    r15
0x125725:	pop    rsi; 	pop    r15
0x125724:	pop    r14; 	pop    r15
0x12577b:	add    ebx,esi
0x1257ef:	pop    rbp
0x1257ee:	pop    r13
0x1257ed:	pop    rsp; 	pop    r13
0x1257ec:	pop    r12; 	pop    r13
0x125803:	pop    rbp
0x125802:	pop    r13
0x125801:	pop    rsp; 	pop    r13
0x125800:	pop    r12; 	pop    r13
0x12584c:	adc    ebx,esi
0x1258b1:	add    ebx,esi
0x1258c6:	mov    bh,0xc0
0x1258c5:	movzx  eax,ax
0x1258c4:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x125931:	add    ebx,esi
0x125947:	mov    bh,0xc0
0x125946:	movzx  eax,ax
0x125945:	add    al,0xf; 	mov    bh,0xc0
0x1259b1:	add    ebx,esi
0x1259c3:	loopne 0x1259c6
0x1259c2:	and    eax,0x1
0x1259c1:	js     0x125946; 	loopne 0x1259c6
0x125a31:	add    ebx,esi
0x125a46:	mov    bh,0xc0
0x125a45:	movzx  eax,ax
0x125a44:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x125ab1:	add    ebx,esi
0x125ac0:	setbe  al
0x125b31:	add    ebx,esi
0x125b47:	mov    bh,0xc0
0x125b46:	movzx  eax,ax
0x125b45:	add    cl,BYTE PTR [rdi]; 	mov    bh,0xc0
0x125bb1:	add    ebx,esi
0x125bc7:	mov    bh,0xc0
0x125bc6:	movzx  eax,ax
0x125c31:	add    ebx,esi
0x125c47:	mov    bh,0xc0
0x125c46:	movzx  eax,ax
0x125c45:	rex movzx eax,ax
0x125cb1:	add    ebx,esi
0x125cc6:	mov    bh,0xc0
0x125cc5:	movzx  eax,ax
0x125cc4:	add    al,0xf; 	mov    bh,0xc0
0x125d31:	add    ebx,esi
0x125d47:	mov    bh,0xc0
0x125d46:	movzx  eax,ax
0x125d45:	and    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x125dae:	add    ebx,esi
0x125dc7:	mov    bh,0xc0
0x125dc6:	movzx  eax,ax
0x125dc5:	add    DWORD PTR [rdi],ecx; 	mov    bh,0xc0
0x125e31:	add    ebx,esi
0x125e47:	mov    bh,0xc0
0x125e46:	movzx  eax,ax
0x125e45:	adc    BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x125e9a:	or     dh,bl
0x125ee7:	or     dh,bl
0x125f69:	pop    rdi
0x125f68:	pop    r15
0x125f67:	pop    rsi; 	pop    r15
0x125f66:	pop    r14; 	pop    r15
0x125f7f:	pop    rdi
0x125f7e:	pop    r15
0x125f7d:	pop    rsi; 	pop    r15
0x125f7c:	pop    r14; 	pop    r15
0x125fdb:	add    ebx,esi
0x12603f:	pop    rbp
0x12603e:	pop    r13
0x12603d:	pop    rsp; 	pop    r13
0x12603c:	pop    r12; 	pop    r13
0x126053:	pop    rbp
0x126052:	pop    r13
0x126051:	pop    rsp; 	pop    r13
0x126050:	pop    r12; 	pop    r13
0x12609c:	adc    ebx,esi
0x126158:	add    esp,0x8
0x126157:	add    rsp,0x8
0x1262ab:	pop    rsi
0x1262aa:	pop    r14
0x1262a9:	pop    rbp; 	pop    r14
0x1262a8:	pop    r13; 	pop    r14
0x126453:	pop    rsi
0x126452:	pop    r14
0x126451:	pop    rbp; 	pop    r14
0x126450:	pop    r13; 	pop    r14
0x126676:	pop    rdi
0x126675:	pop    r15
0x126674:	pop    rsi; 	pop    r15
0x126673:	pop    r14; 	pop    r15
0x12690d:	pop    rbp
0x12690c:	pop    r13
0x12690b:	pop    rsp; 	pop    r13
0x12690a:	pop    r12; 	pop    r13
0x126ac7:	fucomip st,st(0)
0x126c56:	add    esp,0x18
0x126c55:	add    rsp,0x18
0x126d20:	add    esp,0x8
0x126d1f:	add    rsp,0x8
0x126d27:	add    bl,dh
0x126d26:	add    bl,sil
0x126e02:	add    esp,0x48
0x126e01:	add    rsp,0x48
0x127011:	pop    rdi
0x127010:	pop    r15
0x12700f:	pop    rsi; 	pop    r15
0x12700e:	pop    r14; 	pop    r15
0x12719b:	or     ecx,DWORD PTR [rax-0x7d]
0x127207:	pop    rbp
0x127206:	pop    r13
0x127205:	pop    rsp; 	pop    r13
0x127204:	pop    r12; 	pop    r13
0x1274c5:	dec    DWORD PTR [rax-0x7d]
0x127503:	dec    DWORD PTR [rax-0x7d]
0x127560:	dec    DWORD PTR [rax-0x7d]
0x1276c3:	pop    rdi
0x1276c2:	pop    r15
0x1276c1:	pop    rsi; 	pop    r15
0x1276c0:	pop    r14; 	pop    r15
0x1276c7:	add    BYTE PTR [rax-0x7d],cl
0x1276e3:	dec    DWORD PTR [rax-0x77]
0x1277e0:	dec    DWORD PTR [rax-0x77]
0x1277fc:	adc    cl,BYTE PTR [rax-0x7d]
0x127935:	dec    DWORD PTR [rax-0x7d]
0x1279d4:	dec    DWORD PTR [rax-0x7d]
0x127bd1:	pop    rdi
0x127bd0:	pop    r15
0x127bcf:	pop    rsi; 	pop    r15
0x127bce:	pop    r14; 	pop    r15
0x127c48:	pop    rdi
0x127c47:	pop    r15
0x127c46:	pop    rsi; 	pop    r15
0x127c45:	pop    r14; 	pop    r15
0x127c4f:	add    bl,dh
0x127e6f:	pop    rsp
0x127e6e:	pop    r12
0x127e6d:	pop    rbp; 	pop    r12
0x127e6c:	pop    rbx; 	pop    rbp; 	pop    r12
0x127f82:	add    esp,0x8
0x127f81:	add    rsp,0x8
0x127f90:	mov    eax,edx
0x127f8e:	add    BYTE PTR [rax],al; 	mov    eax,edx
0x128058:	add    esp,0x8
0x128057:	add    rsp,0x8
0x1281ab:	pop    rsi
0x1281aa:	pop    r14
0x1281a9:	pop    rbp; 	pop    r14
0x1281a8:	pop    r13; 	pop    r14
0x12836a:	pop    rdi
0x128369:	pop    r15
0x128368:	pop    rsi; 	pop    r15
0x128367:	pop    r14; 	pop    r15
0x128586:	pop    rdi
0x128585:	pop    r15
0x128584:	pop    rsi; 	pop    r15
0x128583:	pop    r14; 	pop    r15
0x1287e0:	pop    rdi
0x1287df:	pop    r15
0x1287de:	pop    rsi; 	pop    r15
0x1287dd:	pop    r14; 	pop    r15
0x128868:	pop    rdi
0x128867:	pop    r15
0x128866:	pop    rsi; 	pop    r15
0x128865:	pop    r14; 	pop    r15
0x128976:	add    esp,0x18
0x128975:	add    rsp,0x18
0x128a40:	add    esp,0x8
0x128a3f:	add    rsp,0x8
0x128a47:	add    bl,dh
0x128a46:	add    bl,sil
0x128b22:	add    esp,0x48
0x128b21:	add    rsp,0x48
0x128d31:	pop    rdi
0x128d30:	pop    r15
0x128d2f:	pop    rsi; 	pop    r15
0x128d2e:	pop    r14; 	pop    r15
0x128f13:	or     ecx,DWORD PTR [rax-0x7d]
0x128f7f:	add    BYTE PTR [rax-0x7d],cl
0x12900c:	pop    rdi
0x12900b:	pop    r15
0x12900a:	pop    rsi; 	pop    r15
0x129009:	pop    r14; 	pop    r15
0x12908f:	add    BYTE PTR [rax-0x7d],cl
0x1290b6:	fimul  DWORD PTR [rax-0x7d]
0x1290dc:	add    BYTE PTR [rax-0x7d],cl
0x129149:	add    BYTE PTR [rax-0x7d],cl
0x12918d:	pop    rdi
0x12918c:	pop    r15
0x12918b:	pop    rsi; 	pop    r15
0x12918a:	pop    r14; 	pop    r15
0x129203:	pop    rsp
0x129202:	pop    r12
0x129201:	pop    rbp; 	pop    r12
0x129200:	pop    rbx; 	pop    rbp; 	pop    r12
0x129253:	pop    rsp
0x129252:	pop    r12
0x129251:	pop    rbp; 	pop    r12
0x129250:	pop    rbx; 	pop    rbp; 	pop    r12
0x12944d:	pop    rdi
0x12944c:	pop    r15
0x12944b:	pop    rsi; 	pop    r15
0x12944a:	pop    r14; 	pop    r15
0x1294c8:	pop    rdi
0x1294c7:	pop    r15
0x1294c6:	pop    rsi; 	pop    r15
0x1294c5:	pop    r14; 	pop    r15
0x129540:	pop    rsi
0x12953f:	pop    r14
0x12953e:	pop    rbp; 	pop    r14
0x12953d:	pop    r13; 	pop    r14
0x1296bf:	pop    rdi
0x1296be:	pop    r15
0x1296bd:	pop    rsi; 	pop    r15
0x1296bc:	pop    r14; 	pop    r15
0x1296e0:	and    BYTE PTR [rax-0x7d],cl
0x129907:	fimul  DWORD PTR [rax-0x7d]
0x129b30:	add    BYTE PTR [rax],al
0x129b2e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x129bac:	pop    rbp
0x129bab:	pop    rbx; 	pop    rbp
0x129baa:	add    BYTE PTR [rbx+0x5d],bl
0x129ba9:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x129bc5:	pop    rbp
0x129bc4:	pop    rbx; 	pop    rbp
0x129bc2:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x129d53:	pop    rbp
0x129d52:	pop    r13
0x129d51:	pop    rsp; 	pop    r13
0x129d50:	pop    r12; 	pop    r13
0x129dc7:	pop    rsp
0x129dc6:	pop    r12
0x129dc5:	pop    rbp; 	pop    r12
0x129dc4:	pop    rbx; 	pop    rbp; 	pop    r12
0x129de1:	dec    DWORD PTR [rax-0x77]
0x129de0:	out    dx,eax; 	dec    DWORD PTR [rax-0x77]
0x129def:	pop    rsp
0x129dee:	pop    r12
0x129ded:	pop    rbp; 	pop    r12
0x129dec:	pop    rbx; 	pop    rbp; 	pop    r12
0x129e34:	pop    rsp
0x129e33:	pop    r12
0x129e32:	pop    rbp; 	pop    r12
0x129e31:	pop    rbx; 	pop    rbp; 	pop    r12
0x129e67:	pop    rbp
0x129e66:	pop    rbx; 	pop    rbp
0x129e65:	or     BYTE PTR [rbx+0x5d],bl
0x129ec1:	pop    rbx
0x129ebe:	add    esp,0x10; 	pop    rbx
0x129f01:	pop    rbx
0x129efe:	add    esp,0x10; 	pop    rbx
0x129f41:	pop    rbx
0x129f3e:	add    esp,0x10; 	pop    rbx
0x129f76:	pop    rbx
0x12a270:	pop    rdi
0x12a26f:	pop    r15
0x12a26e:	pop    rsi; 	pop    r15
0x12a26d:	pop    r14; 	pop    r15
0x12a7b7:	add    BYTE PTR [rax-0x7d],cl
0x12a928:	sbb    BYTE PTR [rax-0x77],cl
0x12a927:	push   rdi; 	sbb    BYTE PTR [rax-0x77],cl
0x12a9b1:	pop    rdi
0x12a9b0:	pop    r15
0x12a9af:	pop    rsi; 	pop    r15
0x12a9ae:	pop    r14; 	pop    r15
0x12ad9f:	add    BYTE PTR [rax-0x7d],cl
0x12ae17:	add    BYTE PTR [rax-0x7d],cl
0x12aebe:	pop    rbp
0x12aebd:	pop    rdi; 	pop    rbp
0x12aebc:	pop    r15; 	pop    rbp
0x12aebb:	pop    rsi; 	pop    r15; 	pop    rbp
0x12b3ae:	pop    rdi
0x12b3ad:	pop    r15
0x12b3ac:	pop    rsi; 	pop    r15
0x12b3ab:	pop    r14; 	pop    r15
0x12b46f:	pop    rdi
0x12b46e:	pop    r15
0x12b46d:	pop    rsi; 	pop    r15
0x12b46c:	pop    r14; 	pop    r15
0x12b4a7:	pop    rdi
0x12b4a6:	pop    r15
0x12b4a5:	pop    rsi; 	pop    r15
0x12b4a4:	pop    r14; 	pop    r15
0x12b7c1:	adc    BYTE PTR [rax-0x7d],cl
0x12b8a0:	pop    rdi
0x12b89f:	pop    r15
0x12b89e:	pop    rsi; 	pop    r15
0x12b89d:	pop    r14; 	pop    r15
0x12b9dd:	pop    rdi
0x12b9dc:	pop    r15
0x12b9db:	pop    rsi; 	pop    r15
0x12b9da:	pop    r14; 	pop    r15
0x12bd5f:	pop    rsi
0x12bd5e:	pop    r14
0x12bd5d:	pop    rbp; 	pop    r14
0x12bd5c:	pop    r13; 	pop    r14
0x12be4e:	cmove  eax,ecx
0x12be88:	cmovne eax,ecx
0x12bec3:	cmovne eax,esi
0x12bec2:	iret   ; 	cmovne eax,esi
0x12becf:	add    bl,dh
0x12becd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x12befa:	cmovne eax,edx
0x12bf01:	clc    
0x12bf00:	sub    eax,edi
0x12beff:	nop; 	sub    eax,edi
0x12befe:	xchg   ax,ax; 	sub    eax,edi
0x12c13a:	xchg   ebp,eax
0x12c14f:	pop    rdi
0x12c14e:	pop    r15
0x12c14d:	pop    rsi; 	pop    r15
0x12c14c:	pop    r14; 	pop    r15
0x12c499:	pop    rsi
0x12c498:	pop    r14
0x12c497:	pop    rbp; 	pop    r14
0x12c496:	pop    r13; 	pop    r14
0x12c5df:	add    BYTE PTR [rax-0x7d],cl
0x12ca47:	sub    BYTE PTR [rax-0x77],cl
0x12ca46:	push   rbp; 	sub    BYTE PTR [rax-0x77],cl
0x12cbdf:	pop    rbp
0x12cbde:	pop    rdi; 	pop    rbp
0x12cbdd:	pop    r15; 	pop    rbp
0x12cbdc:	pop    rsi; 	pop    r15; 	pop    rbp
0x12cf87:	dec    DWORD PTR [rax-0x7d]
0x12cfc8:	dec    DWORD PTR [rax-0x7d]
0x12d1da:	cmp    BYTE PTR [rax-0x77],cl
0x12d60d:	dec    DWORD PTR [rcx]
0x12d6d1:	dec    DWORD PTR [rcx]
0x12d6cf:	enter  0xffff,0x9
0x12db66:	ror    BYTE PTR [rdi],0x84
0x12e07c:	dec    DWORD PTR [rax-0x77]
0x12e07b:	lock dec DWORD PTR [rax-0x77]
0x12e143:	pop    rbp
0x12e142:	pop    rbx; 	pop    rbp
0x12e141:	or     BYTE PTR [rbx+0x5d],bl
0x12e300:	pop    rbp
0x12e2ff:	pop    rbx; 	pop    rbp
0x12e2fe:	add    BYTE PTR [rbx+0x5d],bl
0x12e2fd:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x12e3bd:	pop    rbp
0x12e3bc:	pop    rbx; 	pop    rbp
0x12e3ba:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12e409:	pop    rbp
0x12e408:	pop    rbx; 	pop    rbp
0x12e407:	or     BYTE PTR [rbx+0x5d],bl
0x12e472:	pop    rbp
0x12e471:	pop    rbx; 	pop    rbp
0x12e470:	add    BYTE PTR [rbx+0x5d],bl
0x12e46f:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x12e490:	pop    rbp
0x12e48f:	pop    rbx; 	pop    rbp
0x12e48d:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x12e5e5:	xchg   ebp,eax
0x12e5e3:	add    DWORD PTR [rdi],ecx; 	xchg   ebp,eax
0x12e73d:	ror    BYTE PTR [rax-0x7d],cl
0x12e76a:	pop    rdi
0x12e769:	pop    r15
0x12e768:	pop    rsi; 	pop    r15
0x12e767:	pop    r14; 	pop    r15
0x12e7f9:	pop    rbx
0x12e7f7:	je     0x12e800; 	pop    rbx
0x12e7f6:	and    BYTE PTR [rdi+rax*1+0x5b],dh
0x12e813:	add    BYTE PTR [rax],al
0x12eccc:	add    cl,BYTE PTR [rax-0x7d]
0x12ee33:	pop    rdi
0x12ee32:	pop    r15
0x12ee31:	pop    rsi; 	pop    r15
0x12ee30:	pop    r14; 	pop    r15
0x12f739:	dec    DWORD PTR [rax-0x7d]
0x12f7d1:	pop    rbp
0x12f7d0:	pop    rdi; 	pop    rbp
0x12f7cf:	pop    r15; 	pop    rbp
0x12f7ce:	pop    rsi; 	pop    r15; 	pop    rbp
0x12f7dd:	dec    DWORD PTR [rax-0x7d]
0x13000f:	xor    eax,eax
0x13000e:	icebp  ; 	xor    eax,eax
0x13000d:	jb     0x130000; 	xor    eax,eax
0x130019:	mov    eax,DWORD PTR [rax+0x30]
0x130018:	mov    rax,QWORD PTR [rax+0x30]
0x13006b:	loopne 0x13006e
0x13006a:	and    eax,0x1
0x13008e:	or     ebx,esi
0x13008c:	add    BYTE PTR [rcx+rcx*1-0xd],dh
0x1300a6:	sete   al
0x1300ec:	setae  al
0x1300eb:	cli    ; 	setae  al
0x130113:	add    BYTE PTR [rax],al
0x130111:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x130140:	xor    eax,eax
0x13013e:	jmp    rax; 	xor    eax,eax
0x130170:	xor    eax,eax
0x13016e:	jmp    rax; 	xor    eax,eax
0x1301a0:	xor    eax,eax
0x13019e:	jmp    rax; 	xor    eax,eax
0x1301d0:	xor    eax,eax
0x1301ce:	jmp    rax; 	xor    eax,eax
0x130200:	xor    eax,eax
0x1301fe:	jmp    rax; 	xor    eax,eax
0x130230:	xor    eax,eax
0x13022e:	jmp    rax; 	xor    eax,eax
0x130260:	xor    eax,eax
0x13025e:	jmp    rax; 	xor    eax,eax
0x130290:	xor    eax,eax
0x13028e:	jmp    rax; 	xor    eax,eax
0x1302c0:	xor    eax,eax
0x1302be:	jmp    rax; 	xor    eax,eax
0x1302f0:	xor    eax,eax
0x1302ee:	jmp    rax; 	xor    eax,eax
0x130320:	xor    eax,eax
0x13031e:	jmp    rax; 	xor    eax,eax
0x130350:	xor    eax,eax
0x13034e:	jmp    rax; 	xor    eax,eax
0x130380:	xor    eax,eax
0x13037e:	jmp    rax; 	xor    eax,eax
0x1303b0:	xor    eax,eax
0x1303ae:	jmp    rax; 	xor    eax,eax
0x1303e0:	xor    eax,eax
0x1303de:	jmp    rax; 	xor    eax,eax
0x130410:	xor    eax,eax
0x13040e:	jmp    rax; 	xor    eax,eax
0x130440:	xor    eax,eax
0x13043e:	jmp    rax; 	xor    eax,eax
0x130470:	xor    eax,eax
0x13046e:	jmp    rax; 	xor    eax,eax
0x1304a0:	xor    eax,eax
0x13049e:	jmp    rax; 	xor    eax,eax
0x1304d0:	xor    eax,eax
0x1304ce:	jmp    rax; 	xor    eax,eax
0x130530:	xor    eax,eax
0x13052e:	jmp    rax; 	xor    eax,eax
0x130560:	xor    eax,eax
0x13055e:	jmp    rax; 	xor    eax,eax
0x130590:	xor    eax,eax
0x13058e:	jmp    rax; 	xor    eax,eax
0x1305c0:	xor    eax,eax
0x1305be:	jmp    rax; 	xor    eax,eax
0x1305f0:	xor    eax,eax
0x1305ee:	jmp    rax; 	xor    eax,eax
0x130620:	xor    eax,eax
0x13061e:	jmp    rax; 	xor    eax,eax
0x130650:	xor    eax,eax
0x13064e:	jmp    rax; 	xor    eax,eax
0x130680:	xor    eax,eax
0x13067e:	jmp    rax; 	xor    eax,eax
0x1306b6:	pop    rdx
0x1306b5:	pop    r10
0x1306b4:	pop    rdx; 	pop    r10
0x1306b3:	lock pop rdx; 	pop    r10
0x1306da:	pop    rsi
0x1306d9:	pop    rdx; 	pop    rsi
0x1306d7:	syscall ; 	pop    rdx; 	pop    rsi
0x1306e7:	add    BYTE PTR [rcx-0x77],al
0x1306ee:	add    al,BYTE PTR [rcx+0x39]
0x1306ed:	retf   ; 	add    al,BYTE PTR [rcx+0x39]
0x130709:	je     0x13070c
0x13074f:	add    BYTE PTR [rcx-0x77],al
0x13076d:	je     0x130770
0x1307af:	and    bl,dh
0x1307ad:	or     bh,bh; 	and    bl,dh
0x130818:	pop    rbx
0x130816:	add    BYTE PTR [rax],al; 	pop    rbx
0x130935:	pop    rsp
0x130934:	pop    r12
0x130933:	pop    rbp; 	pop    r12
0x130932:	or     al,0x5d; 	pop    r12
0x130a28:	leave  
0x130a27:	clc    ; 	leave  
0x130a26:	pop    rbp; 	clc    ; 	leave  
0x130a25:	mov    ebx,DWORD PTR [rbp-0x8]; 	leave  
0x130af7:	add    al,ch
0x130af5:	add    BYTE PTR [rax],al; 	add    al,ch
0x130bd7:	add    BYTE PTR [rax],al
0x130bd5:	adc    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x130c2b:	pop    rsp
0x130c2a:	pop    r12
0x130c29:	pop    rbp; 	pop    r12
0x130c28:	pop    rbx; 	pop    rbp; 	pop    r12
0x130dff:	add    BYTE PTR [rbp-0x77],cl
0x130e3a:	cmovne eax,edx
0x130e43:	xor    eax,eax
0x130e41:	mov    DWORD PTR [rax],edx; 	xor    eax,eax
0x130e5e:	or     ebx,esi
0x130eca:	pop    rbp
0x130ec9:	pop    rbx; 	pop    rbp
0x130ec8:	or     BYTE PTR [rbx+0x5d],bl
0x130eeb:	pop    rbp
0x130eea:	pop    rbx; 	pop    rbp
0x130ee9:	or     BYTE PTR [rbx+0x5d],bl
0x130f7d:	add    esp,0x28
0x130f7c:	add    rsp,0x28
0x130f8b:	add    BYTE PTR [rax],al
0x130fe6:	pop    rbp
0x130fe5:	in     eax,0x5d
0x130fe4:	mov    ebp,esp; 	pop    rbp
0x130fe3:	mov    rbp,rsp; 	pop    rbp
0x13104b:	pop    rbp
0x13104a:	pop    rsp; 	pop    rbp
0x131049:	pop    r12; 	pop    rbp
0x131048:	rol    BYTE PTR [rcx+0x5c],0x5d
0x13105e:	pop    rbp
0x13105d:	pop    rsp; 	pop    rbp
0x13105c:	pop    r12; 	pop    rbp
0x13105b:	add    BYTE PTR [rcx+0x5c],al; 	pop    rbp
0x1310de:	pop    rbp
0x1310dc:	sub    eax,DWORD PTR [rax]; 	pop    rbp
0x1311a2:	leave  
0x1311a1:	add    cl,cl
0x1311a0:	add    BYTE PTR [rax],al; 	leave  
0x13119f:	add    BYTE PTR [rax],al; 	add    cl,cl
0x131327:	and    BYTE PTR [rax-0x7d],cl
0x13140d:	add    DWORD PTR [rax-0x7d],ecx
0x131462:	pop    rbp
0x131461:	pop    rdi; 	pop    rbp
0x131460:	pop    r15; 	pop    rbp
0x13145f:	pop    rsi; 	pop    r15; 	pop    rbp
0x131484:	add    DWORD PTR [rax-0x7d],ecx
0x131765:	add    BYTE PTR [rax-0x7d],cl
0x1317c0:	pop    rdi
0x1317bf:	pop    r15
0x1317be:	pop    rsi; 	pop    r15
0x1317bd:	pop    r14; 	pop    r15
0x13188f:	add    bl,dh
0x1318f7:	cmovne eax,edx
0x1318f6:	cmovne rax,rdx
0x131945:	cmovne eax,edx
0x131944:	cmovne rax,rdx
0x131966:	cmovne eax,edx
0x131965:	cmovne rax,rdx
0x1319c7:	cmovne eax,edx
0x1319c6:	cmovne rax,rdx
0x131a15:	cmovne eax,edx
0x131a14:	cmovne rax,rdx
0x131a36:	cmovne eax,edx
0x131a35:	cmovne rax,rdx
0x131a97:	cmovne eax,edx
0x131a96:	cmovne rax,rdx
0x131ae5:	cmovne eax,edx
0x131ae4:	cmovne rax,rdx
0x131b06:	cmovne eax,edx
0x131b05:	cmovne rax,rdx
0x131b5b:	cmovne eax,edx
0x131b5a:	cmovne rax,rdx
0x131ba5:	cmovne eax,edx
0x131ba4:	cmovne rax,rdx
0x131bee:	pop    rbp
0x131bed:	pop    r13
0x131bec:	pop    rsp; 	pop    r13
0x131beb:	pop    r12; 	pop    r13
0x131c6a:	clc    
0x131c69:	mov    eax,edi
0x131c68:	mov    rax,rdi
0x131da9:	clc    
0x131da8:	mov    eax,edi
0x131da7:	mov    rax,rdi
0x131da6:	xchg   ebp,eax; 	mov    rax,rdi
0x131f0f:	add    BYTE PTR [rax],al
0x131f0d:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x131ff6:	pop    rdi
0x131ff5:	pop    r15
0x131ff4:	pop    rsi; 	pop    r15
0x131ff3:	pop    r14; 	pop    r15
0x1320aa:	add    BYTE PTR [rax],al
0x1320a8:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x132168:	dec    DWORD PTR [rax-0x7f]
0x132167:	repnz dec DWORD PTR [rax-0x7f]
0x1321a2:	pop    rdi
0x1321a1:	pop    r15
0x1321a0:	pop    rsi; 	pop    r15
0x13219f:	pop    r14; 	pop    r15
0x132362:	pop    rsp
0x132361:	pop    r12
0x132360:	pop    rbp; 	pop    r12
0x13235f:	pop    rbx; 	pop    rbp; 	pop    r12
0x13252d:	pop    rbp
0x13252c:	pop    rbx; 	pop    rbp
0x13252b:	add    BYTE PTR [rbx+0x5d],bl
0x13252a:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x13267b:	pop    rsp
0x13267a:	pop    r12
0x132679:	pop    rbp; 	pop    r12
0x132678:	lock pop rbp; 	pop    r12
0x1327bc:	pop    rbp
0x1327bb:	pop    rbx; 	pop    rbp
0x1327ba:	lock pop rbx; 	pop    rbp
0x1327b9:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x13292a:	pop    rbp
0x132929:	pop    r13
0x132928:	pop    rsp; 	pop    r13
0x132927:	pop    r12; 	pop    r13
0x132a41:	shr    al,0xe9
0x132a4f:	add    BYTE PTR [rax-0x77],cl
0x132bc9:	pop    rdi
0x132bc8:	pop    r15
0x132bc7:	pop    rsi; 	pop    r15
0x132bc6:	pop    r14; 	pop    r15
0x132d14:	pop    rbp
0x132d13:	pop    r13
0x132d12:	pop    rsp; 	pop    r13
0x132d11:	pop    r12; 	pop    r13
0x132d53:	mov    eax,esi
0x132d52:	mov    rax,rsi
0x132da7:	imul   eax
0x132e28:	pop    rbp
0x132e27:	pop    r13
0x132e26:	pop    rsp; 	pop    r13
0x132e25:	pop    r12; 	pop    r13
0x132e4d:	pop    rbp
0x132e4c:	pop    r13
0x132e4b:	pop    rsp; 	pop    r13
0x132e4a:	pop    r12; 	pop    r13
0x132e50:	xor    eax,eax
0x132e4f:	nop; 	xor    eax,eax
0x132e4e:	ret    ; 	nop; 	xor    eax,eax
0x132f43:	or     al,0xf3
0x132f9f:	add    esp,0x8
0x132f9e:	add    rsp,0x8
0x1330ea:	pop    rbp
0x1330e9:	pop    r13
0x1330e8:	pop    rsp; 	pop    r13
0x1330e7:	pop    r12; 	pop    r13
0x133136:	pop    rbp
0x133135:	pop    r13
0x133134:	pop    rsp; 	pop    r13
0x133133:	pop    r12; 	pop    r13
0x1331f4:	pop    rbp
0x1331f3:	pop    rbx; 	pop    rbp
0x1331f2:	fcomp  DWORD PTR [rbx+0x5d]
0x1331f1:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x133212:	dec    DWORD PTR [rax+0x39]
0x133211:	cmc    ; 	dec    DWORD PTR [rax+0x39]
0x13322d:	pop    rbp
0x13322c:	pop    rbx; 	pop    rbp
0x13322b:	fcomp  DWORD PTR [rbx+0x5d]
0x13322a:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x133253:	pop    rbp
0x133252:	pop    rbx; 	pop    rbp
0x133251:	fcomp  DWORD PTR [rbx+0x5d]
0x133250:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x13328a:	add    esp,0x8
0x133289:	add    rsp,0x8
0x1332e2:	clc    
0x1332e1:	mov    eax,edi
0x1332e0:	mov    rax,rdi
0x1332df:	add    BYTE PTR [rax-0x77],cl; 	clc    
0x133419:	clc    
0x133418:	mov    eax,edi
0x133417:	mov    rax,rdi
0x133505:	clc    
0x133504:	mov    eax,edi
0x133503:	mov    rax,rdi
0x133502:	fwait; 	mov    rax,rdi
0x1335a3:	or     al,0xf3
0x1335a1:	add    BYTE PTR [rsp+rcx*1-0xd],dh
0x1335cb:	cmove  eax,edx
0x1335ca:	cmove  rax,rdx
0x13368a:	add    BYTE PTR [rax],al
0x133688:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x13375b:	add    BYTE PTR [rax-0x7f],cl
0x133796:	pop    rdi
0x133795:	pop    r15
0x133794:	pop    rsi; 	pop    r15
0x133793:	pop    r14; 	pop    r15
0x133952:	pop    rsp
0x133951:	pop    r12
0x133950:	pop    rbp; 	pop    r12
0x13394f:	pop    rbx; 	pop    rbp; 	pop    r12
0x133b1d:	pop    rbp
0x133b1c:	pop    rbx; 	pop    rbp
0x133b1b:	add    BYTE PTR [rbx+0x5d],bl
0x133b1a:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x133c6b:	pop    rsp
0x133c6a:	pop    r12
0x133c69:	pop    rbp; 	pop    r12
0x133c68:	lock pop rbp; 	pop    r12
0x133dac:	pop    rbp
0x133dab:	pop    rbx; 	pop    rbp
0x133daa:	lock pop rbx; 	pop    rbp
0x133da9:	mov    eax,esi; 	pop    rbx; 	pop    rbp
0x133f24:	pop    rbp
0x133f23:	pop    r13
0x133f22:	pop    rsp; 	pop    r13
0x133f21:	pop    r12; 	pop    r13
0x133f63:	mov    eax,esi
0x133f62:	mov    rax,rsi
0x134038:	pop    rbp
0x134037:	pop    r13
0x134036:	pop    rsp; 	pop    r13
0x134035:	pop    r12; 	pop    r13
0x134060:	pop    rbp
0x13405f:	pop    r13
0x13405e:	pop    rsp; 	pop    r13
0x13405d:	pop    r12; 	pop    r13
0x134068:	xor    eax,eax
0x134066:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x134227:	add    esp,0x28
0x134226:	add    rsp,0x28
0x134287:	add    esp,0x28
0x134286:	add    rsp,0x28
0x134344:	add    BYTE PTR [rax],al
0x134342:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x13442e:	cmp    BYTE PTR [rax+0x29],cl
0x134481:	pop    rdi
0x134480:	pop    r15
0x13447f:	pop    rsi; 	pop    r15
0x13447e:	pop    r14; 	pop    r15
0x134594:	add    BYTE PTR [rax],al
0x134592:	fadd   DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x134617:	fucomip st,st(0)
0x13469f:	pop    rsi
0x13469e:	pop    r14
0x13469d:	pop    rbp; 	pop    r14
0x13469c:	pop    r13; 	pop    r14
0x13480b:	pop    rdi
0x13480a:	pop    r15
0x134809:	pop    rsi; 	pop    r15
0x134808:	pop    r14; 	pop    r15
0x134a5c:	pop    rdi
0x134a5b:	pop    r15
0x134a5a:	pop    rsi; 	pop    r15
0x134a59:	pop    r14; 	pop    r15
0x134bfd:	sar    eax,0x6
0x134bfc:	sar    rax,0x6
0x134c64:	add    esp,0x8
0x134c63:	add    rsp,0x8
0x134d32:	bswap  eax
0x134d31:	clc    ; 	bswap  eax
0x134d30:	mov    eax,edi; 	bswap  eax
0x134d43:	ror    eax,0x8
0x134d42:	ror    ax,0x8
0x134d5b:	inc    DWORD PTR [rax]
0x134d75:	cmovne eax,edi
0x134da2:	bswap  eax
0x134da1:	clc    ; 	bswap  eax
0x134da0:	or     eax,edi; 	bswap  eax
0x134db0:	bswap  eax
0x134daf:	clc    ; 	bswap  eax
0x134dae:	or     eax,edi; 	bswap  eax
0x134dc4:	bswap  eax
0x134dc3:	clc    ; 	bswap  eax
0x134dc2:	or     eax,edi; 	bswap  eax
0x134dd8:	shr    eax,0x18
0x134dd7:	clc    ; 	shr    eax,0x18
0x134df6:	cmovne eax,edi
0x134e4b:	pop    rbx
0x134e4a:	pop    rdx; 	pop    rbx
0x134e49:	fcomp  DWORD PTR [rdx+0x5b]
0x134e48:	mov    eax,ebx; 	pop    rdx; 	pop    rbx
0x134f20:	pop    rsp
0x134f1f:	pop    r12
0x134f1e:	pop    rbp; 	pop    r12
0x134f1d:	pop    rbx; 	pop    rbp; 	pop    r12
0x1350de:	add    BYTE PTR [rax],al
0x1350dc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x13527f:	pop    rdi
0x13527e:	pop    r15
0x13527d:	pop    rsi; 	pop    r15
0x13527c:	pop    r14; 	pop    r15
0x135643:	pop    rdi
0x135642:	pop    r15
0x135641:	pop    rsi; 	pop    r15
0x135640:	pop    r14; 	pop    r15
0x1359bd:	pop    rsi
0x1359bc:	pop    r14
0x1359bb:	pop    rbp; 	pop    r14
0x1359ba:	pop    r13; 	pop    r14
0x135c0e:	pop    rdi
0x135c0d:	pop    r15
0x135c0c:	pop    rsi; 	pop    r15
0x135c0b:	pop    r14; 	pop    r15
0x135ec9:	pop    rdi
0x135ec8:	pop    r15
0x135ec7:	pop    rsi; 	pop    r15
0x135ec6:	pop    r14; 	pop    r15
0x136410:	pop    rdi
0x13640f:	pop    r15
0x13640e:	pop    rsi; 	pop    r15
0x13640d:	pop    r14; 	pop    r15
0x1364ff:	xor    al,ch
0x1364fd:	jl     0x136523; 	xor    al,ch
0x1367c5:	add    esp,0x8
0x1367c4:	add    rsp,0x8
0x13688c:	add    esp,0x18
0x13688b:	add    rsp,0x18
0x136953:	add    esp,0x8
0x136952:	add    rsp,0x8
0x13695f:	add    bl,dh
0x13695d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x136a57:	add    esp,0x48
0x136a56:	add    rsp,0x48
0x136bea:	pop    rdi
0x136be9:	pop    r15
0x136be8:	pop    rsi; 	pop    r15
0x136be7:	pop    r14; 	pop    r15
0x136f33:	pop    rdi
0x136f32:	pop    r15
0x136f31:	pop    rsi; 	pop    r15
0x136f30:	pop    r14; 	pop    r15
0x1371ff:	pop    rdi
0x1371fe:	pop    r15
0x1371fd:	pop    rsi; 	pop    r15
0x1371fc:	pop    r14; 	pop    r15
0x137315:	add    esp,0x8
0x137314:	add    rsp,0x8
0x1373dc:	add    esp,0x18
0x1373db:	add    rsp,0x18
0x1374a3:	add    esp,0x8
0x1374a2:	add    rsp,0x8
0x1374af:	add    bl,dh
0x1374ad:	add    BYTE PTR [rax],al; 	add    bl,dh
0x1375a7:	add    esp,0x48
0x1375a6:	add    rsp,0x48
0x137893:	pop    rdi
0x137892:	pop    r15
0x137891:	pop    rsi; 	pop    r15
0x137890:	pop    r14; 	pop    r15
0x137b2b:	pop    rsi
0x137b2a:	pop    r14
0x137b29:	pop    rbp; 	pop    r14
0x137b28:	pop    r13; 	pop    r14
0x137d81:	pop    rdi
0x137d80:	pop    r15
0x137d7f:	pop    rsi; 	pop    r15
0x137d7e:	pop    r14; 	pop    r15
0x137f78:	add    esp,0x8
0x137f77:	add    rsp,0x8
0x13803c:	add    esp,0x18
0x13803b:	add    rsp,0x18
0x138100:	add    esp,0x8
0x1380ff:	add    rsp,0x8
0x138107:	add    bl,dh
0x138106:	add    bl,sil
0x1381e8:	add    esp,0x48
0x1381e7:	add    rsp,0x48
0x13833b:	pop    rsi
0x13833a:	pop    r14
0x138339:	pop    rbp; 	pop    r14
0x138338:	pop    r13; 	pop    r14
0x138591:	pop    rdi
0x138590:	pop    r15
0x13858f:	pop    rsi; 	pop    r15
0x13858e:	pop    r14; 	pop    r15
0x138828:	pop    rdi
0x138827:	pop    r15
0x138826:	pop    rsi; 	pop    r15
0x138825:	pop    r14; 	pop    r15
0x138a81:	pop    rdi
0x138a80:	pop    r15
0x138a7f:	pop    rsi; 	pop    r15
0x138a7e:	pop    r14; 	pop    r15
0x138dc8:	pop    rdi
0x138dc7:	pop    r15
0x138dc6:	pop    rsi; 	pop    r15
0x138dc5:	pop    r14; 	pop    r15
0x139021:	pop    rdi
0x139020:	pop    r15
0x13901f:	pop    rsi; 	pop    r15
0x13901e:	pop    r14; 	pop    r15
0x1392c8:	add    esp,0x8
0x1392c7:	add    rsp,0x8
0x13938c:	add    esp,0x18
0x13938b:	add    rsp,0x18
0x139450:	add    esp,0x8
0x13944f:	add    rsp,0x8
0x139457:	add    bl,dh
0x139456:	add    bl,sil
0x139538:	add    esp,0x48
0x139537:	add    rsp,0x48
0x1395a7:	xchg   esi,eax
0x139604:	pop    rbx
0x13962a:	pop    rbx
0x139628:	xor    eax,eax; 	pop    rbx
0x13971a:	pop    rdi
0x139719:	pop    r15
0x139718:	pop    rsi; 	pop    r15
0x139717:	pop    r14; 	pop    r15
0x139895:	pop    rbp
0x139894:	pop    r13
0x139893:	pop    rsp; 	pop    r13
0x139892:	pop    r12; 	pop    r13
0x13992f:	pop    rbp
0x13992e:	pop    r13
0x13992d:	pop    rsp; 	pop    r13
0x13992c:	pop    r12; 	pop    r13
0x139985:	pop    rbx
0x139984:	pop    rdx; 	pop    rbx
0x139983:	fcomp  DWORD PTR [rdx+0x5b]
0x139982:	mov    eax,ebx; 	pop    rdx; 	pop    rbx
0x139a7a:	pop    rdi
0x139a79:	pop    r15
0x139a78:	pop    rsi; 	pop    r15
0x139a77:	pop    r14; 	pop    r15
0x139ba0:	pop    rsp
0x139b9f:	pop    r12
0x139b9e:	pop    rbp; 	pop    r12
0x139b9d:	pop    rbx; 	pop    rbp; 	pop    r12
0x13a01f:	pop    rdi
0x13a01e:	pop    r15
0x13a01d:	pop    rsi; 	pop    r15
0x13a01c:	pop    r14; 	pop    r15
0x13a2dc:	pop    rbp
0x13a2db:	pop    rdi; 	pop    rbp
0x13a2da:	pop    r15; 	pop    rbp
0x13a2d9:	pop    rsi; 	pop    r15; 	pop    rbp
0x13a556:	pop    rdi
0x13a555:	pop    r15
0x13a554:	pop    rsi; 	pop    r15
0x13a553:	pop    r14; 	pop    r15
0x13a88b:	pop    rdi
0x13a88a:	pop    r15
0x13a889:	pop    rsi; 	pop    r15
0x13a888:	pop    r14; 	pop    r15
0x13b05f:	add    esp,0x18
0x13b05e:	add    rsp,0x18
0x13b0b1:	in     al,0x89
0x13b16e:	pop    rsi
0x13b16d:	pop    r14
0x13b16c:	pop    rbp; 	pop    r14
0x13b16b:	pop    r13; 	pop    r14
0x13b295:	pop    rsi
0x13b294:	pop    r14
0x13b293:	pop    rbp; 	pop    r14
0x13b292:	pop    r13; 	pop    r14
0x13b385:	pop    rsi
0x13b384:	pop    r14
0x13b383:	pop    rbp; 	pop    r14
0x13b382:	pop    r13; 	pop    r14
0x13b400:	add    esp,0x38
0x13b3ff:	add    rsp,0x38
0x13b4ca:	add    esp,0x38
0x13b4c9:	add    rsp,0x38
0x13b547:	add    esp,0x28
0x13b546:	add    rsp,0x28
0x13b70e:	pop    rdi
0x13b70d:	pop    r15
0x13b70c:	pop    rsi; 	pop    r15
0x13b70b:	pop    r14; 	pop    r15
0x13bafc:	add    esp,0x18
0x13bafb:	add    rsp,0x18
0x13bb98:	add    BYTE PTR [rax-0x7d],cl
0x13bc91:	pop    rbp
0x13bc90:	pop    rbx; 	pop    rbp
0x13bc8f:	or     BYTE PTR [rbx+0x5d],bl
0x13bd10:	add    BYTE PTR [rax-0x7d],cl
0x13bd59:	pop    rbp
0x13bd58:	pop    rbx; 	pop    rbp
0x13bd56:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x13bd72:	pop    rbp
0x13bd71:	pop    rbx; 	pop    rbp
0x13bd70:	or     BYTE PTR [rbx+0x5d],bl
0x13bf04:	pop    rbp
0x13bf03:	pop    rdi; 	pop    rbp
0x13bf02:	pop    r15; 	pop    rbp
0x13bf01:	pop    rsi; 	pop    r15; 	pop    rbp
0x13c402:	pop    rbp
0x13c401:	pop    rbx; 	pop    rbp
0x13c400:	or     BYTE PTR [rbx+0x5d],bl
0x13c5a5:	pop    rdi
0x13c5a4:	pop    r15
0x13c5a3:	pop    rsi; 	pop    r15
0x13c5a2:	pop    r14; 	pop    r15
0x13c79a:	pop    rbx
0x13c798:	mov    eax,edx; 	pop    rbx
0x13c885:	pop    rbx
0x13c884:	jmp    0x13c8e1
0x13c883:	jne    0x13c870; 	pop    rbx
0x13c882:	push   QWORD PTR [rbp-0x15]; 	pop    rbx
0x13c992:	add    esp,0x8
0x13c991:	add    rsp,0x8
0x13cb12:	pop    rdi
0x13cb11:	pop    r15
0x13cb10:	pop    rsi; 	pop    r15
0x13cb0f:	pop    r14; 	pop    r15
0x13cbbb:	pop    rdi
0x13cbba:	pop    r15
0x13cbb9:	pop    rsi; 	pop    r15
0x13cbb8:	pop    r14; 	pop    r15
0x13ce87:	pop    rdi
0x13ce86:	pop    r15
0x13ce85:	pop    rsi; 	pop    r15
0x13ce84:	pop    r14; 	pop    r15
0x13d1b6:	pop    rdi
0x13d1b5:	pop    r15
0x13d1b4:	pop    rsi; 	pop    r15
0x13d1b3:	pop    r14; 	pop    r15
0x13d233:	xor    BYTE PTR [rax-0x77],cl
0x13d3f6:	add    esp,0x8
0x13d3f5:	add    rsp,0x8
0x13d4b6:	pop    rsp
0x13d4b5:	pop    r12
0x13d4b4:	pop    rbp; 	pop    r12
0x13d4b3:	pop    rbx; 	pop    rbp; 	pop    r12
0x13d576:	add    esp,0x18
0x13d575:	add    rsp,0x18
0x13d640:	add    esp,0x8
0x13d63f:	add    rsp,0x8
0x13d647:	add    bl,dh
0x13d646:	add    bl,sil
0x13d722:	add    esp,0x48
0x13d721:	add    rsp,0x48
0x13d7e8:	add    esp,0x8
0x13d7e7:	add    rsp,0x8
0x13d81f:	mov    cl,0x35
0x13d93b:	pop    rsi
0x13d93a:	pop    r14
0x13d939:	pop    rbp; 	pop    r14
0x13d938:	pop    r13; 	pop    r14
0x13db91:	pop    rdi
0x13db90:	pop    r15
0x13db8f:	pop    rsi; 	pop    r15
0x13db8e:	pop    r14; 	pop    r15
0x13ddf7:	dec    DWORD PTR [rax-0x7d]
0x13de63:	pop    rbp
0x13de62:	pop    rdi; 	pop    rbp
0x13de61:	pop    r15; 	pop    rbp
0x13de60:	pop    rsi; 	pop    r15; 	pop    rbp
0x13e115:	pop    rbp
0x13e114:	pop    rdi; 	pop    rbp
0x13e113:	pop    r15; 	pop    rbp
0x13e112:	pop    rsi; 	pop    r15; 	pop    rbp
0x13e2f6:	dec    DWORD PTR [rax+0x39]
0x13e419:	pop    rdi
0x13e418:	pop    r15
0x13e417:	pop    rsi; 	pop    r15
0x13e416:	pop    r14; 	pop    r15
0x13e4c1:	add    BYTE PTR [rcx-0xa],al
0x13e52f:	add    BYTE PTR [rcx-0xa],al
0x13e52e:	add    BYTE PTR [rcx-0xa],al
0x13e5a1:	dec    DWORD PTR [rax-0x7d]
0x13e5df:	add    BYTE PTR [rcx-0xa],al
0x13e9cb:	pop    rsp
0x13e9ca:	pop    r12
0x13e9c9:	pop    rbp; 	pop    r12
0x13e9c8:	pop    rbx; 	pop    rbp; 	pop    r12
0x13ed21:	pop    rdi
0x13ed20:	pop    r15
0x13ed1f:	pop    rsi; 	pop    r15
0x13ed1e:	pop    r14; 	pop    r15
0x13eda7:	add    BYTE PTR [rax-0x7d],cl
0x13eda6:	add    BYTE PTR [rax-0x7d],cl
0x13ee59:	pop    rbp
0x13ee58:	pop    r13
0x13ee57:	pop    rsp; 	pop    r13
0x13ee56:	pop    r12; 	pop    r13
0x13eec8:	pop    rsp
0x13eec7:	pop    r12
0x13eec6:	pop    rbp; 	pop    r12
0x13eec5:	pop    rbx; 	pop    rbp; 	pop    r12
0x13f18a:	pop    rbp
0x13f189:	pop    rdi; 	pop    rbp
0x13f188:	pop    r15; 	pop    rbp
0x13f187:	pop    rsi; 	pop    r15; 	pop    rbp
0x13f342:	pop    rbp
0x13f341:	pop    rdi; 	pop    rbp
0x13f340:	pop    r15; 	pop    rbp
0x13f33f:	pop    rsi; 	pop    r15; 	pop    rbp
0x13f3a5:	add    BYTE PTR [rcx-0x77],al
0x13f3e7:	add    BYTE PTR [rcx-0x77],al
0x1400d7:	syscall 
0x1400d5:	add    BYTE PTR [rax],al; 	syscall 
0x14017e:	pop    rbp
0x14017d:	pop    rbx; 	pop    rbp
0x14017c:	sub    BYTE PTR [rbx+0x5d],bl
0x1401b5:	pop    rbx
0x1401b4:	repz pop rbx
0x1401b3:	je     0x1401a8; 	pop    rbx
0x1401b2:	cmc    ; 	je     0x1401a8; 	pop    rbx
0x1401d6:	add    eax,0x10
0x1401d5:	clc    ; 	add    eax,0x10
0x1401fe:	mov    DWORD PTR [rsi],edi
0x1401fd:	mov    QWORD PTR [rsi],rdi
0x1401fc:	or     al,0x48; 	mov    DWORD PTR [rsi],edi
0x140286:	add    BYTE PTR [rax+0x63],cl
0x140319:	pop    rsi
0x140318:	pop    r14
0x140317:	pop    rbp; 	pop    r14
0x140316:	pop    r13; 	pop    r14
0x1403c4:	pop    rsi
0x1403c3:	pop    r14
0x1403c2:	pop    rbp; 	pop    r14
0x1403c1:	pop    r13; 	pop    r14
0x1404c7:	fisttp DWORD PTR [rax+0x1]
0x140526:	pop    rbp
0x140525:	pop    r13
0x140524:	pop    rsp; 	pop    r13
0x140523:	pop    r12; 	pop    r13
0x1405b3:	pop    rbp
0x1405b2:	pop    r13
0x1405b1:	pop    rsp; 	pop    r13
0x1405b0:	pop    r12; 	pop    r13
0x1405d0:	xor    eax,eax
0x1405ce:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x140761:	xor    eax,eax
0x140760:	ds xor eax,eax
0x14075f:	mov    DWORD PTR [rsi],edi; 	xor    eax,eax
0x140835:	pop    rbp
0x140834:	pop    rdi; 	pop    rbp
0x140833:	pop    r15; 	pop    rbp
0x140832:	pop    rsi; 	pop    r15; 	pop    rbp
0x1409b5:	pop    rbp
0x1409b4:	pop    rdi; 	pop    rbp
0x1409b3:	pop    r15; 	pop    rbp
0x1409b2:	pop    rsi; 	pop    r15; 	pop    rbp
0x140a47:	cmove  eax,edx
0x140a62:	cmove  eax,edx
0x140a8c:	cmovne eax,edx
0x140a93:	add    BYTE PTR [rax],al
0x140a91:	add    DWORD PTR [rcx],eax; 	add    BYTE PTR [rax],al
0x140aa0:	xor    eax,eax
0x140a9e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x140aab:	add    BYTE PTR [rax],al
0x140aa9:	add    BYTE PTR [rcx],al; 	add    BYTE PTR [rax],al
0x140bc5:	pop    rbp
0x140bc4:	pop    rdi; 	pop    rbp
0x140bc3:	pop    r15; 	pop    rbp
0x140bc2:	pop    rsi; 	pop    r15; 	pop    rbp
0x140d97:	add    al,ch
0x140d95:	add    BYTE PTR [rax],al; 	add    al,ch
0x140ded:	pop    rbp
0x140dec:	pop    rdi; 	pop    rbp
0x140deb:	pop    r15; 	pop    rbp
0x140dea:	pop    rsi; 	pop    r15; 	pop    rbp
0x140e67:	ja     0x140e6a
0x140e66:	mov    BYTE PTR [rdi+0x1],dh
0x140e65:	mov    BYTE PTR [rdi+0x1],sil
0x140e6f:	add    bl,dh
0x140e7b:	add    BYTE PTR [rax],al
0x140e79:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x140f20:	pop    rbx
0x140f1e:	add    DWORD PTR [rdx],eax; 	pop    rbx
0x140f1d:	add    DWORD PTR [rdx],r8d; 	pop    rbx
0x140f27:	add    BYTE PTR [rcx+0x63],cl
0x140fb5:	pop    rbx
0x14102e:	mov    eax,eax
0x14102d:	mov    eax,r8d
0x14102c:	inc    BYTE PTR [rcx+rcx*4-0x40]
0x14103e:	mov    BYTE PTR [rdi+rdx*1],0x0
0x141073:	mov    eax,eax
0x141072:	mov    eax,r8d
0x141071:	stos   DWORD PTR es:[rdi],eax; 	mov    eax,r8d
0x1410c0:	or     BYTE PTR [rax-0x77],cl
0x1410bf:	in     al,dx; 	or     BYTE PTR [rax-0x77],cl
0x1410d4:	pop    rbp
0x1410d3:	pop    rbx; 	pop    rbp
0x1410d2:	sub    ebx,DWORD PTR [rbx+0x5d]
0x1410d1:	add    al,0x2b; 	pop    rbx; 	pop    rbp
0x141135:	mov    eax,edx
0x141133:	mov    DWORD PTR [rcx],eax; 	mov    eax,edx
0x141196:	mov    eax,edx
0x141194:	mov    DWORD PTR [rcx],eax; 	mov    eax,edx
0x1411c8:	mov    DWORD PTR [rcx],edi
0x1411c7:	mov    QWORD PTR [r9],rdi
0x1411c6:	xlat   BYTE PTR ds:[rbx]; 	mov    QWORD PTR [r9],rdi
0x141227:	pop    rbp
0x141226:	pop    rbx; 	pop    rbp
0x141225:	sub    ebx,DWORD PTR [rbx+0x5d]
0x141224:	add    al,0x2b; 	pop    rbx; 	pop    rbp
0x141242:	cmovae eax,edi
0x141250:	xor    eax,eax
0x14124e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x14128d:	pop    rbx
0x14128b:	add    al,BYTE PTR [rax]; 	pop    rbx
0x14128a:	add    al,BYTE PTR [rax]; 	pop    rbx
0x141290:	xor    eax,eax
0x14128f:	nop; 	xor    eax,eax
0x14128e:	ret    ; 	nop; 	xor    eax,eax
0x14129a:	pop    rbx
0x141298:	xor    eax,eax; 	pop    rbx
0x1412d0:	adc    DWORD PTR [rdi+rdx*1+0x8],eax
0x14138f:	add    esp,0x18
0x14138e:	add    rsp,0x18
0x1413b2:	loopne 0x141433
0x1413b1:	and    eax,0x7f
0x1413b0:	add    al,0x83; 	loopne 0x141433
0x1413e0:	lea    eax,[rdi+rsi*1+0x8]
0x1413e8:	xor    eax,eax
0x141470:	pop    rbp
0x14146f:	pop    rbx; 	pop    rbp
0x14146e:	sbb    BYTE PTR [rbx+0x5d],bl
0x141508:	add    esp,0x38
0x141507:	add    rsp,0x38
0x1415c6:	movsxd edx,esi
0x1415c5:	movsxd rdx,esi
0x1415de:	mov    edx,eax
0x1415dd:	mov    rdx,rax
0x14166d:	cmovs  eax,edx
0x14166c:	clc    ; 	cmovs  eax,edx
0x141678:	xor    eax,eax
0x141676:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x141684:	jg     0x141679
0x141898:	pop    rbp
0x141897:	pop    rdi; 	pop    rbp
0x141896:	pop    r15; 	pop    rbp
0x141895:	pop    rsi; 	pop    r15; 	pop    rbp
0x141f61:	add    esp,0x8
0x141f60:	add    rsp,0x8
0x141f67:	add    bl,dh
0x142020:	pop    rbp
0x14201f:	pop    rdi; 	pop    rbp
0x14201e:	pop    r15; 	pop    rbp
0x14201d:	pop    rsi; 	pop    r15; 	pop    rbp
0x142453:	pop    rsi
0x142452:	pop    r14
0x142451:	pop    rbp; 	pop    r14
0x142450:	pop    r13; 	pop    r14
0x142517:	pop    rbp
0x142516:	pop    r13
0x142515:	pop    rsp; 	pop    r13
0x142514:	pop    r12; 	pop    r13
0x142766:	pop    rbp
0x142765:	pop    rbx; 	pop    rbp
0x142764:	pop    rax; 	pop    rbx; 	pop    rbp
0x1428e4:	pop    rdi
0x1428e3:	pop    r15
0x1428e2:	pop    rsi; 	pop    r15
0x1428e1:	pop    r14; 	pop    r15
0x1428f4:	adc    al,0x78
0x1428f2:	div    BYTE PTR [rsp+rdx*1+0x78]
0x14298e:	add    esp,0x18
0x14298d:	add    rsp,0x18
0x142a15:	pop    rdi
0x142a14:	pop    r15
0x142a13:	pop    rsi; 	pop    r15
0x142a12:	pop    r14; 	pop    r15
0x142b40:	add    DWORD PTR [rcx],edi
0x142b3f:	ret    ; 	add    DWORD PTR [rcx],edi
0x143193:	add    esp,0x18
0x143192:	add    rsp,0x18
0x1431f8:	pop    rsi
0x1431f7:	pop    r14
0x1431f6:	pop    rsp; 	pop    r14
0x1431f5:	pop    r12; 	pop    r14
0x14343c:	ror    BYTE PTR [rbp-0x77],cl
0x14351b:	pop    rbp
0x14351a:	pop    r13
0x143519:	pop    rsp; 	pop    r13
0x143518:	pop    r12; 	pop    r13
0x14355a:	ror    BYTE PTR [rax-0x7d],cl
0x143607:	dec    DWORD PTR [rax+0x39]
0x143643:	xor    BYTE PTR [rax-0x7d],cl
0x14387e:	loop   0x143873
0x143888:	xor    eax,eax
0x143886:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x14388f:	add    bl,dh
0x14393a:	add    al,BYTE PTR [rax]
0x143939:	mov    BYTE PTR [rdx],0x0
0x143938:	mov    BYTE PTR [r10],0x0
0x143966:	add    BYTE PTR [rax],al
0x143964:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1439b4:	pop    rbp
0x1439b3:	pop    r13
0x1439b2:	pop    rsp; 	pop    r13
0x1439b1:	pop    r12; 	pop    r13
0x1439c0:	xor    eax,eax
0x1439be:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x143a67:	add    BYTE PTR [rax-0x7d],cl
0x143bc1:	dec    DWORD PTR [rax-0x7d]
0x143be5:	pop    rdi
0x143be4:	pop    r15
0x143be3:	pop    rsi; 	pop    r15
0x143be2:	pop    r14; 	pop    r15
0x143d28:	pop    rbp
0x143d27:	pop    rbx; 	pop    rbp
0x143d26:	or     BYTE PTR [rbx+0x5d],bl
0x144110:	and    BYTE PTR [rax-0x7d],cl
0x14410f:	rex.XB and BYTE PTR [r8-0x7d],cl
0x14416d:	pop    rdi
0x14416c:	pop    r15
0x14416b:	pop    rsi; 	pop    r15
0x14416a:	pop    r14; 	pop    r15
0x144dc9:	pop    rbp
0x144dc8:	pop    r13
0x144dc7:	pop    rsp; 	pop    r13
0x144dc6:	pop    r12; 	pop    r13
0x144eff:	add    BYTE PTR [rax-0x7d],cl
0x144f51:	pop    rdi
0x144f50:	pop    r15
0x144f4f:	pop    rsi; 	pop    r15
0x144f4e:	pop    r14; 	pop    r15
0x145417:	add    al,ch
0x145415:	sbb    al,BYTE PTR [rdi]; 	add    al,ch
0x1454f4:	pop    rdi
0x1454f3:	pop    r15
0x1454f2:	pop    rsi; 	pop    r15
0x1454f1:	pop    r14; 	pop    r15
0x1457a1:	add    esp,0x8
0x1457a0:	add    rsp,0x8
0x145805:	pop    rdi
0x145804:	pop    r15
0x145803:	pop    rsi; 	pop    r15
0x145802:	pop    r14; 	pop    r15
0x145abb:	and    BYTE PTR [rax-0x77],cl
0x145ac6:	dec    DWORD PTR [rax+0x39]
0x145ac5:	in     eax,dx; 	dec    DWORD PTR [rax+0x39]
0x145ade:	dec    DWORD PTR [rax+0x39]
0x145add:	in     eax,dx; 	dec    DWORD PTR [rax+0x39]
0x145afa:	dec    DWORD PTR [rax+0x39]
0x145af9:	in     eax,dx; 	dec    DWORD PTR [rax+0x39]
0x145b16:	dec    DWORD PTR [rax+0x39]
0x145b15:	in     eax,dx; 	dec    DWORD PTR [rax+0x39]
0x145b3f:	pop    rdi
0x145b3e:	pop    r15
0x145b3d:	pop    rsi; 	pop    r15
0x145b3c:	pop    r14; 	pop    r15
0x145b75:	pop    rdi
0x145b74:	pop    r15
0x145b73:	pop    rsi; 	pop    r15
0x145b72:	pop    r14; 	pop    r15
0x145bcd:	add    dh,bl
0x145c04:	sbb    BYTE PTR [rax-0x7d],cl
0x145c13:	pop    rbp
0x145c12:	pop    rbx; 	pop    rbp
0x145c11:	or     BYTE PTR [rbx+0x5d],bl
0x145c99:	mov    eax,DWORD PTR [rax]
0x145c98:	mov    rax,QWORD PTR [rax]
0x145c97:	mov    rax,QWORD PTR fs:[rax]
0x145cae:	mov    bh,0xc0
0x145cad:	movzx  eax,ax
0x145cac:	or     BYTE PTR [rdi],cl; 	mov    bh,0xc0
0x145d5e:	pop    rbp
0x145d5d:	pop    rbx; 	pop    rbp
0x145d5c:	or     BYTE PTR [rbx+0x5d],bl
0x145e9d:	fimul  DWORD PTR [rax-0x7d]
0x145f00:	pop    rsi
0x145eff:	pop    r14
0x145efe:	pop    rbp; 	pop    r14
0x145efd:	pop    r13; 	pop    r14
0x145f85:	pop    rsi
0x145f84:	pop    r14
0x145f83:	pop    rbp; 	pop    r14
0x145f82:	pop    r13; 	pop    r14
0x146120:	pop    rsi
0x14611f:	pop    r14
0x14611e:	pop    rbp; 	pop    r14
0x14611d:	pop    r13; 	pop    r14
0x1461a5:	pop    rsi
0x1461a4:	pop    r14
0x1461a3:	pop    rbp; 	pop    r14
0x1461a2:	pop    r13; 	pop    r14
0x1463b1:	pop    rbp
0x1463b0:	pop    rbx; 	pop    rbp
0x1463af:	fcomp  DWORD PTR [rbx+0x5d]
0x1463ae:	mov    eax,ebx; 	pop    rbx; 	pop    rbp
0x146422:	pop    rsp
0x146421:	pop    r12
0x146420:	pop    rbp; 	pop    r12
0x14641f:	pop    rbx; 	pop    rbp; 	pop    r12
0x146427:	add    bl,dh
0x146426:	add    bl,sil
0x1464ce:	pop    rsi
0x1464cd:	pop    r14
0x1464cc:	pop    rbp; 	pop    r14
0x1464cb:	pop    r13; 	pop    r14
0x146673:	pop    rbp
0x146672:	pop    rbx; 	pop    rbp
0x146671:	add    BYTE PTR [rbx+0x5d],bl
0x146670:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x146922:	pop    rdi
0x146921:	pop    r15
0x146920:	pop    rsi; 	pop    r15
0x14691f:	pop    r14; 	pop    r15
0x146fa7:	add    esp,0x8
0x146fa6:	add    rsp,0x8
0x146fbf:	add    bl,dh
0x14701d:	add    DWORD PTR [rax-0x7d],ecx
0x147037:	add    DWORD PTR [rax-0x7d],ecx
0x1470f3:	sbb    BYTE PTR [rax+0x39],cl
0x147352:	pop    rdi
0x147351:	pop    r15
0x147350:	pop    rsi; 	pop    r15
0x14734f:	pop    r14; 	pop    r15
0x147430:	sbb    BYTE PTR [rax-0x77],cl
0x14742f:	push   rax; 	sbb    BYTE PTR [rax-0x77],cl
0x1475af:	dec    DWORD PTR [rax-0x7d]
0x14787e:	pop    rdi
0x14787d:	pop    r15
0x14787c:	pop    rsi; 	pop    r15
0x14787b:	pop    r14; 	pop    r15
0x1479b3:	pop    rdi
0x1479b2:	pop    r15
0x1479b1:	pop    rsi; 	pop    r15
0x1479b0:	pop    r14; 	pop    r15
0x147e6b:	pop    rdi
0x147e6a:	pop    r15
0x147e69:	pop    rsi; 	pop    r15
0x147e68:	pop    r14; 	pop    r15
0x1480cb:	add    al,0xf3
0x14818d:	pop    rbp
0x14818c:	pop    r13
0x14818b:	pop    rsp; 	pop    r13
0x14818a:	pop    r12; 	pop    r13
0x1482c5:	pop    rsp
0x1482c4:	pop    r12
0x1482c3:	pop    rbp; 	pop    r12
0x1482c2:	pop    rbx; 	pop    rbp; 	pop    r12
0x148300:	xor    eax,eax
0x14848e:	add    DWORD PTR [rax-0x7d],ecx
0x14848d:	rex.XB add DWORD PTR [r8-0x7d],ecx
0x14861f:	add    BYTE PTR [rax-0x7d],cl
0x148641:	add    BYTE PTR [rax-0x7d],cl
0x1486ee:	pop    rdi
0x1486ed:	pop    r15
0x1486ec:	pop    rsi; 	pop    r15
0x1486eb:	pop    r14; 	pop    r15
0x1487b9:	pop    rbp
0x1487b8:	pop    rdi; 	pop    rbp
0x1487b7:	pop    r15; 	pop    rbp
0x1487b6:	pop    rsi; 	pop    r15; 	pop    rbp
0x148ad3:	pop    rdi
0x148ad2:	pop    r15
0x148ad1:	pop    rsi; 	pop    r15
0x148ad0:	pop    r14; 	pop    r15
0x148ea6:	pop    rdi
0x148ea5:	pop    r15
0x148ea4:	pop    rsi; 	pop    r15
0x148ea3:	pop    r14; 	pop    r15
0x148fe7:	add    BYTE PTR [rax-0x77],cl
0x14905d:	pop    rbp
0x14905c:	pop    rdi; 	pop    rbp
0x14905b:	pop    r15; 	pop    rbp
0x14905a:	pop    rsi; 	pop    r15; 	pop    rbp
0x149197:	mov    al,0xe8
0x149196:	rex.WRB mov r8b,0xe8
0x14930a:	pop    rbp
0x149309:	pop    rdi; 	pop    rbp
0x149308:	pop    r15; 	pop    rbp
0x149307:	pop    rsi; 	pop    r15; 	pop    rbp
0x14972a:	pop    rbp
0x149729:	pop    rdi; 	pop    rbp
0x149728:	pop    r15; 	pop    rbp
0x149727:	pop    rsi; 	pop    r15; 	pop    rbp
0x1498fc:	add    BYTE PTR [rax-0x77],cl
0x149aa7:	pop    rbp
0x149aa6:	pop    rdi; 	pop    rbp
0x149aa5:	pop    r15; 	pop    rbp
0x149aa4:	pop    rsi; 	pop    r15; 	pop    rbp
0x149aaf:	add    BYTE PTR [rax-0x7d],cl
0x149d20:	pop    rdi
0x149d1f:	pop    r15
0x149d1e:	pop    rsi; 	pop    r15
0x149d1d:	pop    r14; 	pop    r15
0x149edc:	pop    rdi
0x149edb:	pop    r15
0x149eda:	pop    rsi; 	pop    r15
0x149ed9:	pop    r14; 	pop    r15
0x14a060:	pop    rdi
0x14a05f:	pop    r15
0x14a05e:	pop    rsi; 	pop    r15
0x14a05d:	pop    r14; 	pop    r15
0x14a32a:	pop    rdi
0x14a329:	pop    r15
0x14a328:	pop    rsi; 	pop    r15
0x14a327:	pop    r14; 	pop    r15
0x14a789:	pop    rdi
0x14a788:	pop    r15
0x14a787:	pop    rsi; 	pop    r15
0x14a786:	pop    r14; 	pop    r15
0x14a8a7:	fsubrp st(0),st
0x14ad37:	pop    rdi
0x14ad36:	pop    r15
0x14ad35:	pop    rsi; 	pop    r15
0x14ad34:	pop    r14; 	pop    r15
0x14ae07:	pop    rdi
0x14ae06:	pop    r15
0x14ae05:	pop    rsi; 	pop    r15
0x14ae04:	pop    r14; 	pop    r15
0x14ae7b:	pop    rdi
0x14ae7a:	pop    r15
0x14ae79:	pop    rsi; 	pop    r15
0x14ae78:	pop    r14; 	pop    r15
0x14b10c:	add    esp,0x8
0x14b10b:	add    rsp,0x8
0x14b113:	add    BYTE PTR [rax],al
0x14b111:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x14b147:	add    BYTE PTR [rax-0x7d],cl
0x14b146:	add    BYTE PTR [rax-0x7d],cl
0x14b168:	pop    rbp
0x14b167:	pop    rbx; 	pop    rbp
0x14b166:	or     BYTE PTR [rbx+0x5d],bl
0x14b17a:	pop    rbp
0x14b179:	pop    rbx; 	pop    rbp
0x14b178:	add    BYTE PTR [rbx+0x5d],bl
0x14b177:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x14b17f:	add    bl,dh
0x14b17e:	add    bl,sil
0x14b210:	pop    rbp
0x14b20f:	pop    r13
0x14b20e:	pop    rsp; 	pop    r13
0x14b20d:	pop    r12; 	pop    r13
0x14b292:	pop    rbp
0x14b291:	pop    r13
0x14b290:	pop    rsp; 	pop    r13
0x14b28f:	pop    r12; 	pop    r13
0x14b312:	pop    rbp
0x14b311:	pop    r13
0x14b310:	pop    rsp; 	pop    r13
0x14b30f:	pop    r12; 	pop    r13
0x14b397:	pop    rbp
0x14b396:	pop    r13
0x14b395:	pop    rsp; 	pop    r13
0x14b394:	pop    r12; 	pop    r13
0x14b417:	pop    rbp
0x14b416:	pop    r13
0x14b415:	pop    rsp; 	pop    r13
0x14b414:	pop    r12; 	pop    r13
0x14b497:	pop    rbp
0x14b496:	pop    r13
0x14b495:	pop    rsp; 	pop    r13
0x14b494:	pop    r12; 	pop    r13
0x14b517:	pop    rbp
0x14b516:	pop    r13
0x14b515:	pop    rsp; 	pop    r13
0x14b514:	pop    r12; 	pop    r13
0x14b592:	pop    rbp
0x14b591:	pop    r13
0x14b590:	pop    rsp; 	pop    r13
0x14b58f:	pop    r12; 	pop    r13
0x14b61c:	pop    rbp
0x14b61b:	pop    r13
0x14b61a:	pop    rsp; 	pop    r13
0x14b619:	pop    r12; 	pop    r13
0x14b692:	pop    rbp
0x14b691:	pop    r13
0x14b690:	pop    rsp; 	pop    r13
0x14b68f:	pop    r12; 	pop    r13
0x14b712:	pop    rbp
0x14b711:	pop    r13
0x14b710:	pop    rsp; 	pop    r13
0x14b70f:	pop    r12; 	pop    r13
0x14b79c:	pop    rbp
0x14b79b:	pop    r13
0x14b79a:	pop    rsp; 	pop    r13
0x14b799:	pop    r12; 	pop    r13
0x14b817:	pop    rbp
0x14b816:	pop    r13
0x14b815:	pop    rsp; 	pop    r13
0x14b814:	pop    r12; 	pop    r13
0x14b892:	pop    rbp
0x14b891:	pop    r13
0x14b890:	pop    rsp; 	pop    r13
0x14b88f:	pop    r12; 	pop    r13
0x14b8c7:	add    bl,dh
0x14b9e0:	xor    eax,eax
0x14b9ef:	add    bl,dh
0x14b9ed:	add    BYTE PTR [rax],al; 	add    bl,dh
0x14ba03:	add    BYTE PTR [rax],al
0x14ba01:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x14ba10:	xor    eax,eax
0x14ba0e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x14badd:	pop    rbx
0x14badc:	rex pop rbx
0x14bada:	add    esp,0x40; 	pop    rbx
0x14baef:	add    bl,dh
0x14baed:	add    BYTE PTR [rax],al; 	add    bl,dh
0x14bb62:	pop    rbx
0x14bb61:	rex pop rbx
0x14bb5f:	add    esp,0x40; 	pop    rbx
0x14bc3c:	pop    rbp
0x14bc3b:	pop    rbx; 	pop    rbp
0x14bc3a:	or     BYTE PTR [rbx+0x5d],bl
0x14bed4:	pop    rdi
0x14bed3:	pop    r15
0x14bed2:	pop    rsi; 	pop    r15
0x14bed1:	pop    r14; 	pop    r15
0x14c14f:	add    bl,dh
0x14c15f:	add    bl,dh
0x14c15d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x14c170:	xor    eax,eax
0x14c16e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x14c17f:	add    bl,dh
0x14c17d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x14c1da:	pop    rbp
0x14c1d9:	pop    rbx; 	pop    rbp
0x14c1d8:	add    BYTE PTR [rbx+0x5d],bl
0x14c1d7:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x14c3ac:	pop    rdi
0x14c3ab:	pop    r15
0x14c3aa:	pop    rsi; 	pop    r15
0x14c3a9:	pop    r14; 	pop    r15
0x14c527:	pop    rsi
0x14c526:	pop    r14
0x14c525:	pop    rbp; 	pop    r14
0x14c524:	pop    r13; 	pop    r14
0x14c670:	pop    rdi
0x14c66f:	pop    r15
0x14c66e:	pop    rsi; 	pop    r15
0x14c66d:	pop    r14; 	pop    r15
0x14c7d0:	pop    rbx
0x14c7ce:	add    BYTE PTR [rax],al; 	pop    rbx
0x14c7cd:	add    BYTE PTR [rax],r8b; 	pop    rbx
0x14c800:	add    esp,0x8
0x14c7ff:	add    rsp,0x8
0x14c873:	pop    rbp
0x14c872:	pop    r13
0x14c871:	pop    rsp; 	pop    r13
0x14c870:	pop    r12; 	pop    r13
0x14ca24:	pop    rdi
0x14ca23:	pop    r15
0x14ca22:	pop    rsi; 	pop    r15
0x14ca21:	pop    r14; 	pop    r15
0x14cbf8:	pop    rbp
0x14cbf7:	pop    r13
0x14cbf6:	pop    rsp; 	pop    r13
0x14cbf5:	pop    r12; 	pop    r13
0x14ccf0:	pop    rbp
0x14ccef:	pop    rbx; 	pop    rbp
0x14ccee:	sub    BYTE PTR [rbx+0x5d],bl
0x14cddc:	pop    rbp
0x14cddb:	pop    rbx; 	pop    rbp
0x14cdd9:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14ce85:	sbb    ecx,DWORD PTR [rax-0x7d]
0x14cec1:	pop    rbp
0x14cec0:	pop    r13
0x14cebf:	pop    rsp; 	pop    r13
0x14cebe:	pop    r12; 	pop    r13
0x14cf82:	pop    rbp
0x14cf81:	pop    rbx; 	pop    rbp
0x14cf80:	sbb    BYTE PTR [rbx+0x5d],bl
0x14d00c:	pop    rsi
0x14d00b:	pop    r14
0x14d00a:	pop    rbp; 	pop    r14
0x14d009:	pop    r13; 	pop    r14
0x14d210:	pop    rdi
0x14d20f:	pop    r15
0x14d20e:	pop    rsi; 	pop    r15
0x14d20d:	pop    r14; 	pop    r15
0x14d528:	pop    rdi
0x14d527:	pop    r15
0x14d526:	pop    rsi; 	pop    r15
0x14d525:	pop    r14; 	pop    r15
0x14d5fb:	dec    DWORD PTR [rax+0x39]
0x14d5fa:	std    ; 	dec    DWORD PTR [rax+0x39]
0x14d97f:	pop    rbp
0x14d97e:	pop    rbx; 	pop    rbp
0x14d97c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14d9cc:	pop    rbp
0x14d9cb:	pop    rbx; 	pop    rbp
0x14d9ca:	or     BYTE PTR [rbx+0x5d],bl
0x14da7c:	pop    rbp
0x14da7b:	pop    rbx; 	pop    rbp
0x14da79:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14dacc:	pop    rbp
0x14dacb:	pop    rbx; 	pop    rbp
0x14dac9:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14db25:	xor    eax,eax
0x14db23:	je     0x14db30; 	xor    eax,eax
0x14db4c:	pop    rbp
0x14db4b:	pop    rbx; 	pop    rbp
0x14db49:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14dbc1:	mov    DWORD PTR [rsi+0x8],eax
0x14dbcf:	mov    DWORD PTR [rsi+0x8],eax
0x14dbce:	mov    QWORD PTR [rsi+0x8],rax
0x14dbe3:	add    BYTE PTR [rax],al
0x14dbe1:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x14dbff:	mov    DWORD PTR [rsi+0x10],eax
0x14dbfe:	mov    QWORD PTR [rsi+0x10],rax
0x14dc14:	adc    DWORD PTR [rsi+0x8],eax
0x14dc13:	movups XMMWORD PTR [rsi+0x8],xmm0
0x14dc4c:	adc    DWORD PTR [rsi+0x8],eax
0x14dc4b:	movups XMMWORD PTR [rsi+0x8],xmm0
0x14dc54:	add    BYTE PTR [rax],al
0x14dc52:	or     eax,DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x14dc64:	add    BYTE PTR [rax],al
0x14dc62:	or     al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x14dc74:	add    BYTE PTR [rax],al
0x14dc72:	or     BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x14dc84:	add    BYTE PTR [rax],al
0x14dc82:	or     al,0x0; 	add    BYTE PTR [rax],al
0x14dc9f:	mov    DWORD PTR [rsi+0x10],eax
0x14dc9e:	mov    QWORD PTR [rsi+0x10],rax
0x14dd25:	pop    rsp
0x14dd24:	pop    r12
0x14dd23:	pop    rbp; 	pop    r12
0x14dd22:	pop    rbx; 	pop    rbp; 	pop    r12
0x14e060:	xor    eax,eax
0x14e05e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x14e0b3:	add    BYTE PTR [rax],al
0x14e0b1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x14e17a:	pop    rsi
0x14e179:	pop    r14
0x14e178:	pop    rbp; 	pop    r14
0x14e177:	pop    r13; 	pop    r14
0x14e3d3:	add    BYTE PTR [rax],al
0x14e3d1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x14e3e3:	add    BYTE PTR [rax],al
0x14e3e1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x14e3ef:	add    bl,dh
0x14e3ed:	add    BYTE PTR [rax],al; 	add    bl,dh
0x14e447:	pop    rbp
0x14e446:	pop    rbx; 	pop    rbp
0x14e444:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14e48f:	pop    rbp
0x14e48e:	pop    rbx; 	pop    rbp
0x14e48c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14e4fc:	pop    rsp
0x14e4fb:	pop    r12
0x14e4fa:	pop    rbp; 	pop    r12
0x14e4f9:	add    BYTE PTR [rbp+0x41],bl; 	pop    rsp
0x14e505:	pop    rsp
0x14e504:	pop    r12
0x14e503:	pop    rbp; 	pop    r12
0x14e502:	rcr    BYTE PTR [rbp+0x41],0x5c
0x14e562:	pop    rbp
0x14e561:	pop    rbx; 	pop    rbp
0x14e560:	or     BYTE PTR [rbx+0x5d],bl
0x14e5d1:	pop    rbx
0x14e5cf:	add    BYTE PTR [rax],al; 	pop    rbx
0x14e5f1:	pop    rbx
0x14e5ef:	xor    eax,eax; 	pop    rbx
0x14e5ee:	xchg   ebx,eax; 	xor    eax,eax; 	pop    rbx
0x14e77e:	pop    rsi
0x14e77d:	pop    r14
0x14e77c:	pop    rbp; 	pop    r14
0x14e77b:	pop    r13; 	pop    r14
0x14e947:	pop    rdi
0x14e946:	pop    r15
0x14e945:	pop    rsi; 	pop    r15
0x14e944:	pop    r14; 	pop    r15
0x14ea3e:	pop    rbx
0x14ea3b:	add    esp,0x10; 	pop    rbx
0x14eacb:	pop    rsp
0x14eaca:	pop    r12
0x14eac9:	pop    rbp; 	pop    r12
0x14eac8:	pop    rbx; 	pop    rbp; 	pop    r12
0x14eba0:	mov    DWORD PTR [rdx+0x68],ecx
0x14eb9f:	mov    QWORD PTR [rdx+0x68],rcx
0x14eba8:	xor    eax,eax
0x14ebc1:	jb     0x14ebe3
0x14ebc0:	mov    DWORD PTR [rdx+0x20],esi
0x14ebbf:	mov    QWORD PTR [rdx+0x20],rsi
0x14ec38:	pop    rbp
0x14ec37:	pop    rbx; 	pop    rbp
0x14ec36:	or     BYTE PTR [rbx+0x5d],bl
0x14ec4e:	add    eax,edx
0x14ec4d:	pop    rbp; 	add    eax,edx
0x14ec4c:	pop    rbx; 	pop    rbp; 	add    eax,edx
0x14ec8d:	pop    rsp
0x14ec8c:	pop    r12
0x14ec8b:	pop    rbp; 	pop    r12
0x14ec8a:	pop    rbx; 	pop    rbp; 	pop    r12
0x14ef07:	pop    rdi
0x14ef06:	pop    r15
0x14ef05:	pop    rsi; 	pop    r15
0x14ef04:	pop    r14; 	pop    r15
0x14ef9a:	pop    rsp
0x14ef99:	pop    r12
0x14ef98:	pop    rbp; 	pop    r12
0x14ef97:	pop    rbx; 	pop    rbp; 	pop    r12
0x14f041:	pop    rsi
0x14f040:	pop    r14
0x14f03f:	pop    rbp; 	pop    r14
0x14f03e:	pop    r13; 	pop    r14
0x14f079:	adc    BYTE PTR [rcx],bh
0x14f078:	push   rbp; 	adc    BYTE PTR [rcx],bh
0x14f087:	pop    rsi
0x14f086:	pop    r14
0x14f085:	pop    rbp; 	pop    r14
0x14f084:	pop    r13; 	pop    r14
0x14f0dd:	pop    rsp
0x14f0dc:	pop    r12
0x14f0db:	pop    rbp; 	pop    r12
0x14f0da:	pop    rbx; 	pop    rbp; 	pop    r12
0x14f297:	pop    rdi
0x14f296:	pop    r15
0x14f295:	pop    rsi; 	pop    r15
0x14f294:	pop    r14; 	pop    r15
0x14f527:	pop    rdi
0x14f526:	pop    r15
0x14f525:	pop    rsi; 	pop    r15
0x14f524:	pop    r14; 	pop    r15
0x14f67d:	movsxd ecx,DWORD PTR [rax-0x77]
0x14f67c:	std    ; 	movsxd ecx,DWORD PTR [rax-0x77]
0x14f740:	pop    rdi
0x14f73f:	pop    r15
0x14f73e:	pop    rsi; 	pop    r15
0x14f73d:	pop    r14; 	pop    r15
0x14f97f:	pop    rdi
0x14f97e:	pop    r15
0x14f97d:	pop    rsi; 	pop    r15
0x14f97c:	pop    r14; 	pop    r15
0x14fb3a:	pop    rdi
0x14fb39:	pop    r15
0x14fb38:	pop    rsi; 	pop    r15
0x14fb37:	pop    r14; 	pop    r15
0x14fb9e:	pop    rbp
0x14fb9d:	pop    rbx; 	pop    rbp
0x14fb9c:	rcr    BYTE PTR [rbx+0x5d],1
0x14fb9b:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x14fbdb:	pop    rbp
0x14fbda:	pop    rbx; 	pop    rbp
0x14fbd9:	rcr    BYTE PTR [rbx+0x5d],1
0x14fbd8:	mov    eax,edx; 	pop    rbx; 	pop    rbp
0x14fca7:	pop    rdi
0x14fca6:	pop    r15
0x14fca5:	pop    rsi; 	pop    r15
0x14fca4:	pop    r14; 	pop    r15
0x14fdea:	pop    rdi
0x14fde9:	pop    r15
0x14fde8:	pop    rsi; 	pop    r15
0x14fde7:	pop    r14; 	pop    r15
0x14fe8e:	pop    rbp
0x14fe8d:	pop    rbx; 	pop    rbp
0x14fe8b:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x14fec5:	pop    rbp
0x14fec4:	pop    rbx; 	pop    rbp
0x14fec2:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x14ff08:	pop    rbp
0x14ff07:	pop    rbx; 	pop    rbp
0x14ff06:	or     BYTE PTR [rbx+0x5d],bl
0x15007d:	pop    rbp
0x15007c:	pop    r13
0x15007b:	pop    rsp; 	pop    r13
0x15007a:	pop    r12; 	pop    r13
0x150180:	pop    rax
0x15017e:	add    esp,0x58
0x15017d:	add    rsp,0x58
0x1503dd:	add    BYTE PTR [rbp-0x77],al
0x150b7e:	pop    rdi
0x150b7d:	pop    r15
0x150b7c:	pop    rsi; 	pop    r15
0x150b7b:	pop    r14; 	pop    r15
0x150c42:	mov    BYTE PTR [rdi+0x7],al
0x150c63:	mov    dh,0xc0
0x150c62:	movzx  eax,al
0x150c61:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x150c88:	mov    dh,0xc0
0x150c87:	movzx  eax,al
0x150c86:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x150ca8:	mov    dh,0xc0
0x150ca7:	movzx  eax,al
0x150ca6:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x150ce3:	pop    rbp
0x150ce2:	pop    rbx; 	pop    rbp
0x150ce1:	or     BYTE PTR [rbx+0x5d],bl
0x150d11:	pop    rbp
0x150d10:	pop    rbx; 	pop    rbp
0x150d0e:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x150d41:	pop    rbp
0x150d40:	pop    rbx; 	pop    rbp
0x150d3e:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x150d75:	pop    rbp
0x150d74:	pop    rbx; 	pop    rbp
0x150d73:	or     BYTE PTR [rbx+0x5d],bl
0x150d99:	pop    rbp
0x150d98:	pop    rbx; 	pop    rbp
0x150d96:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x150dbc:	pop    rbp
0x150dbb:	pop    rbx; 	pop    rbp
0x150db9:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x150dff:	pop    rbp
0x150dfe:	pop    rbx; 	pop    rbp
0x150dfc:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x150e35:	pop    rbp
0x150e34:	pop    rbx; 	pop    rbp
0x150e33:	add    BYTE PTR [rbx+0x5d],bl
0x150e32:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x150e67:	pop    rbp
0x150e66:	pop    rbx; 	pop    rbp
0x150e65:	or     BYTE PTR [rbx+0x5d],bl
0x150ec1:	pop    rbp
0x150ec0:	pop    rbx; 	pop    rbp
0x150ebe:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x150efb:	pop    rbp
0x150efa:	pop    rbx; 	pop    rbp
0x150ef8:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x150f25:	pop    rbp
0x150f24:	pop    rbx; 	pop    rbp
0x150f23:	add    BYTE PTR [rbx+0x5d],bl
0x150f22:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x150f67:	pop    rbp
0x150f66:	pop    rbx; 	pop    rbp
0x150f65:	or     BYTE PTR [rbx+0x5d],bl
0x151044:	pop    rbp
0x151043:	pop    r13
0x151042:	pop    rsp; 	pop    r13
0x151041:	pop    r12; 	pop    r13
0x15117e:	pop    rdi
0x15117d:	pop    r15
0x15117c:	pop    rsi; 	pop    r15
0x15117b:	pop    r14; 	pop    r15
0x15163c:	pop    rdi
0x15163b:	pop    r15
0x15163a:	pop    rsi; 	pop    r15
0x151639:	pop    r14; 	pop    r15
0x151f13:	pop    rdi
0x151f12:	pop    r15
0x151f11:	pop    rsi; 	pop    r15
0x151f10:	pop    r14; 	pop    r15
0x152268:	add    esp,0x8
0x152267:	add    rsp,0x8
0x1523bb:	pop    rsi
0x1523ba:	pop    r14
0x1523b9:	pop    rbp; 	pop    r14
0x1523b8:	pop    r13; 	pop    r14
0x15255b:	pop    rsi
0x15255a:	pop    r14
0x152559:	pop    rbp; 	pop    r14
0x152558:	pop    r13; 	pop    r14
0x15266c:	add    esp,0x18
0x15266b:	add    rsp,0x18
0x152730:	add    esp,0x8
0x15272f:	add    rsp,0x8
0x152737:	add    bl,dh
0x152736:	add    bl,sil
0x15275f:	mov    cl,0x35
0x152818:	add    esp,0x48
0x152817:	add    rsp,0x48
0x152a21:	pop    rdi
0x152a20:	pop    r15
0x152a1f:	pop    rsi; 	pop    r15
0x152a1e:	pop    r14; 	pop    r15
0x152d61:	pop    rdi
0x152d60:	pop    r15
0x152d5f:	pop    rsi; 	pop    r15
0x152d5e:	pop    r14; 	pop    r15
0x152eb7:	mov    DWORD PTR [rsi+0x10],eax
0x152eb6:	mov    QWORD PTR [rsi+0x10],rax
0x152f7e:	add    BYTE PTR [rax],al
0x152f7c:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x152f92:	adc    DWORD PTR [rdi+0x8],eax
0x152f91:	movups XMMWORD PTR [rdi+0x8],xmm0
0x152fab:	adc    DWORD PTR [rdx],eax
0x152faa:	movups XMMWORD PTR [rdx],xmm0
0x152fa9:	add    BYTE PTR [rdi],cl; 	adc    DWORD PTR [rdx],eax
0x153004:	add    BYTE PTR [rax],al
0x153002:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x153017:	add    BYTE PTR [rax],al
0x153015:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15302a:	add    BYTE PTR [rax],al
0x153028:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15303a:	add    BYTE PTR [rax],al
0x153038:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x153050:	add    BYTE PTR [rax],al
0x15304e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x153069:	add    BYTE PTR [rax],al
0x153067:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x153080:	add    BYTE PTR [rax],al
0x15307e:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x153096:	add    BYTE PTR [rax],al
0x153094:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1530b0:	add    BYTE PTR [rax],al
0x1530ae:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1530b8:	xor    eax,eax
0x1530b6:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1532c1:	pop    rdi
0x1532c0:	pop    r15
0x1532bf:	pop    rsi; 	pop    r15
0x1532be:	pop    r14; 	pop    r15
0x153556:	pop    rbp
0x153555:	pop    rdi; 	pop    rbp
0x153554:	pop    r15; 	pop    rbp
0x153553:	pop    rsi; 	pop    r15; 	pop    rbp
0x15358f:	add    BYTE PTR [rcx],ch
0x1535d6:	pop    rbp
0x1535d5:	pop    r13
0x1535d4:	pop    rsp; 	pop    r13
0x1535d3:	pop    r12; 	pop    r13
0x1535ec:	pop    rbp
0x1535eb:	pop    r13
0x1535ea:	pop    rsp; 	pop    r13
0x1535e9:	pop    r12; 	pop    r13
0x153761:	pop    rsi
0x153760:	pop    r14
0x15375f:	pop    rbp; 	pop    r14
0x15375e:	pop    r13; 	pop    r14
0x1539b9:	pop    rdi
0x1539b8:	pop    r15
0x1539b7:	pop    rsi; 	pop    r15
0x1539b6:	pop    r14; 	pop    r15
0x153ac3:	add    BYTE PTR [rax],al
0x153ac1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x153cc5:	pop    rdi
0x153cc4:	pop    r15
0x153cc3:	pop    rsi; 	pop    r15
0x153cc2:	pop    r14; 	pop    r15
0x153d6a:	pop    rbp
0x153d69:	pop    rbx; 	pop    rbp
0x153d67:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x153d99:	add    eax,0x1
0x153dd6:	pop    rsp
0x153dd5:	pop    r12
0x153dd4:	pop    rbp; 	pop    r12
0x153dd3:	pop    rbx; 	pop    rbp; 	pop    r12
0x153e09:	pop    rsp
0x153e08:	pop    r12
0x153e07:	pop    rbp; 	pop    r12
0x153e06:	pop    rbx; 	pop    rbp; 	pop    r12
0x153f69:	pop    rdi
0x153f68:	pop    r15
0x153f67:	pop    rsi; 	pop    r15
0x153f66:	pop    r14; 	pop    r15
0x153fc6:	ror    BYTE PTR [rdi],0x84
0x1540bb:	pop    rsi
0x1540ba:	pop    r14
0x1540b9:	pop    rbp; 	pop    r14
0x1540b8:	pop    r13; 	pop    r14
0x1540ca:	add    al,0x75
0x1541f7:	pop    rdi
0x1541f6:	pop    r15
0x1541f5:	pop    rsi; 	pop    r15
0x1541f4:	pop    r14; 	pop    r15
0x15435f:	add    BYTE PTR [rax-0x77],cl
0x1543dc:	pop    rsi
0x1543db:	pop    r14
0x1543da:	pop    rbp; 	pop    r14
0x1543d9:	pop    r13; 	pop    r14
0x1544a7:	or     BYTE PTR [rax+0x63],cl
0x15451e:	pop    rbp
0x15451d:	pop    rbx; 	pop    rbp
0x15451c:	sub    BYTE PTR [rbx+0x5d],bl
0x1545b1:	pop    rbx
0x1545ae:	add    esp,0x20; 	pop    rbx
0x1546ea:	pop    rsp
0x1546e9:	pop    r12
0x1546e8:	pop    rbp; 	pop    r12
0x1546e7:	pop    rbx; 	pop    rbp; 	pop    r12
0x1548f5:	pop    rsp
0x1548f4:	pop    r12
0x1548f3:	pop    rbp; 	pop    r12
0x1548f2:	pop    rbx; 	pop    rbp; 	pop    r12
0x1549cf:	adc    ecx,DWORD PTR [rax-0x7d]
0x154a90:	pop    rdi
0x154a8f:	pop    r15
0x154a8e:	pop    rsi; 	pop    r15
0x154a8d:	pop    r14; 	pop    r15
0x154ccf:	pop    rdi
0x154cce:	pop    r15
0x154ccd:	pop    rsi; 	pop    r15
0x154ccc:	pop    r14; 	pop    r15
0x154d6a:	xchg   edx,eax
0x154d68:	sub    al,ch; 	xchg   edx,eax
0x154dae:	scas   al,BYTE PTR es:[rdi]
0x154dac:	imul   al; 	scas   al,BYTE PTR es:[rdi]
0x154dc3:	cdq    
0x154e4f:	add    bl,dh
0x154e4d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x154f9b:	pop    rdi
0x154f9a:	pop    r15
0x154f99:	pop    rsi; 	pop    r15
0x154f98:	pop    r14; 	pop    r15
0x1550d1:	pop    rbp
0x1550d0:	pop    r13
0x1550cf:	pop    rsp; 	pop    r13
0x1550ce:	pop    r12; 	pop    r13
0x155242:	add    BYTE PTR [rax-0x77],cl
0x1553d9:	pop    rdi
0x1553d8:	pop    r15
0x1553d7:	pop    rsi; 	pop    r15
0x1553d6:	pop    r14; 	pop    r15
0x155571:	pop    rbp
0x155570:	pop    rdi; 	pop    rbp
0x15556f:	pop    r15; 	pop    rbp
0x15556e:	pop    rsi; 	pop    r15; 	pop    rbp
0x1556cc:	pop    rbp
0x1556cb:	pop    rdi; 	pop    rbp
0x1556ca:	pop    r15; 	pop    rbp
0x1556c9:	pop    rsi; 	pop    r15; 	pop    rbp
0x155942:	pop    rbp
0x155941:	pop    r13
0x155940:	pop    rsp; 	pop    r13
0x15593f:	pop    r12; 	pop    r13
0x155d76:	pop    rbp
0x155d75:	pop    r13
0x155d74:	pop    rsp; 	pop    r13
0x155d73:	pop    r12; 	pop    r13
0x155e51:	mov    DWORD PTR [rsi+0x10],eax
0x155e50:	mov    QWORD PTR [rsi+0x10],rax
0x155e7f:	add    bl,dh
0x155e7d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x155f0b:	add    BYTE PTR [rax],al
0x155f09:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155f21:	adc    DWORD PTR [rdi+0x8],eax
0x155f20:	movups XMMWORD PTR [rdi+0x8],xmm0
0x155f33:	adc    DWORD PTR [rdx],eax
0x155f32:	movups XMMWORD PTR [rdx],xmm0
0x155f31:	add    BYTE PTR [rdi],cl; 	adc    DWORD PTR [rdx],eax
0x155f4b:	adc    DWORD PTR [rdx],eax
0x155f4a:	movups XMMWORD PTR [rdx],xmm0
0x155f49:	add    BYTE PTR [rdi],cl; 	adc    DWORD PTR [rdx],eax
0x155f57:	add    BYTE PTR [rax],al
0x155f55:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155f6a:	add    BYTE PTR [rax],al
0x155f68:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155f7a:	add    BYTE PTR [rax],al
0x155f78:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155f8d:	add    BYTE PTR [rax],al
0x155f8b:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155f9e:	add    BYTE PTR [rax],al
0x155f9c:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155fb5:	add    BYTE PTR [rax],al
0x155fb3:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155fcb:	add    BYTE PTR [rax],al
0x155fc9:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155fdd:	add    BYTE PTR [rax],al
0x155fdb:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x155fe0:	xor    eax,eax
0x155fdf:	ret    ; 	xor    eax,eax
0x155fde:	add    bl,al; 	xor    eax,eax
0x1561ce:	pop    rdi
0x1561cd:	pop    r15
0x1561cc:	pop    rsi; 	pop    r15
0x1561cb:	pop    r14; 	pop    r15
0x15634f:	add    BYTE PTR [rcx],ch
0x156394:	pop    rbp
0x156393:	pop    r13
0x156392:	pop    rsp; 	pop    r13
0x156391:	pop    r12; 	pop    r13
0x1563ae:	pop    rbp
0x1563ad:	pop    r13
0x1563ac:	pop    rsp; 	pop    r13
0x1563ab:	pop    r12; 	pop    r13
0x156455:	pop    rsi
0x156454:	pop    r14
0x156453:	pop    rbp; 	pop    r14
0x156452:	pop    r13; 	pop    r14
0x156515:	add    BYTE PTR [rax-0x77],cl
0x15663f:	pop    rdi
0x15663e:	pop    r15
0x15663d:	pop    rsi; 	pop    r15
0x15663c:	pop    r14; 	pop    r15
0x156781:	mov    DWORD PTR [rsi+0x10],eax
0x156780:	mov    QWORD PTR [rsi+0x10],rax
0x1567af:	add    bl,dh
0x1567ad:	add    BYTE PTR [rax],al; 	add    bl,dh
0x1567f2:	add    BYTE PTR [rax],al
0x1567f0:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x156802:	adc    DWORD PTR [rdi+0x30],eax
0x156801:	movups XMMWORD PTR [rdi+0x30],xmm0
0x15681b:	adc    DWORD PTR [rdx],eax
0x15681a:	movups XMMWORD PTR [rdx],xmm0
0x156819:	add    BYTE PTR [rdi],cl; 	adc    DWORD PTR [rdx],eax
0x15682b:	adc    DWORD PTR [rdx],eax
0x15682a:	movups XMMWORD PTR [rdx],xmm0
0x156829:	add    BYTE PTR [rdi],cl; 	adc    DWORD PTR [rdx],eax
0x15683a:	adc    DWORD PTR [rdi+0x20],eax
0x156839:	movups XMMWORD PTR [rdi+0x20],xmm0
0x15684b:	adc    DWORD PTR [rdx],eax
0x15684a:	movups XMMWORD PTR [rdx],xmm0
0x156849:	add    BYTE PTR [rdi],cl; 	adc    DWORD PTR [rdx],eax
0x156857:	add    BYTE PTR [rax],al
0x156855:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15686a:	add    BYTE PTR [rax],al
0x156868:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15687a:	add    BYTE PTR [rax],al
0x156878:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x156893:	add    BYTE PTR [rax],al
0x156891:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1568b4:	add    BYTE PTR [rax],al
0x1568b2:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1568d4:	add    BYTE PTR [rax],al
0x1568d2:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x1568f2:	add    BYTE PTR [rax],al
0x1568f0:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15690c:	add    BYTE PTR [rax],al
0x15690a:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x156910:	xor    eax,eax
0x15690f:	nop; 	xor    eax,eax
0x15690e:	ret    ; 	nop; 	xor    eax,eax
0x156a30:	pop    rdi
0x156a2f:	pop    r15
0x156a2e:	pop    rsi; 	pop    r15
0x156a2d:	pop    r14; 	pop    r15
0x15743d:	pop    rdi
0x15743c:	pop    r15
0x15743b:	pop    rsi; 	pop    r15
0x15743a:	pop    r14; 	pop    r15
0x157457:	add    BYTE PTR [rax-0x77],cl
0x157667:	cmp    al,ch
0x157666:	rex.RXB cmp r8b,r13b
0x15771d:	pop    rdi
0x15771c:	pop    r15
0x15771b:	pop    rsi; 	pop    r15
0x15771a:	pop    r14; 	pop    r15
0x157737:	add    BYTE PTR [rax-0x77],cl
0x157847:	add    BYTE PTR [rax-0x77],cl
0x1579c6:	pop    rdi
0x1579c5:	pop    r15
0x1579c4:	pop    rsi; 	pop    r15
0x1579c3:	pop    r14; 	pop    r15
0x157b59:	pop    rbx
0x157b56:	add    esp,0x10; 	pop    rbx
0x157cac:	pop    rbp
0x157cab:	pop    rbx; 	pop    rbp
0x157caa:	add    BYTE PTR [rbx+0x5d],bl
0x157ca9:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x157ec5:	pop    rbx
0x157ec2:	add    esp,0x10; 	pop    rbx
0x157ff5:	pop    rbx
0x157ff2:	sub    esp,0xffffff80; 	pop    rbx
0x15811b:	pop    rbx
0x158118:	add    esp,0x30; 	pop    rbx
0x15824b:	pop    rbx
0x158248:	add    esp,0x30; 	pop    rbx
0x15838c:	pop    rbp
0x15838b:	pop    rbx; 	pop    rbp
0x15838a:	rex.W pop rbx; 	pop    rbp
0x1584fc:	pop    rbp
0x1584fb:	pop    rbx; 	pop    rbp
0x1584fa:	rex.W pop rbx; 	pop    rbp
0x158626:	pop    rbp
0x158625:	pop    rbx; 	pop    rbp
0x158624:	cmp    BYTE PTR [rbx+0x5d],bl
0x158738:	pop    rbx
0x158735:	add    esp,0x10; 	pop    rbx
0x15885f:	pop    rbp
0x15885e:	pop    rbx; 	pop    rbp
0x15885d:	sub    BYTE PTR [rbx+0x5d],bl
0x1588c0:	pop    rbx
0x1588bf:	nop; 	pop    rbx
0x15897e:	pop    rsp
0x15897d:	pop    r12
0x15897c:	pop    rbp; 	pop    r12
0x15897b:	pop    rbx; 	pop    rbp; 	pop    r12
0x158b69:	pop    rsi
0x158b68:	pop    r14
0x158b67:	pop    rbp; 	pop    r14
0x158b66:	pop    r13; 	pop    r14
0x158b96:	add    cl,ch
0x158b94:	add    BYTE PTR [rax],al; 	add    cl,ch
0x158d2b:	pop    rbp
0x158d2a:	pop    r13
0x158d29:	pop    rsp; 	pop    r13
0x158d28:	pop    r12; 	pop    r13
0x158f9e:	pop    rdi
0x158f9d:	pop    r15
0x158f9c:	pop    rsi; 	pop    r15
0x158f9b:	pop    r14; 	pop    r15
0x15904f:	pop    rsp
0x15904e:	pop    r12
0x15904d:	pop    rbp; 	pop    r12
0x15904c:	rcr    BYTE PTR [rbp+0x41],0x5c
0x159073:	pop    rsp
0x159072:	pop    r12
0x159071:	pop    rbp; 	pop    r12
0x159070:	pop    rbx; 	pop    rbp; 	pop    r12
0x1590d7:	fucomip st,st(0)
0x1590f8:	pop    rbp
0x1590f7:	pop    rbx; 	pop    rbp
0x1590f6:	sub    BYTE PTR [rbx+0x5d],bl
0x15926d:	pop    rdi
0x15926c:	pop    r15
0x15926b:	pop    rsi; 	pop    r15
0x15926a:	pop    r14; 	pop    r15
0x1594bf:	pop    rsi
0x1594be:	pop    r14
0x1594bd:	pop    rbp; 	pop    r14
0x1594bc:	pop    r13; 	pop    r14
0x1595f0:	mov    DWORD PTR [rax],edx
0x1595ef:	mov    QWORD PTR [rax],rdx
0x1595ee:	mov    QWORD PTR fs:[rax],rdx
0x159611:	pop    rbx
0x15960f:	je     0x159618; 	pop    rbx
0x159667:	pop    rbx
0x159665:	mov    DWORD PTR [rbx],eax; 	pop    rbx
0x159664:	mov    QWORD PTR [rbx],rax; 	pop    rbx
0x15968f:	pop    rbx
0x15968d:	mov    DWORD PTR [rbx],eax; 	pop    rbx
0x15968c:	mov    QWORD PTR [rbx],rax; 	pop    rbx
0x1596bd:	pop    rbx
0x1596bb:	je     0x1596c0; 	pop    rbx
0x1596c7:	pop    rbx
0x1596c5:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x15971f:	pop    rbx
0x15971d:	mov    DWORD PTR [rbx],eax; 	pop    rbx
0x15971c:	mov    QWORD PTR [rbx],rax; 	pop    rbx
0x15974e:	pop    rbx
0x15974c:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x159771:	pop    rbx
0x15976e:	sub    eax,0xffffff80; 	pop    rbx
0x1597d7:	pop    rbx
0x1597d5:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x159806:	pop    rbx
0x159804:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x159833:	pop    rbx
0x159831:	add    BYTE PTR [rax],al; 	pop    rbx
0x159897:	pop    rbx
0x159895:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x1598c6:	pop    rbx
0x1598c4:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x1598f3:	pop    rbx
0x1598f1:	add    BYTE PTR [rax],al; 	pop    rbx
0x159957:	pop    rbx
0x159955:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x159986:	pop    rbx
0x159984:	sub    DWORD PTR [rax],eax; 	pop    rbx
0x1599ab:	add    BYTE PTR [rax-0x77],cl
0x1599d7:	xor    al,ch
0x159a07:	shr    al,1
0x159a7d:	pop    rbp
0x159a7c:	pop    r13
0x159a7b:	pop    rsp; 	pop    r13
0x159a7a:	pop    r12; 	pop    r13
0x159abc:	pop    rbp
0x159abb:	pop    r13
0x159aba:	pop    rsp; 	pop    r13
0x159ab9:	pop    r12; 	pop    r13
0x159af9:	pop    rbp
0x159af8:	pop    r13
0x159af7:	pop    rsp; 	pop    r13
0x159af6:	pop    r12; 	pop    r13
0x159b69:	add    BYTE PTR [rax-0x7d],cl
0x159b68:	add    BYTE PTR gs:[rax-0x7d],cl
0x159b7c:	pop    rbp
0x159b7b:	pop    r13
0x159b7a:	pop    rsp; 	pop    r13
0x159b79:	pop    r12; 	pop    r13
0x159bed:	pop    rdi
0x159bec:	pop    r15
0x159beb:	pop    rsi; 	pop    r15
0x159bea:	pop    r14; 	pop    r15
0x159cbb:	pop    rsp
0x159cba:	pop    r12
0x159cb9:	pop    rbp; 	pop    r12
0x159cb8:	pop    rbx; 	pop    rbp; 	pop    r12
0x159d34:	add    esp,0x78
0x159d33:	add    rsp,0x78
0x159d9a:	add    esp,0x78
0x159d99:	add    rsp,0x78
0x159e0a:	add    esp,0x78
0x159e09:	add    rsp,0x78
0x159e7a:	add    esp,0x78
0x159e79:	add    rsp,0x78
0x159edb:	add    esp,0x78
0x159eda:	add    rsp,0x78
0x159f3f:	add    esp,0x78
0x159f3e:	add    rsp,0x78
0x159faa:	add    esp,0x78
0x159fa9:	add    rsp,0x78
0x15a024:	add    esp,0x78
0x15a023:	add    rsp,0x78
0x15a09c:	add    BYTE PTR [rax-0x7f],cl
0x15a222:	pop    rdi
0x15a221:	pop    r15
0x15a220:	pop    rsi; 	pop    r15
0x15a21f:	pop    r14; 	pop    r15
0x15a386:	pop    rdi
0x15a385:	pop    r15
0x15a384:	pop    rsi; 	pop    r15
0x15a383:	pop    r14; 	pop    r15
0x15a42c:	add    BYTE PTR [rax-0x7d],cl
0x15a42b:	push   rbp; 	add    BYTE PTR [rax-0x7d],cl
0x15a442:	pop    rdi
0x15a441:	pop    r15
0x15a440:	pop    rsi; 	pop    r15
0x15a43f:	pop    r14; 	pop    r15
0x15a457:	add    bl,dh
0x15a455:	add    BYTE PTR [rax],al; 	add    bl,dh
0x15a5c4:	pop    rdi
0x15a5c3:	pop    r15
0x15a5c2:	pop    rsi; 	pop    r15
0x15a5c1:	pop    r14; 	pop    r15
0x15a602:	add    esp,0x28
0x15a601:	add    rsp,0x28
0x15a6d9:	pop    rbp
0x15a6d8:	pop    r13
0x15a6d7:	pop    rsp; 	pop    r13
0x15a6d6:	pop    r12; 	pop    r13
0x15a6e3:	add    BYTE PTR [rax],al
0x15a6e1:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x15a8b5:	pop    rdi
0x15a8b4:	pop    r15
0x15a8b3:	pop    rsi; 	pop    r15
0x15a8b2:	pop    r14; 	pop    r15
0x15a95a:	pop    rbp
0x15a959:	pop    rbx; 	pop    rbp
0x15a957:	mov    eax,ebp; 	pop    rbx; 	pop    rbp
0x15a989:	add    eax,0x1
0x15a9c6:	pop    rsp
0x15a9c5:	pop    r12
0x15a9c4:	pop    rbp; 	pop    r12
0x15a9c3:	pop    rbx; 	pop    rbp; 	pop    r12
0x15a9e0:	pop    rsp
0x15a9df:	pop    r12
0x15a9de:	pop    rbp; 	pop    r12
0x15a9dd:	pop    rbx; 	pop    rbp; 	pop    r12
0x15aa0f:	add    BYTE PTR [rcx],ch
0x15aa47:	pop    rbp
0x15aa46:	pop    r13
0x15aa45:	pop    rsp; 	pop    r13
0x15aa44:	pop    r12; 	pop    r13
0x15aa5c:	pop    rbp
0x15aa5b:	pop    r13
0x15aa5a:	pop    rsp; 	pop    r13
0x15aa59:	pop    r12; 	pop    r13
0x15aafb:	pop    rsi
0x15aafa:	pop    r14
0x15aaf9:	pop    rbp; 	pop    r14
0x15aaf8:	pop    r13; 	pop    r14
0x15ab0a:	add    al,0x75
0x15abef:	pop    rsi
0x15abee:	pop    r14
0x15abed:	pop    rbp; 	pop    r14
0x15abec:	pop    r13; 	pop    r14
0x15ad7f:	add    BYTE PTR [rax-0x77],cl
0x15adfc:	pop    rsi
0x15adfb:	pop    r14
0x15adfa:	pop    rbp; 	pop    r14
0x15adf9:	pop    r13; 	pop    r14
0x15ae53:	add    BYTE PTR [rax],al
0x15ae51:	add    al,BYTE PTR [rax]; 	add    BYTE PTR [rax],al
0x15b15d:	pop    rdi
0x15b15c:	pop    r15
0x15b15b:	pop    rsi; 	pop    r15
0x15b15a:	pop    r14; 	pop    r15
0x15b362:	pop    rdi
0x15b361:	pop    r15
0x15b360:	pop    rsi; 	pop    r15
0x15b35f:	pop    r14; 	pop    r15
0x15b377:	pop    rdi
0x15b376:	pop    r15
0x15b375:	pop    rsi; 	pop    r15
0x15b374:	pop    r14; 	pop    r15
0x15b77d:	pop    rdi
0x15b77c:	pop    r15
0x15b77b:	pop    rsi; 	pop    r15
0x15b77a:	pop    r14; 	pop    r15
0x15b920:	add    BYTE PTR [rax-0x77],cl
0x15bb62:	pop    rsi
0x15bb61:	pop    r14
0x15bb60:	pop    rbp; 	pop    r14
0x15bb5f:	pop    r13; 	pop    r14
0x15bcbe:	pop    rbp
0x15bcbd:	pop    r13
0x15bcbc:	pop    rsp; 	pop    r13
0x15bcbb:	pop    r12; 	pop    r13
0x15bd35:	pop    rbp
0x15bd34:	pop    r13
0x15bd33:	pop    rsp; 	pop    r13
0x15bd32:	pop    r12; 	pop    r13
0x15bfeb:	pop    rbp
0x15bfea:	pop    r13
0x15bfe9:	pop    rsp; 	pop    r13
0x15bfe8:	pop    r12; 	pop    r13
0x15c1eb:	pop    rbp
0x15c1ea:	pop    r13
0x15c1e9:	pop    rsp; 	pop    r13
0x15c1e8:	pop    r12; 	pop    r13
0x15c2ad:	pop    rdi
0x15c2ac:	pop    r15
0x15c2ab:	pop    rsi; 	pop    r15
0x15c2aa:	pop    r14; 	pop    r15
0x15c3b7:	add    DWORD PTR [rax+0x1],ecx
0x15c3df:	pop    rdi
0x15c3de:	pop    r15
0x15c3dd:	pop    rsi; 	pop    r15
0x15c3dc:	pop    r14; 	pop    r15
0x15c3fa:	pop    rdi
0x15c3f9:	pop    r15
0x15c3f8:	pop    rsi; 	pop    r15
0x15c3f7:	pop    r14; 	pop    r15
0x15c431:	pop    rbp
0x15c430:	pop    rbx; 	pop    rbp
0x15c42f:	or     BYTE PTR [rbx+0x5d],bl
0x15c47a:	pop    rbp
0x15c479:	pop    rbx; 	pop    rbp
0x15c477:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x15c4e4:	add    esp,0x48
0x15c4e3:	add    rsp,0x48
0x15c4f3:	add    BYTE PTR [rax],al
0x15c4f1:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15c53e:	pop    rbx
0x15c53b:	add    esp,0x10; 	pop    rbx
0x15c5be:	pop    rbx
0x15c5bb:	add    esp,0x10; 	pop    rbx
0x15c637:	mov    dh,0xc0
0x15c636:	movzx  eax,al
0x15c67e:	pop    rbx
0x15c67b:	add    esp,0x10; 	pop    rbx
0x15c732:	pop    rbp
0x15c731:	pop    rbx; 	pop    rbp
0x15c730:	sub    BYTE PTR [rbx+0x5d],bl
0x15c812:	pop    rbp
0x15c811:	pop    rbx; 	pop    rbp
0x15c810:	sub    BYTE PTR [rbx+0x5d],bl
0x15c8f2:	pop    rbp
0x15c8f1:	pop    rbx; 	pop    rbp
0x15c8f0:	sub    BYTE PTR [rbx+0x5d],bl
0x15c9d2:	pop    rbp
0x15c9d1:	pop    rbx; 	pop    rbp
0x15c9d0:	sub    BYTE PTR [rbx+0x5d],bl
0x15ca7e:	pop    rbx
0x15ca7b:	add    esp,0x10; 	pop    rbx
0x15cafe:	pop    rbx
0x15cafb:	add    esp,0x10; 	pop    rbx
0x15cb82:	pop    rbp
0x15cb81:	pop    rbx; 	pop    rbp
0x15cb80:	sbb    BYTE PTR [rbx+0x5d],bl
0x15cc11:	pop    rbp
0x15cc10:	pop    rbx; 	pop    rbp
0x15cc0f:	sbb    BYTE PTR [rbx+0x5d],bl
0x15cc9e:	pop    rbx
0x15cc9b:	add    esp,0x10; 	pop    rbx
0x15cd1e:	pop    rbx
0x15cd1b:	add    esp,0x10; 	pop    rbx
0x15cd95:	pop    rbp
0x15cd94:	pop    rbx; 	pop    rbp
0x15cd92:	mov    dh,0xc0; 	pop    rbx; 	pop    rbp
0x15cda3:	add    BYTE PTR [rax],al
0x15cda1:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15cdea:	pop    rbp
0x15cde9:	pop    rbx; 	pop    rbp
0x15cde8:	add    BYTE PTR [rbx+0x5d],bl
0x15cde7:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x15ce1f:	pop    rbp
0x15ce1e:	pop    rbx; 	pop    rbp
0x15ce1c:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x15ce8e:	pop    rsi
0x15ce8d:	pop    r14
0x15ce8c:	pop    rbp; 	pop    r14
0x15ce8b:	pop    r13; 	pop    r14
0x15cff1:	pop    rsp
0x15cff0:	pop    r12
0x15cfef:	pop    rbp; 	pop    r12
0x15cfee:	pop    rbx; 	pop    rbp; 	pop    r12
0x15d1c3:	pop    rbp
0x15d1c2:	pop    r13
0x15d1c1:	pop    rsp; 	pop    r13
0x15d1c0:	pop    r12; 	pop    r13
0x15d27f:	pop    rdi
0x15d27e:	pop    r15
0x15d27d:	pop    rsi; 	pop    r15
0x15d27c:	pop    r14; 	pop    r15
0x15d404:	pop    rsi
0x15d403:	pop    r14
0x15d402:	pop    rbp; 	pop    r14
0x15d401:	pop    r13; 	pop    r14
0x15d577:	pop    rbp
0x15d576:	pop    rbx; 	pop    rbp
0x15d575:	sbb    BYTE PTR [rbx+0x5d],bl
0x15d657:	pop    rbp
0x15d656:	pop    rbx; 	pop    rbp
0x15d655:	sbb    BYTE PTR [rbx+0x5d],bl
0x15d737:	pop    rbp
0x15d736:	pop    rbx; 	pop    rbp
0x15d735:	sbb    BYTE PTR [rbx+0x5d],bl
0x15d817:	pop    rbp
0x15d816:	pop    rbx; 	pop    rbp
0x15d815:	sbb    BYTE PTR [rbx+0x5d],bl
0x15d8c0:	mov    dh,0xc0
0x15d8bf:	movzx  eax,al
0x15d8f0:	mov    dh,0xc0
0x15d8ef:	movzx  eax,al
0x15d94e:	pop    rbx
0x15d94b:	add    esp,0x10; 	pop    rbx
0x15d9ce:	pop    rbx
0x15d9cb:	add    esp,0x10; 	pop    rbx
0x15da4e:	pop    rbx
0x15da4b:	add    esp,0x10; 	pop    rbx
0x15dace:	pop    rbx
0x15dacb:	add    esp,0x10; 	pop    rbx
0x15db0f:	add    bl,dh
0x15db25:	sub    eax,DWORD PTR [rdi+0x20]
0x15db24:	sub    rax,QWORD PTR [rdi+0x20]
0x15db69:	add    BYTE PTR [rax],al
0x15db67:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15db87:	ja     0x15dba1
0x15db86:	mov    DWORD PTR [rdi+0x18],esi
0x15db85:	mov    QWORD PTR [rdi+0x18],rsi
0x15db90:	xor    eax,eax
0x15db8e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x15dbc7:	add    bl,dh
0x15dbc5:	add    BYTE PTR [rax],al; 	add    bl,dh
0x15dbf6:	add    bl,dh
0x15dbf4:	add    BYTE PTR [rax],al; 	add    bl,dh
0x15dc28:	add    bl,dh
0x15dc26:	add    BYTE PTR [rax],al; 	add    bl,dh
0x15dc59:	add    bl,dh
0x15dc57:	add    BYTE PTR [rax],al; 	add    bl,dh
0x15dc67:	xor    eax,eax
0x15dc65:	jae    0x15dc70; 	xor    eax,eax
0x15dc9a:	pop    rbp
0x15dc99:	pop    rbx; 	pop    rbp
0x15dc98:	add    BYTE PTR [rbx+0x5d],bl
0x15dc97:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x15dca7:	xor    eax,eax
0x15dca5:	jae    0x15dcb0; 	xor    eax,eax
0x15dce0:	pop    rbp
0x15dcdf:	pop    rbx; 	pop    rbp
0x15dcde:	add    BYTE PTR [rbx+0x5d],bl
0x15dcdd:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x15dd05:	mov    DWORD PTR [rdi+0x8],eax
0x15dd04:	mov    QWORD PTR [rdi+0x8],rax
0x15dd42:	pop    rsp
0x15dd41:	pop    r12
0x15dd40:	pop    rbp; 	pop    r12
0x15dd3f:	pop    rbx; 	pop    rbp; 	pop    r12
0x15dd67:	pop    rsp
0x15dd66:	pop    r12
0x15dd65:	pop    rbp; 	pop    r12
0x15dd64:	pop    rbx; 	pop    rbp; 	pop    r12
0x15de66:	pop    rsi
0x15de65:	pop    r14
0x15de64:	pop    rbp; 	pop    r14
0x15de63:	pop    r13; 	pop    r14
0x15df27:	add    BYTE PTR [rax],al
0x15df25:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15df36:	add    BYTE PTR [rax],al
0x15df34:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15df40:	mov    eax,DWORD PTR [rdi+0x28]
0x15df50:	xor    eax,eax
0x15df4e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x15df60:	xor    eax,eax
0x15df5e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x15df9c:	pop    rbx
0x15df9a:	add    BYTE PTR [rax],al; 	pop    rbx
0x15dfc4:	ja     0x15dfee
0x15dfc3:	add    DWORD PTR [rdi+0x28],esi
0x15dffe:	pop    rsp
0x15dffd:	pop    r12
0x15dffc:	pop    rbp; 	pop    r12
0x15dffb:	pop    rbx; 	pop    rbp; 	pop    r12
0x15e000:	xor    eax,eax
0x15dfff:	ret    ; 	xor    eax,eax
0x15dffe:	pop    rsp; 	ret    ; 	xor    eax,eax
0x15e027:	add    BYTE PTR [rax],al
0x15e025:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15e15a:	pop    rbx
0x15e158:	add    BYTE PTR [rax],al; 	pop    rbx
0x15e170:	xor    eax,eax
0x15e16e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x15e1cf:	add    esp,0x18
0x15e1ce:	add    rsp,0x18
0x15e230:	add    esp,0x18
0x15e22f:	add    rsp,0x18
0x15e29b:	pop    rbx
0x15e298:	add    esp,0x10; 	pop    rbx
0x15e30e:	pop    rbx
0x15e30b:	add    esp,0x10; 	pop    rbx
0x15e347:	shr    eax,0x1f
0x15e35e:	add    esp,0x8
0x15e35d:	add    rsp,0x8
0x15e377:	add    BYTE PTR [rax],al
0x15e375:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15e3a7:	mov    dh,0xc0
0x15e3a6:	movzx  eax,al
0x15e3a5:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x15e3b7:	add    BYTE PTR [rax],al
0x15e3b5:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x15e3e7:	mov    dh,0xc0
0x15e3e6:	movzx  eax,al
0x15e3e5:	or     BYTE PTR [rdi],cl; 	mov    dh,0xc0
0x15e40d:	mov    DWORD PTR [rdi+0x8],eax
0x15e40c:	mov    QWORD PTR [rdi+0x8],rax
0x15e428:	cmp    BYTE PTR [rax-0x77],cl
0x15e443:	pop    rbx
0x15e441:	add    BYTE PTR [rax],al; 	pop    rbx
0x15e6d2:	pop    rdi
0x15e6d1:	pop    r15
0x15e6d0:	pop    rsi; 	pop    r15
0x15e6cf:	pop    r14; 	pop    r15
0x15e74b:	or     BYTE PTR [rax-0x7d],cl
0x15e7e9:	add    BYTE PTR [rax-0x77],cl
0x15e893:	pop    rdi
0x15e892:	pop    r15
0x15e891:	pop    rsi; 	pop    r15
0x15e890:	pop    r14; 	pop    r15
0x15e8e3:	add    BYTE PTR [rax-0x39],cl
0x15eba7:	pop    rsi
0x15eba6:	pop    r14
0x15eba5:	pop    rbp; 	pop    r14
0x15eba4:	pop    r13; 	pop    r14
0x15ec45:	pop    rsi
0x15ec44:	pop    r14
0x15ec43:	pop    rbp; 	pop    r14
0x15ec42:	pop    r13; 	pop    r14
0x15ece4:	add    BYTE PTR [rax-0x77],cl
0x15edc2:	pop    rdi
0x15edc1:	pop    r15
0x15edc0:	pop    rsi; 	pop    r15
0x15edbf:	pop    r14; 	pop    r15
0x15f395:	pop    rsi
0x15f394:	pop    r14
0x15f393:	pop    rbp; 	pop    r14
0x15f392:	pop    r13; 	pop    r14
0x15f425:	pop    rsi
0x15f424:	pop    r14
0x15f423:	pop    rbp; 	pop    r14
0x15f422:	pop    r13; 	pop    r14
0x15f4c4:	dec    DWORD PTR [rax-0x77]
0x15f5da:	pop    rbp
0x15f5d9:	pop    rdi; 	pop    rbp
0x15f5d8:	pop    r15; 	pop    rbp
0x15f5d7:	pop    rsi; 	pop    r15; 	pop    rbp
0x15f62c:	add    BYTE PTR [rax-0x39],cl
0x15feb4:	xchg   ebp,eax
0x15feb2:	and    BYTE PTR [rdi],cl; 	xchg   ebp,eax
0x15feeb:	pop    rdi
0x15feea:	pop    r15
0x15fee9:	pop    rsi; 	pop    r15
0x15fee8:	pop    r14; 	pop    r15
0x15ff13:	xchg   esp,eax
0x15ff11:	or     cl,BYTE PTR [rdi]; 	xchg   esp,eax
0x15ff47:	pop    rdi
0x15ff46:	pop    r15
0x15ff45:	pop    rsi; 	pop    r15
0x15ff44:	pop    r14; 	pop    r15
0x15ffaa:	xor    eax,eax
0x15ffa8:	je     0x15ffb0; 	xor    eax,eax
0x15fffe:	pop    rbp
0x15fffd:	pop    rbx; 	pop    rbp
0x15fffc:	or     BYTE PTR [rbx+0x5d],bl
0x1600c1:	add    BYTE PTR [rax-0x77],cl
0x160160:	pop    rdi
0x16015f:	pop    r15
0x16015e:	pop    rsi; 	pop    r15
0x16015d:	pop    r14; 	pop    r15
0x1601b5:	dec    DWORD PTR [rax-0x39]
0x1602da:	adc    cl,ch
0x16064a:	pop    rdi
0x160649:	pop    r15
0x160648:	pop    rsi; 	pop    r15
0x160647:	pop    r14; 	pop    r15
0x160b69:	pop    rbp
0x160b68:	pop    rdi; 	pop    rbp
0x160b67:	pop    r15; 	pop    rbp
0x160b66:	pop    rsi; 	pop    r15; 	pop    rbp
0x160bc7:	dec    DWORD PTR [rax-0x39]
0x160d8c:	cmp    BYTE PTR [rcx-0x77],cl
0x16126f:	pop    rdi
0x16126e:	pop    r15
0x16126d:	pop    rsi; 	pop    r15
0x16126c:	pop    r14; 	pop    r15
0x161308:	pop    rdi
0x161307:	pop    r15
0x161306:	pop    rsi; 	pop    r15
0x161305:	pop    r14; 	pop    r15
0x1613e9:	pop    rdi
0x1613e8:	pop    r15
0x1613e7:	pop    rsi; 	pop    r15
0x1613e6:	pop    r14; 	pop    r15
0x1617d3:	pop    rbp
0x1617d2:	pop    rdi; 	pop    rbp
0x1617d1:	pop    r15; 	pop    rbp
0x1617d0:	pop    rsi; 	pop    r15; 	pop    rbp
0x161a84:	pop    rbp
0x161a83:	pop    rdi; 	pop    rbp
0x161a82:	pop    r15; 	pop    rbp
0x161a81:	pop    rsi; 	pop    r15; 	pop    rbp
0x161c27:	pop    rdi
0x161c26:	pop    r15
0x161c25:	pop    rsi; 	pop    r15
0x161c24:	pop    r14; 	pop    r15
0x161e57:	pop    rbp
0x161e56:	pop    rdi; 	pop    rbp
0x161e55:	pop    r15; 	pop    rbp
0x161e54:	pop    rsi; 	pop    r15; 	pop    rbp
0x16214f:	pop    rbp
0x16214e:	pop    rdi; 	pop    rbp
0x16214d:	pop    r15; 	pop    rbp
0x16214c:	pop    rsi; 	pop    r15; 	pop    rbp
0x162658:	dec    DWORD PTR [rax-0x77]
0x162657:	clc    ; 	dec    DWORD PTR [rax-0x77]
0x162689:	pop    rsi
0x162688:	pop    r14
0x162687:	pop    rbp; 	pop    r14
0x162686:	pop    r13; 	pop    r14
0x162693:	adc    BYTE PTR [rax-0x39],cl
0x1626a5:	pop    rsi
0x1626a4:	pop    r14
0x1626a3:	pop    rbp; 	pop    r14
0x1626a2:	pop    r13; 	pop    r14
0x1626df:	add    BYTE PTR [rax-0x39],cl
0x1627b4:	sbb    DWORD PTR [rax-0x7d],ecx
0x16288f:	pop    rdi
0x16288e:	pop    r15
0x16288d:	pop    rsi; 	pop    r15
0x16288c:	pop    r14; 	pop    r15
0x162972:	pop    rdi
0x162971:	pop    r15
0x162970:	pop    rsi; 	pop    r15
0x16296f:	pop    r14; 	pop    r15
0x162a74:	sar    eax,0x1f
0x162ab0:	jae    0x162ab3
0x162aaf:	push   QWORD PTR [rbx+0x1]
0x162ac0:	or     eax,0xffffffff
0x162abf:	or     rax,0xffffffffffffffff
0x162b00:	jae    0x162b03
0x162aff:	push   QWORD PTR [rbx+0x1]
0x162b10:	or     eax,0xffffffff
0x162b0f:	or     rax,0xffffffffffffffff
0x162be4:	add    esp,0x8
0x162be3:	add    rsp,0x8
0x162ccf:	pop    rbp
0x162cce:	pop    r13
0x162ccd:	pop    rsp; 	pop    r13
0x162ccc:	pop    r12; 	pop    r13
0x162d73:	xor    eax,eax
0x162d72:	ds xor eax,eax
0x162d71:	mov    DWORD PTR [rsi],edi; 	xor    eax,eax
0x162dbf:	add    BYTE PTR [rax],al
0x162dc8:	add    esp,0x28
0x162dc7:	add    rsp,0x28
0x162eaa:	pop    rbx
0x162ea8:	add    BYTE PTR [rax],al; 	pop    rbx
0x162efa:	add    esp,0x8
0x162ef9:	add    rsp,0x8
0x162f7c:	pop    rsi
0x162f7b:	pop    r14
0x162f7a:	pop    rbp; 	pop    r14
0x162f79:	pop    r13; 	pop    r14
0x163297:	pop    rbp
0x163296:	pop    rdi; 	pop    rbp
0x163295:	pop    r15; 	pop    rbp
0x163294:	pop    rsi; 	pop    r15; 	pop    rbp
0x16337a:	pop    rbp
0x163379:	pop    rbx; 	pop    rbp
0x163378:	or     BYTE PTR [rbx+0x5d],bl
0x163421:	add    esp,0x18
0x163420:	add    rsp,0x18
0x16347d:	add    esp,0x8
0x16347c:	add    rsp,0x8
0x1634b7:	pop    rbp
0x1634b6:	pop    rbx; 	pop    rbp
0x1634b5:	call   FWORD PTR [rbx+0x5d]
0x163506:	pop    rsp
0x163505:	pop    r12
0x163504:	pop    rbp; 	pop    r12
0x163503:	pop    rbx; 	pop    rbp; 	pop    r12
0x163566:	pop    rsp
0x163565:	pop    r12
0x163564:	pop    rbp; 	pop    r12
0x163563:	pop    rbx; 	pop    rbp; 	pop    r12
0x1635b0:	pop    rbx
0x1635ae:	xor    eax,eax; 	pop    rbx
0x1635cf:	add    bl,dh
0x1635cd:	jno    0x1635f7; 	add    bl,dh
0x163663:	add    esp,0x8
0x163662:	add    rsp,0x8
0x163704:	add    esp,0x8
0x163703:	add    rsp,0x8
0x1637a0:	add    esp,0x8
0x16379f:	add    rsp,0x8
0x163842:	add    esp,0x8
0x163841:	add    rsp,0x8
0x16389b:	pop    rbx
0x163898:	add    esp,0x10; 	pop    rbx
0x16391b:	pop    rbx
0x163918:	add    esp,0x10; 	pop    rbx
0x1639f4:	add    esp,0x8
0x1639f3:	add    rsp,0x8
0x163a12:	mov    eax,edx
0x163ab4:	add    esp,0x8
0x163ab3:	add    rsp,0x8
0x163abf:	add    bl,dh
0x163abd:	add    BYTE PTR [rax],al; 	add    bl,dh
0x163bf9:	pop    rdi
0x163bf8:	pop    r15
0x163bf7:	pop    rsi; 	pop    r15
0x163bf6:	pop    r14; 	pop    r15
0x163da6:	add    esp,0x8
0x163da5:	add    rsp,0x8
0x163f31:	stos   DWORD PTR es:[rdi],eax
0x163f4a:	xchg   edx,eax
0x163f48:	mov    bh,0x5; 	xchg   edx,eax
0x16404a:	pop    rdi
0x164049:	pop    r15
0x164048:	pop    rsi; 	pop    r15
0x164047:	pop    r14; 	pop    r15
0x1641bf:	pop    rdi
0x1641be:	pop    r15
0x1641bd:	pop    rsi; 	pop    r15
0x1641bc:	pop    r14; 	pop    r15
0x1642ee:	add    esp,0x8
0x1642ed:	add    rsp,0x8
0x164429:	add    BYTE PTR [rax-0x39],cl
0x1644a9:	pop    rdi
0x1644a8:	pop    r15
0x1644a7:	pop    rsi; 	pop    r15
0x1644a6:	pop    r14; 	pop    r15
0x164605:	pop    rbp
0x164604:	pop    rbx; 	pop    rbp
0x164603:	sbb    BYTE PTR [rbx+0x5d],bl
0x1648ff:	pop    rdi
0x1648fe:	pop    r15
0x1648fd:	pop    rsi; 	pop    r15
0x1648fc:	pop    r14; 	pop    r15
0x164c77:	pop    rsp
0x164c76:	pop    r12
0x164c75:	pop    rbp; 	pop    r12
0x164c74:	pop    rbx; 	pop    rbp; 	pop    r12
0x164e22:	pop    rbp
0x164e21:	pop    rbx; 	pop    rbp
0x164e20:	add    BYTE PTR [rbx+0x5d],bl
0x164e1f:	add    BYTE PTR [rax],al; 	pop    rbx; 	pop    rbp
0x164f6b:	pop    rdi
0x164f6a:	pop    r15
0x164f69:	pop    rsi; 	pop    r15
0x164f68:	pop    r14; 	pop    r15
0x165114:	and    cl,BYTE PTR [rax-0x7d]
0x165150:	pop    rbp
0x16514f:	pop    r13
0x16514e:	pop    rsp; 	pop    r13
0x16514d:	pop    r12; 	pop    r13
0x1651ee:	add    BYTE PTR [rax-0x77],cl
0x1652e9:	pop    rbp
0x1652e8:	pop    rdi; 	pop    rbp
0x1652e7:	pop    r15; 	pop    rbp
0x1652e6:	pop    rsi; 	pop    r15; 	pop    rbp
0x1654bb:	pop    rbp
0x1654ba:	pop    rbx; 	pop    rbp
0x1654b9:	sbb    BYTE PTR [rbx+0x5d],bl
0x1655de:	pop    rsi
0x1655dd:	pop    r14
0x1655dc:	pop    rbp; 	pop    r14
0x1655db:	pop    r13; 	pop    r14
0x16590d:	pop    rdi
0x16590c:	pop    r15
0x16590b:	pop    rsi; 	pop    r15
0x16590a:	pop    r14; 	pop    r15
0x165ba3:	pop    rdi
0x165ba2:	pop    r15
0x165ba1:	pop    rsi; 	pop    r15
0x165ba0:	pop    r14; 	pop    r15
0x165da6:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x165da5:	movs   QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
0x165da4:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
0x165da3:	add    esi,ebx; 	movs   QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
0x165f5e:	pop    rdi
0x165f5d:	pop    r15
0x165f5c:	pop    rsi; 	pop    r15
0x165f5b:	pop    r14; 	pop    r15
0x165ff4:	add    BYTE PTR [rax-0x77],cl
0x16618c:	pop    rdi
0x16618b:	pop    r15
0x16618a:	pop    rsi; 	pop    r15
0x166189:	pop    r14; 	pop    r15
0x1662f9:	add    BYTE PTR [rax],al
0x1662f7:	add    DWORD PTR [rax],eax; 	add    BYTE PTR [rax],al
0x166300:	xor    eax,eax
0x16635f:	add    bl,dh
0x16635d:	add    BYTE PTR [rax],al; 	add    bl,dh
0x1663b3:	pop    rbx
0x1663b2:	pop    rdx; 	pop    rbx
0x1663b1:	pop    rax; 	pop    rdx; 	pop    rbx
0x1663b0:	sbb    BYTE PTR [rax+0x5a],bl; 	pop    rbx
0x1663fb:	pop    rbx
0x1663fa:	pop    rdx; 	pop    rbx
0x1663f9:	pop    rax; 	pop    rdx; 	pop    rbx
0x1663f8:	adc    BYTE PTR [rax+0x5a],bl; 	pop    rbx
0x16643c:	pop    rbx
0x16643b:	pop    rdx; 	pop    rbx
0x16643a:	pop    rax; 	pop    rdx; 	pop    rbx
0x166439:	adc    BYTE PTR [rax+0x5a],bl; 	pop    rbx
0x1664a4:	pop    rax
0x1664a2:	add    esp,0x58
0x1664a1:	add    rsp,0x58
0x16657a:	add    esp,0x68
0x166579:	add    rsp,0x68
0x166749:	add    esp,0x78
0x166748:	add    rsp,0x78
0x1667d0:	add    esp,0x38
0x1667cf:	add    rsp,0x38
0x166875:	pop    rbx
0x166874:	pop    rdx; 	pop    rbx
0x166873:	pop    rax; 	pop    rdx; 	pop    rbx
0x166872:	add    ebx,DWORD PTR [rax+0x5a]; 	pop    rbx
0x1669a7:	add    BYTE PTR [rax-0x77],cl
0x166a1c:	pop    rdi
0x166a1b:	pop    r15
0x166a1a:	pop    rsi; 	pop    r15
0x166a19:	pop    r14; 	pop    r15
0x166adf:	add    BYTE PTR [rax-0x7f],cl
0x166ba4:	adc    BYTE PTR [rax-0x7d],cl
0x166da5:	add    BYTE PTR [rax-0x77],cl
0x166e1a:	pop    rdi
0x166e19:	pop    r15
0x166e18:	pop    rsi; 	pop    r15
0x166e17:	pop    r14; 	pop    r15
0x166ecf:	add    BYTE PTR [rax-0x7f],cl
0x166f94:	adc    BYTE PTR [rax-0x7d],cl
0x16731e:	pop    rbx
0x16731c:	add    BYTE PTR [rax],al; 	pop    rbx
0x16739f:	pop    rsp
0x16739e:	pop    r12
0x16739d:	pop    rbp; 	pop    r12
0x16739c:	pop    rbx; 	pop    rbp; 	pop    r12
0x167442:	add    esp,0x38
0x167441:	add    rsp,0x38
0x16747a:	mov    dh,0xc0
0x167479:	movzx  eax,al
0x167496:	xor    eax,eax
0x167494:	adc    al,0xc7; 	xor    eax,eax
0x1674b9:	xor    eax,eax
0x1674b8:	xlat   BYTE PTR ds:[rbx]; 	xor    eax,eax
0x1674b7:	add    al,0xd7; 	xor    eax,eax
0x1674fe:	xor    eax,eax
0x1674fc:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x16751e:	xor    eax,eax
0x16751c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1675bf:	xor    eax,eax
0x1675be:	icebp  ; 	xor    eax,eax
0x1675bd:	ja     0x1675b0; 	xor    eax,eax
0x167615:	xor    eax,eax
0x167613:	sub    BYTE PTR [rax],al; 	xor    eax,eax
0x167711:	pop    rdi
0x167710:	pop    r15
0x16770f:	pop    rsi; 	pop    r15
0x16770e:	pop    r14; 	pop    r15
0x16794c:	pop    rbp
0x16794b:	pop    rdi; 	pop    rbp
0x16794a:	pop    r15; 	pop    rbp
0x167949:	pop    rsi; 	pop    r15; 	pop    rbp
0x1691b5:	adc    BYTE PTR [rax+0x39],cl
0x169291:	add    esp,0x8
0x169290:	add    rsp,0x8
0x169297:	add    bl,dh
0x1692f8:	add    bl,dh
0x1692f6:	add    BYTE PTR [rax],al; 	add    bl,dh
0x16932c:	add    esp,0x18
0x16932b:	add    rsp,0x18
0x16933c:	add    esp,0x18
0x16933b:	add    rsp,0x18
0x16939b:	add    BYTE PTR [rax-0x77],cl
0x16956f:	pop    rdi
0x16956e:	pop    r15
0x16956d:	pop    rsi; 	pop    r15
0x16956c:	pop    r14; 	pop    r15
0x169610:	add    BYTE PTR [rax-0x77],cl
0x169780:	pop    rdi
0x16977f:	pop    r15
0x16977e:	pop    rsi; 	pop    r15
0x16977d:	pop    r14; 	pop    r15
0x169847:	add    BYTE PTR [rax+0x1],cl
0x16986b:	pop    rbx
0x169868:	add    esp,0x10; 	pop    rbx
0x1698cd:	add    BYTE PTR [rax+0x1],cl
0x1698f1:	pop    rbx
0x1698ee:	add    esp,0x10; 	pop    rbx
0x169920:	xor    eax,eax
0x16991e:	jmp    rax; 	xor    eax,eax
0x169950:	xor    eax,eax
0x16994e:	jmp    rax; 	xor    eax,eax
0x169980:	xor    eax,eax
0x16997e:	jmp    rax; 	xor    eax,eax
0x1699b0:	xor    eax,eax
0x1699ae:	jmp    rax; 	xor    eax,eax
0x1699e0:	xor    eax,eax
0x1699de:	jmp    rax; 	xor    eax,eax
0x169a10:	xor    eax,eax
0x169a0e:	jmp    rax; 	xor    eax,eax
0x169ccc:	pop    rbp
0x169ccb:	pop    rdi; 	pop    rbp
0x169cca:	pop    r15; 	pop    rbp
0x169cc9:	pop    rsi; 	pop    r15; 	pop    rbp
0x16af9c:	sub    eax,ecx
0x16af9a:	add    al,0x17; 	sub    eax,ecx
0x16af9f:	xor    eax,eax
0x16af9e:	ret    ; 	xor    eax,eax
0x16af9d:	enter  0x31c3,0xc0
0x16afb6:	sub    eax,ecx
0x16afb4:	mov    dh,0x7; 	sub    eax,ecx
0x16c701:	sub    eax,ecx
0x16c6ff:	add    al,0x17; 	sub    eax,ecx
0x16c704:	xor    eax,eax
0x16c703:	ret    ; 	xor    eax,eax
0x16c702:	enter  0x31c3,0xc0
0x16c716:	sub    eax,ecx
0x16c714:	mov    dh,0x7; 	sub    eax,ecx
0x16e06b:	clc    
0x16e06a:	rex.WRXB clc 
0x16e069:	mov    DWORD PTR [rdi-0x8],ecx
0x16e068:	mov    QWORD PTR [rdi-0x8],rcx
0x16e0a9:	clc    
0x16e0a8:	push   rdi; 	clc    
0x16e0a7:	mov    DWORD PTR [rdi-0x8],edx
0x16e0a6:	mov    QWORD PTR [rdi-0x8],rdx
0x16e0e1:	clc    
0x16e0e0:	rex.WRXB clc 
0x16e0df:	mov    DWORD PTR [rdi-0x8],ecx
0x16e0de:	mov    QWORD PTR [rdi-0x8],rcx
0x16e11f:	clc    
0x16e11e:	push   rdi; 	clc    
0x16e11d:	mov    DWORD PTR [rdi-0x8],edx
0x16e11c:	mov    QWORD PTR [rdi-0x8],rdx
0x16e157:	clc    
0x16e156:	push   rdi; 	clc    
0x16e155:	mov    DWORD PTR [rdi-0x8],edx
0x16e154:	mov    QWORD PTR [rdi-0x8],rdx
0x16e17f:	clc    
0x16e17e:	push   rdi; 	clc    
0x16e17d:	mov    DWORD PTR [rdi-0x8],edx
0x16e17c:	mov    QWORD PTR [rdi-0x8],rdx
0x16e1a7:	clc    
0x16e1a6:	push   rdi; 	clc    
0x16e1a5:	mov    DWORD PTR [rdi-0x8],edx
0x16e1a4:	mov    QWORD PTR [rdi-0x8],rdx
0x16e1bf:	clc    
0x16e1be:	push   rdi; 	clc    
0x16e1bd:	mov    DWORD PTR [rdi-0x8],edx
0x16e1bc:	mov    QWORD PTR [rdi-0x8],rdx
0x16e1d7:	clc    
0x16e1d6:	push   rdi; 	clc    
0x16e1d5:	mov    DWORD PTR [rdi-0x8],edx
0x16e1d4:	mov    QWORD PTR [rdi-0x8],rdx
0x16e221:	cld    
0x16e220:	push   rdi; 	cld    
0x16e21f:	mov    DWORD PTR [rdi-0x4],edx
0x16e269:	cld    
0x16e268:	push   rdi; 	cld    
0x16e267:	mov    DWORD PTR [rdi-0x4],edx
0x16e2a7:	cld    
0x16e2a6:	push   rdi; 	cld    
0x16e2a5:	mov    DWORD PTR [rdi-0x4],edx
0x16e2df:	cld    
0x16e2de:	push   rdi; 	cld    
0x16e2dd:	mov    DWORD PTR [rdi-0x4],edx
0x16e31b:	mov    BYTE PTR [rdi-0x1],dl
0x16e343:	mov    BYTE PTR [rdi-0x1],dl
0x16e36b:	mov    BYTE PTR [rdi-0x1],dl
0x16e385:	cld    
0x16e384:	push   rdi; 	cld    
0x16e383:	mov    DWORD PTR [rdi-0x4],edx
0x16e39d:	cld    
0x16e39c:	push   rdi; 	cld    
0x16e39b:	mov    DWORD PTR [rdi-0x4],edx
0x16e3a3:	mov    BYTE PTR [rdi-0x1],dl
0x16e3f1:	cld    
0x16e3f0:	push   rdi; 	cld    
0x16e3ef:	mov    DWORD PTR [rdi-0x4],edx
0x16e441:	cld    
0x16e440:	push   rdi; 	cld    
0x16e43f:	mov    DWORD PTR [rdi-0x4],edx
0x16e487:	cld    
0x16e486:	push   rdi; 	cld    
0x16e485:	mov    DWORD PTR [rdi-0x4],edx
0x16e4bf:	cld    
0x16e4be:	push   rdi; 	cld    
0x16e4bd:	mov    DWORD PTR [rdi-0x4],edx
0x16e4fd:	cld    
0x16e4fc:	push   rdi; 	cld    
0x16e4fb:	mov    DWORD PTR [rdi-0x4],edx
0x16e525:	cld    
0x16e524:	push   rdi; 	cld    
0x16e523:	mov    DWORD PTR [rdi-0x4],edx
0x16e54d:	cld    
0x16e54c:	push   rdi; 	cld    
0x16e54b:	mov    DWORD PTR [rdi-0x4],edx
0x16e565:	cld    
0x16e564:	push   rdi; 	cld    
0x16e563:	mov    DWORD PTR [rdi-0x4],edx
0x16e57d:	cld    
0x16e57c:	push   rdi; 	cld    
0x16e57b:	mov    DWORD PTR [rdi-0x4],edx
0x16e585:	mov    DWORD PTR [rdi-0x2],edx
0x16e584:	mov    WORD PTR [rdi-0x2],dx
0x16e5d1:	cld    
0x16e5d0:	push   rdi; 	cld    
0x16e5cf:	mov    DWORD PTR [rdi-0x4],edx
0x16e5ce:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e621:	cld    
0x16e620:	push   rdi; 	cld    
0x16e61f:	mov    DWORD PTR [rdi-0x4],edx
0x16e61e:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e667:	cld    
0x16e666:	push   rdi; 	cld    
0x16e665:	mov    DWORD PTR [rdi-0x4],edx
0x16e664:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e69f:	cld    
0x16e69e:	push   rdi; 	cld    
0x16e69d:	mov    DWORD PTR [rdi-0x4],edx
0x16e69c:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e6dd:	cld    
0x16e6dc:	push   rdi; 	cld    
0x16e6db:	mov    DWORD PTR [rdi-0x4],edx
0x16e6da:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e705:	cld    
0x16e704:	push   rdi; 	cld    
0x16e703:	mov    DWORD PTR [rdi-0x4],edx
0x16e702:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e72d:	cld    
0x16e72c:	push   rdi; 	cld    
0x16e72b:	mov    DWORD PTR [rdi-0x4],edx
0x16e72a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e745:	cld    
0x16e744:	push   rdi; 	cld    
0x16e743:	mov    DWORD PTR [rdi-0x4],edx
0x16e742:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e75d:	cld    
0x16e75c:	push   rdi; 	cld    
0x16e75b:	mov    DWORD PTR [rdi-0x4],edx
0x16e75a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e76d:	mov    DWORD PTR [rdi-0x2],ecx
0x16e76c:	mov    WORD PTR [rdi-0x2],cx
0x16e7c1:	cld    
0x16e7c0:	push   rdi; 	cld    
0x16e7bf:	mov    DWORD PTR [rdi-0x4],edx
0x16e7be:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e809:	cld    
0x16e808:	push   rdi; 	cld    
0x16e807:	mov    DWORD PTR [rdi-0x4],edx
0x16e806:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e847:	cld    
0x16e846:	push   rdi; 	cld    
0x16e845:	mov    DWORD PTR [rdi-0x4],edx
0x16e844:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e87f:	cld    
0x16e87e:	push   rdi; 	cld    
0x16e87d:	mov    DWORD PTR [rdi-0x4],edx
0x16e87c:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e8bd:	cld    
0x16e8bc:	push   rdi; 	cld    
0x16e8bb:	mov    DWORD PTR [rdi-0x4],edx
0x16e8ba:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e8e5:	cld    
0x16e8e4:	push   rdi; 	cld    
0x16e8e3:	mov    DWORD PTR [rdi-0x4],edx
0x16e8e2:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e90d:	cld    
0x16e90c:	push   rdi; 	cld    
0x16e90b:	mov    DWORD PTR [rdi-0x4],edx
0x16e90a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e925:	cld    
0x16e924:	push   rdi; 	cld    
0x16e923:	mov    DWORD PTR [rdi-0x4],edx
0x16e922:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e93d:	cld    
0x16e93c:	push   rdi; 	cld    
0x16e93b:	mov    DWORD PTR [rdi-0x4],edx
0x16e93a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e945:	cld    
0x16e944:	push   rdi; 	cld    
0x16e943:	mov    DWORD PTR [rdi-0x4],edx
0x16e942:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x16e979:	jg     0x16e9ca
0x16e993:	clc    
0x16e992:	push   rdi; 	clc    
0x16e991:	mov    DWORD PTR [rdi-0x8],edx
0x16e990:	mov    QWORD PTR [rdi-0x8],rdx
0x16e9db:	clc    
0x16e9da:	push   rdi; 	clc    
0x16e9d9:	mov    DWORD PTR [rdi-0x8],edx
0x16e9d8:	mov    QWORD PTR [rdi-0x8],rdx
0x16e9ff:	jg     0x16ea48
0x16ea19:	clc    
0x16ea18:	push   rdi; 	clc    
0x16ea17:	mov    DWORD PTR [rdi-0x8],edx
0x16ea16:	mov    QWORD PTR [rdi-0x8],rdx
0x16ea55:	clc    
0x16ea54:	push   rdi; 	clc    
0x16ea53:	mov    DWORD PTR [rdi-0x8],edx
0x16ea52:	mov    QWORD PTR [rdi-0x8],rdx
0x16ea8f:	clc    
0x16ea8e:	push   rdi; 	clc    
0x16ea8d:	mov    DWORD PTR [rdi-0x8],edx
0x16ea8c:	mov    QWORD PTR [rdi-0x8],rdx
0x16eac7:	clc    
0x16eac6:	push   rdi; 	clc    
0x16eac5:	mov    DWORD PTR [rdi-0x8],edx
0x16eac4:	mov    QWORD PTR [rdi-0x8],rdx
0x16eaef:	clc    
0x16eaee:	push   rdi; 	clc    
0x16eaed:	mov    DWORD PTR [rdi-0x8],edx
0x16eaec:	mov    QWORD PTR [rdi-0x8],rdx
0x16eb17:	clc    
0x16eb16:	push   rdi; 	clc    
0x16eb15:	mov    DWORD PTR [rdi-0x8],edx
0x16eb14:	mov    QWORD PTR [rdi-0x8],rdx
0x16eb2f:	clc    
0x16eb2e:	push   rdi; 	clc    
0x16eb2d:	mov    DWORD PTR [rdi-0x8],edx
0x16eb2c:	mov    QWORD PTR [rdi-0x8],rdx
0x16eb4b:	cld    
0x16eb4a:	rex.WRXB cld 
0x16eb49:	mov    DWORD PTR [rdi-0x4],ecx
0x16eb48:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x16eb93:	clc    
0x16eb92:	push   rdi; 	clc    
0x16eb91:	mov    DWORD PTR [rdi-0x8],edx
0x16eb90:	mov    QWORD PTR [rdi-0x8],rdx
0x16ebdb:	clc    
0x16ebda:	push   rdi; 	clc    
0x16ebd9:	mov    DWORD PTR [rdi-0x8],edx
0x16ebd8:	mov    QWORD PTR [rdi-0x8],rdx
0x16ec19:	clc    
0x16ec18:	push   rdi; 	clc    
0x16ec17:	mov    DWORD PTR [rdi-0x8],edx
0x16ec16:	mov    QWORD PTR [rdi-0x8],rdx
0x16ec51:	clc    
0x16ec50:	push   rdi; 	clc    
0x16ec4f:	mov    DWORD PTR [rdi-0x8],edx
0x16ec4e:	mov    QWORD PTR [rdi-0x8],rdx
0x16ec8f:	clc    
0x16ec8e:	push   rdi; 	clc    
0x16ec8d:	mov    DWORD PTR [rdi-0x8],edx
0x16ec8c:	mov    QWORD PTR [rdi-0x8],rdx
0x16ecc7:	clc    
0x16ecc6:	push   rdi; 	clc    
0x16ecc5:	mov    DWORD PTR [rdi-0x8],edx
0x16ecc4:	mov    QWORD PTR [rdi-0x8],rdx
0x16ecef:	clc    
0x16ecee:	push   rdi; 	clc    
0x16eced:	mov    DWORD PTR [rdi-0x8],edx
0x16ecec:	mov    QWORD PTR [rdi-0x8],rdx
0x16ed17:	clc    
0x16ed16:	push   rdi; 	clc    
0x16ed15:	mov    DWORD PTR [rdi-0x8],edx
0x16ed14:	mov    QWORD PTR [rdi-0x8],rdx
0x16ed2f:	clc    
0x16ed2e:	push   rdi; 	clc    
0x16ed2d:	mov    DWORD PTR [rdi-0x8],edx
0x16ed2c:	mov    QWORD PTR [rdi-0x8],rdx
0x16ed4b:	cld    
0x16ed4a:	rex.WRXB cld 
0x16ed49:	mov    DWORD PTR [rdi-0x4],ecx
0x16ed48:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x16ed93:	clc    
0x16ed92:	push   rdi; 	clc    
0x16ed91:	mov    DWORD PTR [rdi-0x8],edx
0x16ed90:	mov    QWORD PTR [rdi-0x8],rdx
0x16eddb:	clc    
0x16edda:	push   rdi; 	clc    
0x16edd9:	mov    DWORD PTR [rdi-0x8],edx
0x16edd8:	mov    QWORD PTR [rdi-0x8],rdx
0x16ee19:	clc    
0x16ee18:	push   rdi; 	clc    
0x16ee17:	mov    DWORD PTR [rdi-0x8],edx
0x16ee16:	mov    QWORD PTR [rdi-0x8],rdx
0x16ee51:	clc    
0x16ee50:	push   rdi; 	clc    
0x16ee4f:	mov    DWORD PTR [rdi-0x8],edx
0x16ee4e:	mov    QWORD PTR [rdi-0x8],rdx
0x16ee8f:	clc    
0x16ee8e:	push   rdi; 	clc    
0x16ee8d:	mov    DWORD PTR [rdi-0x8],edx
0x16ee8c:	mov    QWORD PTR [rdi-0x8],rdx
0x16eec7:	clc    
0x16eec6:	push   rdi; 	clc    
0x16eec5:	mov    DWORD PTR [rdi-0x8],edx
0x16eec4:	mov    QWORD PTR [rdi-0x8],rdx
0x16eeef:	clc    
0x16eeee:	push   rdi; 	clc    
0x16eeed:	mov    DWORD PTR [rdi-0x8],edx
0x16eeec:	mov    QWORD PTR [rdi-0x8],rdx
0x16ef17:	clc    
0x16ef16:	push   rdi; 	clc    
0x16ef15:	mov    DWORD PTR [rdi-0x8],edx
0x16ef14:	mov    QWORD PTR [rdi-0x8],rdx
0x16ef2f:	clc    
0x16ef2e:	push   rdi; 	clc    
0x16ef2d:	mov    DWORD PTR [rdi-0x8],edx
0x16ef2c:	mov    QWORD PTR [rdi-0x8],rdx
0x16ef4b:	cld    
0x16ef4a:	rex.WRXB cld 
0x16ef49:	mov    DWORD PTR [rdi-0x4],ecx
0x16ef48:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x170a3b:	clc    
0x170a3a:	rex.WRXB clc 
0x170a39:	mov    DWORD PTR [rdi-0x8],ecx
0x170a38:	mov    QWORD PTR [rdi-0x8],rcx
0x170a79:	clc    
0x170a78:	push   rdi; 	clc    
0x170a77:	mov    DWORD PTR [rdi-0x8],edx
0x170a76:	mov    QWORD PTR [rdi-0x8],rdx
0x170ab1:	clc    
0x170ab0:	rex.WRXB clc 
0x170aaf:	mov    DWORD PTR [rdi-0x8],ecx
0x170aae:	mov    QWORD PTR [rdi-0x8],rcx
0x170aef:	clc    
0x170aee:	push   rdi; 	clc    
0x170aed:	mov    DWORD PTR [rdi-0x8],edx
0x170aec:	mov    QWORD PTR [rdi-0x8],rdx
0x170b27:	clc    
0x170b26:	push   rdi; 	clc    
0x170b25:	mov    DWORD PTR [rdi-0x8],edx
0x170b24:	mov    QWORD PTR [rdi-0x8],rdx
0x170b4f:	clc    
0x170b4e:	push   rdi; 	clc    
0x170b4d:	mov    DWORD PTR [rdi-0x8],edx
0x170b4c:	mov    QWORD PTR [rdi-0x8],rdx
0x170b77:	clc    
0x170b76:	push   rdi; 	clc    
0x170b75:	mov    DWORD PTR [rdi-0x8],edx
0x170b74:	mov    QWORD PTR [rdi-0x8],rdx
0x170b8f:	clc    
0x170b8e:	push   rdi; 	clc    
0x170b8d:	mov    DWORD PTR [rdi-0x8],edx
0x170b8c:	mov    QWORD PTR [rdi-0x8],rdx
0x170ba7:	clc    
0x170ba6:	push   rdi; 	clc    
0x170ba5:	mov    DWORD PTR [rdi-0x8],edx
0x170ba4:	mov    QWORD PTR [rdi-0x8],rdx
0x170bf1:	cld    
0x170bf0:	push   rdi; 	cld    
0x170bef:	mov    DWORD PTR [rdi-0x4],edx
0x170c39:	cld    
0x170c38:	push   rdi; 	cld    
0x170c37:	mov    DWORD PTR [rdi-0x4],edx
0x170c77:	cld    
0x170c76:	push   rdi; 	cld    
0x170c75:	mov    DWORD PTR [rdi-0x4],edx
0x170caf:	cld    
0x170cae:	push   rdi; 	cld    
0x170cad:	mov    DWORD PTR [rdi-0x4],edx
0x170ceb:	mov    BYTE PTR [rdi-0x1],dl
0x170d13:	mov    BYTE PTR [rdi-0x1],dl
0x170d3b:	mov    BYTE PTR [rdi-0x1],dl
0x170d55:	cld    
0x170d54:	push   rdi; 	cld    
0x170d53:	mov    DWORD PTR [rdi-0x4],edx
0x170d6d:	cld    
0x170d6c:	push   rdi; 	cld    
0x170d6b:	mov    DWORD PTR [rdi-0x4],edx
0x170d73:	mov    BYTE PTR [rdi-0x1],dl
0x170dc1:	cld    
0x170dc0:	push   rdi; 	cld    
0x170dbf:	mov    DWORD PTR [rdi-0x4],edx
0x170e11:	cld    
0x170e10:	push   rdi; 	cld    
0x170e0f:	mov    DWORD PTR [rdi-0x4],edx
0x170e57:	cld    
0x170e56:	push   rdi; 	cld    
0x170e55:	mov    DWORD PTR [rdi-0x4],edx
0x170e8f:	cld    
0x170e8e:	push   rdi; 	cld    
0x170e8d:	mov    DWORD PTR [rdi-0x4],edx
0x170ecd:	cld    
0x170ecc:	push   rdi; 	cld    
0x170ecb:	mov    DWORD PTR [rdi-0x4],edx
0x170ef5:	cld    
0x170ef4:	push   rdi; 	cld    
0x170ef3:	mov    DWORD PTR [rdi-0x4],edx
0x170f1d:	cld    
0x170f1c:	push   rdi; 	cld    
0x170f1b:	mov    DWORD PTR [rdi-0x4],edx
0x170f35:	cld    
0x170f34:	push   rdi; 	cld    
0x170f33:	mov    DWORD PTR [rdi-0x4],edx
0x170f4d:	cld    
0x170f4c:	push   rdi; 	cld    
0x170f4b:	mov    DWORD PTR [rdi-0x4],edx
0x170f55:	mov    DWORD PTR [rdi-0x2],edx
0x170f54:	mov    WORD PTR [rdi-0x2],dx
0x170fa1:	cld    
0x170fa0:	push   rdi; 	cld    
0x170f9f:	mov    DWORD PTR [rdi-0x4],edx
0x170f9e:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x170ff1:	cld    
0x170ff0:	push   rdi; 	cld    
0x170fef:	mov    DWORD PTR [rdi-0x4],edx
0x170fee:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x171037:	cld    
0x171036:	push   rdi; 	cld    
0x171035:	mov    DWORD PTR [rdi-0x4],edx
0x171034:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x17106f:	cld    
0x17106e:	push   rdi; 	cld    
0x17106d:	mov    DWORD PTR [rdi-0x4],edx
0x17106c:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1710ad:	cld    
0x1710ac:	push   rdi; 	cld    
0x1710ab:	mov    DWORD PTR [rdi-0x4],edx
0x1710aa:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1710d5:	cld    
0x1710d4:	push   rdi; 	cld    
0x1710d3:	mov    DWORD PTR [rdi-0x4],edx
0x1710d2:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1710fd:	cld    
0x1710fc:	push   rdi; 	cld    
0x1710fb:	mov    DWORD PTR [rdi-0x4],edx
0x1710fa:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x171115:	cld    
0x171114:	push   rdi; 	cld    
0x171113:	mov    DWORD PTR [rdi-0x4],edx
0x171112:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x17112d:	cld    
0x17112c:	push   rdi; 	cld    
0x17112b:	mov    DWORD PTR [rdi-0x4],edx
0x17112a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],edx
0x17113d:	mov    DWORD PTR [rdi-0x2],ecx
0x17113c:	mov    WORD PTR [rdi-0x2],cx
0x171191:	cld    
0x171190:	push   rdi; 	cld    
0x17118f:	mov    DWORD PTR [rdi-0x4],edx
0x17118e:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1711d9:	cld    
0x1711d8:	push   rdi; 	cld    
0x1711d7:	mov    DWORD PTR [rdi-0x4],edx
0x1711d6:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x171217:	cld    
0x171216:	push   rdi; 	cld    
0x171215:	mov    DWORD PTR [rdi-0x4],edx
0x171214:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x17124f:	cld    
0x17124e:	push   rdi; 	cld    
0x17124d:	mov    DWORD PTR [rdi-0x4],edx
0x17124c:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x17128d:	cld    
0x17128c:	push   rdi; 	cld    
0x17128b:	mov    DWORD PTR [rdi-0x4],edx
0x17128a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1712b5:	cld    
0x1712b4:	push   rdi; 	cld    
0x1712b3:	mov    DWORD PTR [rdi-0x4],edx
0x1712b2:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1712dd:	cld    
0x1712dc:	push   rdi; 	cld    
0x1712db:	mov    DWORD PTR [rdi-0x4],edx
0x1712da:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x1712f5:	cld    
0x1712f4:	push   rdi; 	cld    
0x1712f3:	mov    DWORD PTR [rdi-0x4],edx
0x1712f2:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x17130d:	cld    
0x17130c:	push   rdi; 	cld    
0x17130b:	mov    DWORD PTR [rdi-0x4],edx
0x17130a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],edx
0x171315:	cld    
0x171314:	push   rdi; 	cld    
0x171313:	mov    DWORD PTR [rdi-0x4],edx
0x171312:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x171349:	jg     0x17139a
0x171363:	clc    
0x171362:	push   rdi; 	clc    
0x171361:	mov    DWORD PTR [rdi-0x8],edx
0x171360:	mov    QWORD PTR [rdi-0x8],rdx
0x1713ab:	clc    
0x1713aa:	push   rdi; 	clc    
0x1713a9:	mov    DWORD PTR [rdi-0x8],edx
0x1713a8:	mov    QWORD PTR [rdi-0x8],rdx
0x1713cf:	jg     0x171418
0x1713e9:	clc    
0x1713e8:	push   rdi; 	clc    
0x1713e7:	mov    DWORD PTR [rdi-0x8],edx
0x1713e6:	mov    QWORD PTR [rdi-0x8],rdx
0x171425:	clc    
0x171424:	push   rdi; 	clc    
0x171423:	mov    DWORD PTR [rdi-0x8],edx
0x171422:	mov    QWORD PTR [rdi-0x8],rdx
0x17145f:	clc    
0x17145e:	push   rdi; 	clc    
0x17145d:	mov    DWORD PTR [rdi-0x8],edx
0x17145c:	mov    QWORD PTR [rdi-0x8],rdx
0x171497:	clc    
0x171496:	push   rdi; 	clc    
0x171495:	mov    DWORD PTR [rdi-0x8],edx
0x171494:	mov    QWORD PTR [rdi-0x8],rdx
0x1714bf:	clc    
0x1714be:	push   rdi; 	clc    
0x1714bd:	mov    DWORD PTR [rdi-0x8],edx
0x1714bc:	mov    QWORD PTR [rdi-0x8],rdx
0x1714e7:	clc    
0x1714e6:	push   rdi; 	clc    
0x1714e5:	mov    DWORD PTR [rdi-0x8],edx
0x1714e4:	mov    QWORD PTR [rdi-0x8],rdx
0x1714ff:	clc    
0x1714fe:	push   rdi; 	clc    
0x1714fd:	mov    DWORD PTR [rdi-0x8],edx
0x1714fc:	mov    QWORD PTR [rdi-0x8],rdx
0x17151b:	cld    
0x17151a:	rex.WRXB cld 
0x171519:	mov    DWORD PTR [rdi-0x4],ecx
0x171518:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x171563:	clc    
0x171562:	push   rdi; 	clc    
0x171561:	mov    DWORD PTR [rdi-0x8],edx
0x171560:	mov    QWORD PTR [rdi-0x8],rdx
0x1715ab:	clc    
0x1715aa:	push   rdi; 	clc    
0x1715a9:	mov    DWORD PTR [rdi-0x8],edx
0x1715a8:	mov    QWORD PTR [rdi-0x8],rdx
0x1715e9:	clc    
0x1715e8:	push   rdi; 	clc    
0x1715e7:	mov    DWORD PTR [rdi-0x8],edx
0x1715e6:	mov    QWORD PTR [rdi-0x8],rdx
0x171621:	clc    
0x171620:	push   rdi; 	clc    
0x17161f:	mov    DWORD PTR [rdi-0x8],edx
0x17161e:	mov    QWORD PTR [rdi-0x8],rdx
0x17165f:	clc    
0x17165e:	push   rdi; 	clc    
0x17165d:	mov    DWORD PTR [rdi-0x8],edx
0x17165c:	mov    QWORD PTR [rdi-0x8],rdx
0x171697:	clc    
0x171696:	push   rdi; 	clc    
0x171695:	mov    DWORD PTR [rdi-0x8],edx
0x171694:	mov    QWORD PTR [rdi-0x8],rdx
0x1716bf:	clc    
0x1716be:	push   rdi; 	clc    
0x1716bd:	mov    DWORD PTR [rdi-0x8],edx
0x1716bc:	mov    QWORD PTR [rdi-0x8],rdx
0x1716e7:	clc    
0x1716e6:	push   rdi; 	clc    
0x1716e5:	mov    DWORD PTR [rdi-0x8],edx
0x1716e4:	mov    QWORD PTR [rdi-0x8],rdx
0x1716ff:	clc    
0x1716fe:	push   rdi; 	clc    
0x1716fd:	mov    DWORD PTR [rdi-0x8],edx
0x1716fc:	mov    QWORD PTR [rdi-0x8],rdx
0x17171b:	cld    
0x17171a:	rex.WRXB cld 
0x171719:	mov    DWORD PTR [rdi-0x4],ecx
0x171718:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x171763:	clc    
0x171762:	push   rdi; 	clc    
0x171761:	mov    DWORD PTR [rdi-0x8],edx
0x171760:	mov    QWORD PTR [rdi-0x8],rdx
0x1717ab:	clc    
0x1717aa:	push   rdi; 	clc    
0x1717a9:	mov    DWORD PTR [rdi-0x8],edx
0x1717a8:	mov    QWORD PTR [rdi-0x8],rdx
0x1717e9:	clc    
0x1717e8:	push   rdi; 	clc    
0x1717e7:	mov    DWORD PTR [rdi-0x8],edx
0x1717e6:	mov    QWORD PTR [rdi-0x8],rdx
0x171821:	clc    
0x171820:	push   rdi; 	clc    
0x17181f:	mov    DWORD PTR [rdi-0x8],edx
0x17181e:	mov    QWORD PTR [rdi-0x8],rdx
0x17185f:	clc    
0x17185e:	push   rdi; 	clc    
0x17185d:	mov    DWORD PTR [rdi-0x8],edx
0x17185c:	mov    QWORD PTR [rdi-0x8],rdx
0x171897:	clc    
0x171896:	push   rdi; 	clc    
0x171895:	mov    DWORD PTR [rdi-0x8],edx
0x171894:	mov    QWORD PTR [rdi-0x8],rdx
0x1718bf:	clc    
0x1718be:	push   rdi; 	clc    
0x1718bd:	mov    DWORD PTR [rdi-0x8],edx
0x1718bc:	mov    QWORD PTR [rdi-0x8],rdx
0x1718e7:	clc    
0x1718e6:	push   rdi; 	clc    
0x1718e5:	mov    DWORD PTR [rdi-0x8],edx
0x1718e4:	mov    QWORD PTR [rdi-0x8],rdx
0x1718ff:	clc    
0x1718fe:	push   rdi; 	clc    
0x1718fd:	mov    DWORD PTR [rdi-0x8],edx
0x1718fc:	mov    QWORD PTR [rdi-0x8],rdx
0x17191b:	cld    
0x17191a:	rex.WRXB cld 
0x171919:	mov    DWORD PTR [rdi-0x4],ecx
0x171918:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x1738cc:	movq   QWORD PTR [rdi-0x10],mm0
0x17393c:	movq   QWORD PTR [rdi-0x10],mm1
0x17395f:	clc    
0x17395e:	rex.WRXB clc 
0x17395d:	mov    DWORD PTR [rdi-0x8],ecx
0x17395c:	mov    QWORD PTR [rdi-0x8],rcx
0x1739cc:	movq   QWORD PTR [rdi-0x10],mm1
0x1739ef:	clc    
0x1739ee:	rex.WRXB clc 
0x1739ed:	mov    DWORD PTR [rdi-0x8],ecx
0x1739ec:	mov    QWORD PTR [rdi-0x8],rcx
0x173a3f:	jg     0x173a88
0x173a5c:	movq   QWORD PTR [rdi-0x10],mm1
0x173a7f:	clc    
0x173a7e:	rex.WRXB clc 
0x173a7d:	mov    DWORD PTR [rdi-0x8],ecx
0x173a7c:	mov    QWORD PTR [rdi-0x8],rcx
0x173aec:	movq   QWORD PTR [rdi-0x10],mm1
0x173b0d:	cld    
0x173b0c:	rex.WRXB cld 
0x173b0b:	mov    DWORD PTR [rdi-0x4],ecx
0x173b0a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x173b6c:	movq   QWORD PTR [rdi-0x10],mm1
0x173b8d:	cld    
0x173b8c:	rex.WRXB cld 
0x173b8b:	mov    DWORD PTR [rdi-0x4],ecx
0x173b8a:	cmc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x173bec:	movq   QWORD PTR [rdi-0x10],mm1
0x173c0d:	cld    
0x173c0c:	rex.WRXB cld 
0x173c0b:	mov    DWORD PTR [rdi-0x4],ecx
0x173c6c:	movq   QWORD PTR [rdi-0x10],mm1
0x173c8d:	cld    
0x173c8c:	rex.WRXB cld 
0x173c8b:	mov    DWORD PTR [rdi-0x4],ecx
0x173cec:	movq   QWORD PTR [rdi-0x10],mm1
0x173d07:	clc    
0x173d06:	push   rdi; 	clc    
0x173d05:	mov    DWORD PTR [rdi-0x8],edx
0x173d04:	mov    QWORD PTR [rdi-0x8],rdx
0x173d6c:	movq   QWORD PTR [rdi-0x10],mm1
0x173d8b:	cld    
0x173d8a:	rex.WRXB cld 
0x173d89:	mov    DWORD PTR [rdi-0x4],ecx
0x173d88:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x173dec:	movq   QWORD PTR [rdi-0x10],mm1
0x173e0b:	cld    
0x173e0a:	rex.WRXB cld 
0x173e09:	mov    DWORD PTR [rdi-0x4],ecx
0x173e08:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x173e6c:	movq   QWORD PTR [rdi-0x10],mm1
0x173e8b:	cld    
0x173e8a:	rex.WRXB cld 
0x173e89:	mov    DWORD PTR [rdi-0x4],ecx
0x173e88:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x173eec:	movq   QWORD PTR [rdi-0x10],mm1
0x173f05:	cld    
0x173f04:	push   rdi; 	cld    
0x173f03:	mov    DWORD PTR [rdi-0x4],edx
0x173f02:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x173f6c:	movq   QWORD PTR [rdi-0x10],mm1
0x173f8d:	mov    DWORD PTR [rdi-0x2],ecx
0x173f8c:	mov    WORD PTR [rdi-0x2],cx
0x173ffc:	movq   QWORD PTR [rdi-0x10],mm1
0x174015:	mov    DWORD PTR [rdi-0x2],edx
0x174014:	mov    WORD PTR [rdi-0x2],dx
0x17407c:	movq   QWORD PTR [rdi-0x10],mm1
0x174094:	mov    BYTE PTR [rdi-0x1],dl
0x1740ec:	jg     0x1740f5
0x1740eb:	movq   QWORD PTR [rdi],mm0
0x1740ea:	movdqu XMMWORD PTR [rdi],xmm0
0x174146:	jg     0x174157
0x174145:	movq   QWORD PTR [rdi],mm1
0x174144:	movdqu XMMWORD PTR [rdi],xmm1
0x17415c:	mov    DWORD PTR [rdi],ecx
0x17415b:	mov    QWORD PTR [rdi],rcx
0x1741b6:	jg     0x1741c7
0x1741b5:	movq   QWORD PTR [rdi],mm1
0x1741b4:	movdqu XMMWORD PTR [rdi],xmm1
0x1741cc:	mov    DWORD PTR [rdi],ecx
0x1741cb:	mov    QWORD PTR [rdi],rcx
0x174226:	jg     0x174237
0x174225:	movq   QWORD PTR [rdi],mm1
0x174224:	movdqu XMMWORD PTR [rdi],xmm1
0x17423c:	mov    DWORD PTR [rdi],ecx
0x17423b:	mov    QWORD PTR [rdi],rcx
0x174296:	jg     0x1742a7
0x174295:	movq   QWORD PTR [rdi],mm1
0x174294:	movdqu XMMWORD PTR [rdi],xmm1
0x1742ac:	mov    DWORD PTR [rdi],ecx
0x1742ab:	mov    QWORD PTR [rdi],rcx
0x1742aa:	add    al,0x48; 	mov    DWORD PTR [rdi],ecx
0x174306:	jg     0x174317
0x174305:	movq   QWORD PTR [rdi],mm1
0x174304:	movdqu XMMWORD PTR [rdi],xmm1
0x17431c:	mov    DWORD PTR [rdi],ecx
0x17431b:	mov    QWORD PTR [rdi],rcx
0x174376:	jg     0x174387
0x174375:	movq   QWORD PTR [rdi],mm1
0x174374:	movdqu XMMWORD PTR [rdi],xmm1
0x17438c:	mov    DWORD PTR [rdi],ecx
0x17438b:	mov    QWORD PTR [rdi],rcx
0x1743e6:	jg     0x1743f7
0x1743e5:	movq   QWORD PTR [rdi],mm1
0x1743e4:	movdqu XMMWORD PTR [rdi],xmm1
0x1743fc:	mov    DWORD PTR [rdi],ecx
0x1743fb:	mov    QWORD PTR [rdi],rcx
0x174456:	jg     0x174467
0x174455:	movq   QWORD PTR [rdi],mm1
0x174454:	movdqu XMMWORD PTR [rdi],xmm1
0x174464:	mov    DWORD PTR [rdi],edx
0x174463:	mov    QWORD PTR [rdi],rdx
0x1744c6:	jg     0x1744d7
0x1744c5:	movq   QWORD PTR [rdi],mm1
0x1744c4:	movdqu XMMWORD PTR [rdi],xmm1
0x1744d8:	mov    DWORD PTR [rdi],ecx
0x174536:	jg     0x174547
0x174535:	movq   QWORD PTR [rdi],mm1
0x174534:	movdqu XMMWORD PTR [rdi],xmm1
0x174548:	mov    DWORD PTR [rdi],ecx
0x1745a6:	jg     0x1745b7
0x1745a5:	movq   QWORD PTR [rdi],mm1
0x1745a4:	movdqu XMMWORD PTR [rdi],xmm1
0x1745b8:	mov    DWORD PTR [rdi],ecx
0x174616:	jg     0x174627
0x174615:	movq   QWORD PTR [rdi],mm1
0x174614:	movdqu XMMWORD PTR [rdi],xmm1
0x174622:	mov    DWORD PTR [rdi],edx
0x174620:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0x174686:	jg     0x174697
0x174685:	movq   QWORD PTR [rdi],mm1
0x174684:	movdqu XMMWORD PTR [rdi],xmm1
0x17469c:	mov    DWORD PTR [rdi],ecx
0x17469b:	mov    WORD PTR [rdi],cx
0x1746f6:	jg     0x174707
0x1746f5:	movq   QWORD PTR [rdi],mm1
0x1746f4:	movdqu XMMWORD PTR [rdi],xmm1
0x174704:	mov    DWORD PTR [rdi],edx
0x174703:	mov    WORD PTR [rdi],dx
0x174766:	jg     0x174777
0x174765:	movq   QWORD PTR [rdi],mm1
0x174764:	movdqu XMMWORD PTR [rdi],xmm1
0x174773:	mov    BYTE PTR [rdi],dl
0x174771:	mov    dh,0x16; 	mov    BYTE PTR [rdi],dl
0x1763ec:	movq   QWORD PTR [rdi-0x10],mm0
0x17645c:	movq   QWORD PTR [rdi-0x10],mm1
0x17647f:	clc    
0x17647e:	rex.WRXB clc 
0x17647d:	mov    DWORD PTR [rdi-0x8],ecx
0x17647c:	mov    QWORD PTR [rdi-0x8],rcx
0x1764ec:	movq   QWORD PTR [rdi-0x10],mm1
0x17650f:	clc    
0x17650e:	rex.WRXB clc 
0x17650d:	mov    DWORD PTR [rdi-0x8],ecx
0x17650c:	mov    QWORD PTR [rdi-0x8],rcx
0x17655f:	jg     0x1765a8
0x17657c:	movq   QWORD PTR [rdi-0x10],mm1
0x17659f:	clc    
0x17659e:	rex.WRXB clc 
0x17659d:	mov    DWORD PTR [rdi-0x8],ecx
0x17659c:	mov    QWORD PTR [rdi-0x8],rcx
0x17660c:	movq   QWORD PTR [rdi-0x10],mm1
0x17662d:	cld    
0x17662c:	rex.WRXB cld 
0x17662b:	mov    DWORD PTR [rdi-0x4],ecx
0x17662a:	hlt    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x17668c:	movq   QWORD PTR [rdi-0x10],mm1
0x1766ad:	cld    
0x1766ac:	rex.WRXB cld 
0x1766ab:	mov    DWORD PTR [rdi-0x4],ecx
0x1766aa:	cmc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x17670c:	movq   QWORD PTR [rdi-0x10],mm1
0x17672d:	cld    
0x17672c:	rex.WRXB cld 
0x17672b:	mov    DWORD PTR [rdi-0x4],ecx
0x17678c:	movq   QWORD PTR [rdi-0x10],mm1
0x1767ad:	cld    
0x1767ac:	rex.WRXB cld 
0x1767ab:	mov    DWORD PTR [rdi-0x4],ecx
0x17680c:	movq   QWORD PTR [rdi-0x10],mm1
0x176827:	clc    
0x176826:	push   rdi; 	clc    
0x176825:	mov    DWORD PTR [rdi-0x8],edx
0x176824:	mov    QWORD PTR [rdi-0x8],rdx
0x17688c:	movq   QWORD PTR [rdi-0x10],mm1
0x1768ab:	cld    
0x1768aa:	rex.WRXB cld 
0x1768a9:	mov    DWORD PTR [rdi-0x4],ecx
0x1768a8:	stc    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x17690c:	movq   QWORD PTR [rdi-0x10],mm1
0x17692b:	cld    
0x17692a:	rex.WRXB cld 
0x176929:	mov    DWORD PTR [rdi-0x4],ecx
0x176928:	cli    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x17698c:	movq   QWORD PTR [rdi-0x10],mm1
0x1769ab:	cld    
0x1769aa:	rex.WRXB cld 
0x1769a9:	mov    DWORD PTR [rdi-0x4],ecx
0x1769a8:	sti    ; 	mov    DWORD PTR [rdi-0x4],ecx
0x176a0c:	movq   QWORD PTR [rdi-0x10],mm1
0x176a25:	cld    
0x176a24:	push   rdi; 	cld    
0x176a23:	mov    DWORD PTR [rdi-0x4],edx
0x176a22:	cld    ; 	mov    DWORD PTR [rdi-0x4],edx
0x176a8c:	movq   QWORD PTR [rdi-0x10],mm1
0x176aad:	mov    DWORD PTR [rdi-0x2],ecx
0x176aac:	mov    WORD PTR [rdi-0x2],cx
0x176b1c:	movq   QWORD PTR [rdi-0x10],mm1
0x176b35:	mov    DWORD PTR [rdi-0x2],edx
0x176b34:	mov    WORD PTR [rdi-0x2],dx
0x176b9c:	movq   QWORD PTR [rdi-0x10],mm1
0x176bb4:	mov    BYTE PTR [rdi-0x1],dl
0x176c0c:	jg     0x176c15
0x176c0b:	movq   QWORD PTR [rdi],mm0
0x176c0a:	movdqu XMMWORD PTR [rdi],xmm0
0x176c66:	jg     0x176c77
0x176c65:	movq   QWORD PTR [rdi],mm1
0x176c64:	movdqu XMMWORD PTR [rdi],xmm1
0x176c7c:	mov    DWORD PTR [rdi],ecx
0x176c7b:	mov    QWORD PTR [rdi],rcx
0x176cd6:	jg     0x176ce7
0x176cd5:	movq   QWORD PTR [rdi],mm1
0x176cd4:	movdqu XMMWORD PTR [rdi],xmm1
0x176cec:	mov    DWORD PTR [rdi],ecx
0x176ceb:	mov    QWORD PTR [rdi],rcx
0x176d46:	jg     0x176d57
0x176d45:	movq   QWORD PTR [rdi],mm1
0x176d44:	movdqu XMMWORD PTR [rdi],xmm1
0x176d5c:	mov    DWORD PTR [rdi],ecx
0x176d5b:	mov    QWORD PTR [rdi],rcx
0x176db6:	jg     0x176dc7
0x176db5:	movq   QWORD PTR [rdi],mm1
0x176db4:	movdqu XMMWORD PTR [rdi],xmm1
0x176dcc:	mov    DWORD PTR [rdi],ecx
0x176dcb:	mov    QWORD PTR [rdi],rcx
0x176dca:	add    al,0x48; 	mov    DWORD PTR [rdi],ecx
0x176e26:	jg     0x176e37
0x176e25:	movq   QWORD PTR [rdi],mm1
0x176e24:	movdqu XMMWORD PTR [rdi],xmm1
0x176e3c:	mov    DWORD PTR [rdi],ecx
0x176e3b:	mov    QWORD PTR [rdi],rcx
0x176e96:	jg     0x176ea7
0x176e95:	movq   QWORD PTR [rdi],mm1
0x176e94:	movdqu XMMWORD PTR [rdi],xmm1
0x176eac:	mov    DWORD PTR [rdi],ecx
0x176eab:	mov    QWORD PTR [rdi],rcx
0x176f06:	jg     0x176f17
0x176f05:	movq   QWORD PTR [rdi],mm1
0x176f04:	movdqu XMMWORD PTR [rdi],xmm1
0x176f1c:	mov    DWORD PTR [rdi],ecx
0x176f1b:	mov    QWORD PTR [rdi],rcx
0x176f76:	jg     0x176f87
0x176f75:	movq   QWORD PTR [rdi],mm1
0x176f74:	movdqu XMMWORD PTR [rdi],xmm1
0x176f84:	mov    DWORD PTR [rdi],edx
0x176f83:	mov    QWORD PTR [rdi],rdx
0x176fe6:	jg     0x176ff7
0x176fe5:	movq   QWORD PTR [rdi],mm1
0x176fe4:	movdqu XMMWORD PTR [rdi],xmm1
0x176ff8:	mov    DWORD PTR [rdi],ecx
0x177056:	jg     0x177067
0x177055:	movq   QWORD PTR [rdi],mm1
0x177054:	movdqu XMMWORD PTR [rdi],xmm1
0x177068:	mov    DWORD PTR [rdi],ecx
0x1770c6:	jg     0x1770d7
0x1770c5:	movq   QWORD PTR [rdi],mm1
0x1770c4:	movdqu XMMWORD PTR [rdi],xmm1
0x1770d8:	mov    DWORD PTR [rdi],ecx
0x177136:	jg     0x177147
0x177135:	movq   QWORD PTR [rdi],mm1
0x177134:	movdqu XMMWORD PTR [rdi],xmm1
0x177142:	mov    DWORD PTR [rdi],edx
0x177140:	mov    edx,DWORD PTR [rsi]; 	mov    DWORD PTR [rdi],edx
0x1771a6:	jg     0x1771b7
0x1771a5:	movq   QWORD PTR [rdi],mm1
0x1771a4:	movdqu XMMWORD PTR [rdi],xmm1
0x1771bc:	mov    DWORD PTR [rdi],ecx
0x1771bb:	mov    WORD PTR [rdi],cx
0x177216:	jg     0x177227
0x177215:	movq   QWORD PTR [rdi],mm1
0x177214:	movdqu XMMWORD PTR [rdi],xmm1
0x177224:	mov    DWORD PTR [rdi],edx
0x177223:	mov    WORD PTR [rdi],dx
0x177286:	jg     0x177297
0x177285:	movq   QWORD PTR [rdi],mm1
0x177284:	movdqu XMMWORD PTR [rdi],xmm1
0x177293:	mov    BYTE PTR [rdi],dl
0x177291:	mov    dh,0x16; 	mov    BYTE PTR [rdi],dl
0x1793c9:	sub    eax,ecx
0x1793c7:	add    al,0x82; 	sub    eax,ecx
0x1793cc:	xor    eax,eax
0x1793cb:	ret    ; 	xor    eax,eax
0x1793ca:	enter  0x31c3,0xc0
0x1793e3:	sub    eax,ecx
0x1793e1:	add    al,0x82; 	sub    eax,ecx
0x17b91e:	sub    eax,ecx
0x17b91c:	add    al,0x82; 	sub    eax,ecx
0x17b921:	xor    eax,eax
0x17b920:	ret    ; 	xor    eax,eax
0x17b91f:	enter  0x31c3,0xc0
0x17b943:	sub    eax,ecx
0x17b941:	add    al,0x82; 	sub    eax,ecx
0x17bb66:	ror    BYTE PTR [rdi],0x85
0x17bbd7:	xlat   BYTE PTR ds:[rbx]
0x17bbd4:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x17cf88:	clc    
0x17cf87:	mov    eax,edi
0x17cf86:	mov    rax,rdi
0x17cf85:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x17cfe0:	clc    
0x17cfdf:	mov    eax,edi
0x17cfde:	mov    rax,rdi
0x17cfdd:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x17cff6:	clc    
0x17cff5:	mov    eax,edi
0x17cff4:	mov    rax,rdi
0x17cff3:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x17d008:	clc    
0x17d007:	mov    eax,edi
0x17d006:	mov    rax,rdi
0x17d005:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x17d01e:	clc    
0x17d01d:	mov    eax,edi
0x17d01c:	mov    rax,rdi
0x17d01b:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x17d026:	clc    
0x17d025:	mov    eax,edi
0x17d024:	mov    rax,rdi
0x17d023:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x17d03c:	clc    
0x17d03b:	mov    eax,edi
0x17d03a:	mov    rax,rdi
0x17d039:	add    al,0x48; 	mov    eax,edi
0x17d04e:	clc    
0x17d04d:	mov    eax,edi
0x17d04c:	mov    rax,rdi
0x17d04b:	add    al,0x48; 	mov    eax,edi
0x17d05c:	clc    
0x17d05b:	mov    eax,edi
0x17d05a:	mov    rax,rdi
0x17d059:	add    ecx,DWORD PTR [rax-0x77]; 	clc    
0x17d06e:	clc    
0x17d06d:	mov    eax,edi
0x17d06c:	mov    rax,rdi
0x17d07e:	clc    
0x17d07d:	mov    eax,edi
0x17d07c:	mov    rax,rdi
0x17d08e:	clc    
0x17d08d:	mov    eax,edi
0x17d08c:	mov    rax,rdi
0x17d09e:	clc    
0x17d09d:	mov    eax,edi
0x17d09c:	mov    rax,rdi
0x17d09b:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x17d0b0:	clc    
0x17d0af:	mov    eax,edi
0x17d0ae:	mov    rax,rdi
0x17d0d0:	clc    
0x17d0cf:	mov    eax,edi
0x17d0ce:	mov    rax,rdi
0x17d0f0:	clc    
0x17d0ef:	mov    eax,edi
0x17d0ee:	mov    rax,rdi
0x17d427:	xlat   BYTE PTR ds:[rbx]
0x17d424:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x17eba5:	add    BYTE PTR [rax],al
0x17ec0d:	add    BYTE PTR [rax],al
0x17ee03:	add    BYTE PTR [rax],al
0x17ee25:	add    BYTE PTR [rax],al
0x17ee23:	sub    DWORD PTR [rbx],eax; 	add    BYTE PTR [rax],al
0x17ee4b:	add    BYTE PTR [rax],al
0x17ee49:	add    eax,DWORD PTR [rbx]; 	add    BYTE PTR [rax],al
0x17ee63:	add    BYTE PTR [rax],al
0x17ee61:	jmp    0x17ee65; 	add    BYTE PTR [rax],al
0x17ee89:	add    BYTE PTR [rax],al
0x17eeab:	add    BYTE PTR [rax],al
0x17eec9:	add    BYTE PTR [rax],al
0x17eec7:	test   DWORD PTR [rdx],eax; 	add    BYTE PTR [rax],al
0x17eeeb:	add    BYTE PTR [rax],al
0x17eee9:	movsxd eax,DWORD PTR [rdx]; 	add    BYTE PTR [rax],al
0x17ef0b:	add    BYTE PTR [rax],al
0x17ef2b:	add    BYTE PTR [rax],al
0x17ef29:	and    eax,DWORD PTR [rdx]; 	add    BYTE PTR [rax],al
0x17ef4b:	add    BYTE PTR [rax],al
0x17ef49:	add    eax,DWORD PTR [rdx]; 	add    BYTE PTR [rax],al
0x17ef6d:	add    BYTE PTR [rax],al
0x17ef6b:	loope  0x17ef6e; 	add    BYTE PTR [rax],al
0x17ef8d:	add    BYTE PTR [rax],al
0x17efad:	add    BYTE PTR [rax],al
0x17efaf:	ret    
0x17efae:	add    bl,al
0x17efad:	add    BYTE PTR [rax],al; 	ret    
0x17efac:	add    DWORD PTR [rax],eax; 	add    bl,al
0x17efc0:	mov    BYTE PTR [rcx],dl
0x17efbe:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rcx],dl
0x17efd1:	mov    DWORD PTR [rcx],edx
0x17efd0:	mov    WORD PTR [rcx],dx
0x17efe3:	mov    BYTE PTR [rcx+0x2],dl
0x17eff0:	mov    DWORD PTR [rcx],edx
0x17efee:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rcx],edx
0x17f002:	mov    BYTE PTR [rcx+0x4],dl
0x17f013:	mov    DWORD PTR [rcx+0x4],edx
0x17f012:	mov    WORD PTR [rcx+0x4],dx
0x17f022:	mov    DWORD PTR [rcx+0x3],edx
0x17f031:	mov    DWORD PTR [rcx],edx
0x17f030:	mov    QWORD PTR [rcx],rdx
0x17f043:	mov    BYTE PTR [rcx+0x8],dl
0x17f054:	mov    DWORD PTR [rcx+0x8],edx
0x17f053:	mov    WORD PTR [rcx+0x8],dx
0x17f063:	mov    DWORD PTR [rcx+0x7],edx
0x17f073:	mov    DWORD PTR [rcx+0x8],edx
0x17f084:	mov    DWORD PTR [rcx+0x5],edx
0x17f083:	mov    QWORD PTR [rcx+0x5],rdx
0x17f094:	mov    DWORD PTR [rcx+0x6],edx
0x17f093:	mov    QWORD PTR [rcx+0x6],rdx
0x17f0a4:	mov    DWORD PTR [rcx+0x7],edx
0x17f0a3:	mov    QWORD PTR [rcx+0x7],rdx
0x17f0b4:	mov    DWORD PTR [rcx+0x8],edx
0x17f0b3:	mov    QWORD PTR [rcx+0x8],rdx
0x17f1e1:	mov    eax,edx
0x17f1e0:	mov    rax,rdx
0x17f278:	clc    
0x17f277:	mov    eax,edi
0x17f276:	mov    rax,rdi
0x17f313:	clc    
0x17f312:	mov    eax,edi
0x17f311:	mov    rax,rdi
0x17f310:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x17fe96:	ror    BYTE PTR [rdi],0x85
0x17ff07:	xlat   BYTE PTR ds:[rbx]
0x17ff04:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x1812b7:	lea    eax,[rdx+0x7]
0x1812b6:	lea    rax,[rdx+0x7]
0x18130f:	lea    eax,[rdx+0xf]
0x18130e:	lea    rax,[rdx+0xf]
0x181325:	lea    eax,[rdx]
0x181324:	lea    rax,[rdx]
0x181337:	lea    eax,[rdx+0x1]
0x181336:	lea    rax,[rdx+0x1]
0x18134d:	lea    eax,[rdx+0x2]
0x18134c:	lea    rax,[rdx+0x2]
0x181365:	lea    eax,[rdx+0x3]
0x181364:	lea    rax,[rdx+0x3]
0x18137b:	lea    eax,[rdx+0x4]
0x18137a:	lea    rax,[rdx+0x4]
0x18138d:	lea    eax,[rdx+0x5]
0x18138c:	lea    rax,[rdx+0x5]
0x1813ab:	lea    eax,[rdx+0x6]
0x1813aa:	lea    rax,[rdx+0x6]
0x1813bd:	lea    eax,[rdx+0x8]
0x1813bc:	lea    rax,[rdx+0x8]
0x1813dd:	lea    eax,[rdx+0x9]
0x1813dc:	lea    rax,[rdx+0x9]
0x1813fd:	lea    eax,[rdx+0xa]
0x1813fc:	lea    rax,[rdx+0xa]
0x18141d:	lea    eax,[rdx+0xb]
0x18141c:	lea    rax,[rdx+0xb]
0x18143f:	lea    eax,[rdx+0xc]
0x18143e:	lea    rax,[rdx+0xc]
0x18145f:	lea    eax,[rdx+0xd]
0x18145e:	lea    rax,[rdx+0xd]
0x18147f:	lea    eax,[rdx+0xe]
0x18147e:	lea    rax,[rdx+0xe]
0x1817b7:	xlat   BYTE PTR ds:[rbx]
0x1817b4:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x182f3d:	fdivr  st,st(7)
0x182f3c:	sbb    eax,0xffffffff
0x182f3b:	sbb    rax,0xffffffffffffffff
0x182fa5:	fdivr  st,st(7)
0x182fa4:	sbb    eax,0xffffffff
0x182fa3:	sbb    rax,0xffffffffffffffff
0x1831aa:	fdivr  st,st(7)
0x1831a9:	sbb    eax,0xffffffff
0x1831a8:	sbb    rax,0xffffffffffffffff
0x1831cd:	fdivr  st,st(7)
0x1831cc:	sbb    eax,0xffffffff
0x1831cb:	sbb    rax,0xffffffffffffffff
0x1831f3:	fdivr  st,st(7)
0x1831f2:	sbb    eax,0xffffffff
0x1831f1:	sbb    rax,0xffffffffffffffff
0x18321b:	fdivr  st,st(7)
0x18321a:	sbb    eax,0xffffffff
0x183219:	sbb    rax,0xffffffffffffffff
0x183241:	fdivr  st,st(7)
0x183240:	sbb    eax,0xffffffff
0x18323f:	sbb    rax,0xffffffffffffffff
0x183273:	fdivr  st,st(7)
0x183272:	sbb    eax,0xffffffff
0x183271:	sbb    rax,0xffffffffffffffff
0x1832a1:	fdivr  st,st(7)
0x1832a0:	sbb    eax,0xffffffff
0x18329f:	sbb    rax,0xffffffffffffffff
0x1832d3:	fdivr  st,st(7)
0x1832d2:	sbb    eax,0xffffffff
0x1832d1:	sbb    rax,0xffffffffffffffff
0x183303:	fdivr  st,st(7)
0x183302:	sbb    eax,0xffffffff
0x183301:	sbb    rax,0xffffffffffffffff
0x183333:	fdivr  st,st(7)
0x183332:	sbb    eax,0xffffffff
0x183331:	sbb    rax,0xffffffffffffffff
0x183363:	fdivr  st,st(7)
0x183362:	sbb    eax,0xffffffff
0x183361:	sbb    rax,0xffffffffffffffff
0x183395:	fdivr  st,st(7)
0x183394:	sbb    eax,0xffffffff
0x183393:	sbb    rax,0xffffffffffffffff
0x1833c5:	fdivr  st,st(7)
0x1833c4:	sbb    eax,0xffffffff
0x1833c3:	sbb    rax,0xffffffffffffffff
0x1833f5:	fdivr  st,st(7)
0x1833f4:	sbb    eax,0xffffffff
0x1833f3:	sbb    rax,0xffffffffffffffff
0x1833fe:	add    BYTE PTR [rax],al
0x1833fc:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x183410:	mov    BYTE PTR [rcx],dl
0x18340e:	add    BYTE PTR [rax],al; 	mov    BYTE PTR [rcx],dl
0x183421:	mov    DWORD PTR [rcx],edx
0x183420:	mov    WORD PTR [rcx],dx
0x183433:	mov    BYTE PTR [rcx+0x2],dl
0x183440:	mov    DWORD PTR [rcx],edx
0x18343e:	add    BYTE PTR [rax],al; 	mov    DWORD PTR [rcx],edx
0x183452:	mov    BYTE PTR [rcx+0x4],dl
0x183463:	mov    DWORD PTR [rcx+0x4],edx
0x183462:	mov    WORD PTR [rcx+0x4],dx
0x183472:	mov    DWORD PTR [rcx+0x3],edx
0x183481:	mov    DWORD PTR [rcx],edx
0x183480:	mov    QWORD PTR [rcx],rdx
0x183493:	mov    BYTE PTR [rcx+0x8],dl
0x1834a4:	mov    DWORD PTR [rcx+0x8],edx
0x1834a3:	mov    WORD PTR [rcx+0x8],dx
0x1834b3:	mov    DWORD PTR [rcx+0x7],edx
0x1834c3:	mov    DWORD PTR [rcx+0x8],edx
0x1834d4:	mov    DWORD PTR [rcx+0x5],edx
0x1834d3:	mov    QWORD PTR [rcx+0x5],rdx
0x1834e4:	mov    DWORD PTR [rcx+0x6],edx
0x1834e3:	mov    QWORD PTR [rcx+0x6],rdx
0x1834f4:	mov    DWORD PTR [rcx+0x7],edx
0x1834f3:	mov    QWORD PTR [rcx+0x7],rdx
0x183504:	mov    DWORD PTR [rcx+0x8],edx
0x183503:	mov    QWORD PTR [rcx+0x8],rdx
0x183631:	mov    eax,edx
0x183630:	mov    rax,rdx
0x1836cf:	fdivr  st,st(7)
0x1836ce:	sbb    eax,0xffffffff
0x1836cd:	sbb    rax,0xffffffffffffffff
0x18377a:	fdivr  st,st(7)
0x183779:	sbb    eax,0xffffffff
0x183778:	sbb    rax,0xffffffffffffffff
0x184277:	xlat   BYTE PTR ds:[rbx]
0x184274:	fsub   DWORD PTR [rsi+0xf]; 	xlat   BYTE PTR ds:[rbx]
0x1846e6:	clc    
0x1846e5:	mov    eax,edi
0x1846e4:	mov    rax,rdi
0x1846e3:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x184705:	clc    
0x184704:	mov    eax,edi
0x184703:	mov    rax,rdi
0x184702:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x184716:	clc    
0x184715:	mov    eax,edi
0x184714:	mov    rax,rdi
0x184713:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x184728:	clc    
0x184727:	mov    eax,edi
0x184726:	mov    rax,rdi
0x184725:	add    cl,BYTE PTR [rax-0x77]; 	clc    
0x18473e:	clc    
0x18473d:	mov    eax,edi
0x18473c:	mov    rax,rdi
0x18473b:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x184750:	clc    
0x18474f:	mov    eax,edi
0x18474e:	mov    rax,rdi
0x18474d:	or     BYTE PTR [rax-0x77],cl; 	clc    
0x184883:	sub    eax,edx
0x184881:	adc    al,0xe; 	sub    eax,edx
0x1854c8:	sub    eax,edx
0x1854c7:	xchg   edx,eax; 	sub    eax,edx
0x1854ec:	sub    eax,ecx
0x1854ea:	add    al,0x17; 	sub    eax,ecx
0x1854ef:	xor    eax,eax
0x1854ee:	ret    ; 	xor    eax,eax
0x1854ed:	enter  0x31c3,0xc0
0x185506:	sub    eax,ecx
0x185504:	mov    dh,0x7; 	sub    eax,ecx
0x18567c:	sub    eax,edx
0x18567a:	adc    al,0xe; 	sub    eax,edx
0x1864ad:	sub    eax,edx
0x1864ac:	xchg   edx,eax; 	sub    eax,edx
0x1864d1:	sub    eax,ecx
0x1864cf:	add    al,0x17; 	sub    eax,ecx
0x1864d4:	xor    eax,eax
0x1864d3:	ret    ; 	xor    eax,eax
0x1864d2:	enter  0x31c3,0xc0
0x1864e6:	sub    eax,ecx
0x1864e4:	mov    dh,0x7; 	sub    eax,ecx
0x186770:	sub    eax,edx
0x18676f:	xchg   ecx,eax; 	sub    eax,edx
0x18676e:	adc    al,0x91; 	sub    eax,edx
0x188045:	sub    eax,edx
0x188043:	add    al,0x81; 	sub    eax,edx
0x188079:	sub    eax,ecx
0x188077:	add    al,0x82; 	sub    eax,ecx
0x18807c:	xor    eax,eax
0x18807b:	ret    ; 	xor    eax,eax
0x18807a:	enter  0x31c3,0xc0
0x188093:	sub    eax,ecx
0x188091:	add    al,0x82; 	sub    eax,ecx
0x188379:	sub    eax,edx
0x188378:	xchg   ecx,eax; 	sub    eax,edx
0x188377:	adc    al,0x91; 	sub    eax,edx
0x18a00a:	sub    eax,edx
0x18a008:	add    al,0x81; 	sub    eax,edx
0x18a03e:	sub    eax,ecx
0x18a03c:	add    al,0x82; 	sub    eax,ecx
0x18a041:	xor    eax,eax
0x18a040:	ret    ; 	xor    eax,eax
0x18a03f:	enter  0x31c3,0xc0
0x18a063:	sub    eax,ecx
0x18a061:	add    al,0x82; 	sub    eax,ecx
0x18a104:	movsxd eax,ecx
0x18a103:	movsxd rax,ecx
0x18a15d:	sub    eax,esi
0x18a15c:	sub    rax,rsi
0x18a15b:	clc    ; 	sub    rax,rsi
0x18a19e:	sub    eax,esi
0x18a19d:	sub    rax,rsi
0x18a274:	clc    
0x18a273:	add    eax,edi
0x18a272:	add    rax,rdi
0x18a271:	ror    DWORD PTR [rax+0x1],0xf8
0x18a2e0:	xor    eax,eax
0x18a3b3:	sub    eax,eax
0x18a3b2:	sub    rax,r8
0x18a3b1:	clc    ; 	sub    rax,r8
0x18a4a8:	vzeroupper 
0x18a4a7:	enter  0xf8c5,0x77
0x18a5ce:	vzeroupper 
0x18a607:	vzeroupper 
0x18a61c:	vzeroupper 
0x18a61b:	clc    ; 	vzeroupper 
0x18a630:	vzeroupper 
0x18a62f:	clc    ; 	vzeroupper 
0x18a650:	vzeroupper 
0x18a64f:	clc    ; 	vzeroupper 
0x18a670:	vzeroupper 
0x18a66f:	clc    ; 	vzeroupper 
0x18a683:	xor    eax,eax
0x18a697:	vzeroupper 
0x18a696:	clc    ; 	vzeroupper 
0x18a6ab:	vzeroupper 
0x18a6aa:	clc    ; 	vzeroupper 
0x18a6bb:	vzeroupper 
0x18a6ba:	clc    ; 	vzeroupper 
0x18a6d2:	xlat   BYTE PTR ds:[rbx]
0x18a6d1:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a6cf:	rol    ch,1; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a6e9:	vzeroupper 
0x18a6e8:	clc    ; 	vzeroupper 
0x18a73f:	vzeroupper 
0x18a73e:	enter  0xf8c5,0x77
0x18a7d7:	vzeroupper 
0x18a7d6:	clc    ; 	vzeroupper 
0x18a7eb:	vzeroupper 
0x18a7ea:	clc    ; 	vzeroupper 
0x18a7fb:	vzeroupper 
0x18a7fa:	clc    ; 	vzeroupper 
0x18a812:	xlat   BYTE PTR ds:[rbx]
0x18a811:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a80f:	rol    ch,1; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a829:	vzeroupper 
0x18a828:	clc    ; 	vzeroupper 
0x18a8b6:	xlat   BYTE PTR ds:[rbx]
0x18a8b5:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a8b3:	and    ch,al; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a945:	xlat   BYTE PTR ds:[rbx]
0x18a944:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a942:	add    ch,al; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a965:	vzeroupper 
0x18a964:	clc    ; 	vzeroupper 
0x18a996:	ror    BYTE PTR [rdi],0x85
0x18a9a4:	xlat   BYTE PTR ds:[rbx]
0x18a9a3:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a9a1:	and    ch,al; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18a9dd:	vzeroupper 
0x18a9dc:	clc    ; 	vzeroupper 
0x18aa31:	vzeroupper 
0x18aa30:	clc    ; 	vzeroupper 
0x18aa46:	vzeroupper 
0x18aa45:	clc    ; 	vzeroupper 
0x18aa59:	vzeroupper 
0x18aa58:	clc    ; 	vzeroupper 
0x18aa69:	vzeroupper 
0x18aa68:	clc    ; 	vzeroupper 
0x18aa78:	clc    
0x18aa77:	add    eax,edi
0x18aa76:	add    rax,rdi
0x18aa92:	vzeroupper 
0x18aa91:	clc    ; 	vzeroupper 
0x18aab2:	vzeroupper 
0x18aab1:	clc    ; 	vzeroupper 
0x18aac3:	xor    eax,eax
0x18aaf2:	vzeroupper 
0x18aaf1:	clc    ; 	vzeroupper 
0x18ab43:	vzeroupper 
0x18ab8d:	vzeroupper 
0x18ac6d:	vzeroupper 
0x18acac:	vzeroupper 
0x18acbe:	vzeroupper 
0x18acf9:	or     eax,0x1
0x18acfd:	nop    DWORD PTR [rax]
0x18acfc:	ret    ; 	nop    DWORD PTR [rax]
0x18ad28:	sub    eax,ecx
0x18ad36:	sub    eax,ecx
0x18ad34:	mov    dh,0xe; 	sub    eax,ecx
0x18ad40:	xor    eax,eax
0x18ad3e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x18ade4:	enter  0xfffe,0xff
0x18aef5:	vzeroupper 
0x18af18:	xlat   BYTE PTR ds:[rbx]
0x18af17:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18af15:	sub    al,ch; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18af36:	vzeroupper 
0x18af50:	vzeroupper 
0x18af70:	vzeroupper 
0x18b180:	sub    eax,edx
0x18b17f:	xchg   ecx,eax; 	sub    eax,edx
0x18b17e:	adc    al,0x91; 	sub    eax,edx
0x18c595:	sub    eax,edx
0x18c593:	add    al,0x81; 	sub    eax,edx
0x18c5c9:	sub    eax,ecx
0x18c5c7:	add    al,0x82; 	sub    eax,ecx
0x18c5cc:	xor    eax,eax
0x18c5cb:	ret    ; 	xor    eax,eax
0x18c5ca:	enter  0x31c3,0xc0
0x18c5e3:	sub    eax,ecx
0x18c5e1:	add    al,0x82; 	sub    eax,ecx
0x18c859:	sub    eax,edx
0x18c858:	xchg   ecx,eax; 	sub    eax,edx
0x18c857:	adc    al,0x91; 	sub    eax,edx
0x18df3a:	sub    eax,edx
0x18df38:	add    al,0x81; 	sub    eax,edx
0x18df6e:	sub    eax,ecx
0x18df6c:	add    al,0x82; 	sub    eax,ecx
0x18df71:	xor    eax,eax
0x18df70:	ret    ; 	xor    eax,eax
0x18df6f:	enter  0x31c3,0xc0
0x18df93:	sub    eax,ecx
0x18df91:	add    al,0x82; 	sub    eax,ecx
0x18e027:	vzeroupper 
0x18e141:	vzeroupper 
0x18e162:	vzeroupper 
0x18e182:	vzeroupper 
0x18e1a2:	xlat   BYTE PTR ds:[rbx]
0x18e1a1:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e19f:	mov    al,0xc5; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e1c0:	vzeroupper 
0x18e24d:	vzeroupper 
0x18e24c:	clc    ; 	vzeroupper 
0x18e367:	vzeroupper 
0x18e366:	clc    ; 	vzeroupper 
0x18e37b:	vzeroupper 
0x18e37a:	clc    ; 	vzeroupper 
0x18e38b:	vzeroupper 
0x18e38a:	clc    ; 	vzeroupper 
0x18e3a2:	xlat   BYTE PTR ds:[rbx]
0x18e3a1:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e39f:	rol    ch,1; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e3b9:	vzeroupper 
0x18e3b8:	clc    ; 	vzeroupper 
0x18e3e9:	xlat   BYTE PTR ds:[rbx]
0x18e3e8:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e3e6:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18e449:	xlat   BYTE PTR ds:[rbx]
0x18e448:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e446:	rol    ch,cl; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e496:	xlat   BYTE PTR ds:[rbx]
0x18e495:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e493:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18e4b2:	xlat   BYTE PTR ds:[rbx]
0x18e4b1:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e4af:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18e4ce:	xlat   BYTE PTR ds:[rbx]
0x18e4cd:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e4cb:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18e4ea:	xlat   BYTE PTR ds:[rbx]
0x18e4e9:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e4e7:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18e509:	vzeroupper 
0x18e549:	vzeroupper 
0x18e56e:	vzeroupper 
0x18e582:	vzeroupper 
0x18e5e2:	vzeroupper 
0x18e69a:	vzeroupper 
0x18e6ae:	vzeroupper 
0x18e6ce:	vzeroupper 
0x18e6fe:	xlat   BYTE PTR ds:[rbx]
0x18e6fd:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e6fb:	fcmovnb st,st(5); 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18e71c:	vzeroupper 
0x18e746:	ror    BYTE PTR [rdi],0x85
0x18e7ab:	vzeroupper 
0x18e8d3:	vzeroupper 
0x18e908:	vzeroupper 
0x18e91f:	vzeroupper 
0x18e943:	vzeroupper 
0x18e963:	vzeroupper 
0x18e983:	vzeroupper 
0x18e993:	vzeroupper 
0x18e9a0:	xor    eax,eax
0x18e99e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x18e9ba:	vzeroupper 
0x18e9ce:	vzeroupper 
0x18e9ee:	vzeroupper 
0x18ea1e:	xlat   BYTE PTR ds:[rbx]
0x18ea1d:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18ea1b:	fcmovnb st,st(5); 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18ea3c:	vzeroupper 
0x18ea9b:	vzeroupper 
0x18eaf7:	vzeroupper 
0x18eb20:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x18eb1f:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x18eb1d:	mov    ecx,edx; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x18eb3b:	mov    BYTE PTR [rdi],cl
0x18eb39:	mov    dh,0xe; 	mov    BYTE PTR [rdi],cl
0x18eb61:	mov    DWORD PTR [rdi],esi
0x18eb60:	mov    QWORD PTR [rdi],rsi
0x18eb5f:	clc    ; 	mov    QWORD PTR [rdi],rsi
0x18eb6e:	mov    DWORD PTR [rdi],esi
0x18eb6d:	cld    ; 	mov    DWORD PTR [rdi],esi
0x18eb7f:	mov    DWORD PTR [rdi],esi
0x18eb7e:	mov    WORD PTR [rdi],si
0x18ebfb:	vzeroupper 
0x18ec29:	vzeroupper 
0x18ecdd:	vzeroupper 
0x18ed84:	vzeroupper 
0x18ee10:	vzeroupper 
0x18eea0:	vzeroupper 
0x18ef16:	vzeroupper 
0x18ef30:	mov    eax,edx
0x18ef2f:	mov    rax,rdx
0x18ef2e:	stos   BYTE PTR es:[rdi],al; 	mov    rax,rdx
0x18ef76:	vzeroupper 
0x18efa1:	vzeroupper 
0x18f006:	vzeroupper 
0x18f027:	vzeroupper 
0x18f026:	pextrw edi,mm0,0x77
0x18f035:	vzeroupper 
0x18f041:	vzeroupper 
0x18f040:	pextrw edi,mm0,0x77
0x18f04b:	vzeroupper 
0x18f04a:	pextrw edi,mm0,0x77
0x18f057:	vzeroupper 
0x18f056:	pextrw edi,mm0,0x77
0x18f131:	vzeroupper 
0x18f16c:	vzeroupper 
0x18f184:	vzeroupper 
0x18f196:	jne    0x18f17c
0x18f194:	cmp    edx,DWORD PTR [rsi]; 	jne    0x18f17c
0x18f1a0:	xor    eax,eax
0x18f19e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x18f345:	vzeroupper 
0x18f368:	xlat   BYTE PTR ds:[rbx]
0x18f367:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f365:	sub    al,ch; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f389:	vzeroupper 
0x18f3a3:	vzeroupper 
0x18f3c3:	vzeroupper 
0x18f458:	vzeroupper 
0x18f457:	enter  0xf8c5,0x77
0x18f57e:	vzeroupper 
0x18f5b7:	vzeroupper 
0x18f5cc:	vzeroupper 
0x18f5cb:	clc    ; 	vzeroupper 
0x18f5e0:	vzeroupper 
0x18f5df:	clc    ; 	vzeroupper 
0x18f600:	vzeroupper 
0x18f5ff:	clc    ; 	vzeroupper 
0x18f620:	vzeroupper 
0x18f61f:	clc    ; 	vzeroupper 
0x18f633:	xor    eax,eax
0x18f647:	vzeroupper 
0x18f646:	clc    ; 	vzeroupper 
0x18f65b:	vzeroupper 
0x18f65a:	clc    ; 	vzeroupper 
0x18f66b:	vzeroupper 
0x18f66a:	clc    ; 	vzeroupper 
0x18f682:	xlat   BYTE PTR ds:[rbx]
0x18f681:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f67f:	rol    ch,1; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f699:	vzeroupper 
0x18f698:	clc    ; 	vzeroupper 
0x18f726:	vzeroupper 
0x18f840:	vzeroupper 
0x18f861:	vzeroupper 
0x18f881:	vzeroupper 
0x18f8a2:	xlat   BYTE PTR ds:[rbx]
0x18f8a1:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f89f:	mov    al,0xc5; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f8bf:	vzeroupper 
0x18f8f9:	xlat   BYTE PTR ds:[rbx]
0x18f8f8:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f8f6:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18f959:	xlat   BYTE PTR ds:[rbx]
0x18f958:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f956:	rol    ch,cl; 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f9a6:	xlat   BYTE PTR ds:[rbx]
0x18f9a5:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f9a3:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18f9c2:	xlat   BYTE PTR ds:[rbx]
0x18f9c1:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f9bf:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18f9de:	xlat   BYTE PTR ds:[rbx]
0x18f9dd:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f9db:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18f9fa:	xlat   BYTE PTR ds:[rbx]
0x18f9f9:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18f9f7:	retf   0xfdc5; 	xlat   BYTE PTR ds:[rbx]
0x18fa1e:	vzeroupper 
0x18fa74:	vzeroupper 
0x18faa9:	vzeroupper 
0x18fab2:	vzeroupper 
0x18fb16:	vzeroupper 
0x18fbce:	vzeroupper 
0x18fbf2:	vzeroupper 
0x18fc12:	vzeroupper 
0x18fc3e:	xlat   BYTE PTR ds:[rbx]
0x18fc3d:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18fc3b:	fcmovnb st,st(5); 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18fc60:	vzeroupper 
0x18fcff:	vzeroupper 
0x18fe3a:	vzeroupper 
0x18fe6c:	vzeroupper 
0x18fe83:	vzeroupper 
0x18fea7:	vzeroupper 
0x18fec7:	vzeroupper 
0x18fee7:	vzeroupper 
0x18fef7:	vzeroupper 
0x18ff00:	xor    eax,eax
0x18fefe:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x18ff1e:	vzeroupper 
0x18ff42:	vzeroupper 
0x18ff62:	vzeroupper 
0x18ff8e:	xlat   BYTE PTR ds:[rbx]
0x18ff8d:	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18ff8b:	fcmovnb st,st(5); 	std    ; 	xlat   BYTE PTR ds:[rbx]
0x18ffb0:	vzeroupper 
0x18fff6:	sub    eax,ecx
0x18fff4:	mov    dh,0xe; 	sub    eax,ecx
0x190a6d:	cmp    BYTE PTR [rdi],dl
0x190b97:	xor    eax,eax
0x190b95:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190bbf:	xor    eax,eax
0x190bbd:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190c4b:	sub    eax,edx
0x190c72:	xor    eax,eax
0x190c70:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190c96:	sub    eax,edx
0x190d2e:	sub    eax,ecx
0x190d2c:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x190d62:	xor    eax,eax
0x190d60:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190d99:	sub    eax,ecx
0x190d97:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x190e21:	xor    eax,eax
0x190e1f:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190e52:	xor    eax,eax
0x190e50:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190e7c:	xor    eax,eax
0x190e7a:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190e98:	sub    eax,ecx
0x190f1a:	xor    eax,eax
0x190f18:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x190f9d:	xor    eax,eax
0x190f9b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19101d:	xor    eax,eax
0x19101b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19109d:	xor    eax,eax
0x19109b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19111d:	xor    eax,eax
0x19111b:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1911a5:	sub    eax,ecx
0x1912cb:	xor    eax,eax
0x1912c9:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19135b:	xor    eax,eax
0x191359:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19137e:	push   rdi
0x19137d:	outs   dx,DWORD PTR ds:[rsi]; 	push   rdi
0x1913ee:	xor    eax,eax
0x1913ec:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19148e:	xor    eax,eax
0x19148c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19152e:	xor    eax,eax
0x19152c:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19159f:	xor    eax,eax
0x19159d:	jne    0x1915c3; 	xor    eax,eax
0x1915e9:	sub    eax,ecx
0x1915e7:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x1915fb:	sub    eax,ecx
0x1915f9:	add    BYTE PTR [rax],al; 	sub    eax,ecx
0x19209d:	cmp    BYTE PTR [rdi],dl
0x1921c7:	xor    eax,eax
0x1921c5:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1921ed:	xor    eax,eax
0x1921eb:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x192268:	xor    eax,eax
0x192266:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1922ed:	xor    eax,eax
0x1922eb:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x192379:	xor    eax,eax
0x192377:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1923df:	xor    eax,eax
0x1923dd:	jne    0x192403; 	xor    eax,eax
0x192413:	xor    eax,eax
0x192411:	jne    0x192416; 	xor    eax,eax
0x19241d:	neg    eax
0x19241b:	jl     0x192420; 	neg    eax
0x19241f:	ret    
0x19241e:	fadd   st,st(3)
0x19241d:	neg    eax; 	ret    
0x19241c:	add    esi,edi; 	fadd   st,st(3)
0x192421:	xor    eax,eax
0x192420:	ret    ; 	xor    eax,eax
0x19241f:	ret    ; 	ret    ; 	xor    eax,eax
0x1924f7:	jns    0x1924f8
0x1924f6:	adc    DWORD PTR [rcx-0x1],edi
0x1924f5:	adc    QWORD PTR [rcx-0x1],rdi
0x192532:	adc    DWORD PTR [rcx-0x1],ebx
0x192531:	adc    QWORD PTR [rcx-0x1],rbx
0x1925a3:	clc    
0x1925a2:	rex.WB clc 
0x1925a1:	mov    DWORD PTR [rcx-0x8],ecx
0x1925a0:	mov    QWORD PTR [r9-0x8],rcx
0x1925b4:	cld    
0x1925b3:	rex.WB cld 
0x1925b2:	mov    DWORD PTR [rcx-0x4],ecx
0x1925b1:	mov    DWORD PTR [r9-0x4],ecx
0x1925c7:	mov    DWORD PTR [rcx-0x2],ecx
0x1925c6:	mov    DWORD PTR [r9-0x2],ecx
0x1925d2:	mov    BYTE PTR [rdi],cl
0x1925d0:	mov    cl,BYTE PTR [rsi]; 	mov    BYTE PTR [rdi],cl
0x192731:	jns    0x192732
0x192730:	adc    DWORD PTR [rcx-0x1],edi
0x19272f:	adc    QWORD PTR [rcx-0x1],rdi
0x192898:	jns    0x1928a1
0x192897:	adc    DWORD PTR [rcx+0x7],edi
0x192896:	adc    QWORD PTR [rcx+0x7],rdi
0x1929fb:	clc    
0x1929fa:	jg     0x1929f4
0x1929f9:	adc    DWORD PTR [rdi-0x8],edi
0x1929f8:	adc    QWORD PTR [rdi-0x8],rdi
0x192c1e:	adc    DWORD PTR [rsi-0x1],edx
0x192c1d:	adc    QWORD PTR [rsi-0x1],rdx
0x192c3f:	adc    DWORD PTR [rsi-0x1],edx
0x192c3e:	adc    QWORD PTR [rsi-0x1],rdx
0x192c52:	adc    DWORD PTR [rsi-0x1],edx
0x192c51:	adc    QWORD PTR [rsi-0x1],rdx
0x192c7c:	clc    
0x192c7b:	rex.RX clc 
0x192c8b:	cld    
0x192c8a:	rex.WRX cld 
0x192c89:	mov    DWORD PTR [rsi-0x4],ecx
0x192c96:	mov    DWORD PTR [rsi-0x2],ecx
0x192c95:	mov    WORD PTR [rsi-0x2],cx
0x192c9f:	mov    BYTE PTR [rdi],cl
0x192c9d:	jb     0x192ca1; 	mov    BYTE PTR [rdi],cl
0x192d27:	adc    DWORD PTR [rsi-0x1],edx
0x192d26:	adc    QWORD PTR [rsi-0x1],rdx
0x192d7f:	adc    DWORD PTR [rsi+0x3],edx
0x192d7e:	adc    QWORD PTR [rsi+0x3],rdx
0x192e1c:	adc    DWORD PTR [rsi+0x7],edx
0x192e1b:	adc    QWORD PTR [rsi+0x7],rdx
0x192e86:	vzeroupper 
0x192ef2:	vzeroupper 
0x192f1b:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x192f1a:	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x192f18:	mov    ecx,edx; 	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
0x192f3b:	mov    BYTE PTR [rdi],cl
0x192f39:	mov    dh,0xe; 	mov    BYTE PTR [rdi],cl
0x192f52:	vzeroupper 
0x192f79:	mov    DWORD PTR [rdi],esi
0x192f78:	mov    QWORD PTR [rdi],rsi
0x192f77:	clc    ; 	mov    QWORD PTR [rdi],rsi
0x192f86:	mov    DWORD PTR [rdi],esi
0x192f85:	cld    ; 	mov    DWORD PTR [rdi],esi
0x192f97:	mov    DWORD PTR [rdi],esi
0x192f96:	mov    WORD PTR [rdi],si
0x193033:	vzeroupper 
0x193032:	cld    ; 	vzeroupper 
0x193071:	vzeroupper 
0x193148:	vzeroupper 
0x19320e:	vzeroupper 
0x1932e1:	vzeroupper 
0x1933b4:	vzeroupper 
0x193437:	vzeroupper 
0x193450:	mov    eax,edx
0x19344f:	mov    rax,rdx
0x19344e:	stos   BYTE PTR es:[rdi],al; 	mov    rax,rdx
0x1934a3:	vzeroupper 
0x1934d6:	vzeroupper 
0x193559:	vzeroupper 
0x19357f:	vzeroupper 
0x19357e:	pextrw edi,mm0,0x77
0x19358d:	vzeroupper 
0x19359b:	vzeroupper 
0x1935a7:	vzeroupper 
0x1935a6:	pextrw edi,mm0,0x77
0x1935b1:	vzeroupper 
0x1935b0:	pextrw edi,mm0,0x77
0x1935bd:	vzeroupper 
0x1935bc:	pextrw edi,mm0,0x77
0x193651:	xor    eax,eax
0x193650:	xor    rax,rax
0x19369a:	lea    eax,[rdi+0x7]
0x193699:	lea    rax,[rdi+0x7]
0x1936c8:	lea    eax,[rdi+0x3]
0x1936c7:	lea    rax,[rdi+0x3]
0x193721:	lea    eax,[rdi+0xf]
0x193720:	lea    rax,[rdi+0xf]
0x193767:	lea    eax,[rdi+0xb]
0x193766:	lea    rax,[rdi+0xb]
0x1937ad:	lea    eax,[rdi+0x7]
0x1937ac:	lea    rax,[rdi+0x7]
0x193800:	lea    eax,[rdi+0xf]
0x1937ff:	lea    rax,[rdi+0xf]
0x193811:	lea    eax,[rdi]
0x193810:	lea    rax,[rdi]
0x193821:	lea    eax,[rdi+0x1]
0x193820:	lea    rax,[rdi+0x1]
0x193831:	lea    eax,[rdi+0x2]
0x193830:	lea    rax,[rdi+0x2]
0x193841:	lea    eax,[rdi+0x3]
0x193840:	lea    rax,[rdi+0x3]
0x193851:	lea    eax,[rdi+0x4]
0x193850:	lea    rax,[rdi+0x4]
0x193861:	lea    eax,[rdi+0x5]
0x193860:	lea    rax,[rdi+0x5]
0x193871:	lea    eax,[rdi+0x6]
0x193870:	lea    rax,[rdi+0x6]
0x193881:	lea    eax,[rdi+0x8]
0x193880:	lea    rax,[rdi+0x8]
0x193891:	lea    eax,[rdi+0x9]
0x193890:	lea    rax,[rdi+0x9]
0x1938a1:	lea    eax,[rdi+0xa]
0x1938a0:	lea    rax,[rdi+0xa]
0x1938b1:	lea    eax,[rdi+0xb]
0x1938b0:	lea    rax,[rdi+0xb]
0x1938c1:	lea    eax,[rdi+0xc]
0x1938c0:	lea    rax,[rdi+0xc]
0x1938d1:	lea    eax,[rdi+0xd]
0x1938d0:	lea    rax,[rdi+0xd]
0x1938e1:	lea    eax,[rdi+0xe]
0x1938e0:	lea    rax,[rdi+0xe]
0x194aff:	sub    eax,edx
0x194b18:	sub    eax,edx
0x194b17:	lock sub eax,edx
0x194b16:	push   rsi; 	lock sub eax,edx
0x194b28:	sub    eax,edx
0x194b27:	icebp  ; 	sub    eax,edx
0x194b26:	push   rsi; 	icebp  ; 	sub    eax,edx
0x194b38:	sub    eax,edx
0x194b37:	repnz sub eax,edx
0x194b36:	push   rsi; 	repnz sub eax,edx
0x194b48:	sub    eax,edx
0x194b47:	repz sub eax,edx
0x194b46:	push   rsi; 	repz sub eax,edx
0x194b58:	sub    eax,edx
0x194b57:	hlt    ; 	sub    eax,edx
0x194b56:	push   rsi; 	hlt    ; 	sub    eax,edx
0x194b68:	sub    eax,edx
0x194b67:	cmc    ; 	sub    eax,edx
0x194b66:	push   rsi; 	cmc    ; 	sub    eax,edx
0x194b78:	sub    eax,edx
0x194bb3:	sub    eax,edx
0x194e2a:	xor    eax,eax
0x194e28:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x194ed7:	xor    eax,eax
0x194ed5:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x194f92:	xor    eax,eax
0x194f90:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x19502b:	xor    eax,eax
0x195029:	jne    0x195045; 	xor    eax,eax
0x195048:	fdivr  st,st(7)
0x195047:	sbb    eax,0xffffffff
0x195050:	xor    eax,eax
0x19504e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x195531:	add    BYTE PTR [rax],al
0x19554a:	add    BYTE PTR [rax],al
0x195548:	adc    al,0x1; 	add    BYTE PTR [rax],al
0x19555f:	add    BYTE PTR [rax],al
0x19555d:	inc    DWORD PTR [rax]; 	add    BYTE PTR [rax],al
0x19557a:	add    BYTE PTR [rax],al
0x195578:	in     al,0x0; 	add    BYTE PTR [rax],al
0x195658:	xor    eax,eax
0x195656:	jne    0x195660; 	xor    eax,eax
0x195667:	neg    eax
0x195665:	jg     0x195670; 	neg    eax
0x19566e:	add    BYTE PTR [rax],al
0x19566d:	add    BYTE PTR [rax],r8b
0x195680:	xor    eax,eax
0x19567e:	add    BYTE PTR [rax],al; 	xor    eax,eax
0x1956e6:	shr    eax,0x38
0x1956e5:	shr    rax,0x38
0x19583e:	add    BYTE PTR [rbp+0x29],al
0x195938:	add    BYTE PTR [rax-0x77],cl
0x19598b:	xchg   ebp,eax
0x195989:	fimul  DWORD PTR [rdi]; 	xchg   ebp,eax
0x195a41:	xchg   ebp,eax
0x195a3e:	fild   DWORD PTR [rcx+0xf]; 	xchg   ebp,eax
0x195bb9:	pop    rdi
0x195bb8:	pop    r15
0x195bb7:	pop    rsi; 	pop    r15
0x195bb6:	pop    r14; 	pop    r15
0x195e16:	pop    rdi
0x195e15:	pop    r15
0x195e14:	pop    rsi; 	pop    r15
0x195e13:	pop    r14; 	pop    r15
0x195f68:	xchg   ebp,eax
0x195f65:	fiadd  DWORD PTR [rcx+0xf]; 	xchg   ebp,eax
0x196132:	xchg   ebp,eax
0x196130:	fisttp DWORD PTR [rdi]; 	xchg   ebp,eax
0x1963a7:	xchg   ebp,eax
0x1963a5:	fisttp DWORD PTR [rdi]; 	xchg   ebp,eax
0x1966eb:	loope  0x1966d6
0x196889:	dec    DWORD PTR [rcx-0x77]
0x196a47:	add    BYTE PTR [rax+0x9],cl
0x196ae7:	add    BYTE PTR [rax-0x77],cl
0x196b4f:	add    BYTE PTR [rax-0x77],cl
0x196d15:	ror    BYTE PTR [rcx+0x9],1
0x196d48:	pop    rdi
0x196d47:	pop    r15
0x196d46:	pop    rsi; 	pop    r15
0x196d45:	pop    r14; 	pop    r15
0x196e0c:	pop    rdi
0x196e0b:	pop    r15
0x196e0a:	pop    rsi; 	pop    r15
0x196e09:	pop    r14; 	pop    r15
0x196eb4:	ror    DWORD PTR [rax-0x77],1
0x196f3f:	xchg   ebp,eax
0x196f3d:	ror    BYTE PTR [rdi],0x95
0x196faa:	xchg   ebp,eax
0x197073:	add    BYTE PTR [rcx+0x21],cl
0x1971f7:	xchg   ebp,eax
0x19768f:	add    BYTE PTR [rcx+0x9],cl
0x1977c7:	ror    BYTE PTR [rcx+0x9],1
0x1977fa:	pop    rdi
0x1977f9:	pop    r15
0x1977f8:	pop    rsi; 	pop    r15
0x1977f7:	pop    r14; 	pop    r15
0x197a0b:	xchg   edx,eax
0x197a15:	xchg   edx,eax
0x197a38:	xchg   edx,eax
0x197a35:	rol    DWORD PTR [rcx+0xf],1; 	xchg   edx,eax
0x197a3c:	ror    BYTE PTR [rcx+0x9],cl
0x197aff:	add    BYTE PTR [rcx+0x21],cl
0x197ca0:	pop    rdi
0x197c9f:	pop    r15
0x197c9e:	pop    rsi; 	pop    r15
0x197c9d:	pop    r14; 	pop    r15
0x19831b:	xchg   ebp,eax
0x198319:	fmul   DWORD PTR [rdi]; 	xchg   ebp,eax
0x1983e9:	xchg   ebp,eax
0x1983e6:	fild   DWORD PTR [rcx+0xf]; 	xchg   ebp,eax
0x1985cf:	pop    rdi
0x1985ce:	pop    r15
0x1985cd:	pop    rsi; 	pop    r15
0x1985cc:	pop    r14; 	pop    r15
0x19883e:	pop    rdi
0x19883d:	pop    r15
0x19883c:	pop    rsi; 	pop    r15
0x19883b:	pop    r14; 	pop    r15
0x1989c8:	xchg   ebp,eax
0x1989c5:	fadd   DWORD PTR [rcx+0xf]; 	xchg   ebp,eax
0x198b62:	xchg   ebp,eax
0x198b60:	fisttp DWORD PTR [rdi]; 	xchg   ebp,eax
0x198b7c:	add    BYTE PTR [rcx-0x77],cl
0x198d7f:	xchg   ebp,eax
0x198d7d:	fisttp DWORD PTR [rdi]; 	xchg   ebp,eax
0x198eb4:	dec    DWORD PTR [rax+0x9]
0x19943e:	add    esp,0x38
0x19943d:	add    rsp,0x38
0x199507:	add    esp,0x38
0x199506:	add    rsp,0x38
0x1995ce:	sbb    BYTE PTR [rcx+0x21],cl
0x199659:	pop    rsi
0x199658:	pop    r14
0x199657:	pop    rbx; 	pop    r14
0x199656:	cmp    BYTE PTR [rbx+0x41],bl; 	pop    rsi
0x199771:	pop    rsi
0x199770:	pop    r14
0x19976f:	pop    rbx; 	pop    r14
0x19976e:	cmp    BYTE PTR [rbx+0x41],bl; 	pop    rsi
0x1997bf:	adc    BYTE PTR [rcx-0x77],cl
0x19985b:	pop    rsi
0x19985a:	pop    r14
0x199859:	pop    rbx; 	pop    r14
0x199858:	cmp    BYTE PTR [rbx+0x41],bl; 	pop    rsi
0x19993f:	pop    rsi
0x19993e:	pop    r14
0x19993d:	pop    rbx; 	pop    r14
0x19993c:	cmp    BYTE PTR [rbx+0x41],bl; 	pop    rsi
0x199a4d:	pop    rbx
0x199a4a:	add    esp,0x30; 	pop    rbx
0x199aa1:	add    BYTE PTR [rax-0x7b],cl
0x199ac4:	pop    rbx
0x199ac1:	add    esp,0x30; 	pop    rbx
0x199c39:	fdiv   st,st(3)
0x199ca3:	add    DWORD PTR [rax-0x7d],ecx
0x199d48:	pop    rsp
0x199d47:	pop    r12
0x199d46:	pop    rbp; 	pop    r12
0x199d45:	pop    rbx; 	pop    rbp; 	pop    r12
0x199ef9:	pop    rbp
0x199ef8:	pop    r13
0x199ef7:	pop    rsp; 	pop    r13
0x199ef6:	pop    r12; 	pop    r13
0x19a0cf:	add    bl,dh
0x19a107:	add    bl,dh
0x19a163:	add    esp,0x8
0x19a162:	add    rsp,0x8
0x19a251:	xor    BYTE PTR [rax-0x7d],cl
0x19a26d:	add    BYTE PTR [rax-0x77],cl
0x19a2c7:	add    BYTE PTR [rax-0x7d],cl
0x19a323:	add    BYTE PTR [rax+0x39],cl
0x19a372:	pop    rsp
0x19a371:	pop    r12
0x19a370:	pop    rbp; 	pop    r12
0x19a36f:	pop    rbx; 	pop    rbp; 	pop    r12
0x19a452:	pop    rsp
0x19a451:	pop    r12
0x19a450:	pop    rbp; 	pop    r12
0x19a44f:	pop    rbx; 	pop    rbp; 	pop    r12
0x19a4a7:	pop    rbp
0x19a4a6:	pop    rbx; 	pop    rbp
0x19a4a5:	or     BYTE PTR [rbx+0x5d],bl
0x19a643:	pop    rbx
0x19a641:	add    BYTE PTR [rax],al; 	pop    rbx
0x19a68e:	pop    rbx
0x19a68c:	jne    0x19a678; 	pop    rbx
0x19a68b:	fbstp  TBYTE PTR [rbp-0x16]; 	pop    rbx
0x19a6f9:	push   rbx
0x19a737:	pop    rbx
0x19a736:	loope  0x19a793
0x19a735:	jne    0x19a718; 	pop    rbx
0x19a734:	add    BYTE PTR [rbp-0x1f],dh; 	pop    rbx
0x19a78e:	add    BYTE PTR [rax+0x39],cl
0x19a7a5:	ins    BYTE PTR es:[rdi],dx
0x19a7a2:	add    ecx,DWORD PTR [rax-0x73]; 	ins    BYTE PTR es:[rdi],dx
0x19a7b1:	adc    ecx,DWORD PTR [rax-0x7d]
0x19a7c8:	add    BYTE PTR [rax+0x39],cl
0x19a7df:	ins    BYTE PTR es:[rdi],dx
0x19a7dc:	add    ecx,DWORD PTR [rax-0x73]; 	ins    BYTE PTR es:[rdi],dx
0x19a7ea:	cmp    ecx,DWORD PTR [rax-0x7d]
0x19a7fe:	pop    rbp
0x19a7fd:	pop    rbx; 	pop    rbp
0x19a7fc:	or     BYTE PTR [rbx+0x5d],bl
0x19a7ff:	ret    
0x19a7fe:	pop    rbp; 	ret    
0x19a7fd:	pop    rbx; 	pop    rbp; 	ret    
0x19a7fc:	or     BYTE PTR [rbx+0x5d],bl; 	ret    
0x19a84e:	pop    rbx
0x19a84c:	add    BYTE PTR [rax],al; 	pop    rbx
0x19a8aa:	add    esp,0x8
0x19a8a9:	add    rsp,0x8
0x19a919:	add    esp,0x8
0x19a918:	add    rsp,0x8
0x19a94f:	loopne 0x19a944
0x19a94d:	add    bh,bh; 	loopne 0x19a944
0x19aa1b:	pop    rbx
0x19aa1a:	in     eax,dx; 	pop    rbx
0x19aa19:	jne    0x19aa08; 	pop    rbx
0x19aa18:	fidiv  DWORD PTR [rbp-0x13]; 	pop    rbx
0x19aa1f:	add    bl,dh
0x19aa5b:	pop    rbp
0x19aa59:	add    BYTE PTR [rax],al; 	pop    rbp
0x19aa5f:	add    bl,dh
0x19ab11:	add    esp,0x8
0x19ab10:	add    rsp,0x8
0x19ab17:	add    bl,dh
0x19ac09:	pop    rbp
0x19ac08:	pop    r13
0x19ac07:	pop    rsp; 	pop    r13
0x19ac06:	pop    r12; 	pop    r13
0x19ac83:	pop    rsp
0x19ac82:	pop    r12
0x19ac81:	pop    rbp; 	pop    r12
0x19ac80:	pop    rbx; 	pop    rbp; 	pop    r12
0x19accf:	add    bl,dh
0x19acff:	add    bl,dh
0x19ad2f:	add    bl,dh
0x19ad5f:	add    bl,dh
0x19ad8f:	add    bl,dh
0x19adac:	add    esi,ebx
0x19adc5:	add    esp,0x8
0x19adc4:	add    rsp,0x8
0x19ade8:	pop    rbp
0x19ade7:	pop    rbx; 	pop    rbp
0x19ade6:	or     BYTE PTR [rbx+0x5d],bl
0x19ae30:	pop    rbp
0x19ae2f:	pop    rbx; 	pop    rbp
0x19ae2d:	xor    eax,eax; 	pop    rbx; 	pop    rbp
0x19b5f6:	dec    DWORD PTR [rax-0x7d]
0x19b737:	pop    rdi
0x19b736:	pop    r15
0x19b735:	pop    rsi; 	pop    r15
0x19b734:	pop    r14; 	pop    r15
0x19bf7a:	or     BYTE PTR [rax-0x77],cl
0x19bf79:	or     BYTE PTR [rax-0x77],cl
0x19c2d3:	or     BYTE PTR [rbp-0x77],cl
0x19c2d2:	pop    rax; 	or     BYTE PTR [rbp-0x77],cl
0x19c5a7:	and    BYTE PTR [rbp-0x77],cl
0x19c633:	or     BYTE PTR [rax+0x39],cl
0x19c632:	in     al,dx; 	or     BYTE PTR [rax+0x39],cl
0x19c64a:	ins    BYTE PTR es:[rdi],dx
0x19c647:	add    ecx,DWORD PTR [rax-0x73]; 	ins    BYTE PTR es:[rdi],dx
0x19c651:	adc    ecx,DWORD PTR [rax-0x7d]
0x19c660:	pop    rbp
0x19c65f:	pop    rbx; 	pop    rbp
0x19c65e:	or     BYTE PTR [rbx+0x5d],bl
0x19c69f:	pop    rsp
0x19c69e:	pop    r12
0x19c69d:	pop    rbp; 	pop    r12
0x19c69c:	pop    rbx; 	pop    rbp; 	pop    r12
0x19c724:	pop    rsp
0x19c723:	pop    r12
0x19c722:	pop    rbp; 	pop    r12
0x19c721:	pop    rbx; 	pop    rbp; 	pop    r12
0x19c7b6:	pop    rbx
0x19c7b4:	add    BYTE PTR [rax],al; 	pop    rbx
0x19c864:	add    BYTE PTR [rax+0x39],cl
0x19c880:	pop    rbp
0x19c87f:	pop    rbx; 	pop    rbp
0x19c87e:	or     BYTE PTR [rbx+0x5d],bl
0x19dcca:	add    BYTE PTR [rax],al
0x19e0ca:	add    BYTE PTR [rax],al
0x19e2ca:	add    BYTE PTR [rax],al
0x19e6ca:	add    BYTE PTR [rax],al
0x1a3ca2:	add    BYTE PTR [rax],al
0x1a3d7a:	add    BYTE PTR [rax],al
0x1a4196:	add    BYTE PTR [rax],al
0x1a42ea:	add    BYTE PTR [rax],al
0x1a46ea:	add    BYTE PTR [rax],al
0x1a46e8:	ror    BYTE PTR [rax+rax*1],0x0
0x1a4aea:	add    BYTE PTR [rax],al
0x1a4ae9:	sldt   WORD PTR [rax]
0x1a591e:	add    BYTE PTR [rax],al
0x1a591c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1a5e0e:	add    BYTE PTR [rax],al
0x1a5e0c:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1a6916:	add    BYTE PTR [rax],al
0x1a6914:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1a70ae:	add    BYTE PTR [rax],al
0x1a70ac:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],al
0x1a9266:	add    BYTE PTR [rax],al
0x1a9420:	rol    cl,0xc2
0x1aa145:	sbb    bl,BYTE PTR [rsi]
0x1aa182:	cld    
0x1aa326:	push   rsi
0x1aa325:	jrcxz  0x1aa37d
0x1aa324:	mov    ah,bl; 	push   rsi
0x1aa52a:	mov    ah,0x13
0x1aa671:	outs   dx,DWORD PTR ds:[rsi]
0x1aa9d1:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
0x1aa9d0:	mov    ah,0xa5
0x1aab19:	xchg   esp,eax
0x1aab18:	xchg   edi,eax; 	xchg   esp,eax
0x1aab17:	test   al,0x97; 	xchg   esp,eax
0x1aab16:	cld    ; 	test   al,0x97; 	xchg   esp,eax
0x1ab3c5:	jnp    0x1ab380
0x1ab3c4:	stc    ; 	jnp    0x1ab380
0x1ab3c3:	sar    ecx,1; 	jnp    0x1ab380
0x1ab54a:	sti    
0x1ab549:	addr32 sti 
0x1ab548:	shl    DWORD PTR [rdi-0x5],1
0x1ab6aa:	xor    al,0xd8
0x1ab6a8:	je     0x1ab66f; 	xor    al,0xd8
0x1ab806:	mov    edi,DWORD PTR [rdx]
0x1ab804:	mov    bh,0xb4; 	mov    edi,DWORD PTR [rdx]
0x1ac7d9:	ret    
0x1ac7d8:	fcmovb st,st(3)
0x1ac7d7:	out    dx,al; 	fcmovb st,st(3)
0x1ac7d6:	mov    al,0xee; 	fcmovb st,st(3)
0x1acb2c:	stos   DWORD PTR es:[rdi],eax
0x1acc64:	int    0x6b
0x1acc62:	sub    edi,esi; 	int    0x6b
0x1ad3ab:	stos   DWORD PTR es:[rdi],eax
0x1ad3aa:	mov    ch,0xab
0x1ad3a9:	cmc    ; 	mov    ch,0xab
0x1ad3a8:	out    0xf5,eax; 	mov    ch,0xab
0x1ad559:	fcomp  DWORD PTR [rdx+0x21]
0x1af273:	jmp    rax
0x1af272:	out    dx,eax; 	jmp    rax
0x1af28b:	call   QWORD PTR [rax]
0x1af28a:	sti    ; 	call   QWORD PTR [rax]
0x1b02fc:	outs   dx,BYTE PTR ds:[rsi]
0x1b03a7:	call   rbp
0x1b03a6:	bnd call rbp
0x1b03a5:	fdivp  st(2),st; 	call   rbp
0x1b05db:	push   QWORD PTR [rdi]
0x1b05da:	repnz push QWORD PTR [rdi]
0x1b05f3:	push   QWORD PTR [rdi]
0x1b05f2:	repnz push QWORD PTR [rdi]
0x1b05f1:	int    0xf2; 	push   QWORD PTR [rdi]
0x1befe4:	pop    rsp
0x1befec:	cwde   
0x1beff4:	lods   al,BYTE PTR ds:[rsi]
0x1bf23f:	add    ah,ah
0x1bf23d:	rol    DWORD PTR [rax],1; 	add    ah,ah
0x1c1ad3:	dec    DWORD PTR [rax]
0x1c1ad1:	and    al,0xf7; 	dec    DWORD PTR [rax]
0x1c1ae3:	push   QWORD PTR [rax]
0x1c1ae1:	and    al,0xf7; 	push   QWORD PTR [rax]
0x1c1af4:	pop    rax
0x1c1af2:	idiv   edi; 	pop    rax
0x1c1afc:	ins    BYTE PTR es:[rdi],dx
0x1c1afa:	idiv   edi; 	ins    BYTE PTR es:[rdi],dx
0x1c1b0c:	xchg   esp,eax
0x1c1b0a:	idiv   edi; 	xchg   esp,eax
0x1c1b23:	call   rax
0x1c1b2b:	jmp    rsp
0x1c2488:	push   rsp
0x1c2486:	add    DWORD PTR [rax],eax; 	push   rsp
0x1c2485:	std    ; 	add    DWORD PTR [rax],eax; 	push   rsp
0x1c327c:	clc    
0x1c361f:	add    ah,dl
0x1c77d4:	int3   
0x1c77d3:	add    ah,cl
0x1c77d2:	add    BYTE PTR [rax],al; 	int3   
0x1c77d1:	add    BYTE PTR [rax],al; 	int3   
0x1c9599:	or     BYTE PTR [rbx+rcx*1+0x47],al
0x1c9a86:	jmp    0x1c9a87
0x1c9a85:	nop; 	jmp    0x1c9a87
0x1c9a84:	pushf  ; 	nop; 	jmp    0x1c9a87
0x1cb79b:	add    ch,BYTE PTR [rsi+rcx*1+0x8]
0x1cb7ea:	jae    0x1cb7f6
0x1cb7e9:	add    dh,BYTE PTR [rbx+0xa]
0x1cb7e8:	or     eax,DWORD PTR [rdx]; 	jae    0x1cb7f6
0x1cd762:	pop    rdx
0x1cd760:	add    DWORD PTR [rdx],0x5a
0x1cde65:	add    cl,BYTE PTR [rsi+rcx*1+0x8]
0x1cfb14:	int3   
0x1cfb13:	add    ah,cl
0x1cfb12:	add    BYTE PTR [rax],al; 	int3   
0x1cfb11:	add    BYTE PTR [rax],al; 	add    ah,cl
0x1d19bc:	add    DWORD PTR [rdx],0x4a
0x1d3bee:	add    al,BYTE PTR [rbx]
0x1d3bed:	nop; 	add    al,BYTE PTR [rbx]
0x1d58c8:	pop    rax
0x1d58c6:	add    DWORD PTR [rax],eax; 	pop    rax
0x1d58f0:	nop
0x1d58ee:	add    DWORD PTR [rax],eax; 	nop
0x1d5904:	lods   al,BYTE PTR ds:[rsi]
0x1d5902:	add    DWORD PTR [rax],eax; 	lods   al,BYTE PTR ds:[rsi]
0x1d5917:	add    al,cl
0x1d5915:	and    DWORD PTR [rcx],eax; 	add    al,cl
0x1d592b:	add    ah,ah
0x1d5929:	and    DWORD PTR [rcx],eax; 	add    ah,ah
0x1d8dac:	push   rsp
0x1d8daa:	add    DWORD PTR [rax],eax; 	push   rsp
0x1d8da9:	push   rsi; 	add    DWORD PTR [rax],eax; 	push   rsp
0x1d8dbf:	add    al,dl
0x1db9be:	add    DWORD PTR [rbx],eax
0x1dfa5f:	add    BYTE PTR [rax],bl
0x1dfa5d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],bl
0x1dfc23:	add    DWORD PTR [rdi],0x2
0x1dfc22:	rex.R add DWORD PTR [rdi],0x2
0x1e3254:	or     ch,BYTE PTR [rdi+0x5]
0x1e33d6:	or     ch,BYTE PTR [rdi+0x5]
0x1e33f2:	or     ch,BYTE PTR [rdi+0x5]
0x1e340f:	add    DWORD PTR [rbx],ecx
0x1e3eca:	add    BYTE PTR [rax],al
0x1e3ec8:	adc    BYTE PTR [rax],cl; 	add    BYTE PTR [rax],al
0x1e43be:	add    BYTE PTR [rax],al
0x1e43bc:	jmp    0x1e43c3; 	add    BYTE PTR [rax],al
0x1e44f6:	add    BYTE PTR [rax],al
0x1e4526:	add    BYTE PTR [rax],al
0x1e494a:	add    BYTE PTR [rax],al
0x1e4948:	test   al,0x8; 	add    BYTE PTR [rax],al
0x1e4c16:	add    BYTE PTR [rax],al
0x1e51ee:	add    BYTE PTR [rax],al
0x1e6322:	add    BYTE PTR [rax],al
0x1e6320:	jp     0x1e6329; 	add    BYTE PTR [rax],al
0x1e67d2:	add    BYTE PTR [rax],al
0x1e78ef:	add    BYTE PTR [rax],dh
0x1e78ed:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e79af:	add    BYTE PTR [rax],dh
0x1e79ad:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e7bef:	add    BYTE PTR [rax],dh
0x1e7bed:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e7caf:	add    BYTE PTR [rax],dh
0x1e7cad:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e7d6f:	add    BYTE PTR [rax],dh
0x1e7d6d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e812f:	add    BYTE PTR [rax],dh
0x1e812d:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e81ef:	add    BYTE PTR [rax],dh
0x1e81ed:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e82af:	add    BYTE PTR [rax],dh
0x1e82ad:	add    BYTE PTR [rax],al; 	add    BYTE PTR [rax],dh
0x1e8557:	add    al,al
0x1e8555:	add    BYTE PTR [rax],al; 	add    al,al
0x1e8a8f:	add    al,cl
0x1e8a8d:	add    BYTE PTR [rax],al; 	add    al,cl
0x1eb20f:	lea    eax,[rcx]
0x1eb215:	jno    0x1eb1f2
0x1eccc6:	je     0x1eccc8
0x1eccc5:	fs je  0x1eccc8
0x1eccc4:	jae    0x1ecd2a; 	je     0x1eccc8
0x1edaea:	je     0x1edaec
0x1edae9:	fs je  0x1edaec
0x1edae8:	jae    0x1edb4e; 	je     0x1edaec
